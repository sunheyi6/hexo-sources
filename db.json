{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/background.jpg","path":"images/background.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_data/footer.njk","hash":"c7177b22ad37f893c3ccd7832593acb01bb84067","modified":1740836077337},{"_id":"source/_data/sidebar.njk","hash":"7f0b69f760b8211a283edb1b465944832c49eb00","modified":1740888978579},{"_id":"source/_data/languages.yml","hash":"bbd7672d06d7512ab77c108cddb7bfaac927b0ca","modified":1740888057955},{"_id":"source/_data/styles.styl","hash":"2a8b2ed99a0a736da3ef0bdb5a5ac7a62b379841","modified":1740919767323},{"_id":"source/_data/variables.styl","hash":"1213370c0a3d726fb24106bdaf14e0dcf3c471b3","modified":1740919273091},{"_id":"source/_posts/141天恋爱总结.md","hash":"10cbce7cb626eac5b8ced2c03c543da114050648","modified":1740892106117},{"_id":"source/_posts/2020年度总结.md","hash":"fe74cbcada91aa52d3ceaab42cac1b4a69069f95","modified":1740886654356},{"_id":"source/_posts/2021年度总结.md","hash":"930c2971837d5649157c487e8e74f0d34a78f230","modified":1740886654357},{"_id":"source/categories/index.md","hash":"3275aa33f0a3ce4166179863835fadd67402aa5c","modified":1740898275719},{"_id":"source/_posts/2022年度总结.md","hash":"4d345cf847e9d6edd2bc6be7a46aba396bccc812","modified":1740886654358},{"_id":"source/_posts/2024年度总结.md","hash":"d6fec081bb18f54253fce8711be7367a9e30ce3e","modified":1740892865360},{"_id":"source/_posts/2023年度总结.md","hash":"bf972c1e0ca8612bc10010c624031cd9e6d7291a","modified":1740886654359},{"_id":"source/_posts/ConcurrentHashMap详解.md","hash":"4e2509d687789355184d3dbe839f6fbc8dc3efb5","modified":1740886654361},{"_id":"source/_posts/CountDownLatch源码解析.md","hash":"22c3c1c726b1c7ab34d668025b36fb6798acdeab","modified":1740886654362},{"_id":"source/_posts/JVM-1.md","hash":"1924fcf578fc05fc67182ca01a8e848a7ffa416b","modified":1740886654363},{"_id":"source/_posts/JVM-2.md","hash":"1dac3fa3b9f25c328dc2df39bdb85427373dae7e","modified":1740886654364},{"_id":"source/_posts/OCR对比.md","hash":"2dff3c2d4c6cda590913d92032452acb7bdc4740","modified":1740886654366},{"_id":"source/_posts/JVM常用参数.md","hash":"ada4a57be34751b0fc914474226b95719bef1b94","modified":1740886654365},{"_id":"source/_posts/RabbitMQ.md","hash":"9741346a830515f324c149fd725fe61b948e61d9","modified":1740886654367},{"_id":"source/_posts/ReentrantLock-lock（公平锁）最多要尝试加锁几次才会挂起？.md","hash":"976e6c6374cec756e4318f5699f344d0ba3a62c8","modified":1740886654368},{"_id":"source/_posts/Rocketmq中的NameServer源码分析.md","hash":"5f3223f6d26aba3042199bd8dff6b33d47c35a9e","modified":1740886654368},{"_id":"source/_posts/SpringBoot自动装配.md","hash":"ca182650afb7a3f13f36ff467c449e1f33ddf71a","modified":1740886654369},{"_id":"source/_posts/SpringCloud1.md","hash":"5559d5d531ec5175b265155a6c856c79870c7d90","modified":1740886654370},{"_id":"source/_posts/Spring之IOC.md","hash":"0125d40c3ea6b10f3134dbd4d1f16c3d0b96ebc4","modified":1740886654371},{"_id":"source/_posts/Spring循环依赖.md","hash":"61d8e90f02a7009b22ba0afaa19c79a0fe5a5eb1","modified":1740886654372},{"_id":"source/_posts/Synchronized.md","hash":"521d13973696aebf84925a679b2c49a7fb4a7fb2","modified":1740886654373},{"_id":"source/_posts/Spring注解.md","hash":"469948000a21a6319d15dde03c5638f99f350778","modified":1740886654372},{"_id":"source/_posts/ThreadLocal.md","hash":"7f26d5fd324c4a23f054c31bd0e3ce17eb2a3a11","modified":1740886654374},{"_id":"source/_posts/ThreadPoolExecutor.md","hash":"903e03971d7625b22532596c226172e421da807d","modified":1740886654375},{"_id":"source/_posts/Virtualbox虚拟机网络模型.md","hash":"1d28a1a04fcdff02f960a2caa3b58d35f3882767","modified":1740886654375},{"_id":"source/_posts/astro添加谷歌分析.md","hash":"b022a0f0a3ed4ddb85516b239ddd237736eae2c9","modified":1740886654376},{"_id":"source/_posts/bytemd使用（vue版本）.md","hash":"7a75d229e90c007fd4e89c9f69992d90bf1fda0d","modified":1740886654377},{"_id":"source/_posts/b树和b-树的区别.md","hash":"8708881131788af3c589ce640c001b66efd77b66","modified":1740886654379},{"_id":"source/_posts/github-引用其他仓库的issue.md","hash":"e041d3e680288060670fb116b0b4beb22761a3fc","modified":1740886654379},{"_id":"source/_posts/git.md","hash":"6231caf8534e26f427be105911fa10cf6916ef04","modified":1740886654377},{"_id":"source/_posts/halo主题wsl2docker模式开发指南.md","hash":"b9410925d63ab17f757414769d4e921f2d3b7f22","modified":1740886654381},{"_id":"source/_posts/hashCode和equals关系.md","hash":"490cafee97f22320289cf9c49be1e603eb3b578d","modified":1740886654381},{"_id":"source/_posts/hashmap.md","hash":"47c70f19bc8c877b110b958c51e58268742ddb0c","modified":1740886654382},{"_id":"source/_posts/hexo-next-主题优化‘.md","hash":"a2b6797c5288bf2e91972729cfa9a152eeb328cf","modified":1740886654383},{"_id":"source/_posts/git常用命令.md","hash":"33b36d59f9b55567eff486ce15b7ac3fd71d6474","modified":1740886654380},{"_id":"source/_posts/hexo-next-圆角边框.md","hash":"0065c772b3bb86aa418237a2a561e6e62c5194a9","modified":1740886654384},{"_id":"source/_posts/hexo自动获取图片主色.md","hash":"13e212fc7aff41f08e7efa59b9c31646f1d547f8","modified":1740886654384},{"_id":"source/_posts/hexo部署到github两种方式对比.md","hash":"f1bdc74fc58cdeeb11526e5b9c69cba91a124478","modified":1740886654386},{"_id":"source/_posts/icarus-Theme-use.md","hash":"1b5e42847ddba8fb4a83bfc1eec292c96dcda364","modified":1740886654385},{"_id":"source/_posts/java-String.md","hash":"5ebaadf49c599771c4378a239d18b2e39802b2a6","modified":1740886654387},{"_id":"source/_posts/idea使用技巧.md","hash":"0ec56a0f89ba700d2b172fc947ff1679ce9a4240","modified":1740886654387},{"_id":"source/_posts/java的构造函数.md","hash":"fe2331931a0c2f0ce9c79cc87829696b10e019a2","modified":1740886654388},{"_id":"source/_posts/java继承.md","hash":"c0a5ce82b77b9f991c553b3732f6d009c185f457","modified":1740886654389},{"_id":"source/_posts/kafka-1.md","hash":"1e34a32d2d5c7d551c647ad2d000178c85905665","modified":1740886654391},{"_id":"source/_posts/java面试题.md","hash":"dd624e5b1341a49f5a0f159ae547a6a5868e19f6","modified":1740886654390},{"_id":"source/_posts/mysql事务.md","hash":"7a021a8a9d36d374493a92a50ec88a69d7a75b6e","modified":1740886654392},{"_id":"source/_posts/linux结构.md","hash":"67a34e51e88493871e728202c41c8edaae395c02","modified":1740886654391},{"_id":"source/_posts/mysql命令.md","hash":"c2bd11fa81eb9c60d8fcf3eba4552bb1ae3bb613","modified":1740886654393},{"_id":"source/_posts/mysql常见生产问题.md","hash":"7e6536e3657c7e144c9a403ee09adbbffd05f324","modified":1740886654394},{"_id":"source/_posts/mysql执行流程.md","hash":"b90964c7fbbe9b5a8989b6e95bc549589fe7d767","modified":1740886654394},{"_id":"source/_posts/mysql执行计划.md","hash":"fe878c1de5e085b0190784ac45ed123fca358d8a","modified":1740886654395},{"_id":"source/_posts/mysql索引.md","hash":"b60bebfc6c173966101bf31c9013e4b128584d68","modified":1740886654396},{"_id":"source/_posts/mysql集群.md","hash":"b11e4bfd689106d9cd90d150fea394c9e51eef8c","modified":1740886654397},{"_id":"source/_posts/mysql锁.md","hash":"945114476dc283d8dfdc4f20e3a409bed1a41659","modified":1740886654397},{"_id":"source/_posts/redis之String.md","hash":"22dc68e57cc0b326240e666d171e6b27359b7806","modified":1740886654400},{"_id":"source/_posts/oracle表空间.md","hash":"ecf5bb6e75fd6337efec250fc767bf7ec3d4f3b8","modified":1740886654398},{"_id":"source/_posts/redis基础数据类型.md","hash":"4608e98b5e42b4021b82c4ca8b08e7b163bc3f7e","modified":1740886654401},{"_id":"source/_posts/redis命令.md","hash":"c007d2e4d13a1da095a3d832cb0c5a9c49d03120","modified":1740886654400},{"_id":"source/_posts/redis持久化.md","hash":"2f2ad42102387ef466ba6bbc642306ebcfc4abaa","modified":1740886654402},{"_id":"source/_posts/ribbon原理.md","hash":"b4e7af45a303db1519b125644f1146ec2eba902d","modified":1740886654403},{"_id":"source/_posts/redis集群配置.md","hash":"72b0fae03b255c7d34f5562654345d6fb5d62c65","modified":1740886654402},{"_id":"source/_posts/robots-txt-使用.md","hash":"8578691fd62f4cd2a4f046dd527fe8ec40536dc2","modified":1740886654404},{"_id":"source/_posts/redis.md","hash":"e31f175694a7f44f81857840a3c7fbd6d6c4dde5","modified":1740886654399},{"_id":"source/_posts/rocketmq.md","hash":"ba8ff36ddd1cdaad0cfad36cd571f5abcce8375d","modified":1740886654405},{"_id":"source/_posts/spring之AOP.md","hash":"4280eb3ba81c6ecd5de03bff3eab0475532a954e","modified":1740886654406},{"_id":"source/_posts/spring事务.md","hash":"0c748fdb16118adc853a595dd4c0ddbd55701e89","modified":1740886654406},{"_id":"source/_posts/spring源码的gradle配置.md","hash":"a3969335af159e26dbf22eefb5be86558bffecff","modified":1740886654407},{"_id":"source/_posts/sql语句.md","hash":"9b92e46dedc694063e7187e6b579c564b4974458","modified":1740886654408},{"_id":"source/_posts/vercel项目如何跨域.md","hash":"e1cd3380f0d2ae0aa7bac94351a5bca26faebe05","modified":1740886654409},{"_id":"source/_posts/vagrant使用.md","hash":"49d0b3e8894e9f9888905499537810132c2eb832","modified":1740886654408},{"_id":"source/_posts/wsl2安装centos.md","hash":"031a31a14fa472aa617f6744fb6b6b98594015c5","modified":1740886654411},{"_id":"source/_posts/volatile.md","hash":"efdde766af1c3ae11534c6c20f7610dfe34b90ed","modified":1740886654410},{"_id":"source/_posts/“session，cookie和token”.md","hash":"09cc84eed06dcdc154397e981bc7e4cb39b23689","modified":1740886654411},{"_id":"source/_posts/一致性hash.md","hash":"de32b82dea27e5b9117cf68818ec514fbd8d9e8f","modified":1740886654413},{"_id":"source/_posts/不是吧，不是吧，现在的女生都这么恋爱脑啊！！！.md","hash":"58fe43c20436c29d3f3b5cafd2839bf410589da8","modified":1740886654414},{"_id":"source/_posts/为什么我要一个自己的博客？.md","hash":"decf495341d06bd93e7b56760965ae1fca8a1570","modified":1740886654415},{"_id":"source/_posts/一个有序且元素重复的数组来进行去重排序.md","hash":"777931d9d7b2a079824dcdad0ccc01bd4a7495f6","modified":1740886654412},{"_id":"source/_posts/互联网公司开发流程.md","hash":"c323408c545310ba03b6feb29bb902e90e192c27","modified":1740886654415},{"_id":"source/_posts/从源码层面理解AQS.md","hash":"1457e2fce67ef31e59efa76238462af13c764969","modified":1740886654417},{"_id":"source/_posts/几种通信方式的区别和联系.md","hash":"818959645cae8120a7b091c925de2c198fd1cbed","modified":1740886654416},{"_id":"source/_posts/分布式锁.md","hash":"05ad7402e9c31790fff56761e4f65f03724967f9","modified":1740886654417},{"_id":"source/_posts/到底要不要买房.md","hash":"7d629612889afd42d6998a19c267b8c54846a824","modified":1740886654418},{"_id":"source/_posts/域名供应商查找.md","hash":"e922b91cd2a2ec013290ebc827197af8b2a23bdf","modified":1740886654420},{"_id":"source/_posts/动态规划.md","hash":"df880dcf975f27522c58c69805f05aeb2fa03649","modified":1740886654419},{"_id":"source/_posts/单例模式.md","hash":"0c7910f961ac729a38fb7e0eae8b0188fb98a936","modified":1740886654420},{"_id":"source/_posts/基金投资.md","hash":"3b00f626a82a148cbd90905fcc4e029c5b1c5c23","modified":1740886654422},{"_id":"source/_posts/实现一个简单的计算器.md","hash":"58cfcf38c3f0a5493b98ee03ed1fb3a6c8050016","modified":1740886654423},{"_id":"source/_posts/开闭原则.md","hash":"8c7f31ec7e34fe96b26f950a7dd101dfe23ae8ec","modified":1740886654424},{"_id":"source/_posts/情绪自由.md","hash":"a74e1ff4fa55c1eb44a00ceb0c4ee9a22d0d98f7","modified":1740886654426},{"_id":"source/_posts/对于学历造假问题的思考.md","hash":"5c88b1a5448ae3626dbb7fc34204d6402f1975fb","modified":1740886654423},{"_id":"source/_posts/彻底理解IOC.md","hash":"4668e3ef2ade99b7de975e3b9bee608a5aaa4664","modified":1740886654425},{"_id":"source/_posts/我的人生目标.md","hash":"1a2fa795c6cce7b0b67a1a342fdb62d7768032a7","modified":1740886654426},{"_id":"source/_posts/我的初恋.md","hash":"5d40934f309313d8c185652db88f2aacf101eb79","modified":1740886654427},{"_id":"source/_posts/我认识的自动驾驶.md","hash":"a788bb1e1f385c77635b4145c71fe3f69ca7c4b1","modified":1740886654438},{"_id":"source/_posts/我的生日.md","hash":"faa7b7d3ef1b6576e064a6b69d1f2f21fe1bbe98","modified":1740886654437},{"_id":"source/_posts/排序算法.md","hash":"ceb7080053ba3aad9ea6b91f761a39a1e3a3dd87","modified":1740886654438},{"_id":"source/_posts/树.md","hash":"8253d371c6c5ec0536815dc734b297cca7197e65","modified":1740886654441},{"_id":"source/_posts/添加waline评论系统.md","hash":"44c3e9f79faf8c97f3d75c1aaaf15e53afb08a15","modified":1740886654440},{"_id":"source/_posts/相亲回忆录.md","hash":"39bee5fbf5db2591d8921347a780d20bc49ea054","modified":1740886654441},{"_id":"source/_posts/接口隔离原则.md","hash":"8588dce52b8f9be77227d76fd32fe5d33c382b2e","modified":1740886654439},{"_id":"source/_posts/红包算法.md","hash":"250642caf2fe4669ffb63f2aee4badab1fc6ab14","modified":1740886654443},{"_id":"source/_posts/相亲忠告.md","hash":"a32e9399863bf15f81f85823c806ebce528c8f7d","modified":1740886654442},{"_id":"source/_posts/红黑树.md","hash":"3613360e3a66bffb937eb1eb6f419ea9df5f76eb","modified":1740886654444},{"_id":"source/_posts/缓存.md","hash":"0ff9c88489e8bf6bf056c06dfdc7e3bb46b8af3c","modified":1740886654444},{"_id":"source/_posts/自动添加更新时间.md","hash":"d7e205a9f4369c173a4871e91d8275cc93b599d0","modified":1740886654446},{"_id":"source/_posts/重新回到hexo.md","hash":"a19564028472431ea62209002634d933f007bdbb","modified":1740891370147},{"_id":"source/_posts/解决hexo更新时间问题.md","hash":"0134ca41467c4aef5aff38d42abcf1ef600b03a8","modified":1740886654446},{"_id":"source/_posts/迪米特法则.md","hash":"db079609f293112be828cf345f8c69e77998cb44","modified":1740886654447},{"_id":"source/_posts/陈皓，一路走好！！！.md","hash":"b705d86377d4f4ea2715e7af3fa10465521ff4e3","modified":1740886654448},{"_id":"source/about/index.md","hash":"d62f23e9994c1dea883071f6e8f443410a8a2b10","modified":1740904543079},{"_id":"source/tags/index.md","hash":"17cf4c1e7fd75d5e0bef23339b8d1c706e9f4708","modified":1740898263036},{"_id":"source/_posts/零拷贝.md","hash":"7af0083767a6f8dd67d48e4999f547ff84a6beb3","modified":1740886654449},{"_id":"source/images/avatar.jpg","hash":"41f987c93fcc85de2cd7f68d0518c8eeec1cf8b6","modified":1676903360526},{"_id":"source/images/background.jpg","hash":"8c649879b818c1cb7545eb484c56f3da35cb03ef","modified":1740919611061},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1740912221438},{"_id":"themes/next/LICENSE.md","hash":"8cfb03967dd4cbaf3b825271ffce0039aa3fc22a","modified":1740912221445},{"_id":"themes/next/.gitignore","hash":"087b7677078303acb2acb47432165950e4d29b43","modified":1740912221445},{"_id":"themes/next/.gitattributes","hash":"aeeca2f1e987d83232d7870d1435a4e3ed66b648","modified":1740912221439},{"_id":"themes/next/README.md","hash":"eca8f5525e08a04753989f1ad0fac5572db58f43","modified":1740912221446},{"_id":"themes/next/_config.yml","hash":"7e783048e34e8b9f4f19003c63033de533824712","modified":1740919433185},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1740912221446},{"_id":"themes/next/_vendors.yml","hash":"74398e31e82946d28dc1c8293cd2c2ae702784ee","modified":1740912221446},{"_id":"themes/next/.stylelintrc","hash":"20f46858e47aba6b3fc47e9b43e9f7531fa66e33","modified":1740912221445},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"2fdca1040427cabfe27cae6754ec5e027ec7092e","modified":1740912221440},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"82a3d202da8fe6ce765715bd5b7571676e90364d","modified":1740912221440},{"_id":"themes/next/eslint.config.js","hash":"e35570c8e7ef9ea4adad7bafb3558dfd8e928e48","modified":1740912221449},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"610675119f83cdbf3f19d7996b17e33062e3b165","modified":1740912221441},{"_id":"themes/next/renovate.json","hash":"767b077c7b615e20af3cf865813cd64674a9bea6","modified":1740912221476},{"_id":"themes/next/package.json","hash":"248b783f40673156b2a53890c30d271c474d358e","modified":1740912221476},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1740912221442},{"_id":"themes/next/.github/config.yml","hash":"0956bf71b6f36632b63b14d26580458041a5abd2","modified":1740912221442},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"d403cbbbd0c554563e9e678ff82120ef9451d98a","modified":1740912221442},{"_id":"themes/next/.githooks/install.js","hash":"72757c6827909a5f2c217ddbbdf6034ca6fab74a","modified":1740912221439},{"_id":"themes/next/.github/release.yml","hash":"83b4dae3f8d76619e208d2110a247b3ccadd64d8","modified":1740912221443},{"_id":"themes/next/.githooks/pre-commit","hash":"b69b9d0b51e27d5d4c87c3242f5067c2cda26e44","modified":1740912221439},{"_id":"themes/next/layout/_layout.njk","hash":"0f2760cd7550ca30ffcc28e2dbd7f031a237b5a7","modified":1740912221457},{"_id":"themes/next/.github/labeler.yml","hash":"35da1a37e9a6bdee1eeae30a8816cd75c9a04b3b","modified":1740912221443},{"_id":"themes/next/layout/archive.njk","hash":"aa491dba8f746e626c273a920effedf7d0b32170","modified":1740912221475},{"_id":"themes/next/docs/AUTHORS.md","hash":"579014d47f45b27fd1618b9709f0efe9585c7449","modified":1740912221447},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1740912221447},{"_id":"themes/next/docs/LICENSE.txt","hash":"d1cd5a8e83d3bbdb50f902d2b487813da95ddfd3","modified":1740912221447},{"_id":"themes/next/layout/category.njk","hash":"82f541452cae76a94ee15cb8d8a888f44260a0fd","modified":1740912221475},{"_id":"themes/next/languages/README.md","hash":"b1c96465b3bc139bf5ba6200974b66581d8ff85a","modified":1740912221450},{"_id":"themes/next/layout/page.njk","hash":"d24238eea91a347050a663c7a7de8cebaab4c595","modified":1740912221476},{"_id":"themes/next/layout/index.njk","hash":"fa52c3049871e879980cb6abccdea3792ca4ce70","modified":1740912221475},{"_id":"themes/next/languages/ar.yml","hash":"c77fc13e0431e71eeb0f767a0a436284fc81df90","modified":1740912221450},{"_id":"themes/next/layout/post.njk","hash":"6767de9702a07a2a4e16a8a6bc9c5919536c1e3f","modified":1740912221476},{"_id":"themes/next/languages/bn.yml","hash":"30ffd43588ddf2cd39432d964087242e1c3e5407","modified":1740912221450},{"_id":"themes/next/layout/tag.njk","hash":"b6c017d30d08ddd30d66e9c6f3a71aa65d214eac","modified":1740912221476},{"_id":"themes/next/languages/de.yml","hash":"5101612f7cac38884206d28319532f1aab32fbe6","modified":1740912221450},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1740912221451},{"_id":"themes/next/languages/en.yml","hash":"5ca2c0b3c95dd87485f2d2b3477f88810ad1a63b","modified":1740912221451},{"_id":"themes/next/languages/fr.yml","hash":"3a7469446f77e5d1a12eee828ebc49ecb43b6c35","modified":1740912221451},{"_id":"themes/next/languages/es.yml","hash":"31c2a47d14cd5b804cae0c0b44d43bece069d3aa","modified":1740912221451},{"_id":"themes/next/languages/eo.yml","hash":"7bd0124c2d1dcdbfde350fce335e130556ebcee8","modified":1740912221451},{"_id":"themes/next/languages/fa.yml","hash":"cc6ef3144b954daa29ce7d42f08191eafe052fab","modified":1740912221451},{"_id":"themes/next/languages/id.yml","hash":"bd2c30def05a37c66653900ca07952d52a142961","modified":1740912221451},{"_id":"themes/next/languages/pt-BR.yml","hash":"ff9aa6a6549d07b7dc667094f34a06945e2c21b4","modified":1740912221453},{"_id":"themes/next/languages/it.yml","hash":"4969c4f17d88003135218de72ddf0bf8d894dc07","modified":1740912221451},{"_id":"themes/next/languages/ja.yml","hash":"e660ec12b9eade103492aba7aa9b23ef06d353a9","modified":1740912221453},{"_id":"themes/next/languages/ko.yml","hash":"04927e331652ee13f9c8a110fe12d7f936a6b0e6","modified":1740912221453},{"_id":"themes/next/languages/nl.yml","hash":"4575f93c4ee4383bdfaca01ad6ffff5664cbbbae","modified":1740912221453},{"_id":"themes/next/languages/pt.yml","hash":"2c86b3235de9539df2119e52e913d847ecf782c0","modified":1740912221454},{"_id":"themes/next/languages/ru.yml","hash":"d726265bc5cf8bd4fb64f85b2d07b3326439bb00","modified":1740912221454},{"_id":"themes/next/languages/th.yml","hash":"dc434da945d52dc7a8d26acc80b23e6922712f89","modified":1740912221454},{"_id":"themes/next/languages/si.yml","hash":"07f98d6ca99bceef35254c60fc0e4401ff608557","modified":1740912221454},{"_id":"themes/next/languages/uk.yml","hash":"10a2f2e7183410d1d10fa937e3e0198b46bf4930","modified":1740912221455},{"_id":"themes/next/languages/tk.yml","hash":"7b9115e0520dc81a95a7c8e4f56a01fc84f74017","modified":1740912221455},{"_id":"themes/next/languages/tr.yml","hash":"822ec400a0a2bb2245abf31e9ed4f3af77b2814e","modified":1740912221455},{"_id":"themes/next/test/index.js","hash":"983a505399796b9d9e174ba46d89abbdde38f8ee","modified":1740912221526},{"_id":"themes/next/languages/zh-HK.yml","hash":"293009343786f9b460412b7032e694755e5edc8d","modified":1740912221456},{"_id":"themes/next/languages/vi.yml","hash":"8344cb90ee92a21a398faff3317c025a43446db5","modified":1740912221455},{"_id":"themes/next/languages/zh-CN.yml","hash":"c06c95121b3e5bd5abe01848073fbe7f9d6dcda9","modified":1740912221456},{"_id":"themes/next/docs/ru/README.md","hash":"831dde6526f96e27481b24c981561cedb1d4297b","modified":1740912221448},{"_id":"themes/next/languages/zh-TW.yml","hash":"664ebfa09503d29d6f33a5ffadaa16989785e0fe","modified":1740912221456},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"e8ca602587b3abe08b60fc1bdc1c2d62aeeb85bb","modified":1740912221444},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.yml","hash":"3f19cbf0c2b2fee6bf3788870b842c9ccc1425ca","modified":1740912221440},{"_id":"themes/next/.github/workflows/codeql.yml","hash":"82a2df4c676ae45b2768c71c724b188475c88ca5","modified":1740912221443},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"dc4809131c54a1d9f8e7392aeaf53b13c6befd90","modified":1740912221444},{"_id":"themes/next/.github/workflows/linter.yml","hash":"294660e1b6275a0fe4db2a44e5b6b679467d29fc","modified":1740912221444},{"_id":"themes/next/.github/workflows/lock.yml","hash":"80dc185dfaeb2927db72a44ff2382e05f47a2df5","modified":1740912221444},{"_id":"themes/next/.github/workflows/tester.yml","hash":"dba3f1d4bc4d2fab51d73d134ed5c7448a0976dc","modified":1740912221445},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"daeedc5da2ee74ac31cf71846b766ca6499e9fc6","modified":1740912221441},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"a60b386c7889f25f811182cae76e6474cb3254d1","modified":1740912221457},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.yml","hash":"10eca518b91a19984f6a5a912d41222042f61d63","modified":1740912221441},{"_id":"themes/next/layout/_macro/post.njk","hash":"c39170b22c4c9cb11d935c301a90ad8c18f3e0e8","modified":1740912221457},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.yml","hash":"fbc3062cd4591c8329fab9db72803746f0d11920","modified":1740912221441},{"_id":"themes/next/layout/_partials/comments.njk","hash":"60f4620dd479da6d86d1d493440e9e2a28b6e132","modified":1740912221458},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"b9fc0a6b02f0380de939d1ea2a7c7d2e6be9f462","modified":1740912221458},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"e077bebf4fb89b159b840b30f0230b95ff7db8a5","modified":1740912221448},{"_id":"themes/next/docs/zh-CN/README.md","hash":"767a98e4cb22d171cc34047e6746529038dd31bb","modified":1740912221449},{"_id":"themes/next/layout/_partials/languages.njk","hash":"537026fc120adeef9148c98ebf074207e3810538","modified":1740912221460},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"c55167bc0dbe7e104d4f4d782e98fcabc7e07a35","modified":1740912221462},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a09ceb82b45dd8b7da76c227f3d0bb7eebe7d5d1","modified":1740912221449},{"_id":"themes/next/layout/_partials/footer.njk","hash":"cc51596980560ab60626da76260b7f5e83df8a33","modified":1740912221458},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"bb5d32170b469dc018ceaa10a5b7cb892c9b85a4","modified":1740912221464},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"0a1470440f11362df2b1cd6b6228e273d9f999d6","modified":1740912221465},{"_id":"themes/next/layout/_third-party/addtoany.njk","hash":"9ef81adb0c35ebdb4499602155e87611aee0762a","modified":1740912221465},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"53ad3c31762b74e5d29787b37d5e494cc4fded9b","modified":1740912221471},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"13b2a77b4858a127f458ea092b6f713b052befac","modified":1740912221472},{"_id":"themes/next/scripts/events/index.js","hash":"8ae618d4436dab49928c2bebc0837e5310dbe7de","modified":1740912221477},{"_id":"themes/next/layout/_scripts/index.njk","hash":"b0fffb9deccadd9ae7cb4f2d8d2b5fda16904ec7","modified":1740912221465},{"_id":"themes/next/layout/_third-party/index.njk","hash":"9bab629e2971b029545511b48f397445858ac7f0","modified":1740912221471},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"73bc15a9c3c5c239ab90efa19a1e721f41f3cb93","modified":1740912221472},{"_id":"themes/next/scripts/filters/minify.js","hash":"0f6b9b0eb41f6319e75ff86f9254cf1a9d3333b8","modified":1740912221481},{"_id":"themes/next/scripts/filters/locals.js","hash":"87f3bff03fa9fd96cf0787a6442464a7ff57f76b","modified":1740912221481},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"0c9a1fe9906672724dbf274154a37bac1915ca2c","modified":1740912221481},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bf50f31a3adecef3f42a2df7cda70a369d102e09","modified":1740912221482},{"_id":"themes/next/scripts/filters/post.js","hash":"e6cf4c94fc2291215a3345134ddbbc74d5091b00","modified":1740912221481},{"_id":"themes/next/scripts/helpers/navigation.js","hash":"82f6e81bacf23d10cac71b09cff8708e47891ef3","modified":1740912221482},{"_id":"themes/next/scripts/helpers/font.js","hash":"019b6ddb0273f7a7e792c4465c006e1071c89219","modified":1740912221482},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"7d0b7ea07f35739d9f05fc133282fa188a2f2991","modified":1740912221483},{"_id":"themes/next/scripts/helpers/next-paginator.js","hash":"2e8dcc12a52517bb4e00ea611720bcd298624112","modified":1740912221483},{"_id":"themes/next/scripts/tags/button.js","hash":"86c71c73a63744efbbbb367612871fede0d69529","modified":1740912221484},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"b4d12e6fe29089be0f43bafc9eea736602cd16bf","modified":1740912221484},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"8e912c715702addaf0cefe63e580e45b97ae8c3f","modified":1740912221484},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"12814eb1845830204e3a398eb93a2c15e0ff8d94","modified":1740912221483},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"ceff5e76564a5d6ed3e0222bccf581e106d80f3c","modified":1740912221483},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"652140814527db74bcde9110142824dc727be889","modified":1740912221484},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"3f358bb78c5c6fdf45de287f3ead553e3a6a93c2","modified":1740912221485},{"_id":"themes/next/scripts/tags/label.js","hash":"c18b0e619a779ed40be7f014db92af18f45fbd5c","modified":1740912221485},{"_id":"themes/next/scripts/tags/index.js","hash":"1a680bb01e14152905efe3ef624621dd74cf27c3","modified":1740912221485},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"b139224ff2cc668f4d95bde184934833e05b29df","modified":1740912221485},{"_id":"themes/next/scripts/tags/pdf.js","hash":"317ba4611020cc840854386dde098dbbe452777e","modified":1740912221486},{"_id":"themes/next/scripts/tags/note.js","hash":"a12fd53e421400836a3722ae69130969558d6ac0","modified":1740912221485},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e0ed5fe1bc9d2957952a1aacdf3252d6ef3f9743","modified":1740912221486},{"_id":"themes/next/scripts/tags/video.js","hash":"f6ad3f52779f0636251238d3cbdc5b6f91cc5aba","modified":1740912221486},{"_id":"themes/next/scripts/tags/wavedrom.js","hash":"188c1dd5d7dbc566cac00946da86aa76fff1c682","modified":1740912221486},{"_id":"themes/next/test/helpers/font.js","hash":"65ac1da7668640813a7ec7ef414056aa764af576","modified":1740912221525},{"_id":"themes/next/test/helpers/index.js","hash":"2fb58dca3df2fe53116ee2b1232fa26ebe7b2ce5","modified":1740912221525},{"_id":"themes/next/source/css/_colors.styl","hash":"9354013ea89c8e3874a44929c394db39ae04f36a","modified":1740912221487},{"_id":"themes/next/test/helpers/next-url.js","hash":"557d2c819184620e5ca65cb0a140a4cf7f7aeb9e","modified":1740912221526},{"_id":"themes/next/source/css/_mixins.styl","hash":"bb868086bf28029d2fb9f6d4abe620c382d66568","modified":1740912221505},{"_id":"themes/next/test/validate/index.js","hash":"560862194991c5963da5a411629d8e6c71d20ee2","modified":1740912221529},{"_id":"themes/next/test/tags/button.js","hash":"a50ca44eaec3d91c2958e3157d624cd3e68828c7","modified":1740912221526},{"_id":"themes/next/source/css/noscript.styl","hash":"64b378a4d2f0b36bf666fba13b57c59da3a8ac83","modified":1740912221513},{"_id":"themes/next/source/css/main.styl","hash":"c326550ce8b4deaa9b647bcfe3cdc04c100644e6","modified":1740912221513},{"_id":"themes/next/test/tags/caniuse.js","hash":"2852be850d9103c25114253a45e6c62e32517de4","modified":1740912221527},{"_id":"themes/next/test/tags/center-quote.js","hash":"2ac4b5a358681691a17e736de06fce0b640a7023","modified":1740912221527},{"_id":"themes/next/test/tags/index.js","hash":"5cad001936a694bf32d59751cc2b68a66199f976","modified":1740912221527},{"_id":"themes/next/test/tags/group-pictures.js","hash":"8f66d3c6f03fb11d85aa2ab05c9b3c9aa2b4e994","modified":1740912221527},{"_id":"themes/next/test/tags/label.js","hash":"6cad7d84c42511459a89cda3971e8ea5cdee0125","modified":1740912221528},{"_id":"themes/next/test/tags/link-grid.js","hash":"41730266306c02362258384cd73659223928361f","modified":1740912221528},{"_id":"themes/next/test/tags/mermaid.js","hash":"4d56e937497f6c1095a5e264a64243ef203f2b5a","modified":1740912221528},{"_id":"themes/next/test/tags/note.js","hash":"161a81ce749e239d2403681372d48ecc1b51d7b9","modified":1740912221528},{"_id":"themes/next/test/tags/tabs.js","hash":"b19d2592347eae5d6a7a97ca7e8cec03e8f25b51","modified":1740912221529},{"_id":"themes/next/test/tags/pdf.js","hash":"2d114596a8a180b2f3cd2a9c6528a328961f12d4","modified":1740912221528},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1740912221513},{"_id":"themes/next/test/tags/video.js","hash":"88db9a3a26cd35525c43c0339fcd1c5965ec9518","modified":1740912221529},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1740912221513},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1740912221514},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"5a81f1c5d66561b3bcb05dae48148088a3fb5c79","modified":1740912221514},{"_id":"themes/next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1740912221514},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1740912221514},{"_id":"themes/next/source/js/comments-buttons.js","hash":"81ea6cbcdf0357094753d7523919c1eafa38e79f","modified":1740912221515},{"_id":"themes/next/source/js/bookmark.js","hash":"e2fd71f2876531f4c8bf1f38828aae35dd82cca4","modified":1740912221515},{"_id":"themes/next/source/js/comments.js","hash":"0b4daf0ce610760bd52e95d423f61f3e1c72442a","modified":1740912221515},{"_id":"themes/next/source/js/motion.js","hash":"a2abc7279723aee459b4c7a357fc84d5215affcf","modified":1740912221516},{"_id":"themes/next/source/js/config.js","hash":"211a9ab35205ccfa6b7c74394bade84da0d00af7","modified":1740912221515},{"_id":"themes/next/source/js/next-boot.js","hash":"67256d0b4e4f8277bef8fd5b05d2443d945cb008","modified":1740912221516},{"_id":"themes/next/source/js/pjax.js","hash":"ca513ae9aa3ab3dfe46668f0717d9d37b571c5b7","modified":1740912221516},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"c2ee46d744afa78d95c6bca5dfcbb2fbc38474c2","modified":1740912221459},{"_id":"themes/next/source/js/schedule.js","hash":"4858233224756e3cadfabd8135f7c4b1e3673b44","modified":1740912221516},{"_id":"themes/next/source/js/sidebar.js","hash":"f3052996408a09233ffaf8d631fd930443ccd781","modified":1740912221517},{"_id":"themes/next/source/js/utils.js","hash":"e4d7dafaad7f34287140aee36aef2f02faa249fe","modified":1740912221525},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"e016c3f80db433f17781caf26e44f2089a71550a","modified":1740912221459},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"92553feb26f30f7fc9147bc4ef122908a9da06be","modified":1740912221461},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"7bf2b6ab499775355bbf8f3ae597ff7bc00e89e4","modified":1740912221459},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"1fe44a1e156cd30e3e9fd8313e1011ad30970f83","modified":1740912221461},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"b352346dd2cb42f7eeaec5e39d9a2a353b029775","modified":1740912221461},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"1b2ae17f3c394ce310fe2d9ed5f4d07d8cc74ae7","modified":1740912221460},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"752df7d12360a077c51a25609916a3ecc1763bb3","modified":1740912221462},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"6ec9c97e91c793cc2eb5ac0f7c3c36fdaaf637d1","modified":1740912221462},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"62513f08e9e7f4abeaeedca91fd0af0861a2540f","modified":1740912221460},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"828700af2a2f273d3e3e0554ffc60706d889d539","modified":1740912221460},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"22c922214982c4bb78ea92fa2ff1de93d98216a3","modified":1740912221462},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"20cb9c39bcdcfa3f710df7bc5838d6e62d4dd674","modified":1740912221460},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"ebe45ab38ace03ea74eed3f676ec1cb5805a3c8a","modified":1740912221462},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9a9c4fb7e7c4fe4b7d474bdfdb4ed2b0a5423df2","modified":1740912221463},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"10145ae7ef87b502d20bfa08beb2b899228f1419","modified":1740912221464},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"9a7eda45ad0753d5f624c51a56e00277ba97c93d","modified":1740912221463},{"_id":"themes/next/layout/_partials/post/post-share.njk","hash":"8a6414987474592e82b3e57eeb0bd526ae42d235","modified":1740912221463},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"8d76300e31178e790400a37adfaf9bc0e5f8fae7","modified":1740912221464},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"fd6fde597ea2fb7b80cffd0a3553c8e73acb8ab2","modified":1740912221463},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"3e80332f88b101141be69f2a07f54ed8c053eabb","modified":1740912221466},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"17173c45f0b740669ef45aaae1fe96eeb0a0ff52","modified":1740912221466},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"9ff9ec05c2037beea229a6bb698f9e3546973220","modified":1740912221466},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"52ad137450f7b3d6a330e16b3ed1c6174290f0eb","modified":1740912221466},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"81abcf790cf97395cde9e3cd6d5d1aa5656bd134","modified":1740912221466},{"_id":"themes/next/layout/_third-party/analytics/matomo.njk","hash":"43238bc1bc2e88d707f8097814ef3ff830cbe641","modified":1740912221467},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"5f7967bd946060f4102263a552ddfbae9975e7ea","modified":1740912221468},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"2129a017a1b1ab751aca9c70e76461ad91b2a81e","modified":1740912221467},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"b0828dd1b1fd66ecd612d9e886a08e7579e9a4f7","modified":1740912221469},{"_id":"themes/next/layout/_third-party/analytics/umami.njk","hash":"c8b8c10dcf5c4ffa4a8aec5ba5892842ec204ac0","modified":1740912221467},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"c5086b4c35f730f82c99c4a8317f2f153ebde869","modified":1740912221469},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"6fd4df5c21cfe530dbb0c012bc0b202f2c362b9c","modified":1740912221469},{"_id":"themes/next/layout/_third-party/analytics/plausible.njk","hash":"64ed6fecae79f9f9c61e956d2bd077792473e069","modified":1740912221467},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"09d2c9487d75894d45a823e3237ae9f90fd6ee01","modified":1740912221468},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"38badcc7624a13961381c2465478056b9602aee5","modified":1740912221469},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"b8e0d5de584cece5e05b03db5b86145aa1e422b4","modified":1740912221469},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"3fbc72427c1211e5dcfd269af1a74852a7ba5c1a","modified":1740912221468},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"a7921be7328e1509d33b435175f5333a9aada66f","modified":1740912221470},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"1856c4b035c5b8e64300a11af0461b519dfc4cf4","modified":1740912221471},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"599f3f5e4385501d0010edc02ed9ca547d2467f7","modified":1740912221473},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"210c32b654adae3d8076c4417d370b42af258cea","modified":1740912221473},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"1df65b1390add93b86ae3f9423d96a130b0ece04","modified":1740912221471},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"442df8a04f1967779cdd7599156496bdac8f1f23","modified":1740912221473},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"a62aa1ed4e35b8d0451d83f341bf0a97538bc9a4","modified":1740912221472},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"af5336e8bbdc4638435971da115bb7443d374ade","modified":1740912221473},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"dd8f963acd5a3685be46fd5319c06df0308d99b2","modified":1740912221474},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"866ffa15a3250678eb8a90aa6f609fa965db90fd","modified":1740912221474},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"0386c708975cc5faea4f782611c5d2c6b8ac2850","modified":1740912221474},{"_id":"themes/next/layout/_third-party/tags/wavedrom.njk","hash":"baec18165d767094ecb2dda7141ca3bd8c6f2eb9","modified":1740912221475},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"8703d1855bb8d251c9b7c2940b7e3be525e53000","modified":1740912221474},{"_id":"themes/next/scripts/events/lib/config.js","hash":"7c29184a37222d6499c5220264fda6942afc03a9","modified":1740912221477},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"df360f546d59b1fee8926806268754433dfa5de7","modified":1740912221478},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"1f1ea7b579a49f17574c31d78d663c54896133eb","modified":1740912221478},{"_id":"themes/next/scripts/events/lib/navigation.js","hash":"0a2df7d40d64c61ce7e730bb8269b848b03526d1","modified":1740912221478},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"761760031e49edb77277bd4a8582774959240d6b","modified":1740912221479},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"da22c6008fc8d214ba8561b412233380a06c40f9","modified":1740912221478},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"af3e7066a7a8d87448aadde3bc9c848077aae418","modified":1740912221478},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"550cc7f57bc3ab3d093e34741e7860222851d4d4","modified":1740912221479},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3283bdd6e5ac7d10376df8ddd5faaec5dc1bd667","modified":1740912221479},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"1cb58aa6b88f7461c3c3f9605273686adcc30979","modified":1740912221479},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"96e58efba0dc76af409cc7d2db225f0fe4526ea8","modified":1740912221480},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"4dbe9652ae53a181c86eb7e9005a5255f0540055","modified":1740912221480},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"c22cbccd7d514947e084eeac6a3af1aa41ec857a","modified":1740912221480},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"c4537fa2de33d98baff2c87a73801770414e0b69","modified":1740912221511},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"bb8ebb541c40362c0cbbd8e83d3b777302bb6c40","modified":1740912221480},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"a50718c081685fd35ff8ea9ca13682c284399ed8","modified":1740912221481},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"9cd228d5de7c2e49a231be072c9ef13af2dd95ff","modified":1740912221511},{"_id":"themes/next/source/js/third-party/addtoany.js","hash":"5cff12a5c9fc55a68f0f57a291494cd738301ba4","modified":1740912221517},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"e3022c2ea60409a82a3e2a0d3615e4a25c684551","modified":1740912221521},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"54c52744898eb5d2073b83f98bb1a61759da92dc","modified":1740912221512},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c42a1685b29650e0ab078a496b2bfe0a4483f922","modified":1740912221512},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ebee77b2307bf4b260afb06c060171ef42b7141","modified":1740912221522},{"_id":"themes/next/source/css/_variables/base.styl","hash":"c495dbbdcf39527367fad4c383a503932d4d8fee","modified":1740912221512},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"edb776749000c79fb8ca1696510d6dc0c7955d43","modified":1740912221500},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"5b0197e061f57e00875be3636ba372a67693abe0","modified":1740912221522},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"f882924c7b99afc23106e39164516888b2972c7b","modified":1740912221487},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"f768ecb2fe3e9384777c1c115cd7409e9155edd7","modified":1740912221500},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"49c3063b46d65796003a822deed971abee41675e","modified":1740912221488},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"f3defd56be33dba4866a695396d96c767ce63182","modified":1740912221492},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"cf8446f4378dcab27b55ede1635c608ae6b8a5c8","modified":1740912221500},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1740912221502},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1740912221502},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b9388016f8d9274703e77e306a1feaad1b7b9d6c","modified":1740912221502},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"fd4a2d2303f107a021837aa6e3d977c2f9d14c42","modified":1740912221502},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"b9322d644b2090d793521555646673322f2dd5e8","modified":1740912221505},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"7782dfae7a0f8cd61b936fa8ac980440a7bbd3bb","modified":1740912221496},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"ce25cb35779f29d01f7b7fc51ee09e68987ad318","modified":1740912221505},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"be9d0e9493802c22f16a0645a59d0c2b556c1c3c","modified":1740912221506},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"2db5ada757f7ffb9a36b06400cf30d80ec039b6e","modified":1740912221506},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"883a4f42badb7b206604eb2805ae582c3a511403","modified":1740912221497},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"0bf248d61593fbcdfd83b018b92199f4da3699b1","modified":1740912221506},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"e6e8892fccb02bff163d9b574984e0440a00d756","modified":1740912221507},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"2f19fe2aba8f63fc99641e50bcb96cc9a4feb8a4","modified":1740912221507},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"89bf3f6b82cb0fafbbd483431df8f450857c5a0b","modified":1740912221507},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"68f8d30071516913a7a958e01d010e8a93f7aa24","modified":1740912221507},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"b26770e09de9b51c851bb90fae19b27860e7fc9f","modified":1740912221508},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2fb4b3f88e34a8544436a05634690217f9483419","modified":1740912221508},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"36438f7b47d7ebd250a25f97c743fda484283046","modified":1740912221509},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1740912221508},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1740912221508},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"7125fb0dba920e89c3f7c1c07e2f7cce1fbdb703","modified":1740912221510},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"3ab87229f9a8357446f77f05a0c6854fb5363fd5","modified":1740912221509},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"27a27de3d4e0d33e9c647f7ae78e1dd6d36d2463","modified":1740912221518},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f9579a02599de063ccff336177ba964a2931a6e9","modified":1740912221517},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"7a3b5cd21bc35d92358abb07fc0986722dd10881","modified":1740912221509},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"7905f428b46d100ac5928875cb1e2b99fa86fc0b","modified":1740912221510},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5c3dd08c520a16ee49f85fa12b4935e725ef261","modified":1740912221510},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"72e0766752b78a723fb30e92d533a8b353104e2d","modified":1740912221519},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","hash":"f24604710002234f18a7b5cfe9ccdf3ed6e725a8","modified":1740912221518},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"b4cb06fdf531292e2361398a98d75a4ca2b8473a","modified":1740912221519},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"77c231bcd64f1c09bd9989909e9fee703b65f47f","modified":1740912221519},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"1e8509356fb027d948d118ab220d9631f4d482fa","modified":1740912221520},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"f755e8537ccbbb0bd84c26923f320d4e206e7428","modified":1740912221518},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"07e0038b221b9a4fd8ccac75093de3dee1f8315e","modified":1740912221519},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"5673d28509a8e837a512da490a88b7bf5162fc49","modified":1740912221520},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"ec44d7f1c8b51b0aa3cccba099a78f3575ac828c","modified":1740912221521},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"b9b9fd2f0e098a123b34a4932da912a9485ffe6c","modified":1740912221520},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"68892d74ef5fc308c6e7e6b4f190826d79f3055d","modified":1740912221520},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"5c63ec71458b4fe0cd98fd4a04e11c3746764f11","modified":1740912221521},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"d93556184b2c0aa1dbc4a6fb892d2f77b80d7d9f","modified":1740912221522},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"f2e867ef43817125ef4237a5fa694ccec3ceb058","modified":1740912221523},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"b3092edf5b2edcb201190b8a8d99b81f2cf8125c","modified":1740912221523},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"6ce7a068192a7ca3487eb40645f2fdebc04ce89e","modified":1740912221524},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"e109c2d6828f527f0289d5fa3bb02fce63ee6d93","modified":1740912221524},{"_id":"themes/next/source/js/third-party/tags/wavedrom.js","hash":"9cafc8f751581d496f1f3c056b95f3b8e1ebbf4e","modified":1740912221524},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fde10ce94e9ae21a03b60d41d532835b54abdcb1","modified":1740912221488},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"ce12b5007c9aa997738641c06a1c081c357e27bd","modified":1740912221523},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"7db3233f0b33870943ce1547326a67f9e628b411","modified":1740912221524},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"aa04527f76de7646573ea327d4f6145200d6070d","modified":1740912221490},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"091b8c763e43447d087c122a86538f290f83136a","modified":1740912221489},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"f9fe39bef5fb2565abbffcb26390868c13d18359","modified":1740912221488},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"9fe9eb46d11cc772e37c067fcffe1b8e7ae10c31","modified":1740912221490},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1740912221488},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"c524d5990a8e7ed9caf17978cf372bb0646f7b9f","modified":1740912221490},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"56d719bcdcba3d725141c55bbd4b168f3942f912","modified":1740912221489},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"7245d8364092c2d184e658e801ba94815a2a1f81","modified":1740912221490},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"c34936a17c3d8af6c0988ac6746d7509dc0b50eb","modified":1740912221491},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"4790d37a40b80f7278ec55274f017dad21791038","modified":1740912221491},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"d514d09525256d510c83829aa6895bb40678d576","modified":1740912221491},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"6ad0da4a5585508abbe78342a680607face98e19","modified":1740912221491},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"79e246b65cef7e32bfe4b9d32516bad1f1eabda0","modified":1740912221501},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"98a233884b1953952b8364895617fe53def60038","modified":1740912221501},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"69dff7cf231d01f85671758455726dd666664a73","modified":1740912221491},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"0a698c3adba896a46e26850967cb73295c521940","modified":1740912221492},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"406c03be3cf8a8411227bc1fecf942ca368f7e2a","modified":1740912221493},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"a2ffaa06c963514a79fda52665e707af6e8e2f5e","modified":1740912221493},{"_id":"themes/next/source/css/_common/scaffolding/highlight/fold.styl","hash":"41c0516f76513036e30a70509a6d33e8a79bdba2","modified":1740912221501},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"1e5776ad4c5c8bcf7596ac74dcabc30704b3f5a0","modified":1740912221494},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"6b3680e0dbea8e14c1cec24ef63b7fae5e37f7ef","modified":1740912221503},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"d28856f365a9373c4ae6fe1e5673d63df2dfd65f","modified":1740912221494},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"8525ba52332fc3c276ec03de7bf290e4dec54558","modified":1740912221494},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"8d9218980e185210ce034e9769ab639b9630fd88","modified":1740912221503},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"8a7b70ef14c7110aaceb30ea2f7eb4b202f0f0cd","modified":1740912221493},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"1772ade171aa6bd806909d69003cfc498c3af019","modified":1740912221503},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"531daf2612c6217950677a2d03924459ce57c291","modified":1740912221503},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7efdc07cf0311108c34fb8815eb890954757d351","modified":1740912221503},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"c7754dc6c866928b538f0863a05b96ec44b5e986","modified":1740912221504},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"39066b4e2e914d85736c9c33fa51f21a3f86c0e4","modified":1740912221495},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"77122986509a6b4968bae2729417b7016137534c","modified":1740912221504},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"63910d15fa2b1df112aee0c4629955f157a077a4","modified":1740912221504},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"bcc0d3482f2faa4552d38de51480ea7f92f6c821","modified":1740912221504},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"c8648c8ea3105556be0068d9fb2735261d0d94bc","modified":1740912221495},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"f4de9eb94bebdf7790522e103de51205a64cae9e","modified":1740912221496},{"_id":"themes/next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"2f4c791b5999b2e1a707bd473c1db7c21d206a27","modified":1740912221504},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"038625515ba4760e4dda6792549bddc0db5a3d20","modified":1740912221495},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"05af22f3edc2383a3d97ec4c05e9ac43b014bead","modified":1740912221495},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"d9bc2b520636b9df7f946295cd430593df4118ff","modified":1740912221496},{"_id":"themes/next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b3689beb90cda64cafecaf6b25981fe8a9525992","modified":1740912221497},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"63fb6d36d9ea62c7e39274c666e102b12f64ff77","modified":1740912221498},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"dce8ea62d7d7b08a0444fbb2f617be30bfcfc152","modified":1740912221496},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"1357c6bb54beb9981bf5c93f5b5510d3fdac42b5","modified":1740912221498},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"f5c1a6afcd2d460ccd5987ef1af747fc99d3ea72","modified":1740912221498},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"d8a028f532d562e6a86bb3b9c7b992e4b6dbbb51","modified":1740912221498},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"7a47adf10809dff5cbaa6732cf6aa273e4673fd0","modified":1740912221497},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-copyright.styl","hash":"a6fbede106afe30a9a7918b52ea8233e020b1382","modified":1740912221499},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"8f82d5141a18f6319e0609a3f6e4fcca6d442203","modified":1740912221499},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"cbc6b0938a2e60f35a5df32210904fb16e4938da","modified":1740912221499},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"794eabec62d6070255fa10516487cff70e0030bf","modified":1740912221499},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2de038def2cb91da143b14696366c14a66e0e569","modified":1740912221499},{"_id":"public/categories/index.html","hash":"9ac5e0efa2c8059ea4c7f8237335dfdfb9420677","modified":1740920103070},{"_id":"public/about/index.html","hash":"64e13c06302deb8cb28f77feaa6bec459af2dcd1","modified":1740920103070},{"_id":"public/tags/index.html","hash":"0d3aaffd1f3a4ec429cda20a9c7db178bc654ce7","modified":1740920103070},{"_id":"public/posts/9b4fb7e8/index.html","hash":"d214b8e893b470ea03c9fcddd374a7f1775a191b","modified":1740920103070},{"_id":"public/posts/c2cf88b8/index.html","hash":"d81154943186bea695a5196ac4653b482a7ed947","modified":1740920103070},{"_id":"public/posts/b28c9ebf/index.html","hash":"fa4d941ef1320299b7f8cf8121b72cb360c5aeb1","modified":1740920103070},{"_id":"public/posts/29a8bc63/index.html","hash":"1e22313b88d960d78bacc8a112caa0b95567d15d","modified":1740920103070},{"_id":"public/posts/5ea16806/index.html","hash":"cdfc62d448c502843bcdbdd16aca1189c1564e6a","modified":1740920103070},{"_id":"public/posts/e4a21a0b/index.html","hash":"104462cadf99627b0a159a9e11fad556f991c452","modified":1740920103070},{"_id":"public/posts/67128ec5/index.html","hash":"a14cc27c92715724f73383cdea7e54542d983601","modified":1740920103070},{"_id":"public/posts/72fda5a3/index.html","hash":"8240c0c98306c893955438318112ce9fc823a6b7","modified":1740920103070},{"_id":"public/posts/3c99c880/index.html","hash":"569f73008e1cf8e2b5eca1c87f657ffc904344dd","modified":1740920103070},{"_id":"public/posts/5b9d67ab/index.html","hash":"414747263e4001b5514804391350efe687a8909e","modified":1740920103070},{"_id":"public/posts/536c3de7/index.html","hash":"b0d5260e4d933cb357add789c84258086ff11a70","modified":1740920103070},{"_id":"public/posts/bfbc8ee0/index.html","hash":"1434429437e71a9d76a9174d5d71d65606f3ec78","modified":1740920103070},{"_id":"public/posts/e458c4a8/index.html","hash":"eba4dcde2828974a6c9b53bb562000b4beb88708","modified":1740920103070},{"_id":"public/posts/e6c47730/index.html","hash":"657fd0d8d12a9788e8ba12a56e55a75e7ca98eec","modified":1740920103070},{"_id":"public/posts/2efb9f75/index.html","hash":"80129a993cedba326e349f7749417f22a620cc99","modified":1740920103070},{"_id":"public/posts/b8ea9272/index.html","hash":"e15a2c4dfe3bc38a3c5de966ae56368775e2809b","modified":1740920103070},{"_id":"public/posts/b4813703/index.html","hash":"8aa6346337c50c64487eb9308ab4a1ded2f2e3a5","modified":1740920103070},{"_id":"public/posts/193ed01b/index.html","hash":"8fbdabc10d5ae12b39b789ea04c8292fe7795329","modified":1740920103070},{"_id":"public/posts/f86f8352/index.html","hash":"840d284f90456bb0465c7c1802d54ea76e84f578","modified":1740920103070},{"_id":"public/posts/112ee01b/index.html","hash":"91e68eb212c66cfa1074544d7a31cc970d387ffb","modified":1740920103070},{"_id":"public/posts/fdc6692d/index.html","hash":"bb5533935e24fb7867b2409efda764ae12197c93","modified":1740920103070},{"_id":"public/posts/b77c3e8c/index.html","hash":"14db8824ad1d0702baaac9372ae73992e87544ed","modified":1740920103070},{"_id":"public/posts/d49f3a84/index.html","hash":"b67f86eeeb9c8f70f188db4f655e6427562c2baa","modified":1740920103070},{"_id":"public/posts/4c9421db/index.html","hash":"2106354840e2ef41d613dc04bee882ffa7af5863","modified":1740920103070},{"_id":"public/posts/100acadf/index.html","hash":"402b84a64ad3e3ecbdc7da8a0546ab6e785ed79e","modified":1740920103070},{"_id":"public/posts/8bca1990/index.html","hash":"18a395c6aecb884087ab4cd2cda6b3143d788bd5","modified":1740920103070},{"_id":"public/posts/5c4f6120/index.html","hash":"ace856525c6924bebc7c863729dc2966b2eaa5f9","modified":1740920103070},{"_id":"public/posts/fdbece1f/index.html","hash":"1ac62e63c37510fc3f80fce8d3b91053300963a8","modified":1740920103070},{"_id":"public/posts/622a5765/index.html","hash":"8f51a176c3d3c7fb24237c7e2ae893311207b8aa","modified":1740920103070},{"_id":"public/posts/cd1cc075/index.html","hash":"a07871c0fdb0d73e850da80621e5f515a85dda40","modified":1740920103070},{"_id":"public/posts/2f718fcc/index.html","hash":"8ae382ffa3b86146fcd44652fc2936424fd6f249","modified":1740920103070},{"_id":"public/posts/99b39663/index.html","hash":"b565c9f6fd4472c9c37bf9b820664e94e579b0b5","modified":1740920103070},{"_id":"public/posts/423abe9e/index.html","hash":"3fcaf88bbc106861f18c5765a629fac84237e88e","modified":1740920103070},{"_id":"public/posts/dfe03bab/index.html","hash":"04379ab91febcbacd2fafbf0b9f2096df477a569","modified":1740920103070},{"_id":"public/posts/b81e60c9/index.html","hash":"4f30a14b355614c3841c6944450fd99363e72362","modified":1740920103070},{"_id":"public/posts/ded0ca3b/index.html","hash":"27a1c277703d08e25f42a07fc182c5a52c6163e3","modified":1740920103070},{"_id":"public/posts/b7aa4b03/index.html","hash":"72bba7de2ac1bd0ae489524980b0fb1a7c8c4591","modified":1740920103070},{"_id":"public/posts/7e9f1d8e/index.html","hash":"55232a29e2d6dec69df6f32215bf5ef2b473de1b","modified":1740920103070},{"_id":"public/posts/81d1513f/index.html","hash":"a73e6913c9532d875bc186cc92cfa5b0608cefe6","modified":1740920103070},{"_id":"public/posts/6758abc6/index.html","hash":"25b82da812419dde94785251000579083d494905","modified":1740920103070},{"_id":"public/posts/d1710a3d/index.html","hash":"7ecececdb0010636ec31efa7b5c0dce11252cb8f","modified":1740920103070},{"_id":"public/posts/daa35d62/index.html","hash":"4faeedd123e67f578a8de72911dab6d29b327831","modified":1740920103070},{"_id":"public/posts/f1601c3e/index.html","hash":"5fb1c07cd2d8157a96e2147665df28817d7f4c84","modified":1740920103070},{"_id":"public/posts/f50731fc/index.html","hash":"70d397a9c4ff3a2862e4c6b1928cab05cca46669","modified":1740920103070},{"_id":"public/posts/8a615d9c/index.html","hash":"333a0f55f28059a22c1c9e9b2b6cd004b70118a0","modified":1740920103070},{"_id":"public/posts/ebdadec7/index.html","hash":"faf6d3b6e41740fbab2e5c9eebaef8f0486169f2","modified":1740920103070},{"_id":"public/posts/e0ec8882/index.html","hash":"5603703abbeff11eb653c58c87f3019520ff78a1","modified":1740920103070},{"_id":"public/posts/e8062535/index.html","hash":"737c4809f98871a520e20b2778970a555fc741a6","modified":1740920103070},{"_id":"public/posts/a80d0031/index.html","hash":"56a8e4a787aab20756328f71ca685d5642f7cc49","modified":1740920103070},{"_id":"public/posts/6ebbfb41/index.html","hash":"52f9a34afee2773c8fdf5cf49311ef315556d71e","modified":1740920103070},{"_id":"public/posts/a5d86a59/index.html","hash":"0022ff80e0d03605f0f107e51fba59f55ef3afb1","modified":1740920103070},{"_id":"public/posts/f52cda1d/index.html","hash":"d472ea4d154acb07bb0f02fb54bc2ca80005f72c","modified":1740920103070},{"_id":"public/posts/9545bc72/index.html","hash":"d3ad6123aa82389d29806ccab530600df237d449","modified":1740920103070},{"_id":"public/posts/b543ced0/index.html","hash":"7f695ffe73bf41b6d56703c3df97ccec92afcbe8","modified":1740920103070},{"_id":"public/posts/f320bf21/index.html","hash":"5000dbf9931f71af9c6d4a936509e7950d864d9e","modified":1740920103070},{"_id":"public/posts/c62acc1f/index.html","hash":"1d2c5f000b3da012443492bc403107e469bcda20","modified":1740920103070},{"_id":"public/posts/d4e5e1b1/index.html","hash":"c41174e29b0f6d28173c2c6df94a445285c122d4","modified":1740920103070},{"_id":"public/posts/4eb3381c/index.html","hash":"871ec7ccf19de74f2536767accac03e26bb859c9","modified":1740920103070},{"_id":"public/posts/51d35c0d/index.html","hash":"2277a446dfd5723a14ec0e5843232fed7ab2e31a","modified":1740920103070},{"_id":"public/posts/fdc2e8dd/index.html","hash":"cb8c4c5e81ab2cf96c2f0a6159ca19525fb86036","modified":1740920103070},{"_id":"public/posts/d877136c/index.html","hash":"c86ee8201ba50d47892426e3f9eabf021fdc9d46","modified":1740920103070},{"_id":"public/posts/dcfaa904/index.html","hash":"8d29713d35307b80d2c4a53cab68276942186b28","modified":1740920103070},{"_id":"public/posts/d9bd5a32/index.html","hash":"d7ed338439e385e758fca4cbc99fcc4882fe9562","modified":1740920103070},{"_id":"public/posts/5e2e35b0/index.html","hash":"ed42a64c5805b7dfef503e6415b1f0dc6bde1382","modified":1740920103070},{"_id":"public/posts/809659da/index.html","hash":"131d3a1aeaecc087da5fbdfeccd07bdff06a7036","modified":1740920103070},{"_id":"public/posts/89b3a4e0/index.html","hash":"9952e3d2dfec0e95fca3e16ae1dd835e8ae9a74d","modified":1740920103070},{"_id":"public/posts/5cd14851/index.html","hash":"ad3326d3b45d56d98456928a6f69b36c6112bba2","modified":1740920103070},{"_id":"public/posts/a3b49bc/index.html","hash":"f605ac698811ef84fcfd967b1ed859ab97c8f398","modified":1740920103070},{"_id":"public/posts/f89cb603/index.html","hash":"72a7e662577278ae42c0f6d391945ae70684da00","modified":1740920103070},{"_id":"public/posts/ca913759/index.html","hash":"dff1114844d4f23debc2de6dfb68c13c28672c80","modified":1740920103070},{"_id":"public/posts/856c8506/index.html","hash":"237c65d0def33b04726baf0fb00b8ca937220160","modified":1740920103070},{"_id":"public/posts/1491d7b8/index.html","hash":"a759f95780488e5694c32077d2aacba790f17527","modified":1740920103070},{"_id":"public/posts/151f44ae/index.html","hash":"0105197c3282c413510cd9919c000cdfee4b0921","modified":1740920103070},{"_id":"public/posts/15c112b3/index.html","hash":"8b82ceb8c36a2522544470b5f7d71df318a17bef","modified":1740920103070},{"_id":"public/posts/aab8f277/index.html","hash":"e0b7fa2695bf62c583f7bbf73aa8d33c822deae0","modified":1740920103070},{"_id":"public/posts/2e9e2da2/index.html","hash":"b579e22c3d22eff887334c0eb8518166d04ad0b7","modified":1740920103070},{"_id":"public/posts/6b38562a/index.html","hash":"973da22d429f24c8ca1889900891f71521e38cd0","modified":1740920103070},{"_id":"public/posts/33b1a3cd/index.html","hash":"7df40e94d18ff380ac4f186866e781f281bb967c","modified":1740920103070},{"_id":"public/posts/d5eb6ab8/index.html","hash":"d94e6c9ac4ffeb5aecdc3458c059f17b737025de","modified":1740920103070},{"_id":"public/posts/7d41eccf/index.html","hash":"c9d7cb4a346fa3bfacb5e71080964a0bc5f3ff21","modified":1740920103070},{"_id":"public/posts/8d203e4f/index.html","hash":"09c08db42f6bbe58a7d5dd901e9dc918600b3af1","modified":1740920103070},{"_id":"public/posts/df881728/index.html","hash":"b471bbf00232ca9d6cb61534207857d9190721f2","modified":1740920103070},{"_id":"public/posts/ff69a4f5/index.html","hash":"668a817e797b6ce1972a7ba2a77855d81d2a1b31","modified":1740920103070},{"_id":"public/posts/518e617c/index.html","hash":"608e4a743a97e3660c1d89f4ac7e4771b14dba41","modified":1740920103070},{"_id":"public/posts/22cff626/index.html","hash":"5321888585508ca495a7a3ca154afd1ba5c3ca63","modified":1740920103070},{"_id":"public/posts/b0b91c4e/index.html","hash":"64caea1bb9dbb9ec5600904e5e3437f723b2aba9","modified":1740920103070},{"_id":"public/posts/7b216a3b/index.html","hash":"4b3493a091be02cdb55e8ffcc2626f5e4e533366","modified":1740920103070},{"_id":"public/posts/943bf5e0/index.html","hash":"ce8f4b4ba7137781a2497811b12dcf41fe2ea660","modified":1740920103070},{"_id":"public/posts/47a61b40/index.html","hash":"904b3db54874e8f8d2bf6149cdc4937e8ebf8207","modified":1740920103070},{"_id":"public/posts/124cdf9/index.html","hash":"08eac7cd517ee49fc6be6502c6d5ba8f059b596d","modified":1740920103070},{"_id":"public/posts/a07de07c/index.html","hash":"f671ad3c700849532f1bfa1ca0ce58b082794a0d","modified":1740920103070},{"_id":"public/posts/71014c5a/index.html","hash":"a90d6c236ef79dbbd1cfa9e014a4ce76534e8eec","modified":1740920103070},{"_id":"public/posts/a63fc0d0/index.html","hash":"cefe3f5022aa3e31ff4625d25a749fe6d323ea2a","modified":1740920103070},{"_id":"public/posts/466916d7/index.html","hash":"5d1280113d18a152c3eee207f8d3f2cad9d7d4c9","modified":1740920103070},{"_id":"public/posts/3d3705e1/index.html","hash":"663452b92713148307dab372df296fb23e49893a","modified":1740920103070},{"_id":"public/posts/d8f6d1ed/index.html","hash":"53eb06fc74c184aa315c3d44593d6d8adaf2b9f2","modified":1740920103070},{"_id":"public/posts/6216fa64/index.html","hash":"c559e7114397fc7f7c8eba1a98c2e4031966faee","modified":1740920103070},{"_id":"public/posts/f5dbca44/index.html","hash":"0e7e99b6a5be5c00bb1573cb1654f785b9a94428","modified":1740920103070},{"_id":"public/posts/d43a4e4c/index.html","hash":"8d853228c97ee236168d14351e42e29950504d1a","modified":1740920103070},{"_id":"public/posts/a680d5af/index.html","hash":"097a3a5c76f671c24d8dd1e0e9a9dd02a6dbb3f7","modified":1740920103070},{"_id":"public/posts/3e7adddd/index.html","hash":"dd8de3f13716d26962d98f5a7685fde656a10dac","modified":1740920103070},{"_id":"public/posts/fe4c9cb6/index.html","hash":"b0d1cfbf91d7a7b6aad246d35e8d61a05aa24466","modified":1740920103070},{"_id":"public/posts/735e5788/index.html","hash":"20dd93b3ffa4d71ecfee2c471d8a612fb635c9db","modified":1740920103070},{"_id":"public/posts/eb58c531/index.html","hash":"20767899d27b155f80ee0b8828a664665916359a","modified":1740920103070},{"_id":"public/posts/fa81a9e8/index.html","hash":"d3cb8ca844ca07753db6369af9735e20021fa12e","modified":1740920103070},{"_id":"public/posts/8a15ea5f/index.html","hash":"440d710c8e2d6295eb70ee568fe4c9ca9f06116e","modified":1740920103070},{"_id":"public/posts/e02375f9/index.html","hash":"597f4c1f2b354f76c874f97969c49da58feb539c","modified":1740920103070},{"_id":"public/posts/e99d2875/index.html","hash":"c8c24294237ec8d16ad4775570c4db79efa3a299","modified":1740920103070},{"_id":"public/posts/276e22e/index.html","hash":"bd750fa02408a26240e84588e633226aec5a17ff","modified":1740920103070},{"_id":"public/archives/index.html","hash":"5ad4248ce372e776e7689926bc49df8872eba3e4","modified":1740920103070},{"_id":"public/archives/page/2/index.html","hash":"bd914ea6d9d9ad042fa31e0fca124fc8badb3c87","modified":1740920103070},{"_id":"public/archives/page/3/index.html","hash":"7730a199c7c621ecddf100aa508bbfac3c4eb7c0","modified":1740920103070},{"_id":"public/archives/page/4/index.html","hash":"1b6f2471552f22c256925141eb83b6523f905a0a","modified":1740920103070},{"_id":"public/archives/page/5/index.html","hash":"4b6647b45b9a42a9fa6a19a2983e02af83387389","modified":1740920103070},{"_id":"public/archives/page/6/index.html","hash":"c581934d3daa0733838680206ad814c951c47018","modified":1740920103070},{"_id":"public/archives/page/7/index.html","hash":"dc89cca0dbded7fe4c214a7b7ef8811f90b333fc","modified":1740920103070},{"_id":"public/archives/page/8/index.html","hash":"ef428bf785397104758dce32e14ede6340d78344","modified":1740920103070},{"_id":"public/archives/page/9/index.html","hash":"d991cb7e5f8dbd1cdc2e476c273c2e840e06f226","modified":1740920103070},{"_id":"public/archives/page/10/index.html","hash":"9fd84c48c77c7fb67dcc11fe94fbb8f04012966a","modified":1740920103070},{"_id":"public/archives/2020/index.html","hash":"79590e8e6af8d9b1a14dd947226bb42351be5360","modified":1740920103070},{"_id":"public/archives/2020/12/index.html","hash":"1112b42df5f72715e1dd420747e88a8d388c3de6","modified":1740920103070},{"_id":"public/archives/2021/index.html","hash":"950fa03fde4c0c43351ed79b94dfc82d3d321ca9","modified":1740920103070},{"_id":"public/archives/2021/page/2/index.html","hash":"3f1d23545ca458af0e3466b045b74c84fa349ed0","modified":1740920103070},{"_id":"public/archives/2021/page/3/index.html","hash":"25d3c53bc92c0b09b12cccadb10cd5192de3e059","modified":1740920103070},{"_id":"public/archives/2021/page/4/index.html","hash":"c9cfb223f22858824563cc66a28ed7898e67d5f8","modified":1740920103070},{"_id":"public/archives/2021/page/5/index.html","hash":"acbfe89f87437ac84a6eb168bf18d81bf275ae89","modified":1740920103070},{"_id":"public/archives/2021/page/6/index.html","hash":"d8a36b39a13f7328a1f15da208795ad8ef4bf5ec","modified":1740920103070},{"_id":"public/archives/2021/page/7/index.html","hash":"ce575b72a5954192302e2595d83081fe915cc20c","modified":1740920103070},{"_id":"public/archives/2021/01/index.html","hash":"070fedbc8d8232660f9fd7d3648f4bdb30778c0e","modified":1740920103070},{"_id":"public/archives/2021/03/index.html","hash":"1019fef32ec656654ab321f3a5024c2e2a40456c","modified":1740920103070},{"_id":"public/archives/2021/03/page/2/index.html","hash":"e9ff1810de30c8c2696a6939679fe32e8b1d7677","modified":1740920103070},{"_id":"public/archives/2021/04/index.html","hash":"25c49e57f4790220e491846595d403a7a00080d8","modified":1740920103070},{"_id":"public/archives/2021/04/page/2/index.html","hash":"9adc3f18da132e3bbf851e1dcd4eb0ca20d5e075","modified":1740920103070},{"_id":"public/archives/2021/05/index.html","hash":"3fc63ae4c4f64b78fe69681cbb7aa1305f483ca6","modified":1740920103070},{"_id":"public/archives/2021/05/page/2/index.html","hash":"90534e2afe6d35115e69a397171dcbbc95d3919c","modified":1740920103070},{"_id":"public/archives/2021/06/index.html","hash":"979778b9512d108baa16503e201ff97b537be3fe","modified":1740920103070},{"_id":"public/archives/2021/07/index.html","hash":"92c20be8b493d25dc86dea7b1e445ec9636a06d8","modified":1740920103070},{"_id":"public/archives/2021/08/index.html","hash":"d44e32b2c7791e7b02fc754614cf6431dab60f65","modified":1740920103070},{"_id":"public/archives/2021/12/index.html","hash":"240cb2920950a5ec3ce61ff8fa3d5a15667c1485","modified":1740920103070},{"_id":"public/archives/2022/index.html","hash":"2ae71c0c0098ca9f2e90fc383e829ffffa8ed347","modified":1740920103070},{"_id":"public/archives/2022/01/index.html","hash":"af4d56fecaaa371196cc0a35c708f44d5a62d7df","modified":1740920103070},{"_id":"public/archives/2022/03/index.html","hash":"7eedccf65570d292f92d6ca6afabd49c4995ee4e","modified":1740920103070},{"_id":"public/archives/2022/10/index.html","hash":"abeb7d231bce17aaaa7f924a0e53b28381a700d6","modified":1740920103070},{"_id":"public/archives/2022/11/index.html","hash":"86095cbf158591306be05527a62a8fa040fbfc82","modified":1740920103070},{"_id":"public/archives/2022/12/index.html","hash":"6040d76716cdebc8657bdfe0e3ecb44d8c6133c7","modified":1740920103070},{"_id":"public/archives/2023/index.html","hash":"29e5028f9967c6b5236d61463f84e580b707835c","modified":1740920103070},{"_id":"public/archives/2023/page/2/index.html","hash":"6a621a03de66695d1ee0d07601a6aaf37e91b25d","modified":1740920103070},{"_id":"public/archives/2023/04/index.html","hash":"7f63b1e4aeff3068e69544f1f3abc23cb5ebaf22","modified":1740920103070},{"_id":"public/archives/2023/05/index.html","hash":"017008d61dacb3cefcae43dd15f66c561df55370","modified":1740920103070},{"_id":"public/archives/2023/08/index.html","hash":"046e0504bbe29c6f6321693e2d8d72754c3faee1","modified":1740920103070},{"_id":"public/archives/2023/11/index.html","hash":"3a098c5ad6a3c577fbb3738f087e68cadf1f445c","modified":1740920103070},{"_id":"public/archives/2023/12/index.html","hash":"c53519b698804405f014d64ae93d7f5a2c4104c5","modified":1740920103070},{"_id":"public/archives/2024/index.html","hash":"d168be45044414d7c490bc98940d18481c35a848","modified":1740920103070},{"_id":"public/archives/2024/03/index.html","hash":"60cd8c0c8640ba398e7c292dda2edcf38fac1069","modified":1740920103070},{"_id":"public/archives/2024/06/index.html","hash":"ef1ea8fc8a1ae131ac0be6b73c49e53d18620de8","modified":1740920103070},{"_id":"public/archives/2024/07/index.html","hash":"8b0acca91a87eceb28ecef02f8ea1374bed22a6e","modified":1740920103070},{"_id":"public/archives/2024/12/index.html","hash":"5d2cccb941f9f4d11842d830695591d8e6595052","modified":1740920103070},{"_id":"public/archives/2025/index.html","hash":"c3f11c3a99ef61891fa48cc26c204ce010521569","modified":1740920103070},{"_id":"public/archives/2025/02/index.html","hash":"f99d51d870dc36f7f30d5420d0cf60a43ab51382","modified":1740920103070},{"_id":"public/index.html","hash":"a960856c761ecaf76d35a4a8939bdc3bbc18b054","modified":1740920103070},{"_id":"public/page/2/index.html","hash":"ca482d00d7011c4a51b480c357cebc839c6c5f4b","modified":1740920103070},{"_id":"public/page/3/index.html","hash":"22772a4de17aed7bd660c21d4e1af18602229303","modified":1740920103070},{"_id":"public/page/4/index.html","hash":"c859a3a0123ccc7498e110809d312bf63828eaa0","modified":1740920103070},{"_id":"public/page/5/index.html","hash":"fc84cc26bee768ed09340c58d02a2afd64e07b5a","modified":1740920103070},{"_id":"public/page/6/index.html","hash":"81464e2f4fda8e91952547fab75d34e8d4717e7d","modified":1740920103070},{"_id":"public/page/7/index.html","hash":"9417e874819e412c1bdb9625bdda86b83cab3635","modified":1740920103070},{"_id":"public/page/8/index.html","hash":"21fc8024395599243ef38ed84850f23aadf39501","modified":1740920103070},{"_id":"public/page/9/index.html","hash":"2327b33de351cc1156c899c7548c8c4938d12f09","modified":1740920103070},{"_id":"public/page/10/index.html","hash":"85f5cd0b1d11eb94b7c6bbbd727a399512caa94f","modified":1740920103070},{"_id":"public/page/11/index.html","hash":"eced59b91f2acd975c03fa9e6ace5961519a12d2","modified":1740920103070},{"_id":"public/page/12/index.html","hash":"2dd677c1f2c7dbc4cb4f05b1d5d4a4770909af80","modified":1740920103070},{"_id":"public/page/13/index.html","hash":"f62f9344e18685986d5bc11f61e0a07a2d8c151c","modified":1740920103070},{"_id":"public/page/14/index.html","hash":"ec377ad1aa032294b89f1ee39d317a64f23dd0e8","modified":1740920103070},{"_id":"public/page/15/index.html","hash":"4569720e44f7fa8c2f9461c0133a61b9f9ee9239","modified":1740920103070},{"_id":"public/page/16/index.html","hash":"26080025335e5308b1a898cd121e05d40de64a01","modified":1740920103070},{"_id":"public/page/17/index.html","hash":"110a192867bce893709c92cebd39250ea25cd839","modified":1740920103070},{"_id":"public/page/18/index.html","hash":"7e2671378c36b7e65bbd527eb09657a2869c2aa2","modified":1740920103070},{"_id":"public/page/19/index.html","hash":"9107a09ee420ead9b5646d6e7ca3fa4407ccaf60","modified":1740920103070},{"_id":"public/tags/无标签/index.html","hash":"a29fb6f3d8989b7627bbf727b1023b69046236d1","modified":1740920103070},{"_id":"public/tags/无标签/page/2/index.html","hash":"cc86c3027795a22bb2e60e52e89f8e5f8c5a782d","modified":1740920103070},{"_id":"public/tags/无标签/page/3/index.html","hash":"8d13728984765b5e3918b1a3ef30f396a1be4036","modified":1740920103070},{"_id":"public/tags/无标签/page/4/index.html","hash":"d03ff9c0bf60a052e4143db9dc1c75bf1214d75c","modified":1740920103070},{"_id":"public/tags/无标签/page/5/index.html","hash":"78b63e73c73286fdc09c66ee6cd7a768aa025faa","modified":1740920103070},{"_id":"public/tags/无标签/page/6/index.html","hash":"2d1c30657f42b0e3bf71f41c43d66e1b24c230f1","modified":1740920103070},{"_id":"public/tags/无标签/page/7/index.html","hash":"d52e32fc990c67c9964a4c80ccfe9b71c52c8cbd","modified":1740920103070},{"_id":"public/tags/无标签/page/8/index.html","hash":"d50395ea24d08ba27e7e75cf561b156f10794eb4","modified":1740920103070},{"_id":"public/tags/无标签/page/9/index.html","hash":"c6126e76231124a329a8c006014294dcd5691191","modified":1740920103070},{"_id":"public/tags/无标签/page/10/index.html","hash":"c8c00bdae0dc8afd73f0ba78aa1ec4471d5bcfbc","modified":1740920103070},{"_id":"public/tags/无标签/page/11/index.html","hash":"bd5f73baa29476293382b5c410fbad9ea25414bc","modified":1740920103070},{"_id":"public/tags/无标签/page/12/index.html","hash":"04248fb280fbb89308013f46005703e9b2861f73","modified":1740920103070},{"_id":"public/tags/无标签/page/13/index.html","hash":"bd58837c427f212702bb3b81bb4ba2d01f4191fa","modified":1740920103070},{"_id":"public/tags/无标签/page/14/index.html","hash":"2855e3fe89b724579227b41437212f965500bd38","modified":1740920103070},{"_id":"public/tags/无标签/page/15/index.html","hash":"781f038df21346cd5fc62f72fbb8621043505fa7","modified":1740920103070},{"_id":"public/tags/年度总结/index.html","hash":"e5b4b639907297edd43259efb36147ffef1b82c5","modified":1740920103070},{"_id":"public/tags/投资/index.html","hash":"fbd08c8b90909f9f48cbb7d4cb089daa1bb24e71","modified":1740920103070},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1740920103070},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1740920103070},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1740920103070},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1740920103070},{"_id":"public/css/main.css","hash":"4c51de9ce0c6d03454af7deef86aaf01b867047c","modified":1740920103070},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1740920103070},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"5a81f1c5d66561b3bcb05dae48148088a3fb5c79","modified":1740920103070},{"_id":"public/images/avatar.jpg","hash":"41f987c93fcc85de2cd7f68d0518c8eeec1cf8b6","modified":1740920103070},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1740920103070},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1740920103070},{"_id":"public/js/bookmark.js","hash":"9ba4cceafd12c6d5ba8a6b986a046ef8319a7811","modified":1740920103070},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1740920103070},{"_id":"public/js/motion.js","hash":"6f751f5c9499a39d7c5e1d323db3260342dd9431","modified":1740920103070},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1740920103070},{"_id":"public/js/next-boot.js","hash":"8e2d589585f5270ee90285d3e65b69923c7629d8","modified":1740920103070},{"_id":"public/js/pjax.js","hash":"694b271819aab37ce473b15db9e6aded971d82e5","modified":1740920103070},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1740920103070},{"_id":"public/js/utils.js","hash":"d7954a623be2ee9fe3eadc785b17c17afac6c34d","modified":1740920103070},{"_id":"public/js/sidebar.js","hash":"2ee359ae48273b01ba1e0768704524e08702c7eb","modified":1740920103070},{"_id":"public/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1740920103070},{"_id":"public/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1740920103070},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1740920103070},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1740920103070},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1740920103070},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"def07bcc7c17d8a0caad177fb1dd2f3a5e5b3536","modified":1740920103070},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1740920103070},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1740920103070},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1740920103070},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1740920103070},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1740920103070},{"_id":"public/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1740920103070},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1740920103070},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1740920103070},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1740920103070},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1740920103070},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1740920103070},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1740920103070},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1740920103070},{"_id":"public/js/third-party/search/algolia-search.js","hash":"111f60e26b82b4d5be4357737e9273617778c9a9","modified":1740920103070},{"_id":"public/js/third-party/tags/mermaid.js","hash":"1d1b6d847215b16f26b230859d7e16501190ecc0","modified":1740920103070},{"_id":"public/js/third-party/search/local-search.js","hash":"4262628e173b16c4c6c18f817173dd103fb9e9a8","modified":1740920103070},{"_id":"public/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1740920103070},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1740920103070},{"_id":"public/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1740920103070},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1740920103070},{"_id":"public/images/background.jpg","hash":"8c649879b818c1cb7545eb484c56f3da35cb03ef","modified":1740920103070}],"Category":[],"Data":[{"_id":"footer","data":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n"},{"_id":"sidebar","data":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n"},{"_id":"languages","data":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}}},{"_id":"styles","data":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n"},{"_id":"variables","data":""}],"Page":[{"layout":"page","title":"categories","date":"2025-03-02T06:45:24.000Z","type":"categories","tags":null,"_content":"","source":"categories/index.md","raw":"---\nlayout: page\ntitle: categories\ndate: 2025-03-02 14:45:24\ntype: \"categories\"\ntags:\n---\n","updated":"2025-03-02T06:51:15.719Z","path":"categories/index.html","comments":1,"_id":"cm7rmvp3y0000n0uk81pwgwe3","content":"","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"","more":""},{"layout":"page","title":"about","date":"2025-03-02T08:35:27.000Z","tags":null,"type":"about","_content":"","source":"about/index.md","raw":"---\nlayout: page\ntitle: about\ndate: 2025-03-02 16:35:27\ntags:\ntype: \"about\"\n---\n","updated":"2025-03-02T08:35:43.079Z","path":"about/index.html","comments":1,"_id":"cm7rmvp430002n0uk0rb19y9c","content":"","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"","more":""},{"layout":"page","title":"tags","date":"2025-03-02T06:44:58.000Z","type":"tags","tags":null,"_content":"","source":"tags/index.md","raw":"---\nlayout: page\ntitle: tags\ndate: 2025-03-02 14:44:58\ntype: \"tags\"\ntags:\n---\n","updated":"2025-03-02T06:51:03.036Z","path":"tags/index.html","comments":1,"_id":"cm7rmvp460005n0ukc5ab3t57","content":"","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"","more":""}],"Post":[{"title":"141天恋爱总结","description":"","abbrlink":"3c99c880","date":"2024-03-17T16:00:00.000Z","_content":"\n\n回忆起这段在老家的正式谈的第一段感情，还是有些感慨的。真是有种初听不知曲中意，再听已是曲中人的感觉。也懂了 人生若只初相见的感觉。\n<!-- more -->\n起初我们两个是在相亲app上认识的，一上来聊天，简单聊了聊，她就开始问我家里的情况了，我感觉聊的还可以，也就真诚回答了，之后就加微信了，慢慢的就在一起了。当然似乎也没有特别正式的表白，这个她似乎也一直念念不忘来着。\n\n最初的一个月很好，两个人都是彼此想着对方，当然她工作比较忙，在国企上班，下班还自己搞兼职，当初高中语文的代课老师，基本上周五晚上，周六下午周日全天都在做这个兼职，对了周六上午她还要正常上班。她很忙，我的工作是没有那么忙，忙一阵子，闲一阵子。我们可能一周见一两次面吧，甚至一周见一次，两周见一次。中间发生了几件事情，大概就是我没有按照她想要的方式做，我说我以前就这样，慢慢的，她也不想改变我了，之后的日子其实挺无聊的，就是我每日早安晚安的问候，她有一搭没一搭的回复我。不让我打她电话，说她可能在忙，没啥事儿不要打电话，先微信问问，可不可以打电话。\n\n\n\n其实大概在我们认识一周的时候，我们已经发生过两次关系了，但是我没有想过那是我和她仅有的两次关系了。我总是开车到她小区门口等她，我们一起出去玩之后，把她送到她家门口，总是亲热一会才会念念不忘的离开。我那个时候还挺享受从我家开车到她家的这个时间的，听着音乐，去见自己喜欢的姑娘，很美好。从最开始亲密的一个月之后，其实之后就很平淡了，她之后有跟我说过，她觉得最开始的一个月她喜欢我，她愿意跟我做任何事情，但是她最近心理抗拒我，不想跟我有肢体接触。那一个月她觉得她很压抑，她觉得她压力很大，没有个人时间了。\n\n\n\n她其实算是个比较独立的女生，我在最开始认识的时候就有一点认知了。我觉得这样挺好的，一个女生自己很独立，有主见，有着自己喜欢的事情。从现实情况来说，她工资比我高一些，然后还有副业，副业可能比她的工资还高，我记得她跟我说过一句话就是 我是你在家里找过的最优秀的女人了吧。她很骄傲，她自己买了一套90w左右的房子，自己付了首付，确实挺强的，在我家的这个小城市确实很少女人可以做到。其实大部分的男的估计都不太行，我当然也是其中一部分。我和她相处起来，我是有点自卑的，学历她是研究生， 我只是本科，经济实力也不太行，还胖，她最初愿意和我谈的时候说 我可以给她提供情绪价值。我当时不太明白，现在我突然意识到，她似乎很知道自己的需求，而我却不是。\n\n\n\n在最后分手的之前，我拉黑过她一次，就是有点受不了这段关系了，很累，她几个月不让我牵手，我一直觉得我可以改变她，我以为她会慢慢变得回到从前那样，后来我发现，不太可能。我拉黑了她，之后我自己觉得放不下她于是就恢复了，她给我说，她最讨厌别人来黑她了。\n\n\n\n就在分手的前一个周六下午吧，她突然跟我说她要去附近的一个城市，问我有没有时间开车去送她，我肯定说有啊，于是我们就约定个时间出发了。她去另外一个城市找朋友玩，两对还是三对刚结婚的夫妻吧，那三个男的是她的高中同学。她为了这次去还专门化妆，假睫毛还专门找朋友去帮忙收拾一下。我给她送到附近城市的万达广场，就去保养车了，她不让我跟她的朋友见面，我只好去找我在当地的朋友，然后去和我的朋友，还有我朋友新谈的女朋友一起在万达吃饭。之后我就在电竞酒店开了一个房间，我们要一起玩lol。来的时候我也问过，她在哪里住？她说她朋友都结婚了，那个城市房价也不贵，她可以住在她朋友的家里，肯定有客房的。我说那我找我朋友玩啊，晚上我可能开个房间，你要不要一起？她说不要。我其实本来就可以直接回家的，我想着给她送来了， 第二天总要接她一起回家吧。到了第二天中午是的十一点多，我要回家的时候，我问她回不回去了？她说不回去了。我就自己回去了，到了下午两点多的时候，她才告诉我她被车撞了，在医院那。我很震惊，没想到去一趟还能发生这种事情，我问要不要我过去看看，她说不用。后来跟她交流，她说周六下午就撞了，周日才去医院而已。当时我也在那个城市，她都没有联系我，她只是叫了她父母过去。从这次事件我从真正意识到，我在心里是个什么位置，大抵也就是个普通朋友吧。\n\n\n\n我比较绝情，在她还没有好的时候，大概在周二周三的时候，再一次聊崩，我就提了再见，然后直接拉黑了，我当时很上头，就是要用她最讨厌的方式来分手。她其实从来没有在外人面前说我是她男朋友，她也不去见我的朋友，她说我的朋友都喜欢讲些家长里短的东西，她不喜欢，她只喜欢知道和赚钱有关的事情。在和她分手之后，我感觉很高兴，很释怀，突然有种压力释放的感觉，尽管我到现在还忍不住回想起那段在一起的美好时光，但是我知道，我们回不到从前了。其实后来相处的几个月中我都是说我们要坦诚相待，有啥说啥，不要藏在心里，尽管我知道不太可能完全，但是我也希望尽量，最后还是没有实现。哎，她不愿意改变自己，只能让我改变，那我凭啥要一直为她改变那？有时候真的不知道她是怎么想的。在之后的几个月的，她不怎么喜欢我了，也不和我分手啥的，这和她当初说的 要是有意愿在一起结婚才行，不要浪费彼此时间形成鲜明对比。\n\n\n\n最后我们两个的互相说彼此的缺点，其实最终的问题还是我们不对彼此喜欢了，于是就没有了那么高的容忍度，就开始说各种之前没有说过的缺点。其实还是不合适，我们不合适，仅此而已！\n","source":"_posts/141天恋爱总结.md","raw":"---\ntitle: 141天恋爱总结\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 3c99c880\ndate: 2024-03-18 00:00:00\n---\n\n\n回忆起这段在老家的正式谈的第一段感情，还是有些感慨的。真是有种初听不知曲中意，再听已是曲中人的感觉。也懂了 人生若只初相见的感觉。\n<!-- more -->\n起初我们两个是在相亲app上认识的，一上来聊天，简单聊了聊，她就开始问我家里的情况了，我感觉聊的还可以，也就真诚回答了，之后就加微信了，慢慢的就在一起了。当然似乎也没有特别正式的表白，这个她似乎也一直念念不忘来着。\n\n最初的一个月很好，两个人都是彼此想着对方，当然她工作比较忙，在国企上班，下班还自己搞兼职，当初高中语文的代课老师，基本上周五晚上，周六下午周日全天都在做这个兼职，对了周六上午她还要正常上班。她很忙，我的工作是没有那么忙，忙一阵子，闲一阵子。我们可能一周见一两次面吧，甚至一周见一次，两周见一次。中间发生了几件事情，大概就是我没有按照她想要的方式做，我说我以前就这样，慢慢的，她也不想改变我了，之后的日子其实挺无聊的，就是我每日早安晚安的问候，她有一搭没一搭的回复我。不让我打她电话，说她可能在忙，没啥事儿不要打电话，先微信问问，可不可以打电话。\n\n\n\n其实大概在我们认识一周的时候，我们已经发生过两次关系了，但是我没有想过那是我和她仅有的两次关系了。我总是开车到她小区门口等她，我们一起出去玩之后，把她送到她家门口，总是亲热一会才会念念不忘的离开。我那个时候还挺享受从我家开车到她家的这个时间的，听着音乐，去见自己喜欢的姑娘，很美好。从最开始亲密的一个月之后，其实之后就很平淡了，她之后有跟我说过，她觉得最开始的一个月她喜欢我，她愿意跟我做任何事情，但是她最近心理抗拒我，不想跟我有肢体接触。那一个月她觉得她很压抑，她觉得她压力很大，没有个人时间了。\n\n\n\n她其实算是个比较独立的女生，我在最开始认识的时候就有一点认知了。我觉得这样挺好的，一个女生自己很独立，有主见，有着自己喜欢的事情。从现实情况来说，她工资比我高一些，然后还有副业，副业可能比她的工资还高，我记得她跟我说过一句话就是 我是你在家里找过的最优秀的女人了吧。她很骄傲，她自己买了一套90w左右的房子，自己付了首付，确实挺强的，在我家的这个小城市确实很少女人可以做到。其实大部分的男的估计都不太行，我当然也是其中一部分。我和她相处起来，我是有点自卑的，学历她是研究生， 我只是本科，经济实力也不太行，还胖，她最初愿意和我谈的时候说 我可以给她提供情绪价值。我当时不太明白，现在我突然意识到，她似乎很知道自己的需求，而我却不是。\n\n\n\n在最后分手的之前，我拉黑过她一次，就是有点受不了这段关系了，很累，她几个月不让我牵手，我一直觉得我可以改变她，我以为她会慢慢变得回到从前那样，后来我发现，不太可能。我拉黑了她，之后我自己觉得放不下她于是就恢复了，她给我说，她最讨厌别人来黑她了。\n\n\n\n就在分手的前一个周六下午吧，她突然跟我说她要去附近的一个城市，问我有没有时间开车去送她，我肯定说有啊，于是我们就约定个时间出发了。她去另外一个城市找朋友玩，两对还是三对刚结婚的夫妻吧，那三个男的是她的高中同学。她为了这次去还专门化妆，假睫毛还专门找朋友去帮忙收拾一下。我给她送到附近城市的万达广场，就去保养车了，她不让我跟她的朋友见面，我只好去找我在当地的朋友，然后去和我的朋友，还有我朋友新谈的女朋友一起在万达吃饭。之后我就在电竞酒店开了一个房间，我们要一起玩lol。来的时候我也问过，她在哪里住？她说她朋友都结婚了，那个城市房价也不贵，她可以住在她朋友的家里，肯定有客房的。我说那我找我朋友玩啊，晚上我可能开个房间，你要不要一起？她说不要。我其实本来就可以直接回家的，我想着给她送来了， 第二天总要接她一起回家吧。到了第二天中午是的十一点多，我要回家的时候，我问她回不回去了？她说不回去了。我就自己回去了，到了下午两点多的时候，她才告诉我她被车撞了，在医院那。我很震惊，没想到去一趟还能发生这种事情，我问要不要我过去看看，她说不用。后来跟她交流，她说周六下午就撞了，周日才去医院而已。当时我也在那个城市，她都没有联系我，她只是叫了她父母过去。从这次事件我从真正意识到，我在心里是个什么位置，大抵也就是个普通朋友吧。\n\n\n\n我比较绝情，在她还没有好的时候，大概在周二周三的时候，再一次聊崩，我就提了再见，然后直接拉黑了，我当时很上头，就是要用她最讨厌的方式来分手。她其实从来没有在外人面前说我是她男朋友，她也不去见我的朋友，她说我的朋友都喜欢讲些家长里短的东西，她不喜欢，她只喜欢知道和赚钱有关的事情。在和她分手之后，我感觉很高兴，很释怀，突然有种压力释放的感觉，尽管我到现在还忍不住回想起那段在一起的美好时光，但是我知道，我们回不到从前了。其实后来相处的几个月中我都是说我们要坦诚相待，有啥说啥，不要藏在心里，尽管我知道不太可能完全，但是我也希望尽量，最后还是没有实现。哎，她不愿意改变自己，只能让我改变，那我凭啥要一直为她改变那？有时候真的不知道她是怎么想的。在之后的几个月的，她不怎么喜欢我了，也不和我分手啥的，这和她当初说的 要是有意愿在一起结婚才行，不要浪费彼此时间形成鲜明对比。\n\n\n\n最后我们两个的互相说彼此的缺点，其实最终的问题还是我们不对彼此喜欢了，于是就没有了那么高的容忍度，就开始说各种之前没有说过的缺点。其实还是不合适，我们不合适，仅此而已！\n","slug":"141天恋爱总结","published":1,"updated":"2025-03-02T05:08:26.117Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp410001n0uk0eke12x6","content":"<p>回忆起这段在老家的正式谈的第一段感情，还是有些感慨的。真是有种初听不知曲中意，再听已是曲中人的感觉。也懂了 人生若只初相见的感觉。</p>\n<span id=\"more\"></span>\n<p>起初我们两个是在相亲app上认识的，一上来聊天，简单聊了聊，她就开始问我家里的情况了，我感觉聊的还可以，也就真诚回答了，之后就加微信了，慢慢的就在一起了。当然似乎也没有特别正式的表白，这个她似乎也一直念念不忘来着。</p>\n<p>最初的一个月很好，两个人都是彼此想着对方，当然她工作比较忙，在国企上班，下班还自己搞兼职，当初高中语文的代课老师，基本上周五晚上，周六下午周日全天都在做这个兼职，对了周六上午她还要正常上班。她很忙，我的工作是没有那么忙，忙一阵子，闲一阵子。我们可能一周见一两次面吧，甚至一周见一次，两周见一次。中间发生了几件事情，大概就是我没有按照她想要的方式做，我说我以前就这样，慢慢的，她也不想改变我了，之后的日子其实挺无聊的，就是我每日早安晚安的问候，她有一搭没一搭的回复我。不让我打她电话，说她可能在忙，没啥事儿不要打电话，先微信问问，可不可以打电话。</p>\n<p>其实大概在我们认识一周的时候，我们已经发生过两次关系了，但是我没有想过那是我和她仅有的两次关系了。我总是开车到她小区门口等她，我们一起出去玩之后，把她送到她家门口，总是亲热一会才会念念不忘的离开。我那个时候还挺享受从我家开车到她家的这个时间的，听着音乐，去见自己喜欢的姑娘，很美好。从最开始亲密的一个月之后，其实之后就很平淡了，她之后有跟我说过，她觉得最开始的一个月她喜欢我，她愿意跟我做任何事情，但是她最近心理抗拒我，不想跟我有肢体接触。那一个月她觉得她很压抑，她觉得她压力很大，没有个人时间了。</p>\n<p>她其实算是个比较独立的女生，我在最开始认识的时候就有一点认知了。我觉得这样挺好的，一个女生自己很独立，有主见，有着自己喜欢的事情。从现实情况来说，她工资比我高一些，然后还有副业，副业可能比她的工资还高，我记得她跟我说过一句话就是 我是你在家里找过的最优秀的女人了吧。她很骄傲，她自己买了一套90w左右的房子，自己付了首付，确实挺强的，在我家的这个小城市确实很少女人可以做到。其实大部分的男的估计都不太行，我当然也是其中一部分。我和她相处起来，我是有点自卑的，学历她是研究生， 我只是本科，经济实力也不太行，还胖，她最初愿意和我谈的时候说 我可以给她提供情绪价值。我当时不太明白，现在我突然意识到，她似乎很知道自己的需求，而我却不是。</p>\n<p>在最后分手的之前，我拉黑过她一次，就是有点受不了这段关系了，很累，她几个月不让我牵手，我一直觉得我可以改变她，我以为她会慢慢变得回到从前那样，后来我发现，不太可能。我拉黑了她，之后我自己觉得放不下她于是就恢复了，她给我说，她最讨厌别人来黑她了。</p>\n<p>就在分手的前一个周六下午吧，她突然跟我说她要去附近的一个城市，问我有没有时间开车去送她，我肯定说有啊，于是我们就约定个时间出发了。她去另外一个城市找朋友玩，两对还是三对刚结婚的夫妻吧，那三个男的是她的高中同学。她为了这次去还专门化妆，假睫毛还专门找朋友去帮忙收拾一下。我给她送到附近城市的万达广场，就去保养车了，她不让我跟她的朋友见面，我只好去找我在当地的朋友，然后去和我的朋友，还有我朋友新谈的女朋友一起在万达吃饭。之后我就在电竞酒店开了一个房间，我们要一起玩lol。来的时候我也问过，她在哪里住？她说她朋友都结婚了，那个城市房价也不贵，她可以住在她朋友的家里，肯定有客房的。我说那我找我朋友玩啊，晚上我可能开个房间，你要不要一起？她说不要。我其实本来就可以直接回家的，我想着给她送来了， 第二天总要接她一起回家吧。到了第二天中午是的十一点多，我要回家的时候，我问她回不回去了？她说不回去了。我就自己回去了，到了下午两点多的时候，她才告诉我她被车撞了，在医院那。我很震惊，没想到去一趟还能发生这种事情，我问要不要我过去看看，她说不用。后来跟她交流，她说周六下午就撞了，周日才去医院而已。当时我也在那个城市，她都没有联系我，她只是叫了她父母过去。从这次事件我从真正意识到，我在心里是个什么位置，大抵也就是个普通朋友吧。</p>\n<p>我比较绝情，在她还没有好的时候，大概在周二周三的时候，再一次聊崩，我就提了再见，然后直接拉黑了，我当时很上头，就是要用她最讨厌的方式来分手。她其实从来没有在外人面前说我是她男朋友，她也不去见我的朋友，她说我的朋友都喜欢讲些家长里短的东西，她不喜欢，她只喜欢知道和赚钱有关的事情。在和她分手之后，我感觉很高兴，很释怀，突然有种压力释放的感觉，尽管我到现在还忍不住回想起那段在一起的美好时光，但是我知道，我们回不到从前了。其实后来相处的几个月中我都是说我们要坦诚相待，有啥说啥，不要藏在心里，尽管我知道不太可能完全，但是我也希望尽量，最后还是没有实现。哎，她不愿意改变自己，只能让我改变，那我凭啥要一直为她改变那？有时候真的不知道她是怎么想的。在之后的几个月的，她不怎么喜欢我了，也不和我分手啥的，这和她当初说的 要是有意愿在一起结婚才行，不要浪费彼此时间形成鲜明对比。</p>\n<p>最后我们两个的互相说彼此的缺点，其实最终的问题还是我们不对彼此喜欢了，于是就没有了那么高的容忍度，就开始说各种之前没有说过的缺点。其实还是不合适，我们不合适，仅此而已！</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"回忆起这段在老家的正式谈的第一段感情，还是有些感慨的。真是有种初听不知曲中意，再听已是曲中人的感觉。也懂了 人生若只初相见的感觉。\n\n起初我们两个是在相亲app上认识的，一上来聊天，简单聊了聊，她就开始问我家里的情况了，我感觉聊的还可以，也就真诚回答了，之后就加微信了，慢慢的就在一起了。当然似乎也没有特别正式的表白，这个她似乎也一直念念不忘来着。\n\n最初的一个月很好，两个人都是彼此想着对方，当然她工作比较忙，在国企上班，下班还自己搞兼职，当初高中语文的代课老师，基本上周五晚上，周六下午周日全天都在做这个兼职，对了周六上午她还要正常上班。她很忙，我的工作是没有那么忙，忙一阵子，闲一阵子。我们可能","more":"<p>起初我们两个是在相亲app上认识的，一上来聊天，简单聊了聊，她就开始问我家里的情况了，我感觉聊的还可以，也就真诚回答了，之后就加微信了，慢慢的就在一起了。当然似乎也没有特别正式的表白，这个她似乎也一直念念不忘来着。</p>\n<p>最初的一个月很好，两个人都是彼此想着对方，当然她工作比较忙，在国企上班，下班还自己搞兼职，当初高中语文的代课老师，基本上周五晚上，周六下午周日全天都在做这个兼职，对了周六上午她还要正常上班。她很忙，我的工作是没有那么忙，忙一阵子，闲一阵子。我们可能一周见一两次面吧，甚至一周见一次，两周见一次。中间发生了几件事情，大概就是我没有按照她想要的方式做，我说我以前就这样，慢慢的，她也不想改变我了，之后的日子其实挺无聊的，就是我每日早安晚安的问候，她有一搭没一搭的回复我。不让我打她电话，说她可能在忙，没啥事儿不要打电话，先微信问问，可不可以打电话。</p>\n<p>其实大概在我们认识一周的时候，我们已经发生过两次关系了，但是我没有想过那是我和她仅有的两次关系了。我总是开车到她小区门口等她，我们一起出去玩之后，把她送到她家门口，总是亲热一会才会念念不忘的离开。我那个时候还挺享受从我家开车到她家的这个时间的，听着音乐，去见自己喜欢的姑娘，很美好。从最开始亲密的一个月之后，其实之后就很平淡了，她之后有跟我说过，她觉得最开始的一个月她喜欢我，她愿意跟我做任何事情，但是她最近心理抗拒我，不想跟我有肢体接触。那一个月她觉得她很压抑，她觉得她压力很大，没有个人时间了。</p>\n<p>她其实算是个比较独立的女生，我在最开始认识的时候就有一点认知了。我觉得这样挺好的，一个女生自己很独立，有主见，有着自己喜欢的事情。从现实情况来说，她工资比我高一些，然后还有副业，副业可能比她的工资还高，我记得她跟我说过一句话就是 我是你在家里找过的最优秀的女人了吧。她很骄傲，她自己买了一套90w左右的房子，自己付了首付，确实挺强的，在我家的这个小城市确实很少女人可以做到。其实大部分的男的估计都不太行，我当然也是其中一部分。我和她相处起来，我是有点自卑的，学历她是研究生， 我只是本科，经济实力也不太行，还胖，她最初愿意和我谈的时候说 我可以给她提供情绪价值。我当时不太明白，现在我突然意识到，她似乎很知道自己的需求，而我却不是。</p>\n<p>在最后分手的之前，我拉黑过她一次，就是有点受不了这段关系了，很累，她几个月不让我牵手，我一直觉得我可以改变她，我以为她会慢慢变得回到从前那样，后来我发现，不太可能。我拉黑了她，之后我自己觉得放不下她于是就恢复了，她给我说，她最讨厌别人来黑她了。</p>\n<p>就在分手的前一个周六下午吧，她突然跟我说她要去附近的一个城市，问我有没有时间开车去送她，我肯定说有啊，于是我们就约定个时间出发了。她去另外一个城市找朋友玩，两对还是三对刚结婚的夫妻吧，那三个男的是她的高中同学。她为了这次去还专门化妆，假睫毛还专门找朋友去帮忙收拾一下。我给她送到附近城市的万达广场，就去保养车了，她不让我跟她的朋友见面，我只好去找我在当地的朋友，然后去和我的朋友，还有我朋友新谈的女朋友一起在万达吃饭。之后我就在电竞酒店开了一个房间，我们要一起玩lol。来的时候我也问过，她在哪里住？她说她朋友都结婚了，那个城市房价也不贵，她可以住在她朋友的家里，肯定有客房的。我说那我找我朋友玩啊，晚上我可能开个房间，你要不要一起？她说不要。我其实本来就可以直接回家的，我想着给她送来了， 第二天总要接她一起回家吧。到了第二天中午是的十一点多，我要回家的时候，我问她回不回去了？她说不回去了。我就自己回去了，到了下午两点多的时候，她才告诉我她被车撞了，在医院那。我很震惊，没想到去一趟还能发生这种事情，我问要不要我过去看看，她说不用。后来跟她交流，她说周六下午就撞了，周日才去医院而已。当时我也在那个城市，她都没有联系我，她只是叫了她父母过去。从这次事件我从真正意识到，我在心里是个什么位置，大抵也就是个普通朋友吧。</p>\n<p>我比较绝情，在她还没有好的时候，大概在周二周三的时候，再一次聊崩，我就提了再见，然后直接拉黑了，我当时很上头，就是要用她最讨厌的方式来分手。她其实从来没有在外人面前说我是她男朋友，她也不去见我的朋友，她说我的朋友都喜欢讲些家长里短的东西，她不喜欢，她只喜欢知道和赚钱有关的事情。在和她分手之后，我感觉很高兴，很释怀，突然有种压力释放的感觉，尽管我到现在还忍不住回想起那段在一起的美好时光，但是我知道，我们回不到从前了。其实后来相处的几个月中我都是说我们要坦诚相待，有啥说啥，不要藏在心里，尽管我知道不太可能完全，但是我也希望尽量，最后还是没有实现。哎，她不愿意改变自己，只能让我改变，那我凭啥要一直为她改变那？有时候真的不知道她是怎么想的。在之后的几个月的，她不怎么喜欢我了，也不和我分手啥的，这和她当初说的 要是有意愿在一起结婚才行，不要浪费彼此时间形成鲜明对比。</p>\n<p>最后我们两个的互相说彼此的缺点，其实最终的问题还是我们不对彼此喜欢了，于是就没有了那么高的容忍度，就开始说各种之前没有说过的缺点。其实还是不合适，我们不合适，仅此而已！</p>"},{"title":"2020年度总结","description":"","abbrlink":"276e22e","date":"2020-12-28T16:00:00.000Z","_content":"\n# 疫情\n\n\n\n犹记得就在上一年的12月份学校放假回家过年了，那时谁能预想到竟然会有一场席卷全球的风暴来了，竟然会在家连续待了几个月，都不带出门的，当然我也庆幸自己12月份回家了，否则学校放假迟一点，就赶上疫情爆发，就回不去家了。\n<!-- more -->\n\n回顾我这2020年，由于疫情，在家连续待了几个月，考研也没有考上，于是自学java几个月，使用java做了一个毕设，然后就开始找工作了。\n\n当时，都说2020年是最难的一年，都说这一年是很难找工作的，我考虑到自己的情况和自己又想转型做java，非常焦虑，害怕自己找不到工作，害怕毕业了还是要留在家里靠父母养活，感觉那样有点丢人。于是就开始我的找工作之旅，当时稚嫩的自己找了差不多一周吧，投了很多份简历在各种求职平台上，但是都没有什么回复，于是我就慌了，然后没几天之后，终于接到了一个电话，简单聊了几句之后，就可以去了，由于害怕自己找不到工作，于是就接受了这份工作，虽然不是做java开发的。这份工作很神奇，非常紧急，我记得我大概周五接的电话，周一就让到，到郑州之后，直接去广州出差，一入职就让去出差的公司，真的是闻所未闻，甚至我家人都以为这是个皮包公司，是骗人的，不是正经公司，结果到了，才发现，只是项目紧张而已。\n\n\n\n不知不觉从在广州出差了两个月，这两个月几乎都是996，没想到我一毕业就体验了996的生活，不知道是该高兴还是该难过，反正那段时间是挺难熬的，而且在那个项目组，由于项目紧张，没有老同志教我，都是靠自己学习的，关键是不是目前使用的主流技术，技术问题不会了，在互联网上也搜索不到，非常难受。终于在出差了两个月后，回到了郑州，当天就赶紧去租了房（要不没有地方住），在郑州的生活现在回想起来还是挺惬意的，早上九点上班，由于住的地方离公司非常近，所以可以八点多起床，路上买个早餐，慢慢悠悠的地去公司。不好的地方在于 总是不能够6点准时下班，往往要拖时间，这让我很不爽，而且干的工作也不是我想要的，于是开始往北京的公司投简历，不知道是因为我没有来过北京，还是说因为它是祖国的首都，虽然其他城市我同样想去，但是感觉自己对北京有一种执念，所以投的北京的公司。由于是在职然后求职，所以也不是很着急，但是由于当时任务比较繁重，感觉自己搞不了了，也是想早点跳槽，正好在这个契机，一家北京的公司打来电话，又是简单的聊了聊，说他们不是做java开发的，是图形化开发，java作为底层，python作为上层，不用接触代码，但是自己想看也可以，于是我傻傻的急急忙忙的同意了，然后也是非常紧急，三天后就要在北京入职了，于是当天我就在公司提了离职，由于公司比较坑，按理来说我来实习的日子就应该算是在实习期内的，但是公司说必须拿到毕业证之后才能算做实习期，所以按照公司的方式来说，我还在实习期，所以三天之内就可以离职，所以我当天给公司提了离职在之后，一个在外出差的领导在逃避我，不跟我谈论这个话题，我很着急，所以第二天直接找了另外一个领导，交了电脑和相关资料后，就又匆匆忙忙的来北京了。\n\n\n\n哎，怎么说那，我也不是非常有事业心的那种人，但是总是我觉得我还年轻，应该去外面闯荡一下，等到老了，有些东西了，会害怕失去了，就不会再有勇气想要去什么地方就去了。\n\n\n\n在北京的工作平常是在银行里面驻场开发，整天就是画图，每一天都感觉很漫长，和上一家一样，技术问题都无法在网上查阅到，更惨的是银行是内网开发，根本都上不了外网，感觉每天都是在煎熬，都在期待着下班。本来想着工作之余，自己多学习学习，提升自己的技术，因为自己并不想在这家公司长待，只是一个过渡期，没想到十一月份，自己还没有主动辞职，反倒是被公司主动辞退了。那个时候非常难受，虽然我认为自己工作的还不错，但是由于那个小领导不满意，只能被迫辞职了，比较怂的我也没有什么保证金。\n\n\n\n在被公司辞职找工作的时候，我明白了许多东西，懂的了家人的重要性，一生之中只有家人是不离不弃的，是我们永远的陪伴；真实且现实的认识到了金钱的重要性，哪里都需要钱，没有钱真的是寸步难行。非常感谢在我辞职期间，老妈老爸对我的支持，虽然他们工资不多，但是仍旧要帮我支付在北京的生活成本。\n\n\n\n12月份真的就是一边学习，一边找工作，每天都在紧张的学习和面试中度过，一开始面试的时候还非常紧张，不知道该如何回答，后来就慢慢熟悉和了解了，知道了一些面试套路，由于面试的都是一些小公司，所以面试的问题并不是非常难，都是网上一些常见的面试题，对于项目和java基础问的比较多，我准备好的jvm都没有怎么问，最终我是拿到了两家的offre，虽然也没有多少钱，但是对于我这紧急找工作的人来说，算还可以了，总算是有份工作了，不需要再问爸妈要钱了。\n\n\n\n目前是在新公司工作了一个月了，已经初步了解了公司的产品和开发流程，十来个人的小团队，用的说是springcloud，其实也就是用了个gateway，前端用的react，对于这一个月的开发，我分享一些收获。\n\n\n\n1. 深刻理解了大部分公司都是技术服务于业务，作为一名专业的程序开发人员，你不仅要非常熟悉开发工具和语言，同时还要熟悉业务，因为业务往往提的需求是非常模糊的，需要你从开发的角度来思考，思考需求应该提供一些别的信息，以此来避免开发过程中需求不明确的情况。\n\n2. 我们开发人员并不需要拘泥于某一种开发语言，而是要博采众长，需要什么，学什么，一种开发语言只是实现开发目的一种选择，并不是必要条件，只是相对来说更符合性能需求而已\n\n3. 自己平时需要学习一点技术东西，深入原理的学习，这样才可以保证自己不被后浪拍死在沙滩上\n\n4. 之前以为不就是日常学习吗？有什么时候难的，工作了之后才发现，工作了一天之后已经累的不行了，会会到家里只想躺着，根本没有什心思学习。所以我决定给自己降低期待，每天问问自己，今天有没有学到一些新的知识点，每天睡前都要问自己，“你是不是比昨天更博学了”\n","source":"_posts/2020年度总结.md","raw":"---\ntitle: 2020年度总结\ndescription: ''\ntags:\n  - 年度总结\nabbrlink: 276e22e\ndate: 2020-12-29 00:00:00\n---\n\n# 疫情\n\n\n\n犹记得就在上一年的12月份学校放假回家过年了，那时谁能预想到竟然会有一场席卷全球的风暴来了，竟然会在家连续待了几个月，都不带出门的，当然我也庆幸自己12月份回家了，否则学校放假迟一点，就赶上疫情爆发，就回不去家了。\n<!-- more -->\n\n回顾我这2020年，由于疫情，在家连续待了几个月，考研也没有考上，于是自学java几个月，使用java做了一个毕设，然后就开始找工作了。\n\n当时，都说2020年是最难的一年，都说这一年是很难找工作的，我考虑到自己的情况和自己又想转型做java，非常焦虑，害怕自己找不到工作，害怕毕业了还是要留在家里靠父母养活，感觉那样有点丢人。于是就开始我的找工作之旅，当时稚嫩的自己找了差不多一周吧，投了很多份简历在各种求职平台上，但是都没有什么回复，于是我就慌了，然后没几天之后，终于接到了一个电话，简单聊了几句之后，就可以去了，由于害怕自己找不到工作，于是就接受了这份工作，虽然不是做java开发的。这份工作很神奇，非常紧急，我记得我大概周五接的电话，周一就让到，到郑州之后，直接去广州出差，一入职就让去出差的公司，真的是闻所未闻，甚至我家人都以为这是个皮包公司，是骗人的，不是正经公司，结果到了，才发现，只是项目紧张而已。\n\n\n\n不知不觉从在广州出差了两个月，这两个月几乎都是996，没想到我一毕业就体验了996的生活，不知道是该高兴还是该难过，反正那段时间是挺难熬的，而且在那个项目组，由于项目紧张，没有老同志教我，都是靠自己学习的，关键是不是目前使用的主流技术，技术问题不会了，在互联网上也搜索不到，非常难受。终于在出差了两个月后，回到了郑州，当天就赶紧去租了房（要不没有地方住），在郑州的生活现在回想起来还是挺惬意的，早上九点上班，由于住的地方离公司非常近，所以可以八点多起床，路上买个早餐，慢慢悠悠的地去公司。不好的地方在于 总是不能够6点准时下班，往往要拖时间，这让我很不爽，而且干的工作也不是我想要的，于是开始往北京的公司投简历，不知道是因为我没有来过北京，还是说因为它是祖国的首都，虽然其他城市我同样想去，但是感觉自己对北京有一种执念，所以投的北京的公司。由于是在职然后求职，所以也不是很着急，但是由于当时任务比较繁重，感觉自己搞不了了，也是想早点跳槽，正好在这个契机，一家北京的公司打来电话，又是简单的聊了聊，说他们不是做java开发的，是图形化开发，java作为底层，python作为上层，不用接触代码，但是自己想看也可以，于是我傻傻的急急忙忙的同意了，然后也是非常紧急，三天后就要在北京入职了，于是当天我就在公司提了离职，由于公司比较坑，按理来说我来实习的日子就应该算是在实习期内的，但是公司说必须拿到毕业证之后才能算做实习期，所以按照公司的方式来说，我还在实习期，所以三天之内就可以离职，所以我当天给公司提了离职在之后，一个在外出差的领导在逃避我，不跟我谈论这个话题，我很着急，所以第二天直接找了另外一个领导，交了电脑和相关资料后，就又匆匆忙忙的来北京了。\n\n\n\n哎，怎么说那，我也不是非常有事业心的那种人，但是总是我觉得我还年轻，应该去外面闯荡一下，等到老了，有些东西了，会害怕失去了，就不会再有勇气想要去什么地方就去了。\n\n\n\n在北京的工作平常是在银行里面驻场开发，整天就是画图，每一天都感觉很漫长，和上一家一样，技术问题都无法在网上查阅到，更惨的是银行是内网开发，根本都上不了外网，感觉每天都是在煎熬，都在期待着下班。本来想着工作之余，自己多学习学习，提升自己的技术，因为自己并不想在这家公司长待，只是一个过渡期，没想到十一月份，自己还没有主动辞职，反倒是被公司主动辞退了。那个时候非常难受，虽然我认为自己工作的还不错，但是由于那个小领导不满意，只能被迫辞职了，比较怂的我也没有什么保证金。\n\n\n\n在被公司辞职找工作的时候，我明白了许多东西，懂的了家人的重要性，一生之中只有家人是不离不弃的，是我们永远的陪伴；真实且现实的认识到了金钱的重要性，哪里都需要钱，没有钱真的是寸步难行。非常感谢在我辞职期间，老妈老爸对我的支持，虽然他们工资不多，但是仍旧要帮我支付在北京的生活成本。\n\n\n\n12月份真的就是一边学习，一边找工作，每天都在紧张的学习和面试中度过，一开始面试的时候还非常紧张，不知道该如何回答，后来就慢慢熟悉和了解了，知道了一些面试套路，由于面试的都是一些小公司，所以面试的问题并不是非常难，都是网上一些常见的面试题，对于项目和java基础问的比较多，我准备好的jvm都没有怎么问，最终我是拿到了两家的offre，虽然也没有多少钱，但是对于我这紧急找工作的人来说，算还可以了，总算是有份工作了，不需要再问爸妈要钱了。\n\n\n\n目前是在新公司工作了一个月了，已经初步了解了公司的产品和开发流程，十来个人的小团队，用的说是springcloud，其实也就是用了个gateway，前端用的react，对于这一个月的开发，我分享一些收获。\n\n\n\n1. 深刻理解了大部分公司都是技术服务于业务，作为一名专业的程序开发人员，你不仅要非常熟悉开发工具和语言，同时还要熟悉业务，因为业务往往提的需求是非常模糊的，需要你从开发的角度来思考，思考需求应该提供一些别的信息，以此来避免开发过程中需求不明确的情况。\n\n2. 我们开发人员并不需要拘泥于某一种开发语言，而是要博采众长，需要什么，学什么，一种开发语言只是实现开发目的一种选择，并不是必要条件，只是相对来说更符合性能需求而已\n\n3. 自己平时需要学习一点技术东西，深入原理的学习，这样才可以保证自己不被后浪拍死在沙滩上\n\n4. 之前以为不就是日常学习吗？有什么时候难的，工作了之后才发现，工作了一天之后已经累的不行了，会会到家里只想躺着，根本没有什心思学习。所以我决定给自己降低期待，每天问问自己，今天有没有学到一些新的知识点，每天睡前都要问自己，“你是不是比昨天更博学了”\n","slug":"2020年度总结","published":1,"updated":"2025-03-02T03:37:34.356Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp440003n0ukbplkc0h9","content":"<h1 id=\"疫情\"><a href=\"#疫情\" class=\"headerlink\" title=\"疫情\"></a>疫情</h1><p>犹记得就在上一年的12月份学校放假回家过年了，那时谁能预想到竟然会有一场席卷全球的风暴来了，竟然会在家连续待了几个月，都不带出门的，当然我也庆幸自己12月份回家了，否则学校放假迟一点，就赶上疫情爆发，就回不去家了。</p>\n<span id=\"more\"></span>\n\n<p>回顾我这2020年，由于疫情，在家连续待了几个月，考研也没有考上，于是自学java几个月，使用java做了一个毕设，然后就开始找工作了。</p>\n<p>当时，都说2020年是最难的一年，都说这一年是很难找工作的，我考虑到自己的情况和自己又想转型做java，非常焦虑，害怕自己找不到工作，害怕毕业了还是要留在家里靠父母养活，感觉那样有点丢人。于是就开始我的找工作之旅，当时稚嫩的自己找了差不多一周吧，投了很多份简历在各种求职平台上，但是都没有什么回复，于是我就慌了，然后没几天之后，终于接到了一个电话，简单聊了几句之后，就可以去了，由于害怕自己找不到工作，于是就接受了这份工作，虽然不是做java开发的。这份工作很神奇，非常紧急，我记得我大概周五接的电话，周一就让到，到郑州之后，直接去广州出差，一入职就让去出差的公司，真的是闻所未闻，甚至我家人都以为这是个皮包公司，是骗人的，不是正经公司，结果到了，才发现，只是项目紧张而已。</p>\n<p>不知不觉从在广州出差了两个月，这两个月几乎都是996，没想到我一毕业就体验了996的生活，不知道是该高兴还是该难过，反正那段时间是挺难熬的，而且在那个项目组，由于项目紧张，没有老同志教我，都是靠自己学习的，关键是不是目前使用的主流技术，技术问题不会了，在互联网上也搜索不到，非常难受。终于在出差了两个月后，回到了郑州，当天就赶紧去租了房（要不没有地方住），在郑州的生活现在回想起来还是挺惬意的，早上九点上班，由于住的地方离公司非常近，所以可以八点多起床，路上买个早餐，慢慢悠悠的地去公司。不好的地方在于 总是不能够6点准时下班，往往要拖时间，这让我很不爽，而且干的工作也不是我想要的，于是开始往北京的公司投简历，不知道是因为我没有来过北京，还是说因为它是祖国的首都，虽然其他城市我同样想去，但是感觉自己对北京有一种执念，所以投的北京的公司。由于是在职然后求职，所以也不是很着急，但是由于当时任务比较繁重，感觉自己搞不了了，也是想早点跳槽，正好在这个契机，一家北京的公司打来电话，又是简单的聊了聊，说他们不是做java开发的，是图形化开发，java作为底层，python作为上层，不用接触代码，但是自己想看也可以，于是我傻傻的急急忙忙的同意了，然后也是非常紧急，三天后就要在北京入职了，于是当天我就在公司提了离职，由于公司比较坑，按理来说我来实习的日子就应该算是在实习期内的，但是公司说必须拿到毕业证之后才能算做实习期，所以按照公司的方式来说，我还在实习期，所以三天之内就可以离职，所以我当天给公司提了离职在之后，一个在外出差的领导在逃避我，不跟我谈论这个话题，我很着急，所以第二天直接找了另外一个领导，交了电脑和相关资料后，就又匆匆忙忙的来北京了。</p>\n<p>哎，怎么说那，我也不是非常有事业心的那种人，但是总是我觉得我还年轻，应该去外面闯荡一下，等到老了，有些东西了，会害怕失去了，就不会再有勇气想要去什么地方就去了。</p>\n<p>在北京的工作平常是在银行里面驻场开发，整天就是画图，每一天都感觉很漫长，和上一家一样，技术问题都无法在网上查阅到，更惨的是银行是内网开发，根本都上不了外网，感觉每天都是在煎熬，都在期待着下班。本来想着工作之余，自己多学习学习，提升自己的技术，因为自己并不想在这家公司长待，只是一个过渡期，没想到十一月份，自己还没有主动辞职，反倒是被公司主动辞退了。那个时候非常难受，虽然我认为自己工作的还不错，但是由于那个小领导不满意，只能被迫辞职了，比较怂的我也没有什么保证金。</p>\n<p>在被公司辞职找工作的时候，我明白了许多东西，懂的了家人的重要性，一生之中只有家人是不离不弃的，是我们永远的陪伴；真实且现实的认识到了金钱的重要性，哪里都需要钱，没有钱真的是寸步难行。非常感谢在我辞职期间，老妈老爸对我的支持，虽然他们工资不多，但是仍旧要帮我支付在北京的生活成本。</p>\n<p>12月份真的就是一边学习，一边找工作，每天都在紧张的学习和面试中度过，一开始面试的时候还非常紧张，不知道该如何回答，后来就慢慢熟悉和了解了，知道了一些面试套路，由于面试的都是一些小公司，所以面试的问题并不是非常难，都是网上一些常见的面试题，对于项目和java基础问的比较多，我准备好的jvm都没有怎么问，最终我是拿到了两家的offre，虽然也没有多少钱，但是对于我这紧急找工作的人来说，算还可以了，总算是有份工作了，不需要再问爸妈要钱了。</p>\n<p>目前是在新公司工作了一个月了，已经初步了解了公司的产品和开发流程，十来个人的小团队，用的说是springcloud，其实也就是用了个gateway，前端用的react，对于这一个月的开发，我分享一些收获。</p>\n<ol>\n<li><p>深刻理解了大部分公司都是技术服务于业务，作为一名专业的程序开发人员，你不仅要非常熟悉开发工具和语言，同时还要熟悉业务，因为业务往往提的需求是非常模糊的，需要你从开发的角度来思考，思考需求应该提供一些别的信息，以此来避免开发过程中需求不明确的情况。</p>\n</li>\n<li><p>我们开发人员并不需要拘泥于某一种开发语言，而是要博采众长，需要什么，学什么，一种开发语言只是实现开发目的一种选择，并不是必要条件，只是相对来说更符合性能需求而已</p>\n</li>\n<li><p>自己平时需要学习一点技术东西，深入原理的学习，这样才可以保证自己不被后浪拍死在沙滩上</p>\n</li>\n<li><p>之前以为不就是日常学习吗？有什么时候难的，工作了之后才发现，工作了一天之后已经累的不行了，会会到家里只想躺着，根本没有什心思学习。所以我决定给自己降低期待，每天问问自己，今天有没有学到一些新的知识点，每天睡前都要问自己，“你是不是比昨天更博学了”</p>\n</li>\n</ol>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"疫情\n犹记得就在上一年的12月份学校放假回家过年了，那时谁能预想到竟然会有一场席卷全球的风暴来了，竟然会在家连续待了几个月，都不带出门的，当然我也庆幸自己12月份回家了，否则学校放假迟一点，就赶上疫情爆发，就回不去家了。\n\n回顾我这2020年，由于疫情，在家连续待了几个月，考研也没有考上，于是自学java几个月，使用java做了一个毕设，然后就开始找工作了。\n\n当时，都说2020年是最难的一年，都说这一年是很难找工作的，我考虑到自己的情况和自己又想转型做java，非常焦虑，害怕自己找不到工作，害怕毕业了还是要留在家里靠父母养活，感觉那样有点丢人。于是就开始我的找工作之旅，当时稚嫩的自己找了差不","more":"<p>回顾我这2020年，由于疫情，在家连续待了几个月，考研也没有考上，于是自学java几个月，使用java做了一个毕设，然后就开始找工作了。</p>\n<p>当时，都说2020年是最难的一年，都说这一年是很难找工作的，我考虑到自己的情况和自己又想转型做java，非常焦虑，害怕自己找不到工作，害怕毕业了还是要留在家里靠父母养活，感觉那样有点丢人。于是就开始我的找工作之旅，当时稚嫩的自己找了差不多一周吧，投了很多份简历在各种求职平台上，但是都没有什么回复，于是我就慌了，然后没几天之后，终于接到了一个电话，简单聊了几句之后，就可以去了，由于害怕自己找不到工作，于是就接受了这份工作，虽然不是做java开发的。这份工作很神奇，非常紧急，我记得我大概周五接的电话，周一就让到，到郑州之后，直接去广州出差，一入职就让去出差的公司，真的是闻所未闻，甚至我家人都以为这是个皮包公司，是骗人的，不是正经公司，结果到了，才发现，只是项目紧张而已。</p>\n<p>不知不觉从在广州出差了两个月，这两个月几乎都是996，没想到我一毕业就体验了996的生活，不知道是该高兴还是该难过，反正那段时间是挺难熬的，而且在那个项目组，由于项目紧张，没有老同志教我，都是靠自己学习的，关键是不是目前使用的主流技术，技术问题不会了，在互联网上也搜索不到，非常难受。终于在出差了两个月后，回到了郑州，当天就赶紧去租了房（要不没有地方住），在郑州的生活现在回想起来还是挺惬意的，早上九点上班，由于住的地方离公司非常近，所以可以八点多起床，路上买个早餐，慢慢悠悠的地去公司。不好的地方在于 总是不能够6点准时下班，往往要拖时间，这让我很不爽，而且干的工作也不是我想要的，于是开始往北京的公司投简历，不知道是因为我没有来过北京，还是说因为它是祖国的首都，虽然其他城市我同样想去，但是感觉自己对北京有一种执念，所以投的北京的公司。由于是在职然后求职，所以也不是很着急，但是由于当时任务比较繁重，感觉自己搞不了了，也是想早点跳槽，正好在这个契机，一家北京的公司打来电话，又是简单的聊了聊，说他们不是做java开发的，是图形化开发，java作为底层，python作为上层，不用接触代码，但是自己想看也可以，于是我傻傻的急急忙忙的同意了，然后也是非常紧急，三天后就要在北京入职了，于是当天我就在公司提了离职，由于公司比较坑，按理来说我来实习的日子就应该算是在实习期内的，但是公司说必须拿到毕业证之后才能算做实习期，所以按照公司的方式来说，我还在实习期，所以三天之内就可以离职，所以我当天给公司提了离职在之后，一个在外出差的领导在逃避我，不跟我谈论这个话题，我很着急，所以第二天直接找了另外一个领导，交了电脑和相关资料后，就又匆匆忙忙的来北京了。</p>\n<p>哎，怎么说那，我也不是非常有事业心的那种人，但是总是我觉得我还年轻，应该去外面闯荡一下，等到老了，有些东西了，会害怕失去了，就不会再有勇气想要去什么地方就去了。</p>\n<p>在北京的工作平常是在银行里面驻场开发，整天就是画图，每一天都感觉很漫长，和上一家一样，技术问题都无法在网上查阅到，更惨的是银行是内网开发，根本都上不了外网，感觉每天都是在煎熬，都在期待着下班。本来想着工作之余，自己多学习学习，提升自己的技术，因为自己并不想在这家公司长待，只是一个过渡期，没想到十一月份，自己还没有主动辞职，反倒是被公司主动辞退了。那个时候非常难受，虽然我认为自己工作的还不错，但是由于那个小领导不满意，只能被迫辞职了，比较怂的我也没有什么保证金。</p>\n<p>在被公司辞职找工作的时候，我明白了许多东西，懂的了家人的重要性，一生之中只有家人是不离不弃的，是我们永远的陪伴；真实且现实的认识到了金钱的重要性，哪里都需要钱，没有钱真的是寸步难行。非常感谢在我辞职期间，老妈老爸对我的支持，虽然他们工资不多，但是仍旧要帮我支付在北京的生活成本。</p>\n<p>12月份真的就是一边学习，一边找工作，每天都在紧张的学习和面试中度过，一开始面试的时候还非常紧张，不知道该如何回答，后来就慢慢熟悉和了解了，知道了一些面试套路，由于面试的都是一些小公司，所以面试的问题并不是非常难，都是网上一些常见的面试题，对于项目和java基础问的比较多，我准备好的jvm都没有怎么问，最终我是拿到了两家的offre，虽然也没有多少钱，但是对于我这紧急找工作的人来说，算还可以了，总算是有份工作了，不需要再问爸妈要钱了。</p>\n<p>目前是在新公司工作了一个月了，已经初步了解了公司的产品和开发流程，十来个人的小团队，用的说是springcloud，其实也就是用了个gateway，前端用的react，对于这一个月的开发，我分享一些收获。</p>\n<ol>\n<li><p>深刻理解了大部分公司都是技术服务于业务，作为一名专业的程序开发人员，你不仅要非常熟悉开发工具和语言，同时还要熟悉业务，因为业务往往提的需求是非常模糊的，需要你从开发的角度来思考，思考需求应该提供一些别的信息，以此来避免开发过程中需求不明确的情况。</p>\n</li>\n<li><p>我们开发人员并不需要拘泥于某一种开发语言，而是要博采众长，需要什么，学什么，一种开发语言只是实现开发目的一种选择，并不是必要条件，只是相对来说更符合性能需求而已</p>\n</li>\n<li><p>自己平时需要学习一点技术东西，深入原理的学习，这样才可以保证自己不被后浪拍死在沙滩上</p>\n</li>\n<li><p>之前以为不就是日常学习吗？有什么时候难的，工作了之后才发现，工作了一天之后已经累的不行了，会会到家里只想躺着，根本没有什心思学习。所以我决定给自己降低期待，每天问问自己，今天有没有学到一些新的知识点，每天睡前都要问自己，“你是不是比昨天更博学了”</p>\n</li>\n</ol>"},{"title":"2021年度总结","description":"","abbrlink":"dfe03bab","date":"2021-12-24T16:00:00.000Z","_content":"\n\n\n\n看到掘金又是让大家写2021自己的感悟，我也来凑凑热闹，回顾一下我的2021。\n\n<!-- more -->\n\n# 毕业一年半\n\n\n\n是啊，我是2020年毕业的，到现在已经一年多了吧，这一年在社会上经历过的毒打可真是不少啊，下面就请听我一一道来。\n\n\n\n## 刚毕业的工作选择\n\n\n\n在2020年初的时候，爆发了疫情，相信大家也都知道了，我是侥幸提前回到了家，在学校时候，是在准备考研，过了考研考试之后就回家了，回家之后，感觉自己考的不行，于是就开始在家在b站开始自学java，学了几个月后，得到了我确实没有考上研，连国家线都没有过，伤心难过一段时间之后就开始准备面试了。当时的我，由于疫情原因，也没有去参加春招，只能就是在boss上投简历，然后面试，不记得具体情况了，反正就是自己在没有工作的压力下，最终去了家乡省会的一个公司，这家公司的总公司在北京，省会的只是一个分公司。我在找工作的时候，一直想找的都是java后端的工作，结果自己由于太焦虑，感觉自己毕业了，连个工作都找不到，于是就急急忙忙的选择了一家公司，这个工作并不是我想要的java后端的工作，而是一种画图的工作，这家公司干到八月底的时候，觉得不行，还是要去找java开发的工作，等着内部转岗都不知道等到猴年马月了，于是就面试了一段时间北京的公司，结果都没有人搭理我，当时好不容易有一个公司答应我了，对于当时我来说就是一个救命稻草，我就直接决定去了，当时的我在之前的公司快要转正了，但是我还是决定来北京发展。虽然当时面试的时候 跟我说 不是java开发的工作，但是底层是java，我还在好奇，这到底是什么公司那，不用java，但是底层是java这我可以吗？于是决定去看看。结果也是一个图形化的操作，他们的客户是银行，和银行合作几十年了，然后做出来这种的图形化操作，当时身上那这8000块钱来到北京，结果一到北京交完房租都没有多少了，所以就想着在这个工资干一段时间，然后努力学习，换一个真正java后端的工作。\n\n\n\n我当时其实是在银行里面做的开发，就是那种图像化操作的界面，不记得是由于什么原因了，银行那边的人对我不满意，不要我了，然后说是由于我 态度问题还是什么的，让我们公司的人，也不需要给我找其他工作了，直接辞退我吧。于是乎，我就这样经历了 人生中 第一次 被辞退。\n\n\n\n当时的我还是很慌的，没有了经济来源，再加上北京高额的消费，当时租房是一个月2600，在芍药居附近租了一个小卧室，加上吃饭什么的，一个月基础消费5000。 每天都在焦虑之中，害怕自己没有工作没有收入来源，就无法支撑住在北京的生活，难道我大学毕业了开始工作了，自己还养活不了自己？ 还要问自己的父母要钱？\n\n但是最终我还是跟父母说了情况，然后他们就立马给我打了几千块钱。哎，钱到手的时候很复杂，觉得自己这么多年都是白上学了，毕业还要家里给钱。\n\n\n\n终于在我面试了一个月后，拿到两个公司的offer，都是要前后端都写的，经过了我的一番纠结之后，我去了其中的一家公司，这家公司怎么说那，说是有自己的产品，但是由于这种面试b端 企业级用户的，大部分情况下单靠公司的产品是无法满足客户的需要，都是需要驻场开发，在甲方的内网环境下进行开发。所以我最终的工作地点是甲方公司的地址，我在那里才真正开始了我的java生涯，虽然也是需要写react的，在那里待了几个月吧，然后由于一个非常奇怪、无法解释的原因，我，是的我，又一次被辞退了，有了第一辞退的经历，我也算是有了一些底气，然后和公司谈判，多拿了一个月的工资然后主动离职的。\n\n\n\n大概是就是在21年五月份的时候吧，在我找了两周还是一个月之后，又拿到了两个offer，一开始是去其中一家办了入职手续，体验了下 公司的项目什么的，没有想到也是外包，而且项目感觉也不好，就直接走了。然后就去了另一家入职，本来以为说是终于是入职到了一个甲方公司了，谁能想到 这个公司也是给银行做开发的，虽然是在自己的办公场地办公，但是由于是给银行做的开发，使用的框架都非常老，ssm+hibernate+jsp，迫于生计，我又在那个公司干了几个月，本来都是打算这一次好好干，起码在一个公司待一年吧，结果是 转正考试没有通过，然后就让我离职了，这是第三次的被迫离职了。这个公司的转正考试很搞笑，就是一些完全和开发不相关的金融业务知识，和业务有非常大的关系。考完之后我还专门问老员工，都说这个是无所谓的，以前他们也都是没有考过的，决定不了什么，结果确实把我辞退了，不知道是针对我还是怎么的。因为和我一起入职的几个人，都在我之前离职了，而我由于和那几个小伙伴一起离职，吃饭什么的都一起，领导因为那几个人都离职了，所以迁怒于我吗？ 当然，领导的想法也不会告诉我，这只是我的一些揣测。\n\n\n\n时间来到了十月份，在国庆回家之后，我又一次开始了艰难的面试之旅，这一次也很难，也许是因为各方面都比较差，所以在面试的时候，都是感觉很难。面试了大概两周左右吧，期间由于我的简历比较差，一直决定说再也不去外包的我，最终还是选择了投递一些外包，拿到两个 其实都算是外包，一个是医疗相关的，整个项目组驻场在一个地方，一个是养老相关的，说是用了微服务，是人力外包，现在就是在这个外包地方写下了这篇文章。\n\n\n\n## 总结\n\n\n\n其实我也没有仔细去思考过这一年多的经历，现在写着写着突然发现，我已经换了四家公司了，目前所在的是第五家公司，这其中只有一家公司转正了，其余几家都是因为各种原因被辞退了，不由得感叹，自己这经历也是没谁了，估计是过去这一年经历最坎坷的人了。\n\n\n\n# 工作看法\n\n\n\n要说我现在对于刚毕业的学生一些建议的话，我的建议就是\n\n\n\n一定要重视校招，一定要重视校招，一定要重视校招！！！\n\n\n\n重要的事情说三遍 嘿嘿。\n\n\n\n说实话，在没有毕业之前，我是没有发现，校招原来这么重要，应届生的身份原来这么重要的，第一份工作也这么重要。\n\n\n\n一定要重视第一份工作，一定要重视第一份工作，一定要重视第一份工作！！！\n\n\n\n# 辞职\n\n\n\n## 被动辞职\n\n\n\n如果你是被辞退了，不要慌，去看一看劳动合同法的相关内容，如果不是非常严重的情况，劳动法是不允许企业随便辞退员工的，这个时候，如果领导铁心让你离职，那你就去和他谈判，拿到补偿金之后再主动离职，千万别傻乎乎自己辞职了，还要开始辛苦的找工作，没必要的其实，而且这事儿也不是大家想象中的那么难搞，相对来说 还行，就是 没有经历过的人会觉得很恐怖的。\n\n\n\n## 主动辞职\n\n\n\n一般来说，是建议拿到新的offer之后再去辞职的，如果你是裸辞的话，风险比较大，当然这也是可以的，但是这和一个东西有关系，就是你的存款，如果你的存款还可以，可以支撑你几个月不上班的，那这其实无所谓，因为这样，你不会太快的陷入到 对于没有工作的焦虑之中，但是这种一般都不是刚毕业的吧，因为我们这刚毕业的根本存不了钱。\n\n\n\n对于刚毕业几年的人来说，一定要慎重考虑裸辞的风险，自己再三思考过后觉得可以承担这样的风险的，可以裸辞，至于我们普通人还是 老老实实的骑驴找马吧。\n\n\n\n# 租房的坑\n\n\n\n租房其实主要看以下几点就可以了\n\n\n\n1. 交通情况\n\n2. 房子干净情况\n\n3. 房子面积\n\n4. 正常家具是否齐全，起码要有一个床，一个桌子，一个凳子，一个衣柜的（这是合租的）\n\n5. 热水是否好用，暖气是否好用\n\n6. 注意看合同期限，不要自己搬家的时候，都不知道到期了没有，就直接搬家了，导致的结果就是白白损失了一个月的房租，不要问我怎么知道的，我经历过，扔了2000多块。\n\n\n\n# 学习成果\n\n\n\n这一年多一来，我的学习成果不少，学了不少的东西，但是总是感觉自己没有用过，所以一直心里没有底，对于我们javer而言主要就是下面这些知识吧！\n\n\n\n1. java 基础，并发，常见的api，锁，事务，AQS,synchronized,volatile JVM\n\n2. spring相关，bean的生命周期，常用注解，IOC，AOP\n\n3. springcloud，主要是Netflix的一套，和阿里巴巴的一套\n\n4. 数据库，oracle mysql redis MongoDB 等其他\n\n5. 中间件 mq ngnix 数据库同步工具 等\n\n6. 运维的东西 doker k8s 等\n\n\n\n上面这些东西我大多都涉猎过，但是都没有怎么实战过，所以之后的话，还是围绕这些东西来进行学习的，只是说 会比以前更深入一些。\n\n\n\n# 未来展望\n\n\n\n希望自己明年可以进入到一个有自研产品的、流量还不错的、使用的是市场上主流技术的公司吧！！！\n","source":"_posts/2021年度总结.md","raw":"---\ntitle: 2021年度总结\ndescription: ''\ntags:\n  - 年度总结\nabbrlink: dfe03bab\ndate: 2021-12-25 00:00:00\n---\n\n\n\n\n看到掘金又是让大家写2021自己的感悟，我也来凑凑热闹，回顾一下我的2021。\n\n<!-- more -->\n\n# 毕业一年半\n\n\n\n是啊，我是2020年毕业的，到现在已经一年多了吧，这一年在社会上经历过的毒打可真是不少啊，下面就请听我一一道来。\n\n\n\n## 刚毕业的工作选择\n\n\n\n在2020年初的时候，爆发了疫情，相信大家也都知道了，我是侥幸提前回到了家，在学校时候，是在准备考研，过了考研考试之后就回家了，回家之后，感觉自己考的不行，于是就开始在家在b站开始自学java，学了几个月后，得到了我确实没有考上研，连国家线都没有过，伤心难过一段时间之后就开始准备面试了。当时的我，由于疫情原因，也没有去参加春招，只能就是在boss上投简历，然后面试，不记得具体情况了，反正就是自己在没有工作的压力下，最终去了家乡省会的一个公司，这家公司的总公司在北京，省会的只是一个分公司。我在找工作的时候，一直想找的都是java后端的工作，结果自己由于太焦虑，感觉自己毕业了，连个工作都找不到，于是就急急忙忙的选择了一家公司，这个工作并不是我想要的java后端的工作，而是一种画图的工作，这家公司干到八月底的时候，觉得不行，还是要去找java开发的工作，等着内部转岗都不知道等到猴年马月了，于是就面试了一段时间北京的公司，结果都没有人搭理我，当时好不容易有一个公司答应我了，对于当时我来说就是一个救命稻草，我就直接决定去了，当时的我在之前的公司快要转正了，但是我还是决定来北京发展。虽然当时面试的时候 跟我说 不是java开发的工作，但是底层是java，我还在好奇，这到底是什么公司那，不用java，但是底层是java这我可以吗？于是决定去看看。结果也是一个图形化的操作，他们的客户是银行，和银行合作几十年了，然后做出来这种的图形化操作，当时身上那这8000块钱来到北京，结果一到北京交完房租都没有多少了，所以就想着在这个工资干一段时间，然后努力学习，换一个真正java后端的工作。\n\n\n\n我当时其实是在银行里面做的开发，就是那种图像化操作的界面，不记得是由于什么原因了，银行那边的人对我不满意，不要我了，然后说是由于我 态度问题还是什么的，让我们公司的人，也不需要给我找其他工作了，直接辞退我吧。于是乎，我就这样经历了 人生中 第一次 被辞退。\n\n\n\n当时的我还是很慌的，没有了经济来源，再加上北京高额的消费，当时租房是一个月2600，在芍药居附近租了一个小卧室，加上吃饭什么的，一个月基础消费5000。 每天都在焦虑之中，害怕自己没有工作没有收入来源，就无法支撑住在北京的生活，难道我大学毕业了开始工作了，自己还养活不了自己？ 还要问自己的父母要钱？\n\n但是最终我还是跟父母说了情况，然后他们就立马给我打了几千块钱。哎，钱到手的时候很复杂，觉得自己这么多年都是白上学了，毕业还要家里给钱。\n\n\n\n终于在我面试了一个月后，拿到两个公司的offer，都是要前后端都写的，经过了我的一番纠结之后，我去了其中的一家公司，这家公司怎么说那，说是有自己的产品，但是由于这种面试b端 企业级用户的，大部分情况下单靠公司的产品是无法满足客户的需要，都是需要驻场开发，在甲方的内网环境下进行开发。所以我最终的工作地点是甲方公司的地址，我在那里才真正开始了我的java生涯，虽然也是需要写react的，在那里待了几个月吧，然后由于一个非常奇怪、无法解释的原因，我，是的我，又一次被辞退了，有了第一辞退的经历，我也算是有了一些底气，然后和公司谈判，多拿了一个月的工资然后主动离职的。\n\n\n\n大概是就是在21年五月份的时候吧，在我找了两周还是一个月之后，又拿到了两个offer，一开始是去其中一家办了入职手续，体验了下 公司的项目什么的，没有想到也是外包，而且项目感觉也不好，就直接走了。然后就去了另一家入职，本来以为说是终于是入职到了一个甲方公司了，谁能想到 这个公司也是给银行做开发的，虽然是在自己的办公场地办公，但是由于是给银行做的开发，使用的框架都非常老，ssm+hibernate+jsp，迫于生计，我又在那个公司干了几个月，本来都是打算这一次好好干，起码在一个公司待一年吧，结果是 转正考试没有通过，然后就让我离职了，这是第三次的被迫离职了。这个公司的转正考试很搞笑，就是一些完全和开发不相关的金融业务知识，和业务有非常大的关系。考完之后我还专门问老员工，都说这个是无所谓的，以前他们也都是没有考过的，决定不了什么，结果确实把我辞退了，不知道是针对我还是怎么的。因为和我一起入职的几个人，都在我之前离职了，而我由于和那几个小伙伴一起离职，吃饭什么的都一起，领导因为那几个人都离职了，所以迁怒于我吗？ 当然，领导的想法也不会告诉我，这只是我的一些揣测。\n\n\n\n时间来到了十月份，在国庆回家之后，我又一次开始了艰难的面试之旅，这一次也很难，也许是因为各方面都比较差，所以在面试的时候，都是感觉很难。面试了大概两周左右吧，期间由于我的简历比较差，一直决定说再也不去外包的我，最终还是选择了投递一些外包，拿到两个 其实都算是外包，一个是医疗相关的，整个项目组驻场在一个地方，一个是养老相关的，说是用了微服务，是人力外包，现在就是在这个外包地方写下了这篇文章。\n\n\n\n## 总结\n\n\n\n其实我也没有仔细去思考过这一年多的经历，现在写着写着突然发现，我已经换了四家公司了，目前所在的是第五家公司，这其中只有一家公司转正了，其余几家都是因为各种原因被辞退了，不由得感叹，自己这经历也是没谁了，估计是过去这一年经历最坎坷的人了。\n\n\n\n# 工作看法\n\n\n\n要说我现在对于刚毕业的学生一些建议的话，我的建议就是\n\n\n\n一定要重视校招，一定要重视校招，一定要重视校招！！！\n\n\n\n重要的事情说三遍 嘿嘿。\n\n\n\n说实话，在没有毕业之前，我是没有发现，校招原来这么重要，应届生的身份原来这么重要的，第一份工作也这么重要。\n\n\n\n一定要重视第一份工作，一定要重视第一份工作，一定要重视第一份工作！！！\n\n\n\n# 辞职\n\n\n\n## 被动辞职\n\n\n\n如果你是被辞退了，不要慌，去看一看劳动合同法的相关内容，如果不是非常严重的情况，劳动法是不允许企业随便辞退员工的，这个时候，如果领导铁心让你离职，那你就去和他谈判，拿到补偿金之后再主动离职，千万别傻乎乎自己辞职了，还要开始辛苦的找工作，没必要的其实，而且这事儿也不是大家想象中的那么难搞，相对来说 还行，就是 没有经历过的人会觉得很恐怖的。\n\n\n\n## 主动辞职\n\n\n\n一般来说，是建议拿到新的offer之后再去辞职的，如果你是裸辞的话，风险比较大，当然这也是可以的，但是这和一个东西有关系，就是你的存款，如果你的存款还可以，可以支撑你几个月不上班的，那这其实无所谓，因为这样，你不会太快的陷入到 对于没有工作的焦虑之中，但是这种一般都不是刚毕业的吧，因为我们这刚毕业的根本存不了钱。\n\n\n\n对于刚毕业几年的人来说，一定要慎重考虑裸辞的风险，自己再三思考过后觉得可以承担这样的风险的，可以裸辞，至于我们普通人还是 老老实实的骑驴找马吧。\n\n\n\n# 租房的坑\n\n\n\n租房其实主要看以下几点就可以了\n\n\n\n1. 交通情况\n\n2. 房子干净情况\n\n3. 房子面积\n\n4. 正常家具是否齐全，起码要有一个床，一个桌子，一个凳子，一个衣柜的（这是合租的）\n\n5. 热水是否好用，暖气是否好用\n\n6. 注意看合同期限，不要自己搬家的时候，都不知道到期了没有，就直接搬家了，导致的结果就是白白损失了一个月的房租，不要问我怎么知道的，我经历过，扔了2000多块。\n\n\n\n# 学习成果\n\n\n\n这一年多一来，我的学习成果不少，学了不少的东西，但是总是感觉自己没有用过，所以一直心里没有底，对于我们javer而言主要就是下面这些知识吧！\n\n\n\n1. java 基础，并发，常见的api，锁，事务，AQS,synchronized,volatile JVM\n\n2. spring相关，bean的生命周期，常用注解，IOC，AOP\n\n3. springcloud，主要是Netflix的一套，和阿里巴巴的一套\n\n4. 数据库，oracle mysql redis MongoDB 等其他\n\n5. 中间件 mq ngnix 数据库同步工具 等\n\n6. 运维的东西 doker k8s 等\n\n\n\n上面这些东西我大多都涉猎过，但是都没有怎么实战过，所以之后的话，还是围绕这些东西来进行学习的，只是说 会比以前更深入一些。\n\n\n\n# 未来展望\n\n\n\n希望自己明年可以进入到一个有自研产品的、流量还不错的、使用的是市场上主流技术的公司吧！！！\n","slug":"2021年度总结","published":1,"updated":"2025-03-02T03:37:34.357Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp460006n0uk8r1thynd","content":"<p>看到掘金又是让大家写2021自己的感悟，我也来凑凑热闹，回顾一下我的2021。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"毕业一年半\"><a href=\"#毕业一年半\" class=\"headerlink\" title=\"毕业一年半\"></a>毕业一年半</h1><p>是啊，我是2020年毕业的，到现在已经一年多了吧，这一年在社会上经历过的毒打可真是不少啊，下面就请听我一一道来。</p>\n<h2 id=\"刚毕业的工作选择\"><a href=\"#刚毕业的工作选择\" class=\"headerlink\" title=\"刚毕业的工作选择\"></a>刚毕业的工作选择</h2><p>在2020年初的时候，爆发了疫情，相信大家也都知道了，我是侥幸提前回到了家，在学校时候，是在准备考研，过了考研考试之后就回家了，回家之后，感觉自己考的不行，于是就开始在家在b站开始自学java，学了几个月后，得到了我确实没有考上研，连国家线都没有过，伤心难过一段时间之后就开始准备面试了。当时的我，由于疫情原因，也没有去参加春招，只能就是在boss上投简历，然后面试，不记得具体情况了，反正就是自己在没有工作的压力下，最终去了家乡省会的一个公司，这家公司的总公司在北京，省会的只是一个分公司。我在找工作的时候，一直想找的都是java后端的工作，结果自己由于太焦虑，感觉自己毕业了，连个工作都找不到，于是就急急忙忙的选择了一家公司，这个工作并不是我想要的java后端的工作，而是一种画图的工作，这家公司干到八月底的时候，觉得不行，还是要去找java开发的工作，等着内部转岗都不知道等到猴年马月了，于是就面试了一段时间北京的公司，结果都没有人搭理我，当时好不容易有一个公司答应我了，对于当时我来说就是一个救命稻草，我就直接决定去了，当时的我在之前的公司快要转正了，但是我还是决定来北京发展。虽然当时面试的时候 跟我说 不是java开发的工作，但是底层是java，我还在好奇，这到底是什么公司那，不用java，但是底层是java这我可以吗？于是决定去看看。结果也是一个图形化的操作，他们的客户是银行，和银行合作几十年了，然后做出来这种的图形化操作，当时身上那这8000块钱来到北京，结果一到北京交完房租都没有多少了，所以就想着在这个工资干一段时间，然后努力学习，换一个真正java后端的工作。</p>\n<p>我当时其实是在银行里面做的开发，就是那种图像化操作的界面，不记得是由于什么原因了，银行那边的人对我不满意，不要我了，然后说是由于我 态度问题还是什么的，让我们公司的人，也不需要给我找其他工作了，直接辞退我吧。于是乎，我就这样经历了 人生中 第一次 被辞退。</p>\n<p>当时的我还是很慌的，没有了经济来源，再加上北京高额的消费，当时租房是一个月2600，在芍药居附近租了一个小卧室，加上吃饭什么的，一个月基础消费5000。 每天都在焦虑之中，害怕自己没有工作没有收入来源，就无法支撑住在北京的生活，难道我大学毕业了开始工作了，自己还养活不了自己？ 还要问自己的父母要钱？</p>\n<p>但是最终我还是跟父母说了情况，然后他们就立马给我打了几千块钱。哎，钱到手的时候很复杂，觉得自己这么多年都是白上学了，毕业还要家里给钱。</p>\n<p>终于在我面试了一个月后，拿到两个公司的offer，都是要前后端都写的，经过了我的一番纠结之后，我去了其中的一家公司，这家公司怎么说那，说是有自己的产品，但是由于这种面试b端 企业级用户的，大部分情况下单靠公司的产品是无法满足客户的需要，都是需要驻场开发，在甲方的内网环境下进行开发。所以我最终的工作地点是甲方公司的地址，我在那里才真正开始了我的java生涯，虽然也是需要写react的，在那里待了几个月吧，然后由于一个非常奇怪、无法解释的原因，我，是的我，又一次被辞退了，有了第一辞退的经历，我也算是有了一些底气，然后和公司谈判，多拿了一个月的工资然后主动离职的。</p>\n<p>大概是就是在21年五月份的时候吧，在我找了两周还是一个月之后，又拿到了两个offer，一开始是去其中一家办了入职手续，体验了下 公司的项目什么的，没有想到也是外包，而且项目感觉也不好，就直接走了。然后就去了另一家入职，本来以为说是终于是入职到了一个甲方公司了，谁能想到 这个公司也是给银行做开发的，虽然是在自己的办公场地办公，但是由于是给银行做的开发，使用的框架都非常老，ssm+hibernate+jsp，迫于生计，我又在那个公司干了几个月，本来都是打算这一次好好干，起码在一个公司待一年吧，结果是 转正考试没有通过，然后就让我离职了，这是第三次的被迫离职了。这个公司的转正考试很搞笑，就是一些完全和开发不相关的金融业务知识，和业务有非常大的关系。考完之后我还专门问老员工，都说这个是无所谓的，以前他们也都是没有考过的，决定不了什么，结果确实把我辞退了，不知道是针对我还是怎么的。因为和我一起入职的几个人，都在我之前离职了，而我由于和那几个小伙伴一起离职，吃饭什么的都一起，领导因为那几个人都离职了，所以迁怒于我吗？ 当然，领导的想法也不会告诉我，这只是我的一些揣测。</p>\n<p>时间来到了十月份，在国庆回家之后，我又一次开始了艰难的面试之旅，这一次也很难，也许是因为各方面都比较差，所以在面试的时候，都是感觉很难。面试了大概两周左右吧，期间由于我的简历比较差，一直决定说再也不去外包的我，最终还是选择了投递一些外包，拿到两个 其实都算是外包，一个是医疗相关的，整个项目组驻场在一个地方，一个是养老相关的，说是用了微服务，是人力外包，现在就是在这个外包地方写下了这篇文章。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>其实我也没有仔细去思考过这一年多的经历，现在写着写着突然发现，我已经换了四家公司了，目前所在的是第五家公司，这其中只有一家公司转正了，其余几家都是因为各种原因被辞退了，不由得感叹，自己这经历也是没谁了，估计是过去这一年经历最坎坷的人了。</p>\n<h1 id=\"工作看法\"><a href=\"#工作看法\" class=\"headerlink\" title=\"工作看法\"></a>工作看法</h1><p>要说我现在对于刚毕业的学生一些建议的话，我的建议就是</p>\n<p>一定要重视校招，一定要重视校招，一定要重视校招！！！</p>\n<p>重要的事情说三遍 嘿嘿。</p>\n<p>说实话，在没有毕业之前，我是没有发现，校招原来这么重要，应届生的身份原来这么重要的，第一份工作也这么重要。</p>\n<p>一定要重视第一份工作，一定要重视第一份工作，一定要重视第一份工作！！！</p>\n<h1 id=\"辞职\"><a href=\"#辞职\" class=\"headerlink\" title=\"辞职\"></a>辞职</h1><h2 id=\"被动辞职\"><a href=\"#被动辞职\" class=\"headerlink\" title=\"被动辞职\"></a>被动辞职</h2><p>如果你是被辞退了，不要慌，去看一看劳动合同法的相关内容，如果不是非常严重的情况，劳动法是不允许企业随便辞退员工的，这个时候，如果领导铁心让你离职，那你就去和他谈判，拿到补偿金之后再主动离职，千万别傻乎乎自己辞职了，还要开始辛苦的找工作，没必要的其实，而且这事儿也不是大家想象中的那么难搞，相对来说 还行，就是 没有经历过的人会觉得很恐怖的。</p>\n<h2 id=\"主动辞职\"><a href=\"#主动辞职\" class=\"headerlink\" title=\"主动辞职\"></a>主动辞职</h2><p>一般来说，是建议拿到新的offer之后再去辞职的，如果你是裸辞的话，风险比较大，当然这也是可以的，但是这和一个东西有关系，就是你的存款，如果你的存款还可以，可以支撑你几个月不上班的，那这其实无所谓，因为这样，你不会太快的陷入到 对于没有工作的焦虑之中，但是这种一般都不是刚毕业的吧，因为我们这刚毕业的根本存不了钱。</p>\n<p>对于刚毕业几年的人来说，一定要慎重考虑裸辞的风险，自己再三思考过后觉得可以承担这样的风险的，可以裸辞，至于我们普通人还是 老老实实的骑驴找马吧。</p>\n<h1 id=\"租房的坑\"><a href=\"#租房的坑\" class=\"headerlink\" title=\"租房的坑\"></a>租房的坑</h1><p>租房其实主要看以下几点就可以了</p>\n<ol>\n<li><p>交通情况</p>\n</li>\n<li><p>房子干净情况</p>\n</li>\n<li><p>房子面积</p>\n</li>\n<li><p>正常家具是否齐全，起码要有一个床，一个桌子，一个凳子，一个衣柜的（这是合租的）</p>\n</li>\n<li><p>热水是否好用，暖气是否好用</p>\n</li>\n<li><p>注意看合同期限，不要自己搬家的时候，都不知道到期了没有，就直接搬家了，导致的结果就是白白损失了一个月的房租，不要问我怎么知道的，我经历过，扔了2000多块。</p>\n</li>\n</ol>\n<h1 id=\"学习成果\"><a href=\"#学习成果\" class=\"headerlink\" title=\"学习成果\"></a>学习成果</h1><p>这一年多一来，我的学习成果不少，学了不少的东西，但是总是感觉自己没有用过，所以一直心里没有底，对于我们javer而言主要就是下面这些知识吧！</p>\n<ol>\n<li><p>java 基础，并发，常见的api，锁，事务，AQS,synchronized,volatile JVM</p>\n</li>\n<li><p>spring相关，bean的生命周期，常用注解，IOC，AOP</p>\n</li>\n<li><p>springcloud，主要是Netflix的一套，和阿里巴巴的一套</p>\n</li>\n<li><p>数据库，oracle mysql redis MongoDB 等其他</p>\n</li>\n<li><p>中间件 mq ngnix 数据库同步工具 等</p>\n</li>\n<li><p>运维的东西 doker k8s 等</p>\n</li>\n</ol>\n<p>上面这些东西我大多都涉猎过，但是都没有怎么实战过，所以之后的话，还是围绕这些东西来进行学习的，只是说 会比以前更深入一些。</p>\n<h1 id=\"未来展望\"><a href=\"#未来展望\" class=\"headerlink\" title=\"未来展望\"></a>未来展望</h1><p>希望自己明年可以进入到一个有自研产品的、流量还不错的、使用的是市场上主流技术的公司吧！！！</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"看到掘金又是让大家写2021自己的感悟，我也来凑凑热闹，回顾一下我的2021。\n\n毕业一年半\n是啊，我是2020年毕业的，到现在已经一年多了吧，这一年在社会上经历过的毒打可真是不少啊，下面就请听我一一道来。\n\n刚毕业的工作选择\n在2020年初的时候，爆发了疫情，相信大家也都知道了，我是侥幸提前回到了家，在学校时候，是在准备考研，过了考研考试之后就回家了，回家之后，感觉自己考的不行，于是就开始在家在b站开始自学java，学了几个月后，得到了我确实没有考上研，连国家线都没有过，伤心难过一段时间之后就开始准备面试了。当时的我，由于疫情原因，也没有去参加春招，只能就是在boss上投简历，然后面试，不记","more":"<h1 id=\"毕业一年半\"><a href=\"#毕业一年半\" class=\"headerlink\" title=\"毕业一年半\"></a>毕业一年半</h1><p>是啊，我是2020年毕业的，到现在已经一年多了吧，这一年在社会上经历过的毒打可真是不少啊，下面就请听我一一道来。</p>\n<h2 id=\"刚毕业的工作选择\"><a href=\"#刚毕业的工作选择\" class=\"headerlink\" title=\"刚毕业的工作选择\"></a>刚毕业的工作选择</h2><p>在2020年初的时候，爆发了疫情，相信大家也都知道了，我是侥幸提前回到了家，在学校时候，是在准备考研，过了考研考试之后就回家了，回家之后，感觉自己考的不行，于是就开始在家在b站开始自学java，学了几个月后，得到了我确实没有考上研，连国家线都没有过，伤心难过一段时间之后就开始准备面试了。当时的我，由于疫情原因，也没有去参加春招，只能就是在boss上投简历，然后面试，不记得具体情况了，反正就是自己在没有工作的压力下，最终去了家乡省会的一个公司，这家公司的总公司在北京，省会的只是一个分公司。我在找工作的时候，一直想找的都是java后端的工作，结果自己由于太焦虑，感觉自己毕业了，连个工作都找不到，于是就急急忙忙的选择了一家公司，这个工作并不是我想要的java后端的工作，而是一种画图的工作，这家公司干到八月底的时候，觉得不行，还是要去找java开发的工作，等着内部转岗都不知道等到猴年马月了，于是就面试了一段时间北京的公司，结果都没有人搭理我，当时好不容易有一个公司答应我了，对于当时我来说就是一个救命稻草，我就直接决定去了，当时的我在之前的公司快要转正了，但是我还是决定来北京发展。虽然当时面试的时候 跟我说 不是java开发的工作，但是底层是java，我还在好奇，这到底是什么公司那，不用java，但是底层是java这我可以吗？于是决定去看看。结果也是一个图形化的操作，他们的客户是银行，和银行合作几十年了，然后做出来这种的图形化操作，当时身上那这8000块钱来到北京，结果一到北京交完房租都没有多少了，所以就想着在这个工资干一段时间，然后努力学习，换一个真正java后端的工作。</p>\n<p>我当时其实是在银行里面做的开发，就是那种图像化操作的界面，不记得是由于什么原因了，银行那边的人对我不满意，不要我了，然后说是由于我 态度问题还是什么的，让我们公司的人，也不需要给我找其他工作了，直接辞退我吧。于是乎，我就这样经历了 人生中 第一次 被辞退。</p>\n<p>当时的我还是很慌的，没有了经济来源，再加上北京高额的消费，当时租房是一个月2600，在芍药居附近租了一个小卧室，加上吃饭什么的，一个月基础消费5000。 每天都在焦虑之中，害怕自己没有工作没有收入来源，就无法支撑住在北京的生活，难道我大学毕业了开始工作了，自己还养活不了自己？ 还要问自己的父母要钱？</p>\n<p>但是最终我还是跟父母说了情况，然后他们就立马给我打了几千块钱。哎，钱到手的时候很复杂，觉得自己这么多年都是白上学了，毕业还要家里给钱。</p>\n<p>终于在我面试了一个月后，拿到两个公司的offer，都是要前后端都写的，经过了我的一番纠结之后，我去了其中的一家公司，这家公司怎么说那，说是有自己的产品，但是由于这种面试b端 企业级用户的，大部分情况下单靠公司的产品是无法满足客户的需要，都是需要驻场开发，在甲方的内网环境下进行开发。所以我最终的工作地点是甲方公司的地址，我在那里才真正开始了我的java生涯，虽然也是需要写react的，在那里待了几个月吧，然后由于一个非常奇怪、无法解释的原因，我，是的我，又一次被辞退了，有了第一辞退的经历，我也算是有了一些底气，然后和公司谈判，多拿了一个月的工资然后主动离职的。</p>\n<p>大概是就是在21年五月份的时候吧，在我找了两周还是一个月之后，又拿到了两个offer，一开始是去其中一家办了入职手续，体验了下 公司的项目什么的，没有想到也是外包，而且项目感觉也不好，就直接走了。然后就去了另一家入职，本来以为说是终于是入职到了一个甲方公司了，谁能想到 这个公司也是给银行做开发的，虽然是在自己的办公场地办公，但是由于是给银行做的开发，使用的框架都非常老，ssm+hibernate+jsp，迫于生计，我又在那个公司干了几个月，本来都是打算这一次好好干，起码在一个公司待一年吧，结果是 转正考试没有通过，然后就让我离职了，这是第三次的被迫离职了。这个公司的转正考试很搞笑，就是一些完全和开发不相关的金融业务知识，和业务有非常大的关系。考完之后我还专门问老员工，都说这个是无所谓的，以前他们也都是没有考过的，决定不了什么，结果确实把我辞退了，不知道是针对我还是怎么的。因为和我一起入职的几个人，都在我之前离职了，而我由于和那几个小伙伴一起离职，吃饭什么的都一起，领导因为那几个人都离职了，所以迁怒于我吗？ 当然，领导的想法也不会告诉我，这只是我的一些揣测。</p>\n<p>时间来到了十月份，在国庆回家之后，我又一次开始了艰难的面试之旅，这一次也很难，也许是因为各方面都比较差，所以在面试的时候，都是感觉很难。面试了大概两周左右吧，期间由于我的简历比较差，一直决定说再也不去外包的我，最终还是选择了投递一些外包，拿到两个 其实都算是外包，一个是医疗相关的，整个项目组驻场在一个地方，一个是养老相关的，说是用了微服务，是人力外包，现在就是在这个外包地方写下了这篇文章。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>其实我也没有仔细去思考过这一年多的经历，现在写着写着突然发现，我已经换了四家公司了，目前所在的是第五家公司，这其中只有一家公司转正了，其余几家都是因为各种原因被辞退了，不由得感叹，自己这经历也是没谁了，估计是过去这一年经历最坎坷的人了。</p>\n<h1 id=\"工作看法\"><a href=\"#工作看法\" class=\"headerlink\" title=\"工作看法\"></a>工作看法</h1><p>要说我现在对于刚毕业的学生一些建议的话，我的建议就是</p>\n<p>一定要重视校招，一定要重视校招，一定要重视校招！！！</p>\n<p>重要的事情说三遍 嘿嘿。</p>\n<p>说实话，在没有毕业之前，我是没有发现，校招原来这么重要，应届生的身份原来这么重要的，第一份工作也这么重要。</p>\n<p>一定要重视第一份工作，一定要重视第一份工作，一定要重视第一份工作！！！</p>\n<h1 id=\"辞职\"><a href=\"#辞职\" class=\"headerlink\" title=\"辞职\"></a>辞职</h1><h2 id=\"被动辞职\"><a href=\"#被动辞职\" class=\"headerlink\" title=\"被动辞职\"></a>被动辞职</h2><p>如果你是被辞退了，不要慌，去看一看劳动合同法的相关内容，如果不是非常严重的情况，劳动法是不允许企业随便辞退员工的，这个时候，如果领导铁心让你离职，那你就去和他谈判，拿到补偿金之后再主动离职，千万别傻乎乎自己辞职了，还要开始辛苦的找工作，没必要的其实，而且这事儿也不是大家想象中的那么难搞，相对来说 还行，就是 没有经历过的人会觉得很恐怖的。</p>\n<h2 id=\"主动辞职\"><a href=\"#主动辞职\" class=\"headerlink\" title=\"主动辞职\"></a>主动辞职</h2><p>一般来说，是建议拿到新的offer之后再去辞职的，如果你是裸辞的话，风险比较大，当然这也是可以的，但是这和一个东西有关系，就是你的存款，如果你的存款还可以，可以支撑你几个月不上班的，那这其实无所谓，因为这样，你不会太快的陷入到 对于没有工作的焦虑之中，但是这种一般都不是刚毕业的吧，因为我们这刚毕业的根本存不了钱。</p>\n<p>对于刚毕业几年的人来说，一定要慎重考虑裸辞的风险，自己再三思考过后觉得可以承担这样的风险的，可以裸辞，至于我们普通人还是 老老实实的骑驴找马吧。</p>\n<h1 id=\"租房的坑\"><a href=\"#租房的坑\" class=\"headerlink\" title=\"租房的坑\"></a>租房的坑</h1><p>租房其实主要看以下几点就可以了</p>\n<ol>\n<li><p>交通情况</p>\n</li>\n<li><p>房子干净情况</p>\n</li>\n<li><p>房子面积</p>\n</li>\n<li><p>正常家具是否齐全，起码要有一个床，一个桌子，一个凳子，一个衣柜的（这是合租的）</p>\n</li>\n<li><p>热水是否好用，暖气是否好用</p>\n</li>\n<li><p>注意看合同期限，不要自己搬家的时候，都不知道到期了没有，就直接搬家了，导致的结果就是白白损失了一个月的房租，不要问我怎么知道的，我经历过，扔了2000多块。</p>\n</li>\n</ol>\n<h1 id=\"学习成果\"><a href=\"#学习成果\" class=\"headerlink\" title=\"学习成果\"></a>学习成果</h1><p>这一年多一来，我的学习成果不少，学了不少的东西，但是总是感觉自己没有用过，所以一直心里没有底，对于我们javer而言主要就是下面这些知识吧！</p>\n<ol>\n<li><p>java 基础，并发，常见的api，锁，事务，AQS,synchronized,volatile JVM</p>\n</li>\n<li><p>spring相关，bean的生命周期，常用注解，IOC，AOP</p>\n</li>\n<li><p>springcloud，主要是Netflix的一套，和阿里巴巴的一套</p>\n</li>\n<li><p>数据库，oracle mysql redis MongoDB 等其他</p>\n</li>\n<li><p>中间件 mq ngnix 数据库同步工具 等</p>\n</li>\n<li><p>运维的东西 doker k8s 等</p>\n</li>\n</ol>\n<p>上面这些东西我大多都涉猎过，但是都没有怎么实战过，所以之后的话，还是围绕这些东西来进行学习的，只是说 会比以前更深入一些。</p>\n<h1 id=\"未来展望\"><a href=\"#未来展望\" class=\"headerlink\" title=\"未来展望\"></a>未来展望</h1><p>希望自己明年可以进入到一个有自研产品的、流量还不错的、使用的是市场上主流技术的公司吧！！！</p>"},{"title":"2022年度总结","description":"","abbrlink":"622a5765","date":"2022-12-24T16:00:00.000Z","_content":"\n\n今天是2022年12月26日，圣诞节后的第一天，又一次坐在了公司的办公室中，想到今年的年终总结还没有写，此文因此诞生\n<!-- more -->\n\n\n# 社会情况\n\n\n\n今年或许是我在自学校毕业以来，第一次在一家公司待够一年，想起之前干了几个月就被辞退的经历，感觉一家公司待够一年也弥足珍贵，虽然仍然是混日子而已。\n\n\n\n一般来说，在一个公司待够一年左右的时候基本上就可以出去看看机会了，但是众所周知，2022年的互联网就业环境非常差，各大公司的各种裁员，各种大厂员工因负债太多，不得已卖了房子等等，各种因为离职导致出现的事情太多了，这对我的影响，除了增加了我的焦虑，并没有作用，尤其是最近一个月的时候，当我在boss招聘上投递简历的时候，投了很多人，但是基本上都没有回复的，或者只是已读而已，历经社会拷打的我自然知道，已读未回就是拒绝了，我问了技术群的人，他们说他们也是，这样我似乎得到了安慰，这可能不是我的问题，而是当前大环境的问题，这样想似乎就可以放过自己，但是，在夜深人静的时候，一想到工作的时候，就不可避免的失业恐惧，我不知道是只有我这样，还是其他人也有，真的感觉就是在为了生存而苦苦挣扎啊！！！\n\n或许是我的过往经历太差了，都没有面试机会，这很让人绝望的，但是我似乎别无他法，因为我无法改变规则，那我就只能适应规则了。所以不是我不想跳槽，而是我似乎除了在这个外包混日子，现在出去直接都没有面试机会啊，那怎么可能找到新工作那？最近一直在回避这个问题，因为感觉每次想到这个问题如何去解决，就脑壳疼，不知道该如何去改变。\n\n\n\n# 技术成长\n\n\n\n我看了一下自己的技术博客，对，虽然我这么躺平，但是还是会写写技术博客的。好像2022年我也写了不少的技术博客了,现在来记录一下 印象比较深的\n\n\n\n- 参与开源项目，提交pr\n\n- 刷了一段时间算法，但是感觉忘记的很快呀\n\n- 一些工作中遇到的坑的总结\n\n\n\n> 我写的时候，突然发现，感觉技术总结好像还是一周总结一次比较好，技术这个感觉就会非常的零碎化了\n\n\n\n# 疫情\n\n\n\n这一年中，多次因为这个新冠疫情而导致的远程办公，远程办公其实很爽的，因为你在家很自由，只要完成任务就可以了，只是我发现，远程办公其实并不像我想象的那么美好，因为它太考验你的自制力的，当没有人管你的时候，你总是想要做一些娱乐活动，而不是去工作或者学习，这虽然短期来说是让自己很爽的，但是长期来说，对职业发展并不友好，在此简单罗列一下远程办公的优缺点\n\n\n\n## 远程办公优点\n\n\n\n1. 减少通勤时间，可以睡会懒觉\n\n2. 可以更专注于自己去解决问题，而不是因为各种事情被不可控制的打断\n\n3. 时间相对来说比较自由，可以灵活安排时间\n\n\n\n## 远程办公缺点\n\n\n\n1. 对自制力要求很高\n\n2. 工作效率低下，一方面可能因为vpn问题，另一方面，可能还是自制力问题\n\n3. 作息混乱\n\n4. 长时间不出门可能会导致心情抑郁，虽然我比较宅\n\n5. 对于你自己解决问题的能力要求很高，因为你如果不能自己解决问题，也不能立即让同事来帮你看看，不如现场方便\n\n6. 沟通效率低下，可能会因为网络啊 各种原因\n\n7. 如果你长期待在家里，并且自己不锻炼，那么身体素质会直线下滑，因为去公司上班起码还是强制你走路，你一直在家就连着仅有的活动都没有了\n\n8. 生活与工作无法分开，好像一直在工作\n\n\n\n> 写完突然发现，怎么我这体验远程办公缺点比较多啊，可能主要是因为两点吧，1 我自制力不太行 2 自我解决问题的能力还有待提高\n\n\n\n## 新冠\n\n\n\n我是在最近2022年12月10号阳了的，估计就是因为9号去了公司办公，就出去这一天然后就阳了，之前都是居家办公两周了，之前还盲目自信自己不会阳了的，没有那么快的，谁知道打脸来的这么快。当时的我没有买药，没有体温计，幸好家里之前还屯了布洛芬胶囊才靠着他慢慢好了起来。不过，阳了之后还是挺难受的，幸好一周就好了，哦豁！！！\n\n\n\n# 自我成长\n\n\n\n一些成长：\n\n\n\n1. 目标感加强，在工作的时候，时刻强调目标，不至于迷失在一些琐碎的事情上\n\n2. 对于需求有了更深入的认识，必须要充分了解需求之后再进行开发，这样会事半功倍，否则就是事倍功半\n\n3. 语言并不是重要，只是工具而已，要看根据语言的特点来确认在什么样的场景去使用他\n\n\n\n# 职业发展\n\n\n\n我发现我从事软件开发有以下 几个原因：\n\n\n\n1. 喜欢实现功能的感觉，比较有成就感\n\n2. 相对来说工资高一点\n\n\n\n# 新年目标\n\n\n\n- 坚持刷算法，保证熟练度\n\n- 多参与开源项目，打开自己的兴趣点，少玩永劫无间\n\n- 多锻炼，保证身体健康\n\n- 坚持写技术博客，将技术沉淀下来\n\n- 跳槽到一个产品自研的公司\n\n- 找个女朋友（看天意吧）\n","source":"_posts/2022年度总结.md","raw":"---\ntitle: 2022年度总结\ndescription: ''\ntags:\n  - 年度总结\nabbrlink: 622a5765\ndate: 2022-12-25 00:00:00\n---\n\n\n今天是2022年12月26日，圣诞节后的第一天，又一次坐在了公司的办公室中，想到今年的年终总结还没有写，此文因此诞生\n<!-- more -->\n\n\n# 社会情况\n\n\n\n今年或许是我在自学校毕业以来，第一次在一家公司待够一年，想起之前干了几个月就被辞退的经历，感觉一家公司待够一年也弥足珍贵，虽然仍然是混日子而已。\n\n\n\n一般来说，在一个公司待够一年左右的时候基本上就可以出去看看机会了，但是众所周知，2022年的互联网就业环境非常差，各大公司的各种裁员，各种大厂员工因负债太多，不得已卖了房子等等，各种因为离职导致出现的事情太多了，这对我的影响，除了增加了我的焦虑，并没有作用，尤其是最近一个月的时候，当我在boss招聘上投递简历的时候，投了很多人，但是基本上都没有回复的，或者只是已读而已，历经社会拷打的我自然知道，已读未回就是拒绝了，我问了技术群的人，他们说他们也是，这样我似乎得到了安慰，这可能不是我的问题，而是当前大环境的问题，这样想似乎就可以放过自己，但是，在夜深人静的时候，一想到工作的时候，就不可避免的失业恐惧，我不知道是只有我这样，还是其他人也有，真的感觉就是在为了生存而苦苦挣扎啊！！！\n\n或许是我的过往经历太差了，都没有面试机会，这很让人绝望的，但是我似乎别无他法，因为我无法改变规则，那我就只能适应规则了。所以不是我不想跳槽，而是我似乎除了在这个外包混日子，现在出去直接都没有面试机会啊，那怎么可能找到新工作那？最近一直在回避这个问题，因为感觉每次想到这个问题如何去解决，就脑壳疼，不知道该如何去改变。\n\n\n\n# 技术成长\n\n\n\n我看了一下自己的技术博客，对，虽然我这么躺平，但是还是会写写技术博客的。好像2022年我也写了不少的技术博客了,现在来记录一下 印象比较深的\n\n\n\n- 参与开源项目，提交pr\n\n- 刷了一段时间算法，但是感觉忘记的很快呀\n\n- 一些工作中遇到的坑的总结\n\n\n\n> 我写的时候，突然发现，感觉技术总结好像还是一周总结一次比较好，技术这个感觉就会非常的零碎化了\n\n\n\n# 疫情\n\n\n\n这一年中，多次因为这个新冠疫情而导致的远程办公，远程办公其实很爽的，因为你在家很自由，只要完成任务就可以了，只是我发现，远程办公其实并不像我想象的那么美好，因为它太考验你的自制力的，当没有人管你的时候，你总是想要做一些娱乐活动，而不是去工作或者学习，这虽然短期来说是让自己很爽的，但是长期来说，对职业发展并不友好，在此简单罗列一下远程办公的优缺点\n\n\n\n## 远程办公优点\n\n\n\n1. 减少通勤时间，可以睡会懒觉\n\n2. 可以更专注于自己去解决问题，而不是因为各种事情被不可控制的打断\n\n3. 时间相对来说比较自由，可以灵活安排时间\n\n\n\n## 远程办公缺点\n\n\n\n1. 对自制力要求很高\n\n2. 工作效率低下，一方面可能因为vpn问题，另一方面，可能还是自制力问题\n\n3. 作息混乱\n\n4. 长时间不出门可能会导致心情抑郁，虽然我比较宅\n\n5. 对于你自己解决问题的能力要求很高，因为你如果不能自己解决问题，也不能立即让同事来帮你看看，不如现场方便\n\n6. 沟通效率低下，可能会因为网络啊 各种原因\n\n7. 如果你长期待在家里，并且自己不锻炼，那么身体素质会直线下滑，因为去公司上班起码还是强制你走路，你一直在家就连着仅有的活动都没有了\n\n8. 生活与工作无法分开，好像一直在工作\n\n\n\n> 写完突然发现，怎么我这体验远程办公缺点比较多啊，可能主要是因为两点吧，1 我自制力不太行 2 自我解决问题的能力还有待提高\n\n\n\n## 新冠\n\n\n\n我是在最近2022年12月10号阳了的，估计就是因为9号去了公司办公，就出去这一天然后就阳了，之前都是居家办公两周了，之前还盲目自信自己不会阳了的，没有那么快的，谁知道打脸来的这么快。当时的我没有买药，没有体温计，幸好家里之前还屯了布洛芬胶囊才靠着他慢慢好了起来。不过，阳了之后还是挺难受的，幸好一周就好了，哦豁！！！\n\n\n\n# 自我成长\n\n\n\n一些成长：\n\n\n\n1. 目标感加强，在工作的时候，时刻强调目标，不至于迷失在一些琐碎的事情上\n\n2. 对于需求有了更深入的认识，必须要充分了解需求之后再进行开发，这样会事半功倍，否则就是事倍功半\n\n3. 语言并不是重要，只是工具而已，要看根据语言的特点来确认在什么样的场景去使用他\n\n\n\n# 职业发展\n\n\n\n我发现我从事软件开发有以下 几个原因：\n\n\n\n1. 喜欢实现功能的感觉，比较有成就感\n\n2. 相对来说工资高一点\n\n\n\n# 新年目标\n\n\n\n- 坚持刷算法，保证熟练度\n\n- 多参与开源项目，打开自己的兴趣点，少玩永劫无间\n\n- 多锻炼，保证身体健康\n\n- 坚持写技术博客，将技术沉淀下来\n\n- 跳槽到一个产品自研的公司\n\n- 找个女朋友（看天意吧）\n","slug":"2022年度总结","published":1,"updated":"2025-03-02T03:37:34.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp470007n0uk2lbc1qoe","content":"<p>今天是2022年12月26日，圣诞节后的第一天，又一次坐在了公司的办公室中，想到今年的年终总结还没有写，此文因此诞生</p>\n<span id=\"more\"></span>\n\n\n<h1 id=\"社会情况\"><a href=\"#社会情况\" class=\"headerlink\" title=\"社会情况\"></a>社会情况</h1><p>今年或许是我在自学校毕业以来，第一次在一家公司待够一年，想起之前干了几个月就被辞退的经历，感觉一家公司待够一年也弥足珍贵，虽然仍然是混日子而已。</p>\n<p>一般来说，在一个公司待够一年左右的时候基本上就可以出去看看机会了，但是众所周知，2022年的互联网就业环境非常差，各大公司的各种裁员，各种大厂员工因负债太多，不得已卖了房子等等，各种因为离职导致出现的事情太多了，这对我的影响，除了增加了我的焦虑，并没有作用，尤其是最近一个月的时候，当我在boss招聘上投递简历的时候，投了很多人，但是基本上都没有回复的，或者只是已读而已，历经社会拷打的我自然知道，已读未回就是拒绝了，我问了技术群的人，他们说他们也是，这样我似乎得到了安慰，这可能不是我的问题，而是当前大环境的问题，这样想似乎就可以放过自己，但是，在夜深人静的时候，一想到工作的时候，就不可避免的失业恐惧，我不知道是只有我这样，还是其他人也有，真的感觉就是在为了生存而苦苦挣扎啊！！！</p>\n<p>或许是我的过往经历太差了，都没有面试机会，这很让人绝望的，但是我似乎别无他法，因为我无法改变规则，那我就只能适应规则了。所以不是我不想跳槽，而是我似乎除了在这个外包混日子，现在出去直接都没有面试机会啊，那怎么可能找到新工作那？最近一直在回避这个问题，因为感觉每次想到这个问题如何去解决，就脑壳疼，不知道该如何去改变。</p>\n<h1 id=\"技术成长\"><a href=\"#技术成长\" class=\"headerlink\" title=\"技术成长\"></a>技术成长</h1><p>我看了一下自己的技术博客，对，虽然我这么躺平，但是还是会写写技术博客的。好像2022年我也写了不少的技术博客了,现在来记录一下 印象比较深的</p>\n<ul>\n<li><p>参与开源项目，提交pr</p>\n</li>\n<li><p>刷了一段时间算法，但是感觉忘记的很快呀</p>\n</li>\n<li><p>一些工作中遇到的坑的总结</p>\n</li>\n</ul>\n<blockquote>\n<p>我写的时候，突然发现，感觉技术总结好像还是一周总结一次比较好，技术这个感觉就会非常的零碎化了</p>\n</blockquote>\n<h1 id=\"疫情\"><a href=\"#疫情\" class=\"headerlink\" title=\"疫情\"></a>疫情</h1><p>这一年中，多次因为这个新冠疫情而导致的远程办公，远程办公其实很爽的，因为你在家很自由，只要完成任务就可以了，只是我发现，远程办公其实并不像我想象的那么美好，因为它太考验你的自制力的，当没有人管你的时候，你总是想要做一些娱乐活动，而不是去工作或者学习，这虽然短期来说是让自己很爽的，但是长期来说，对职业发展并不友好，在此简单罗列一下远程办公的优缺点</p>\n<h2 id=\"远程办公优点\"><a href=\"#远程办公优点\" class=\"headerlink\" title=\"远程办公优点\"></a>远程办公优点</h2><ol>\n<li><p>减少通勤时间，可以睡会懒觉</p>\n</li>\n<li><p>可以更专注于自己去解决问题，而不是因为各种事情被不可控制的打断</p>\n</li>\n<li><p>时间相对来说比较自由，可以灵活安排时间</p>\n</li>\n</ol>\n<h2 id=\"远程办公缺点\"><a href=\"#远程办公缺点\" class=\"headerlink\" title=\"远程办公缺点\"></a>远程办公缺点</h2><ol>\n<li><p>对自制力要求很高</p>\n</li>\n<li><p>工作效率低下，一方面可能因为vpn问题，另一方面，可能还是自制力问题</p>\n</li>\n<li><p>作息混乱</p>\n</li>\n<li><p>长时间不出门可能会导致心情抑郁，虽然我比较宅</p>\n</li>\n<li><p>对于你自己解决问题的能力要求很高，因为你如果不能自己解决问题，也不能立即让同事来帮你看看，不如现场方便</p>\n</li>\n<li><p>沟通效率低下，可能会因为网络啊 各种原因</p>\n</li>\n<li><p>如果你长期待在家里，并且自己不锻炼，那么身体素质会直线下滑，因为去公司上班起码还是强制你走路，你一直在家就连着仅有的活动都没有了</p>\n</li>\n<li><p>生活与工作无法分开，好像一直在工作</p>\n</li>\n</ol>\n<blockquote>\n<p>写完突然发现，怎么我这体验远程办公缺点比较多啊，可能主要是因为两点吧，1 我自制力不太行 2 自我解决问题的能力还有待提高</p>\n</blockquote>\n<h2 id=\"新冠\"><a href=\"#新冠\" class=\"headerlink\" title=\"新冠\"></a>新冠</h2><p>我是在最近2022年12月10号阳了的，估计就是因为9号去了公司办公，就出去这一天然后就阳了，之前都是居家办公两周了，之前还盲目自信自己不会阳了的，没有那么快的，谁知道打脸来的这么快。当时的我没有买药，没有体温计，幸好家里之前还屯了布洛芬胶囊才靠着他慢慢好了起来。不过，阳了之后还是挺难受的，幸好一周就好了，哦豁！！！</p>\n<h1 id=\"自我成长\"><a href=\"#自我成长\" class=\"headerlink\" title=\"自我成长\"></a>自我成长</h1><p>一些成长：</p>\n<ol>\n<li><p>目标感加强，在工作的时候，时刻强调目标，不至于迷失在一些琐碎的事情上</p>\n</li>\n<li><p>对于需求有了更深入的认识，必须要充分了解需求之后再进行开发，这样会事半功倍，否则就是事倍功半</p>\n</li>\n<li><p>语言并不是重要，只是工具而已，要看根据语言的特点来确认在什么样的场景去使用他</p>\n</li>\n</ol>\n<h1 id=\"职业发展\"><a href=\"#职业发展\" class=\"headerlink\" title=\"职业发展\"></a>职业发展</h1><p>我发现我从事软件开发有以下 几个原因：</p>\n<ol>\n<li><p>喜欢实现功能的感觉，比较有成就感</p>\n</li>\n<li><p>相对来说工资高一点</p>\n</li>\n</ol>\n<h1 id=\"新年目标\"><a href=\"#新年目标\" class=\"headerlink\" title=\"新年目标\"></a>新年目标</h1><ul>\n<li><p>坚持刷算法，保证熟练度</p>\n</li>\n<li><p>多参与开源项目，打开自己的兴趣点，少玩永劫无间</p>\n</li>\n<li><p>多锻炼，保证身体健康</p>\n</li>\n<li><p>坚持写技术博客，将技术沉淀下来</p>\n</li>\n<li><p>跳槽到一个产品自研的公司</p>\n</li>\n<li><p>找个女朋友（看天意吧）</p>\n</li>\n</ul>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"今天是2022年12月26日，圣诞节后的第一天，又一次坐在了公司的办公室中，想到今年的年终总结还没有写，此文因此诞生\n\n社会情况\n今年或许是我在自学校毕业以来，第一次在一家公司待够一年，想起之前干了几个月就被辞退的经历，感觉一家公司待够一年也弥足珍贵，虽然仍然是混日子而已。\n\n一般来说，在一个公司待够一年左右的时候基本上就可以出去看看机会了，但是众所周知，2022年的互联网就业环境非常差，各大公司的各种裁员，各种大厂员工因负债太多，不得已卖了房子等等，各种因为离职导致出现的事情太多了，这对我的影响，除了增加了我的焦虑，并没有作用，尤其是最近一个月的时候，当我在boss招聘上投递简历的时候，投了","more":"<h1 id=\"社会情况\"><a href=\"#社会情况\" class=\"headerlink\" title=\"社会情况\"></a>社会情况</h1><p>今年或许是我在自学校毕业以来，第一次在一家公司待够一年，想起之前干了几个月就被辞退的经历，感觉一家公司待够一年也弥足珍贵，虽然仍然是混日子而已。</p>\n<p>一般来说，在一个公司待够一年左右的时候基本上就可以出去看看机会了，但是众所周知，2022年的互联网就业环境非常差，各大公司的各种裁员，各种大厂员工因负债太多，不得已卖了房子等等，各种因为离职导致出现的事情太多了，这对我的影响，除了增加了我的焦虑，并没有作用，尤其是最近一个月的时候，当我在boss招聘上投递简历的时候，投了很多人，但是基本上都没有回复的，或者只是已读而已，历经社会拷打的我自然知道，已读未回就是拒绝了，我问了技术群的人，他们说他们也是，这样我似乎得到了安慰，这可能不是我的问题，而是当前大环境的问题，这样想似乎就可以放过自己，但是，在夜深人静的时候，一想到工作的时候，就不可避免的失业恐惧，我不知道是只有我这样，还是其他人也有，真的感觉就是在为了生存而苦苦挣扎啊！！！</p>\n<p>或许是我的过往经历太差了，都没有面试机会，这很让人绝望的，但是我似乎别无他法，因为我无法改变规则，那我就只能适应规则了。所以不是我不想跳槽，而是我似乎除了在这个外包混日子，现在出去直接都没有面试机会啊，那怎么可能找到新工作那？最近一直在回避这个问题，因为感觉每次想到这个问题如何去解决，就脑壳疼，不知道该如何去改变。</p>\n<h1 id=\"技术成长\"><a href=\"#技术成长\" class=\"headerlink\" title=\"技术成长\"></a>技术成长</h1><p>我看了一下自己的技术博客，对，虽然我这么躺平，但是还是会写写技术博客的。好像2022年我也写了不少的技术博客了,现在来记录一下 印象比较深的</p>\n<ul>\n<li><p>参与开源项目，提交pr</p>\n</li>\n<li><p>刷了一段时间算法，但是感觉忘记的很快呀</p>\n</li>\n<li><p>一些工作中遇到的坑的总结</p>\n</li>\n</ul>\n<blockquote>\n<p>我写的时候，突然发现，感觉技术总结好像还是一周总结一次比较好，技术这个感觉就会非常的零碎化了</p>\n</blockquote>\n<h1 id=\"疫情\"><a href=\"#疫情\" class=\"headerlink\" title=\"疫情\"></a>疫情</h1><p>这一年中，多次因为这个新冠疫情而导致的远程办公，远程办公其实很爽的，因为你在家很自由，只要完成任务就可以了，只是我发现，远程办公其实并不像我想象的那么美好，因为它太考验你的自制力的，当没有人管你的时候，你总是想要做一些娱乐活动，而不是去工作或者学习，这虽然短期来说是让自己很爽的，但是长期来说，对职业发展并不友好，在此简单罗列一下远程办公的优缺点</p>\n<h2 id=\"远程办公优点\"><a href=\"#远程办公优点\" class=\"headerlink\" title=\"远程办公优点\"></a>远程办公优点</h2><ol>\n<li><p>减少通勤时间，可以睡会懒觉</p>\n</li>\n<li><p>可以更专注于自己去解决问题，而不是因为各种事情被不可控制的打断</p>\n</li>\n<li><p>时间相对来说比较自由，可以灵活安排时间</p>\n</li>\n</ol>\n<h2 id=\"远程办公缺点\"><a href=\"#远程办公缺点\" class=\"headerlink\" title=\"远程办公缺点\"></a>远程办公缺点</h2><ol>\n<li><p>对自制力要求很高</p>\n</li>\n<li><p>工作效率低下，一方面可能因为vpn问题，另一方面，可能还是自制力问题</p>\n</li>\n<li><p>作息混乱</p>\n</li>\n<li><p>长时间不出门可能会导致心情抑郁，虽然我比较宅</p>\n</li>\n<li><p>对于你自己解决问题的能力要求很高，因为你如果不能自己解决问题，也不能立即让同事来帮你看看，不如现场方便</p>\n</li>\n<li><p>沟通效率低下，可能会因为网络啊 各种原因</p>\n</li>\n<li><p>如果你长期待在家里，并且自己不锻炼，那么身体素质会直线下滑，因为去公司上班起码还是强制你走路，你一直在家就连着仅有的活动都没有了</p>\n</li>\n<li><p>生活与工作无法分开，好像一直在工作</p>\n</li>\n</ol>\n<blockquote>\n<p>写完突然发现，怎么我这体验远程办公缺点比较多啊，可能主要是因为两点吧，1 我自制力不太行 2 自我解决问题的能力还有待提高</p>\n</blockquote>\n<h2 id=\"新冠\"><a href=\"#新冠\" class=\"headerlink\" title=\"新冠\"></a>新冠</h2><p>我是在最近2022年12月10号阳了的，估计就是因为9号去了公司办公，就出去这一天然后就阳了，之前都是居家办公两周了，之前还盲目自信自己不会阳了的，没有那么快的，谁知道打脸来的这么快。当时的我没有买药，没有体温计，幸好家里之前还屯了布洛芬胶囊才靠着他慢慢好了起来。不过，阳了之后还是挺难受的，幸好一周就好了，哦豁！！！</p>\n<h1 id=\"自我成长\"><a href=\"#自我成长\" class=\"headerlink\" title=\"自我成长\"></a>自我成长</h1><p>一些成长：</p>\n<ol>\n<li><p>目标感加强，在工作的时候，时刻强调目标，不至于迷失在一些琐碎的事情上</p>\n</li>\n<li><p>对于需求有了更深入的认识，必须要充分了解需求之后再进行开发，这样会事半功倍，否则就是事倍功半</p>\n</li>\n<li><p>语言并不是重要，只是工具而已，要看根据语言的特点来确认在什么样的场景去使用他</p>\n</li>\n</ol>\n<h1 id=\"职业发展\"><a href=\"#职业发展\" class=\"headerlink\" title=\"职业发展\"></a>职业发展</h1><p>我发现我从事软件开发有以下 几个原因：</p>\n<ol>\n<li><p>喜欢实现功能的感觉，比较有成就感</p>\n</li>\n<li><p>相对来说工资高一点</p>\n</li>\n</ol>\n<h1 id=\"新年目标\"><a href=\"#新年目标\" class=\"headerlink\" title=\"新年目标\"></a>新年目标</h1><ul>\n<li><p>坚持刷算法，保证熟练度</p>\n</li>\n<li><p>多参与开源项目，打开自己的兴趣点，少玩永劫无间</p>\n</li>\n<li><p>多锻炼，保证身体健康</p>\n</li>\n<li><p>坚持写技术博客，将技术沉淀下来</p>\n</li>\n<li><p>跳槽到一个产品自研的公司</p>\n</li>\n<li><p>找个女朋友（看天意吧）</p>\n</li>\n</ul>"},{"title":"2023年度总结","description":"","abbrlink":"bfbc8ee0","date":"2023-12-24T16:00:00.000Z","_content":"\n\n一转眼，又是一年过去了，今天是2023年的圣诞节，是星期一，没啥事儿 ，看到大家都写了年终总结，我也来写下吧，毕竟之前也写了三年了，写年终总结这个东西怎么说那，有对自己一年的回顾其实挺好的，也许现在看起来没啥意义，但是时间线拉长，或许就有些意义了。其实我更想用视频记录自己的成长，看起来更生活形象一些，但是还是有些恐惧的，希2024年可以用视频记录自己的生活吧。\n\n<!-- more -->\n\n# 工作\n\n\n\n在2022年过年的时候，家里人在劝我说回到老家来上班了，我最终决定是在三月份回到老家了。目前是12月份，其实回来家已经9个月了 已经大半年了，在家里的工作一直都是公共资源交易的实施人员，没啥技术，也不需要开发，就这么在这里混了大半年。期间参加了一次洛阳的事业单位考试和计算机的中级资格证书，都没有考过。工作其实挺轻松的，个人有很多的空余时间，但是我比较颓废，不少时间用来打游戏 看视频了。这份工作工资很低，目前的工资比刚来的时候低了1k，因为前几个月公司说全体员工全部降薪1k，不少人都因为这个离开了，但是我没有，因为家里18线小城市，根本都没有开发的工作，我只能在这里混着了。\n\n\n\n在闲暇之余，我也学了rust，几次入门被劝退，如今正在第三次入门中，12月初，刚谈了个远程兼职，结果搞了几天也没消息了。中间也在github上做了一些贡献的，当然都是比较简单的，没有解决什么重量级任务。我自认为我还是比较想找开发的工作的，我喜欢那种解决bug的感觉，我喜欢帮助别人的感觉，每次在github上帮助他人解决了问题，我都很开心，似乎我的技能也有了用武之地，真正地开始帮助大家了。\n\n\n\n最近两个月知道了duolingo之后，还学了点日语，都是在推特看说日本多好多好之类的，无聊，焦虑的时候就会学习日语，心理存在一个幻想，也许到了日本我的处境就会好一点了，没有那么大工作焦虑了，不用那么卷了。英语也拾起来了，每天学习一点，希望有朝一日可以熟练使用英语来对话吧，进而进入到一家外企去上班。\n\n\n\n我是2020年本科毕业的，今年已经是第三年了，我的履历也非常的差，都是去的外包公司，甚至中间在北京还被辞退两次，现在回来老家大半年，履历更差了，年纪也是26了，发现到了现在个人情况真的是很艰难，我常常不敢去认真思考这些问题，因为我害怕，我总是会去逃避它。就我目前的这个履历，在北京上班快三年了，一年多没涨工资了，工资也就一万出头，也没存上什么钱，如果继续在北京打工，不知道有什么奔头，起码房子买不起了，虽然我也不打算买房子，工作那，工作有啥奔头吗？似乎也比较难，虽然我自认为自己水平还可以，甚至还头铁的花费了家人2w去报了一个什么班学技术，最终也是不了了之，被割韭菜了。唯一庆幸的是家里条件还行，父母都是教师，比较稳定，回来老家一个月多少钱反正够生活了，当然自己还是要努力搞钱的。但是回来家之后，发现了一个残酷的事实，就是大部分打工人你脱离了公司之后，你的技能是无法变现的，非常的扎心也非常的现实，我想着也是那个 推友的那个推那么火爆的原因吧！**“人都要有自己的生意，哪怕再小\"**\n\n\n\n# 生活\n\n\n\n上班看电视度日，下班就是网吧玩电脑或者躺在家里玩手机，比较颓废。\n\n\n\n说是要减肥，也没有减肥成功。\n\n\n\n健身也没有坚持，只是有几周连续每天都跑路几公里\n\n\n\n啊对了，三月份回来的时候，父母为我买了一辆12w的传祺gs3的车，目前也是开了大半年的司机了，最远跑过去郑州过，去一次300km左右\n\n\n\n在家里很好的就是和朋友在一起很开心，但是分开了也很愁，每个人的家庭状况是不一样的，每个人的人生进程是不一样的，有的刚结婚，有的刚考上公，有的孩子刚出生，无法让每个人都保持一样的人生进程，真就每个人都有自己的时间，而我还停留在刚刚开始人生的第一次正式恋爱。其实还是保持我的那个认知，孤独才是一个人的常态，也许世界上真的有所谓的感同身受，但是你或许碰不到，即使碰到了，你们各种具体情况也会导致各种各样的差异，所以难搞。\n\n\n\n## 恋爱\n\n\n\n最近的好事儿 怕就是在一个app 上认识了一个女孩了，她应该算是我这26年来第一个比较正式的女朋友吧，虽然她一直没有承认，但是我们都做了情侣的该做的事情了，也不知道她是怎么想的。她性格比较强势，做事很有目标，喜欢厌恶非常明确，非常有主见。最近我们有些矛盾，她觉得我不够上进，不会照顾她，而我也觉得她太有自己的想法了，活的太透彻了，有些烦躁。可能是我没有谈过恋爱，和她在一起我总是喜欢亲亲 抱抱 贴贴，但是她似乎不是很喜欢，之前还说过我是个下半身支配的人，哎！\n\n\n\n# 总结\n\n\n\n这篇文章写着写着，我发现我似乎有很多想说的，但是又觉得不太方便或者是什么，想法一闪而逝，最终也就如此了，似乎我连年终总结都不太认真。看完上文你也许觉得有点悲观，但是我其实一直的座右铭是 用微笑面对生活，不管生活如何，还是要用心积极的去面对的，只能说各位一起加油吧，每个人都有自己的难关，希望我们都可以不断地战胜它，当然失败也是允许的，尽人事，听天命！！！\n\n\n\n# 2024 目标\n\n\n\n## 工作\n\n\n\n1. 可以继续在这里干实施，但是要明确自己的目标了，不能再天天看视频度日了，这样每也挺无聊的\n\n2. github选定一个项目好好搞搞，能不能年底也秀下热力图，虽然我知道这并没有什么卵用\n\n3. 兼职可以继续问问，如果可以的话，就是继续干吧，好歹补贴家用\n\n4. 重点是 要做个自己的产品出来，这个当然非常难，尤其是我这样的自制力非常差的来说，但是不管 梦想还是要有的，万一实现了那\n\n\n\n## 生活\n\n\n\n- 减肥还是要提上日程，要不我一身病 到时候肯定很难搞\n\n- 和女朋友慢慢磨合吧，如果人家真的看不上我了，也不要强求，顺其自然就好\n\n- 可以用视频记录自己的生活而不是局限于文字\n","source":"_posts/2023年度总结.md","raw":"---\ntitle: 2023年度总结\ndescription: ''\ntags:\n  - 年度总结\nabbrlink: bfbc8ee0\ndate: 2023-12-25 00:00:00\n---\n\n\n一转眼，又是一年过去了，今天是2023年的圣诞节，是星期一，没啥事儿 ，看到大家都写了年终总结，我也来写下吧，毕竟之前也写了三年了，写年终总结这个东西怎么说那，有对自己一年的回顾其实挺好的，也许现在看起来没啥意义，但是时间线拉长，或许就有些意义了。其实我更想用视频记录自己的成长，看起来更生活形象一些，但是还是有些恐惧的，希2024年可以用视频记录自己的生活吧。\n\n<!-- more -->\n\n# 工作\n\n\n\n在2022年过年的时候，家里人在劝我说回到老家来上班了，我最终决定是在三月份回到老家了。目前是12月份，其实回来家已经9个月了 已经大半年了，在家里的工作一直都是公共资源交易的实施人员，没啥技术，也不需要开发，就这么在这里混了大半年。期间参加了一次洛阳的事业单位考试和计算机的中级资格证书，都没有考过。工作其实挺轻松的，个人有很多的空余时间，但是我比较颓废，不少时间用来打游戏 看视频了。这份工作工资很低，目前的工资比刚来的时候低了1k，因为前几个月公司说全体员工全部降薪1k，不少人都因为这个离开了，但是我没有，因为家里18线小城市，根本都没有开发的工作，我只能在这里混着了。\n\n\n\n在闲暇之余，我也学了rust，几次入门被劝退，如今正在第三次入门中，12月初，刚谈了个远程兼职，结果搞了几天也没消息了。中间也在github上做了一些贡献的，当然都是比较简单的，没有解决什么重量级任务。我自认为我还是比较想找开发的工作的，我喜欢那种解决bug的感觉，我喜欢帮助别人的感觉，每次在github上帮助他人解决了问题，我都很开心，似乎我的技能也有了用武之地，真正地开始帮助大家了。\n\n\n\n最近两个月知道了duolingo之后，还学了点日语，都是在推特看说日本多好多好之类的，无聊，焦虑的时候就会学习日语，心理存在一个幻想，也许到了日本我的处境就会好一点了，没有那么大工作焦虑了，不用那么卷了。英语也拾起来了，每天学习一点，希望有朝一日可以熟练使用英语来对话吧，进而进入到一家外企去上班。\n\n\n\n我是2020年本科毕业的，今年已经是第三年了，我的履历也非常的差，都是去的外包公司，甚至中间在北京还被辞退两次，现在回来老家大半年，履历更差了，年纪也是26了，发现到了现在个人情况真的是很艰难，我常常不敢去认真思考这些问题，因为我害怕，我总是会去逃避它。就我目前的这个履历，在北京上班快三年了，一年多没涨工资了，工资也就一万出头，也没存上什么钱，如果继续在北京打工，不知道有什么奔头，起码房子买不起了，虽然我也不打算买房子，工作那，工作有啥奔头吗？似乎也比较难，虽然我自认为自己水平还可以，甚至还头铁的花费了家人2w去报了一个什么班学技术，最终也是不了了之，被割韭菜了。唯一庆幸的是家里条件还行，父母都是教师，比较稳定，回来老家一个月多少钱反正够生活了，当然自己还是要努力搞钱的。但是回来家之后，发现了一个残酷的事实，就是大部分打工人你脱离了公司之后，你的技能是无法变现的，非常的扎心也非常的现实，我想着也是那个 推友的那个推那么火爆的原因吧！**“人都要有自己的生意，哪怕再小\"**\n\n\n\n# 生活\n\n\n\n上班看电视度日，下班就是网吧玩电脑或者躺在家里玩手机，比较颓废。\n\n\n\n说是要减肥，也没有减肥成功。\n\n\n\n健身也没有坚持，只是有几周连续每天都跑路几公里\n\n\n\n啊对了，三月份回来的时候，父母为我买了一辆12w的传祺gs3的车，目前也是开了大半年的司机了，最远跑过去郑州过，去一次300km左右\n\n\n\n在家里很好的就是和朋友在一起很开心，但是分开了也很愁，每个人的家庭状况是不一样的，每个人的人生进程是不一样的，有的刚结婚，有的刚考上公，有的孩子刚出生，无法让每个人都保持一样的人生进程，真就每个人都有自己的时间，而我还停留在刚刚开始人生的第一次正式恋爱。其实还是保持我的那个认知，孤独才是一个人的常态，也许世界上真的有所谓的感同身受，但是你或许碰不到，即使碰到了，你们各种具体情况也会导致各种各样的差异，所以难搞。\n\n\n\n## 恋爱\n\n\n\n最近的好事儿 怕就是在一个app 上认识了一个女孩了，她应该算是我这26年来第一个比较正式的女朋友吧，虽然她一直没有承认，但是我们都做了情侣的该做的事情了，也不知道她是怎么想的。她性格比较强势，做事很有目标，喜欢厌恶非常明确，非常有主见。最近我们有些矛盾，她觉得我不够上进，不会照顾她，而我也觉得她太有自己的想法了，活的太透彻了，有些烦躁。可能是我没有谈过恋爱，和她在一起我总是喜欢亲亲 抱抱 贴贴，但是她似乎不是很喜欢，之前还说过我是个下半身支配的人，哎！\n\n\n\n# 总结\n\n\n\n这篇文章写着写着，我发现我似乎有很多想说的，但是又觉得不太方便或者是什么，想法一闪而逝，最终也就如此了，似乎我连年终总结都不太认真。看完上文你也许觉得有点悲观，但是我其实一直的座右铭是 用微笑面对生活，不管生活如何，还是要用心积极的去面对的，只能说各位一起加油吧，每个人都有自己的难关，希望我们都可以不断地战胜它，当然失败也是允许的，尽人事，听天命！！！\n\n\n\n# 2024 目标\n\n\n\n## 工作\n\n\n\n1. 可以继续在这里干实施，但是要明确自己的目标了，不能再天天看视频度日了，这样每也挺无聊的\n\n2. github选定一个项目好好搞搞，能不能年底也秀下热力图，虽然我知道这并没有什么卵用\n\n3. 兼职可以继续问问，如果可以的话，就是继续干吧，好歹补贴家用\n\n4. 重点是 要做个自己的产品出来，这个当然非常难，尤其是我这样的自制力非常差的来说，但是不管 梦想还是要有的，万一实现了那\n\n\n\n## 生活\n\n\n\n- 减肥还是要提上日程，要不我一身病 到时候肯定很难搞\n\n- 和女朋友慢慢磨合吧，如果人家真的看不上我了，也不要强求，顺其自然就好\n\n- 可以用视频记录自己的生活而不是局限于文字\n","slug":"2023年度总结","published":1,"updated":"2025-03-02T03:37:34.359Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp470008n0uk207xf1t4","content":"<p>一转眼，又是一年过去了，今天是2023年的圣诞节，是星期一，没啥事儿 ，看到大家都写了年终总结，我也来写下吧，毕竟之前也写了三年了，写年终总结这个东西怎么说那，有对自己一年的回顾其实挺好的，也许现在看起来没啥意义，但是时间线拉长，或许就有些意义了。其实我更想用视频记录自己的成长，看起来更生活形象一些，但是还是有些恐惧的，希2024年可以用视频记录自己的生活吧。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h1><p>在2022年过年的时候，家里人在劝我说回到老家来上班了，我最终决定是在三月份回到老家了。目前是12月份，其实回来家已经9个月了 已经大半年了，在家里的工作一直都是公共资源交易的实施人员，没啥技术，也不需要开发，就这么在这里混了大半年。期间参加了一次洛阳的事业单位考试和计算机的中级资格证书，都没有考过。工作其实挺轻松的，个人有很多的空余时间，但是我比较颓废，不少时间用来打游戏 看视频了。这份工作工资很低，目前的工资比刚来的时候低了1k，因为前几个月公司说全体员工全部降薪1k，不少人都因为这个离开了，但是我没有，因为家里18线小城市，根本都没有开发的工作，我只能在这里混着了。</p>\n<p>在闲暇之余，我也学了rust，几次入门被劝退，如今正在第三次入门中，12月初，刚谈了个远程兼职，结果搞了几天也没消息了。中间也在github上做了一些贡献的，当然都是比较简单的，没有解决什么重量级任务。我自认为我还是比较想找开发的工作的，我喜欢那种解决bug的感觉，我喜欢帮助别人的感觉，每次在github上帮助他人解决了问题，我都很开心，似乎我的技能也有了用武之地，真正地开始帮助大家了。</p>\n<p>最近两个月知道了duolingo之后，还学了点日语，都是在推特看说日本多好多好之类的，无聊，焦虑的时候就会学习日语，心理存在一个幻想，也许到了日本我的处境就会好一点了，没有那么大工作焦虑了，不用那么卷了。英语也拾起来了，每天学习一点，希望有朝一日可以熟练使用英语来对话吧，进而进入到一家外企去上班。</p>\n<p>我是2020年本科毕业的，今年已经是第三年了，我的履历也非常的差，都是去的外包公司，甚至中间在北京还被辞退两次，现在回来老家大半年，履历更差了，年纪也是26了，发现到了现在个人情况真的是很艰难，我常常不敢去认真思考这些问题，因为我害怕，我总是会去逃避它。就我目前的这个履历，在北京上班快三年了，一年多没涨工资了，工资也就一万出头，也没存上什么钱，如果继续在北京打工，不知道有什么奔头，起码房子买不起了，虽然我也不打算买房子，工作那，工作有啥奔头吗？似乎也比较难，虽然我自认为自己水平还可以，甚至还头铁的花费了家人2w去报了一个什么班学技术，最终也是不了了之，被割韭菜了。唯一庆幸的是家里条件还行，父母都是教师，比较稳定，回来老家一个月多少钱反正够生活了，当然自己还是要努力搞钱的。但是回来家之后，发现了一个残酷的事实，就是大部分打工人你脱离了公司之后，你的技能是无法变现的，非常的扎心也非常的现实，我想着也是那个 推友的那个推那么火爆的原因吧！<strong>“人都要有自己的生意，哪怕再小&quot;</strong></p>\n<h1 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h1><p>上班看电视度日，下班就是网吧玩电脑或者躺在家里玩手机，比较颓废。</p>\n<p>说是要减肥，也没有减肥成功。</p>\n<p>健身也没有坚持，只是有几周连续每天都跑路几公里</p>\n<p>啊对了，三月份回来的时候，父母为我买了一辆12w的传祺gs3的车，目前也是开了大半年的司机了，最远跑过去郑州过，去一次300km左右</p>\n<p>在家里很好的就是和朋友在一起很开心，但是分开了也很愁，每个人的家庭状况是不一样的，每个人的人生进程是不一样的，有的刚结婚，有的刚考上公，有的孩子刚出生，无法让每个人都保持一样的人生进程，真就每个人都有自己的时间，而我还停留在刚刚开始人生的第一次正式恋爱。其实还是保持我的那个认知，孤独才是一个人的常态，也许世界上真的有所谓的感同身受，但是你或许碰不到，即使碰到了，你们各种具体情况也会导致各种各样的差异，所以难搞。</p>\n<h2 id=\"恋爱\"><a href=\"#恋爱\" class=\"headerlink\" title=\"恋爱\"></a>恋爱</h2><p>最近的好事儿 怕就是在一个app 上认识了一个女孩了，她应该算是我这26年来第一个比较正式的女朋友吧，虽然她一直没有承认，但是我们都做了情侣的该做的事情了，也不知道她是怎么想的。她性格比较强势，做事很有目标，喜欢厌恶非常明确，非常有主见。最近我们有些矛盾，她觉得我不够上进，不会照顾她，而我也觉得她太有自己的想法了，活的太透彻了，有些烦躁。可能是我没有谈过恋爱，和她在一起我总是喜欢亲亲 抱抱 贴贴，但是她似乎不是很喜欢，之前还说过我是个下半身支配的人，哎！</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这篇文章写着写着，我发现我似乎有很多想说的，但是又觉得不太方便或者是什么，想法一闪而逝，最终也就如此了，似乎我连年终总结都不太认真。看完上文你也许觉得有点悲观，但是我其实一直的座右铭是 用微笑面对生活，不管生活如何，还是要用心积极的去面对的，只能说各位一起加油吧，每个人都有自己的难关，希望我们都可以不断地战胜它，当然失败也是允许的，尽人事，听天命！！！</p>\n<h1 id=\"2024-目标\"><a href=\"#2024-目标\" class=\"headerlink\" title=\"2024 目标\"></a>2024 目标</h1><h2 id=\"工作-1\"><a href=\"#工作-1\" class=\"headerlink\" title=\"工作\"></a>工作</h2><ol>\n<li><p>可以继续在这里干实施，但是要明确自己的目标了，不能再天天看视频度日了，这样每也挺无聊的</p>\n</li>\n<li><p>github选定一个项目好好搞搞，能不能年底也秀下热力图，虽然我知道这并没有什么卵用</p>\n</li>\n<li><p>兼职可以继续问问，如果可以的话，就是继续干吧，好歹补贴家用</p>\n</li>\n<li><p>重点是 要做个自己的产品出来，这个当然非常难，尤其是我这样的自制力非常差的来说，但是不管 梦想还是要有的，万一实现了那</p>\n</li>\n</ol>\n<h2 id=\"生活-1\"><a href=\"#生活-1\" class=\"headerlink\" title=\"生活\"></a>生活</h2><ul>\n<li><p>减肥还是要提上日程，要不我一身病 到时候肯定很难搞</p>\n</li>\n<li><p>和女朋友慢慢磨合吧，如果人家真的看不上我了，也不要强求，顺其自然就好</p>\n</li>\n<li><p>可以用视频记录自己的生活而不是局限于文字</p>\n</li>\n</ul>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"一转眼，又是一年过去了，今天是2023年的圣诞节，是星期一，没啥事儿 ，看到大家都写了年终总结，我也来写下吧，毕竟之前也写了三年了，写年终总结这个东西怎么说那，有对自己一年的回顾其实挺好的，也许现在看起来没啥意义，但是时间线拉长，或许就有些意义了。其实我更想用视频记录自己的成长，看起来更生活形象一些，但是还是有些恐惧的，希2024年可以用视频记录自己的生活吧。\n\n工作\n在2022年过年的时候，家里人在劝我说回到老家来上班了，我最终决定是在三月份回到老家了。目前是12月份，其实回来家已经9个月了 已经大半年了，在家里的工作一直都是公共资源交易的实施人员，没啥技术，也不需要开发，就这么在这里混了大","more":"<h1 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h1><p>在2022年过年的时候，家里人在劝我说回到老家来上班了，我最终决定是在三月份回到老家了。目前是12月份，其实回来家已经9个月了 已经大半年了，在家里的工作一直都是公共资源交易的实施人员，没啥技术，也不需要开发，就这么在这里混了大半年。期间参加了一次洛阳的事业单位考试和计算机的中级资格证书，都没有考过。工作其实挺轻松的，个人有很多的空余时间，但是我比较颓废，不少时间用来打游戏 看视频了。这份工作工资很低，目前的工资比刚来的时候低了1k，因为前几个月公司说全体员工全部降薪1k，不少人都因为这个离开了，但是我没有，因为家里18线小城市，根本都没有开发的工作，我只能在这里混着了。</p>\n<p>在闲暇之余，我也学了rust，几次入门被劝退，如今正在第三次入门中，12月初，刚谈了个远程兼职，结果搞了几天也没消息了。中间也在github上做了一些贡献的，当然都是比较简单的，没有解决什么重量级任务。我自认为我还是比较想找开发的工作的，我喜欢那种解决bug的感觉，我喜欢帮助别人的感觉，每次在github上帮助他人解决了问题，我都很开心，似乎我的技能也有了用武之地，真正地开始帮助大家了。</p>\n<p>最近两个月知道了duolingo之后，还学了点日语，都是在推特看说日本多好多好之类的，无聊，焦虑的时候就会学习日语，心理存在一个幻想，也许到了日本我的处境就会好一点了，没有那么大工作焦虑了，不用那么卷了。英语也拾起来了，每天学习一点，希望有朝一日可以熟练使用英语来对话吧，进而进入到一家外企去上班。</p>\n<p>我是2020年本科毕业的，今年已经是第三年了，我的履历也非常的差，都是去的外包公司，甚至中间在北京还被辞退两次，现在回来老家大半年，履历更差了，年纪也是26了，发现到了现在个人情况真的是很艰难，我常常不敢去认真思考这些问题，因为我害怕，我总是会去逃避它。就我目前的这个履历，在北京上班快三年了，一年多没涨工资了，工资也就一万出头，也没存上什么钱，如果继续在北京打工，不知道有什么奔头，起码房子买不起了，虽然我也不打算买房子，工作那，工作有啥奔头吗？似乎也比较难，虽然我自认为自己水平还可以，甚至还头铁的花费了家人2w去报了一个什么班学技术，最终也是不了了之，被割韭菜了。唯一庆幸的是家里条件还行，父母都是教师，比较稳定，回来老家一个月多少钱反正够生活了，当然自己还是要努力搞钱的。但是回来家之后，发现了一个残酷的事实，就是大部分打工人你脱离了公司之后，你的技能是无法变现的，非常的扎心也非常的现实，我想着也是那个 推友的那个推那么火爆的原因吧！<strong>“人都要有自己的生意，哪怕再小&quot;</strong></p>\n<h1 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h1><p>上班看电视度日，下班就是网吧玩电脑或者躺在家里玩手机，比较颓废。</p>\n<p>说是要减肥，也没有减肥成功。</p>\n<p>健身也没有坚持，只是有几周连续每天都跑路几公里</p>\n<p>啊对了，三月份回来的时候，父母为我买了一辆12w的传祺gs3的车，目前也是开了大半年的司机了，最远跑过去郑州过，去一次300km左右</p>\n<p>在家里很好的就是和朋友在一起很开心，但是分开了也很愁，每个人的家庭状况是不一样的，每个人的人生进程是不一样的，有的刚结婚，有的刚考上公，有的孩子刚出生，无法让每个人都保持一样的人生进程，真就每个人都有自己的时间，而我还停留在刚刚开始人生的第一次正式恋爱。其实还是保持我的那个认知，孤独才是一个人的常态，也许世界上真的有所谓的感同身受，但是你或许碰不到，即使碰到了，你们各种具体情况也会导致各种各样的差异，所以难搞。</p>\n<h2 id=\"恋爱\"><a href=\"#恋爱\" class=\"headerlink\" title=\"恋爱\"></a>恋爱</h2><p>最近的好事儿 怕就是在一个app 上认识了一个女孩了，她应该算是我这26年来第一个比较正式的女朋友吧，虽然她一直没有承认，但是我们都做了情侣的该做的事情了，也不知道她是怎么想的。她性格比较强势，做事很有目标，喜欢厌恶非常明确，非常有主见。最近我们有些矛盾，她觉得我不够上进，不会照顾她，而我也觉得她太有自己的想法了，活的太透彻了，有些烦躁。可能是我没有谈过恋爱，和她在一起我总是喜欢亲亲 抱抱 贴贴，但是她似乎不是很喜欢，之前还说过我是个下半身支配的人，哎！</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这篇文章写着写着，我发现我似乎有很多想说的，但是又觉得不太方便或者是什么，想法一闪而逝，最终也就如此了，似乎我连年终总结都不太认真。看完上文你也许觉得有点悲观，但是我其实一直的座右铭是 用微笑面对生活，不管生活如何，还是要用心积极的去面对的，只能说各位一起加油吧，每个人都有自己的难关，希望我们都可以不断地战胜它，当然失败也是允许的，尽人事，听天命！！！</p>\n<h1 id=\"2024-目标\"><a href=\"#2024-目标\" class=\"headerlink\" title=\"2024 目标\"></a>2024 目标</h1><h2 id=\"工作-1\"><a href=\"#工作-1\" class=\"headerlink\" title=\"工作\"></a>工作</h2><ol>\n<li><p>可以继续在这里干实施，但是要明确自己的目标了，不能再天天看视频度日了，这样每也挺无聊的</p>\n</li>\n<li><p>github选定一个项目好好搞搞，能不能年底也秀下热力图，虽然我知道这并没有什么卵用</p>\n</li>\n<li><p>兼职可以继续问问，如果可以的话，就是继续干吧，好歹补贴家用</p>\n</li>\n<li><p>重点是 要做个自己的产品出来，这个当然非常难，尤其是我这样的自制力非常差的来说，但是不管 梦想还是要有的，万一实现了那</p>\n</li>\n</ol>\n<h2 id=\"生活-1\"><a href=\"#生活-1\" class=\"headerlink\" title=\"生活\"></a>生活</h2><ul>\n<li><p>减肥还是要提上日程，要不我一身病 到时候肯定很难搞</p>\n</li>\n<li><p>和女朋友慢慢磨合吧，如果人家真的看不上我了，也不要强求，顺其自然就好</p>\n</li>\n<li><p>可以用视频记录自己的生活而不是局限于文字</p>\n</li>\n</ul>"},{"title":"2024年度总结","description":"","abbrlink":"c2cf88b8","date":"2024-12-30T16:00:00.000Z","updated":"2024-12-30T16:00:00.000Z","_content":"\n\n\n恍恍惚惚，又是这一年，回望过去这一年，似乎什么也没干就又过去了，想要说些什么，却又不知道说什么，该如何去诉说，似乎只能长长的一声叹息，哎，来抒发这种感觉，还是从下面几个方面来说下这一年吧。\n<!-- more -->\n\n\n## 生活\n\n\n\n似乎生活是没啥太大变化吧，正常上班，周末找朋友聚会啥的，怎么这样一说，似乎我的生活好无趣，无所谓了，就这样吧！\n\n\n\n### 健康\n\n\n\n目前来说自己体重90多kg，太胖了，但是自己又一直得过且过，总是下不了决心去减肥。自己还有高血压和通风，两种慢性病，一般来说，不是身体不舒服，都不吃药，高血压有时候会引发头疼，通风的话，一旦发作就是很严重的，直接都无法走路，这一年通风发作了两次，发现了一个规律，就是当我不是特别注重饮食的时候，一般五个月会引发一次，所以为了避免这个问题，每三个月要去做一下尿酸检测。\n\n\n\n### 感情\n\n\n\n十月份到现在，谈了一个女朋友，不到一米五，初中学校教师，性格挺好的，比我小三岁，小脾气比较多，各种事情想的挺清楚的，也愿意沟通和改变，比较粘人，之前说想结婚来着，我一直比较抗拒，为啥那，我总是感觉自己还是小孩，说实话，我都没有想过自己要结婚，或者幻想过和谁以后结婚的日子。现在心态好一些了，但是吧 感觉她有点低，虽然我知道自己都没啥条件，我要求人家啥那。目前还在继续谈着\n\n\n\n## 工作\n\n\n\n![image-20241231152426049](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20241231152426049.png)\n\n\n\n我看了下我23年对于24年的目标，似乎并没有什么改善，还是在这里，浑浑噩噩，混日子，考公也考了几次，没有考上，做个什么产品，也没有任何进展，感觉自己好失败，我是97年生人，算起来今年27了吧，有时候就突然在想自己为啥混到了这个地步，但是又不敢仔细想，因为怕全是自己的问题，毕竟直面自己失败的那些年，还是挺需要勇气的，反正今天都要写年终总结了，不如回顾一下算了。27年的岁月啊，我这一辈子能有多少个27年，所以就只挑重要的说。\n\n\n\n1. 高考失败，进入了一个专科，本来班里三十多的人，高考最后排名倒数第几个，想起来还真是一个笑话那\n\n2. 到了专科专业是移动通信，沉迷于玩游戏，也没有太去思考未来，就正常完成学业然后到了大三去一个合作的公司实习，这次实习也跑了不少地方，吃了不少苦，甚至凌晨三四点还在荒郊野外的机房干活那，体验过这次实习之后，就回学校准备专升本了，结果还行，顺利升入了本科，回头看，似乎算是做的还不错的一个决定，否则，现在连考公也无法考，即使去公司面试如果还是专科，可能学历都直接过不去了。\n\n3. 到了两年制本科选了计算机，在学校里表现也是中规中矩吧，仍旧没有去考虑未来，还是日常打游戏，完成学业，到了毕业，选择了考研，奈何实力不行，又订的目标比较高，最终考研失败，就这，还没有努力去准备校招，由于害怕没有工作，急急忙忙找了一个不是开发的工作就去了。这又是一个错误的决定 我淦，我真是个糊涂蛋！！！\n\n4. 在那个工作干了几个月感觉一个月工资太低，不行，要去北京，于是面试了一个北京的公司，也不是直接的开发工作，而是低代码开发，由于自己想去北京，就这样糊里糊涂的，去了北京。现在看来，去北京似乎没有错，但是还是找好正儿八经的自研公司的开发才去比较好。\n\n5. 在低代码开发干了几个月感觉不行，于是就跳槽到了一个外包，期间还被辞退过，之后就一直在外包混了，回来老家之前那个外包干了两三年了吧，其实挺稳定的，就是自己感觉不知足，于是就决定回来老家了\n\n6. 回来老家之后，说实话，更躺平了，考公自己不是有很大的意愿，但是又贪图人家工作的轻松，考了几次，皆以失败告终，出去继续写代码啥的，家里不太愿意，想让结婚啥的，自己一直给自己说在家里也可以写代码啥的，结果发现要做一个产品好难的，自己行动力又很差，绝了 这一件一件事儿办的\n\n\n\n梳理了一下自己以往的经历还真是感觉每一步都是自作自受呀，太绝了！！！\n\n\n\n## 总结\n\n\n\n自己最大的问题，就是不去为自己的未来做打算，并一步步付出实践，所以接下来的一年一定要按照自己对于未来的计划，一步步走下去！！！\n\n\n\n## 2025年计划\n\n\n\n1. 减肥，目标两个月减肥到80kg\n\n2. 要写周总结，月总结，而不是只有年总结\n\n3. 每天目标明确，一定要完成每日目标，不要继续浑浑噩噩\n","source":"_posts/2024年度总结.md","raw":"---\ntitle: 2024年度总结\ndescription: ''\ntags:\n  - 年度总结\nabbrlink: c2cf88b8\ndate: 2024-12-31 00:00:00\nupdated: 2024-12-31 00:00:00\n---\n\n\n\n恍恍惚惚，又是这一年，回望过去这一年，似乎什么也没干就又过去了，想要说些什么，却又不知道说什么，该如何去诉说，似乎只能长长的一声叹息，哎，来抒发这种感觉，还是从下面几个方面来说下这一年吧。\n<!-- more -->\n\n\n## 生活\n\n\n\n似乎生活是没啥太大变化吧，正常上班，周末找朋友聚会啥的，怎么这样一说，似乎我的生活好无趣，无所谓了，就这样吧！\n\n\n\n### 健康\n\n\n\n目前来说自己体重90多kg，太胖了，但是自己又一直得过且过，总是下不了决心去减肥。自己还有高血压和通风，两种慢性病，一般来说，不是身体不舒服，都不吃药，高血压有时候会引发头疼，通风的话，一旦发作就是很严重的，直接都无法走路，这一年通风发作了两次，发现了一个规律，就是当我不是特别注重饮食的时候，一般五个月会引发一次，所以为了避免这个问题，每三个月要去做一下尿酸检测。\n\n\n\n### 感情\n\n\n\n十月份到现在，谈了一个女朋友，不到一米五，初中学校教师，性格挺好的，比我小三岁，小脾气比较多，各种事情想的挺清楚的，也愿意沟通和改变，比较粘人，之前说想结婚来着，我一直比较抗拒，为啥那，我总是感觉自己还是小孩，说实话，我都没有想过自己要结婚，或者幻想过和谁以后结婚的日子。现在心态好一些了，但是吧 感觉她有点低，虽然我知道自己都没啥条件，我要求人家啥那。目前还在继续谈着\n\n\n\n## 工作\n\n\n\n![image-20241231152426049](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20241231152426049.png)\n\n\n\n我看了下我23年对于24年的目标，似乎并没有什么改善，还是在这里，浑浑噩噩，混日子，考公也考了几次，没有考上，做个什么产品，也没有任何进展，感觉自己好失败，我是97年生人，算起来今年27了吧，有时候就突然在想自己为啥混到了这个地步，但是又不敢仔细想，因为怕全是自己的问题，毕竟直面自己失败的那些年，还是挺需要勇气的，反正今天都要写年终总结了，不如回顾一下算了。27年的岁月啊，我这一辈子能有多少个27年，所以就只挑重要的说。\n\n\n\n1. 高考失败，进入了一个专科，本来班里三十多的人，高考最后排名倒数第几个，想起来还真是一个笑话那\n\n2. 到了专科专业是移动通信，沉迷于玩游戏，也没有太去思考未来，就正常完成学业然后到了大三去一个合作的公司实习，这次实习也跑了不少地方，吃了不少苦，甚至凌晨三四点还在荒郊野外的机房干活那，体验过这次实习之后，就回学校准备专升本了，结果还行，顺利升入了本科，回头看，似乎算是做的还不错的一个决定，否则，现在连考公也无法考，即使去公司面试如果还是专科，可能学历都直接过不去了。\n\n3. 到了两年制本科选了计算机，在学校里表现也是中规中矩吧，仍旧没有去考虑未来，还是日常打游戏，完成学业，到了毕业，选择了考研，奈何实力不行，又订的目标比较高，最终考研失败，就这，还没有努力去准备校招，由于害怕没有工作，急急忙忙找了一个不是开发的工作就去了。这又是一个错误的决定 我淦，我真是个糊涂蛋！！！\n\n4. 在那个工作干了几个月感觉一个月工资太低，不行，要去北京，于是面试了一个北京的公司，也不是直接的开发工作，而是低代码开发，由于自己想去北京，就这样糊里糊涂的，去了北京。现在看来，去北京似乎没有错，但是还是找好正儿八经的自研公司的开发才去比较好。\n\n5. 在低代码开发干了几个月感觉不行，于是就跳槽到了一个外包，期间还被辞退过，之后就一直在外包混了，回来老家之前那个外包干了两三年了吧，其实挺稳定的，就是自己感觉不知足，于是就决定回来老家了\n\n6. 回来老家之后，说实话，更躺平了，考公自己不是有很大的意愿，但是又贪图人家工作的轻松，考了几次，皆以失败告终，出去继续写代码啥的，家里不太愿意，想让结婚啥的，自己一直给自己说在家里也可以写代码啥的，结果发现要做一个产品好难的，自己行动力又很差，绝了 这一件一件事儿办的\n\n\n\n梳理了一下自己以往的经历还真是感觉每一步都是自作自受呀，太绝了！！！\n\n\n\n## 总结\n\n\n\n自己最大的问题，就是不去为自己的未来做打算，并一步步付出实践，所以接下来的一年一定要按照自己对于未来的计划，一步步走下去！！！\n\n\n\n## 2025年计划\n\n\n\n1. 减肥，目标两个月减肥到80kg\n\n2. 要写周总结，月总结，而不是只有年总结\n\n3. 每天目标明确，一定要完成每日目标，不要继续浑浑噩噩\n","slug":"2024年度总结","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp48000bn0uk5f6r03ak","content":"<p>恍恍惚惚，又是这一年，回望过去这一年，似乎什么也没干就又过去了，想要说些什么，却又不知道说什么，该如何去诉说，似乎只能长长的一声叹息，哎，来抒发这种感觉，还是从下面几个方面来说下这一年吧。</p>\n<span id=\"more\"></span>\n\n\n<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2><p>似乎生活是没啥太大变化吧，正常上班，周末找朋友聚会啥的，怎么这样一说，似乎我的生活好无趣，无所谓了，就这样吧！</p>\n<h3 id=\"健康\"><a href=\"#健康\" class=\"headerlink\" title=\"健康\"></a>健康</h3><p>目前来说自己体重90多kg，太胖了，但是自己又一直得过且过，总是下不了决心去减肥。自己还有高血压和通风，两种慢性病，一般来说，不是身体不舒服，都不吃药，高血压有时候会引发头疼，通风的话，一旦发作就是很严重的，直接都无法走路，这一年通风发作了两次，发现了一个规律，就是当我不是特别注重饮食的时候，一般五个月会引发一次，所以为了避免这个问题，每三个月要去做一下尿酸检测。</p>\n<h3 id=\"感情\"><a href=\"#感情\" class=\"headerlink\" title=\"感情\"></a>感情</h3><p>十月份到现在，谈了一个女朋友，不到一米五，初中学校教师，性格挺好的，比我小三岁，小脾气比较多，各种事情想的挺清楚的，也愿意沟通和改变，比较粘人，之前说想结婚来着，我一直比较抗拒，为啥那，我总是感觉自己还是小孩，说实话，我都没有想过自己要结婚，或者幻想过和谁以后结婚的日子。现在心态好一些了，但是吧 感觉她有点低，虽然我知道自己都没啥条件，我要求人家啥那。目前还在继续谈着</p>\n<h2 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h2><p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20241231152426049.png\" alt=\"image-20241231152426049\" loading=\"lazy\"></p>\n<p>我看了下我23年对于24年的目标，似乎并没有什么改善，还是在这里，浑浑噩噩，混日子，考公也考了几次，没有考上，做个什么产品，也没有任何进展，感觉自己好失败，我是97年生人，算起来今年27了吧，有时候就突然在想自己为啥混到了这个地步，但是又不敢仔细想，因为怕全是自己的问题，毕竟直面自己失败的那些年，还是挺需要勇气的，反正今天都要写年终总结了，不如回顾一下算了。27年的岁月啊，我这一辈子能有多少个27年，所以就只挑重要的说。</p>\n<ol>\n<li><p>高考失败，进入了一个专科，本来班里三十多的人，高考最后排名倒数第几个，想起来还真是一个笑话那</p>\n</li>\n<li><p>到了专科专业是移动通信，沉迷于玩游戏，也没有太去思考未来，就正常完成学业然后到了大三去一个合作的公司实习，这次实习也跑了不少地方，吃了不少苦，甚至凌晨三四点还在荒郊野外的机房干活那，体验过这次实习之后，就回学校准备专升本了，结果还行，顺利升入了本科，回头看，似乎算是做的还不错的一个决定，否则，现在连考公也无法考，即使去公司面试如果还是专科，可能学历都直接过不去了。</p>\n</li>\n<li><p>到了两年制本科选了计算机，在学校里表现也是中规中矩吧，仍旧没有去考虑未来，还是日常打游戏，完成学业，到了毕业，选择了考研，奈何实力不行，又订的目标比较高，最终考研失败，就这，还没有努力去准备校招，由于害怕没有工作，急急忙忙找了一个不是开发的工作就去了。这又是一个错误的决定 我淦，我真是个糊涂蛋！！！</p>\n</li>\n<li><p>在那个工作干了几个月感觉一个月工资太低，不行，要去北京，于是面试了一个北京的公司，也不是直接的开发工作，而是低代码开发，由于自己想去北京，就这样糊里糊涂的，去了北京。现在看来，去北京似乎没有错，但是还是找好正儿八经的自研公司的开发才去比较好。</p>\n</li>\n<li><p>在低代码开发干了几个月感觉不行，于是就跳槽到了一个外包，期间还被辞退过，之后就一直在外包混了，回来老家之前那个外包干了两三年了吧，其实挺稳定的，就是自己感觉不知足，于是就决定回来老家了</p>\n</li>\n<li><p>回来老家之后，说实话，更躺平了，考公自己不是有很大的意愿，但是又贪图人家工作的轻松，考了几次，皆以失败告终，出去继续写代码啥的，家里不太愿意，想让结婚啥的，自己一直给自己说在家里也可以写代码啥的，结果发现要做一个产品好难的，自己行动力又很差，绝了 这一件一件事儿办的</p>\n</li>\n</ol>\n<p>梳理了一下自己以往的经历还真是感觉每一步都是自作自受呀，太绝了！！！</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>自己最大的问题，就是不去为自己的未来做打算，并一步步付出实践，所以接下来的一年一定要按照自己对于未来的计划，一步步走下去！！！</p>\n<h2 id=\"2025年计划\"><a href=\"#2025年计划\" class=\"headerlink\" title=\"2025年计划\"></a>2025年计划</h2><ol>\n<li><p>减肥，目标两个月减肥到80kg</p>\n</li>\n<li><p>要写周总结，月总结，而不是只有年总结</p>\n</li>\n<li><p>每天目标明确，一定要完成每日目标，不要继续浑浑噩噩</p>\n</li>\n</ol>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"恍恍惚惚，又是这一年，回望过去这一年，似乎什么也没干就又过去了，想要说些什么，却又不知道说什么，该如何去诉说，似乎只能长长的一声叹息，哎，来抒发这种感觉，还是从下面几个方面来说下这一年吧。\n\n生活\n似乎生活是没啥太大变化吧，正常上班，周末找朋友聚会啥的，怎么这样一说，似乎我的生活好无趣，无所谓了，就这样吧！\n\n健康\n目前来说自己体重90多kg，太胖了，但是自己又一直得过且过，总是下不了决心去减肥。自己还有高血压和通风，两种慢性病，一般来说，不是身体不舒服，都不吃药，高血压有时候会引发头疼，通风的话，一旦发作就是很严重的，直接都无法走路，这一年通风发作了两次，发现了一个规律，就是当我不是特别注重","more":"<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2><p>似乎生活是没啥太大变化吧，正常上班，周末找朋友聚会啥的，怎么这样一说，似乎我的生活好无趣，无所谓了，就这样吧！</p>\n<h3 id=\"健康\"><a href=\"#健康\" class=\"headerlink\" title=\"健康\"></a>健康</h3><p>目前来说自己体重90多kg，太胖了，但是自己又一直得过且过，总是下不了决心去减肥。自己还有高血压和通风，两种慢性病，一般来说，不是身体不舒服，都不吃药，高血压有时候会引发头疼，通风的话，一旦发作就是很严重的，直接都无法走路，这一年通风发作了两次，发现了一个规律，就是当我不是特别注重饮食的时候，一般五个月会引发一次，所以为了避免这个问题，每三个月要去做一下尿酸检测。</p>\n<h3 id=\"感情\"><a href=\"#感情\" class=\"headerlink\" title=\"感情\"></a>感情</h3><p>十月份到现在，谈了一个女朋友，不到一米五，初中学校教师，性格挺好的，比我小三岁，小脾气比较多，各种事情想的挺清楚的，也愿意沟通和改变，比较粘人，之前说想结婚来着，我一直比较抗拒，为啥那，我总是感觉自己还是小孩，说实话，我都没有想过自己要结婚，或者幻想过和谁以后结婚的日子。现在心态好一些了，但是吧 感觉她有点低，虽然我知道自己都没啥条件，我要求人家啥那。目前还在继续谈着</p>\n<h2 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h2><p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20241231152426049.png\" alt=\"image-20241231152426049\" loading=\"lazy\"></p>\n<p>我看了下我23年对于24年的目标，似乎并没有什么改善，还是在这里，浑浑噩噩，混日子，考公也考了几次，没有考上，做个什么产品，也没有任何进展，感觉自己好失败，我是97年生人，算起来今年27了吧，有时候就突然在想自己为啥混到了这个地步，但是又不敢仔细想，因为怕全是自己的问题，毕竟直面自己失败的那些年，还是挺需要勇气的，反正今天都要写年终总结了，不如回顾一下算了。27年的岁月啊，我这一辈子能有多少个27年，所以就只挑重要的说。</p>\n<ol>\n<li><p>高考失败，进入了一个专科，本来班里三十多的人，高考最后排名倒数第几个，想起来还真是一个笑话那</p>\n</li>\n<li><p>到了专科专业是移动通信，沉迷于玩游戏，也没有太去思考未来，就正常完成学业然后到了大三去一个合作的公司实习，这次实习也跑了不少地方，吃了不少苦，甚至凌晨三四点还在荒郊野外的机房干活那，体验过这次实习之后，就回学校准备专升本了，结果还行，顺利升入了本科，回头看，似乎算是做的还不错的一个决定，否则，现在连考公也无法考，即使去公司面试如果还是专科，可能学历都直接过不去了。</p>\n</li>\n<li><p>到了两年制本科选了计算机，在学校里表现也是中规中矩吧，仍旧没有去考虑未来，还是日常打游戏，完成学业，到了毕业，选择了考研，奈何实力不行，又订的目标比较高，最终考研失败，就这，还没有努力去准备校招，由于害怕没有工作，急急忙忙找了一个不是开发的工作就去了。这又是一个错误的决定 我淦，我真是个糊涂蛋！！！</p>\n</li>\n<li><p>在那个工作干了几个月感觉一个月工资太低，不行，要去北京，于是面试了一个北京的公司，也不是直接的开发工作，而是低代码开发，由于自己想去北京，就这样糊里糊涂的，去了北京。现在看来，去北京似乎没有错，但是还是找好正儿八经的自研公司的开发才去比较好。</p>\n</li>\n<li><p>在低代码开发干了几个月感觉不行，于是就跳槽到了一个外包，期间还被辞退过，之后就一直在外包混了，回来老家之前那个外包干了两三年了吧，其实挺稳定的，就是自己感觉不知足，于是就决定回来老家了</p>\n</li>\n<li><p>回来老家之后，说实话，更躺平了，考公自己不是有很大的意愿，但是又贪图人家工作的轻松，考了几次，皆以失败告终，出去继续写代码啥的，家里不太愿意，想让结婚啥的，自己一直给自己说在家里也可以写代码啥的，结果发现要做一个产品好难的，自己行动力又很差，绝了 这一件一件事儿办的</p>\n</li>\n</ol>\n<p>梳理了一下自己以往的经历还真是感觉每一步都是自作自受呀，太绝了！！！</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>自己最大的问题，就是不去为自己的未来做打算，并一步步付出实践，所以接下来的一年一定要按照自己对于未来的计划，一步步走下去！！！</p>\n<h2 id=\"2025年计划\"><a href=\"#2025年计划\" class=\"headerlink\" title=\"2025年计划\"></a>2025年计划</h2><ol>\n<li><p>减肥，目标两个月减肥到80kg</p>\n</li>\n<li><p>要写周总结，月总结，而不是只有年总结</p>\n</li>\n<li><p>每天目标明确，一定要完成每日目标，不要继续浑浑噩噩</p>\n</li>\n</ol>"},{"title":"ConcurrentHashMap详解","description":"","abbrlink":"cd1cc075","date":"2022-11-05T16:00:00.000Z","_content":"\n\nConcurrentHashMap详解\n\n\n\n<!-- more -->\n\n\n\n# 前言\n\n作为java面试当中非常典型的问题，刚毕业的时候就看了不少相关八股文，今天还是再来回顾一下吧。\n\n\n\n# what\n\n\n\nConcurrentHashMap 是 JUC 包提供的线程安全集合类， Concurrent 类型的容器有以下特点：\n\n\n\n- 内部很多操作采用 CAS 机制，一般可以提供较高的吞吐量\n\n- 弱一致性：\n\n\t- 遍历时弱一致性，例如，当利用迭代器遍历时，如果容器发生修改，迭代器仍然可以继续进行遍 历，这时内容是旧的\n\n\t- 求大小弱一致性，size 操作未必是 100% 准确\n\n\t- 读取弱一致性\n\n\tConcurrentHashMap 中不仅仅采用了 CAS 机制，还提供了锁分段的技术来提高并发访问率。\n\n\n\nHashTable容器在竞争激烈的并发环境下表现出效率低下的原因是所有访问HashTable的线程都必须竞争同一把锁，假如容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效提高并发访问效率，这就是ConcurrentHashMap所使用的锁分段技术。首先将数据分成一段一段地存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。\n\n\n\n# jdk7\n\n\n\n![image-1667735204183](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-1667735204183.png)\n\n\n\n# 参考\n\n- [深入理解ConcurrentHashMap](https://mvbbb.cn/concurrenthashmap-deepunderstanding/)\n","source":"_posts/ConcurrentHashMap详解.md","raw":"---\ntitle: ConcurrentHashMap详解\ndescription: ''\ntags:\n  - 无标签\nabbrlink: cd1cc075\ndate: 2022-11-06 00:00:00\n---\n\n\nConcurrentHashMap详解\n\n\n\n<!-- more -->\n\n\n\n# 前言\n\n作为java面试当中非常典型的问题，刚毕业的时候就看了不少相关八股文，今天还是再来回顾一下吧。\n\n\n\n# what\n\n\n\nConcurrentHashMap 是 JUC 包提供的线程安全集合类， Concurrent 类型的容器有以下特点：\n\n\n\n- 内部很多操作采用 CAS 机制，一般可以提供较高的吞吐量\n\n- 弱一致性：\n\n\t- 遍历时弱一致性，例如，当利用迭代器遍历时，如果容器发生修改，迭代器仍然可以继续进行遍 历，这时内容是旧的\n\n\t- 求大小弱一致性，size 操作未必是 100% 准确\n\n\t- 读取弱一致性\n\n\tConcurrentHashMap 中不仅仅采用了 CAS 机制，还提供了锁分段的技术来提高并发访问率。\n\n\n\nHashTable容器在竞争激烈的并发环境下表现出效率低下的原因是所有访问HashTable的线程都必须竞争同一把锁，假如容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效提高并发访问效率，这就是ConcurrentHashMap所使用的锁分段技术。首先将数据分成一段一段地存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。\n\n\n\n# jdk7\n\n\n\n![image-1667735204183](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-1667735204183.png)\n\n\n\n# 参考\n\n- [深入理解ConcurrentHashMap](https://mvbbb.cn/concurrenthashmap-deepunderstanding/)\n","slug":"ConcurrentHashMap详解","published":1,"updated":"2025-03-02T03:37:34.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp48000cn0ukfjf1030b","content":"<p>ConcurrentHashMap详解</p>\n<span id=\"more\"></span>\n\n\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>作为java面试当中非常典型的问题，刚毕业的时候就看了不少相关八股文，今天还是再来回顾一下吧。</p>\n<h1 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h1><p>ConcurrentHashMap 是 JUC 包提供的线程安全集合类， Concurrent 类型的容器有以下特点：</p>\n<ul>\n<li><p>内部很多操作采用 CAS 机制，一般可以提供较高的吞吐量</p>\n</li>\n<li><p>弱一致性：</p>\n<ul>\n<li><p>遍历时弱一致性，例如，当利用迭代器遍历时，如果容器发生修改，迭代器仍然可以继续进行遍 历，这时内容是旧的</p>\n</li>\n<li><p>求大小弱一致性，size 操作未必是 100% 准确</p>\n</li>\n<li><p>读取弱一致性</p>\n</li>\n</ul>\n<p>  ConcurrentHashMap 中不仅仅采用了 CAS 机制，还提供了锁分段的技术来提高并发访问率。</p>\n</li>\n</ul>\n<p>HashTable容器在竞争激烈的并发环境下表现出效率低下的原因是所有访问HashTable的线程都必须竞争同一把锁，假如容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效提高并发访问效率，这就是ConcurrentHashMap所使用的锁分段技术。首先将数据分成一段一段地存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。</p>\n<h1 id=\"jdk7\"><a href=\"#jdk7\" class=\"headerlink\" title=\"jdk7\"></a>jdk7</h1><p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-1667735204183.png\" alt=\"image-1667735204183\" loading=\"lazy\"></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tdmJiYi5jbi9jb25jdXJyZW50aGFzaG1hcC1kZWVwdW5kZXJzdGFuZGluZy8=\">深入理解ConcurrentHashMap<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"ConcurrentHashMap详解\n\n前言\n作为java面试当中非常典型的问题，刚毕业的时候就看了不少相关八股文，今天还是再来回顾一下吧。\n\nwhat\nConcurrentHashMap 是 JUC 包提供的线程安全集合类， Concurrent 类型的容器有以下特点：\n\n * 内部很多操作采用 CAS 机制，一般可以提供较高的吞吐量\n   \n   \n * 弱一致性：\n   \n    * 遍历时弱一致性，例如，当利用迭代器遍历时，如果容器发生修改，迭代器仍然可以继续进行遍 历，这时内容是旧的\n      \n      \n    * 求大小弱一致性，size 操作未必是 100% 准确\n  ","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>作为java面试当中非常典型的问题，刚毕业的时候就看了不少相关八股文，今天还是再来回顾一下吧。</p>\n<h1 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h1><p>ConcurrentHashMap 是 JUC 包提供的线程安全集合类， Concurrent 类型的容器有以下特点：</p>\n<ul>\n<li><p>内部很多操作采用 CAS 机制，一般可以提供较高的吞吐量</p>\n</li>\n<li><p>弱一致性：</p>\n<ul>\n<li><p>遍历时弱一致性，例如，当利用迭代器遍历时，如果容器发生修改，迭代器仍然可以继续进行遍 历，这时内容是旧的</p>\n</li>\n<li><p>求大小弱一致性，size 操作未必是 100% 准确</p>\n</li>\n<li><p>读取弱一致性</p>\n</li>\n</ul>\n<p>  ConcurrentHashMap 中不仅仅采用了 CAS 机制，还提供了锁分段的技术来提高并发访问率。</p>\n</li>\n</ul>\n<p>HashTable容器在竞争激烈的并发环境下表现出效率低下的原因是所有访问HashTable的线程都必须竞争同一把锁，假如容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效提高并发访问效率，这就是ConcurrentHashMap所使用的锁分段技术。首先将数据分成一段一段地存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。</p>\n<h1 id=\"jdk7\"><a href=\"#jdk7\" class=\"headerlink\" title=\"jdk7\"></a>jdk7</h1><p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-1667735204183.png\" alt=\"image-1667735204183\" loading=\"lazy\"></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tdmJiYi5jbi9jb25jdXJyZW50aGFzaG1hcC1kZWVwdW5kZXJzdGFuZGluZy8=\">深入理解ConcurrentHashMap<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>"},{"title":"CountDownLatch源码解析","description":"","abbrlink":"b81e60c9","date":"2021-08-20T16:00:00.000Z","_content":"\n\nCountDownLatch源码解析\n\n\n\n<!-- more -->\n\n\n\n# 使用场景\n\n\n\n1. 在一个任务需要多个线程来执行，并且是需要线程在同一时间一起开始执行，这样的话，可以使用CountDownLatch\n\n# 本质\n\n\n\n1. 虽然CountDownLatch这个类并没有直接继承AbstractQueuedSynchronizer,但是他使用的一个final修饰的变量sync继承AbstractQueuedSynchronizer，所以其本质上还是使用了AQS的共享模式\n\n2. 这个类的作用实际上就是在线程开始之后设置了一个栅栏，这个栅栏将所有线程阻塞住了，只有所有线程都激活的情况下，栅栏才会消失\n\n# 图解\n\n\n\n![image-20210822195328075](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210822195328075.png)\n\n\n\n# 源码分析\n\n## Sync\n\n```java\n\nprivate static final class Sync extends AbstractQueuedSynchronizer {\n\n    private static final long serialVersionUID = 4982264981922014374L;\n\n//实际上这个count相当于AQS中的state\n\n    Sync(int count) {\n\n        setState(count);\n\n    }\n\n//获取state的状态\n\n    int getCount() {\n\n        return getState();\n\n    }\n\n```\n\n### tryAcquireShared\n\n```java\n\n    //尝试获取共享锁\n\n    //其实一个线程的初始状态就是0，但是由于加入队列的时候，设置state的状态为shared，所以第一次进来一般不会时0，所以直接返回-1\n\n    protected int tryAcquireShared(int acquires) {\n\n        return (getState() == 0) ? 1 : -1;\n\n    }\n\n```\n\n### tryReleaseShared\n\n```java\n\n//用自旋的方法实现 state 减 1\n\nprotected boolean tryReleaseShared(int releases) {\n\n    // Decrement count; signal when transition to zero\n\n    for (;;) {\n\n        int c = getState();\n\n        if (c == 0)\n\n            return false;\n\n        int nextc = c-1;\n\n        if (compareAndSetState(c, nextc))\n\n  //重点在这里，是判断nextc等于0之后才会提出循环，\n\n  //所以其实就是将state变为1才会跳出循环，返回true\n\n            return nextc == 0;\n\n    }\n\n}\n\n```\n\n## await\n\n```java\n\npublic void await() throws InterruptedException {\n\n    sync.acquireSharedInterruptibly(1);\n\n}\n\n```\n\n### acquireSharedInterruptibly\n\n```java\n\npublic final void acquireSharedInterruptibly(int arg)\n\n        throws InterruptedException {\n\n     //查看当前线程是否被中断\n\n    if (Thread.interrupted())\n\n        throw new InterruptedException();\n\n    //tryAcquireShared方法就是上面sync中继承aqs重写的方法\n\n    //其实就是判断线程状态是否为0，为0，返回1，否则返回-1\n\n    if (tryAcquireShared(arg) < 0)\n\n        doAcquireSharedInterruptibly(arg);\n\n}\n\n```\n\n### doAcquireSharedInterruptibly\n\n```java\n\nprivate void doAcquireSharedInterruptibly(int arg)\n\n    throws InterruptedException {\n\n    //将当前节点加入阻塞队列中\n\n    final Node node = addWaiter(Node.SHARED);\n\n    boolean failed = true;\n\n    try {\n\n        for (;;) {\n\n        //返回上一个节点，用来帮助gc\n\n            final Node p = node.predecessor();\n\n            if (p == head) {\n\n            // 只要 state 不等于 0，那么这个方法返回 -1\n\n                int r = tryAcquireShared(arg);\n\n                if (r >= 0) {\n\n                    setHeadAndPropagate(node, r);\n\n                    p.next = null; // help GC\n\n                    failed = false;\n\n                    return;\n\n                }\n\n            }\n\n            //删除取消等待的节点，然后将前一个节点的state设置为\n\n            -1\n\n            if (shouldParkAfterFailedAcquire(p, node) &&\n\n                parkAndCheckInterrupt())\n\n                throw new InterruptedException();\n\n        }\n\n    } finally {\n\n        if (failed)\n\n            cancelAcquire(node);\n\n    }\n\n}\n\n```\n\n### predecessor\n\n```java\n\nfinal Node predecessor() throws NullPointerException {\n\n    Node p = prev;\n\n    if (p == null)\n\n        throw new NullPointerException();\n\n    else\n\n        return p;\n\n}\n\n```\n\n## countDown\n\n```java\n\npublic void countDown() {\n\n    sync.releaseShared(1);\n\n}\n\n```\n\n### releaseShared\n\n```java\n\npublic final boolean releaseShared(int arg) {\n\n   // 只有当 state 减为 0 的时候，tryReleaseShared 才返回 true\n\n    // 否则只是简单的 state = state - 1 那么 countDown() 方法就结束了\n\n    //    将 state 减到 0 的那个操作才是最复杂的，继续往下吧\n\n    if (tryReleaseShared(arg)) {\n\n        doReleaseShared();\n\n        return true;\n\n    }\n\n    return false;\n\n}\n\n```\n\n### doReleaseShared\n\n```java\n\nprivate void doReleaseShared() {\n\n    for (;;) {\n\n        Node h = head;\n\n        if (h != null && h != tail) {\n\n            int ws = h.waitStatus;\n\n            if (ws == Node.SIGNAL) {\n\n  //比较替换，期待是-1，想要将其变为0\n\n                if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))\n\n                    continue;            \n\n        //  唤醒 head 的后继节点，也就是阻塞队列中的第一个节点\n\n                unparkSuccessor(h);\n\n            }\n\n            else if (ws == 0 &&\n\n                     !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))\n\n                continue;                // loop on failed CAS\n\n        }\n\n        if (h == head)                   // loop if head changed\n\n            break;\n\n    }\n\n}\n\n```\n\n#### unparkSuccessor\n\n```java\n\nprivate void unparkSuccessor(Node node) {\n\n//获取到节点的状态\n\n    int ws = node.waitStatus;\n\n    if (ws < 0)\n\n        compareAndSetWaitStatus(node, ws, 0);\n\n\n\n    Node s = node.next;\n\n    if (s == null || s.waitStatus > 0) {\n\n        s = null;\n\n        for (Node t = tail; t != null && t != node; t = t.prev)\n\n            if (t.waitStatus <= 0)\n\n                s = t;\n\n    }\n\n    if (s != null)\n\n        LockSupport.unpark(s.thread);\n\n}\n\n```\n\n参考链接：\n\n [一行一行源码分析清楚 AbstractQueuedSynchronizer (三)](https://javadoop.com/post/AbstractQueuedSynchronizer-3)","source":"_posts/CountDownLatch源码解析.md","raw":"---\ntitle: CountDownLatch源码解析\ndescription: ''\ntags:\n  - 无标签\nabbrlink: b81e60c9\ndate: 2021-08-21 00:00:00\n---\n\n\nCountDownLatch源码解析\n\n\n\n<!-- more -->\n\n\n\n# 使用场景\n\n\n\n1. 在一个任务需要多个线程来执行，并且是需要线程在同一时间一起开始执行，这样的话，可以使用CountDownLatch\n\n# 本质\n\n\n\n1. 虽然CountDownLatch这个类并没有直接继承AbstractQueuedSynchronizer,但是他使用的一个final修饰的变量sync继承AbstractQueuedSynchronizer，所以其本质上还是使用了AQS的共享模式\n\n2. 这个类的作用实际上就是在线程开始之后设置了一个栅栏，这个栅栏将所有线程阻塞住了，只有所有线程都激活的情况下，栅栏才会消失\n\n# 图解\n\n\n\n![image-20210822195328075](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210822195328075.png)\n\n\n\n# 源码分析\n\n## Sync\n\n```java\n\nprivate static final class Sync extends AbstractQueuedSynchronizer {\n\n    private static final long serialVersionUID = 4982264981922014374L;\n\n//实际上这个count相当于AQS中的state\n\n    Sync(int count) {\n\n        setState(count);\n\n    }\n\n//获取state的状态\n\n    int getCount() {\n\n        return getState();\n\n    }\n\n```\n\n### tryAcquireShared\n\n```java\n\n    //尝试获取共享锁\n\n    //其实一个线程的初始状态就是0，但是由于加入队列的时候，设置state的状态为shared，所以第一次进来一般不会时0，所以直接返回-1\n\n    protected int tryAcquireShared(int acquires) {\n\n        return (getState() == 0) ? 1 : -1;\n\n    }\n\n```\n\n### tryReleaseShared\n\n```java\n\n//用自旋的方法实现 state 减 1\n\nprotected boolean tryReleaseShared(int releases) {\n\n    // Decrement count; signal when transition to zero\n\n    for (;;) {\n\n        int c = getState();\n\n        if (c == 0)\n\n            return false;\n\n        int nextc = c-1;\n\n        if (compareAndSetState(c, nextc))\n\n  //重点在这里，是判断nextc等于0之后才会提出循环，\n\n  //所以其实就是将state变为1才会跳出循环，返回true\n\n            return nextc == 0;\n\n    }\n\n}\n\n```\n\n## await\n\n```java\n\npublic void await() throws InterruptedException {\n\n    sync.acquireSharedInterruptibly(1);\n\n}\n\n```\n\n### acquireSharedInterruptibly\n\n```java\n\npublic final void acquireSharedInterruptibly(int arg)\n\n        throws InterruptedException {\n\n     //查看当前线程是否被中断\n\n    if (Thread.interrupted())\n\n        throw new InterruptedException();\n\n    //tryAcquireShared方法就是上面sync中继承aqs重写的方法\n\n    //其实就是判断线程状态是否为0，为0，返回1，否则返回-1\n\n    if (tryAcquireShared(arg) < 0)\n\n        doAcquireSharedInterruptibly(arg);\n\n}\n\n```\n\n### doAcquireSharedInterruptibly\n\n```java\n\nprivate void doAcquireSharedInterruptibly(int arg)\n\n    throws InterruptedException {\n\n    //将当前节点加入阻塞队列中\n\n    final Node node = addWaiter(Node.SHARED);\n\n    boolean failed = true;\n\n    try {\n\n        for (;;) {\n\n        //返回上一个节点，用来帮助gc\n\n            final Node p = node.predecessor();\n\n            if (p == head) {\n\n            // 只要 state 不等于 0，那么这个方法返回 -1\n\n                int r = tryAcquireShared(arg);\n\n                if (r >= 0) {\n\n                    setHeadAndPropagate(node, r);\n\n                    p.next = null; // help GC\n\n                    failed = false;\n\n                    return;\n\n                }\n\n            }\n\n            //删除取消等待的节点，然后将前一个节点的state设置为\n\n            -1\n\n            if (shouldParkAfterFailedAcquire(p, node) &&\n\n                parkAndCheckInterrupt())\n\n                throw new InterruptedException();\n\n        }\n\n    } finally {\n\n        if (failed)\n\n            cancelAcquire(node);\n\n    }\n\n}\n\n```\n\n### predecessor\n\n```java\n\nfinal Node predecessor() throws NullPointerException {\n\n    Node p = prev;\n\n    if (p == null)\n\n        throw new NullPointerException();\n\n    else\n\n        return p;\n\n}\n\n```\n\n## countDown\n\n```java\n\npublic void countDown() {\n\n    sync.releaseShared(1);\n\n}\n\n```\n\n### releaseShared\n\n```java\n\npublic final boolean releaseShared(int arg) {\n\n   // 只有当 state 减为 0 的时候，tryReleaseShared 才返回 true\n\n    // 否则只是简单的 state = state - 1 那么 countDown() 方法就结束了\n\n    //    将 state 减到 0 的那个操作才是最复杂的，继续往下吧\n\n    if (tryReleaseShared(arg)) {\n\n        doReleaseShared();\n\n        return true;\n\n    }\n\n    return false;\n\n}\n\n```\n\n### doReleaseShared\n\n```java\n\nprivate void doReleaseShared() {\n\n    for (;;) {\n\n        Node h = head;\n\n        if (h != null && h != tail) {\n\n            int ws = h.waitStatus;\n\n            if (ws == Node.SIGNAL) {\n\n  //比较替换，期待是-1，想要将其变为0\n\n                if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))\n\n                    continue;            \n\n        //  唤醒 head 的后继节点，也就是阻塞队列中的第一个节点\n\n                unparkSuccessor(h);\n\n            }\n\n            else if (ws == 0 &&\n\n                     !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))\n\n                continue;                // loop on failed CAS\n\n        }\n\n        if (h == head)                   // loop if head changed\n\n            break;\n\n    }\n\n}\n\n```\n\n#### unparkSuccessor\n\n```java\n\nprivate void unparkSuccessor(Node node) {\n\n//获取到节点的状态\n\n    int ws = node.waitStatus;\n\n    if (ws < 0)\n\n        compareAndSetWaitStatus(node, ws, 0);\n\n\n\n    Node s = node.next;\n\n    if (s == null || s.waitStatus > 0) {\n\n        s = null;\n\n        for (Node t = tail; t != null && t != node; t = t.prev)\n\n            if (t.waitStatus <= 0)\n\n                s = t;\n\n    }\n\n    if (s != null)\n\n        LockSupport.unpark(s.thread);\n\n}\n\n```\n\n参考链接：\n\n [一行一行源码分析清楚 AbstractQueuedSynchronizer (三)](https://javadoop.com/post/AbstractQueuedSynchronizer-3)","slug":"CountDownLatch源码解析","published":1,"updated":"2025-03-02T03:37:34.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4a000fn0ukcrrp9q4h","content":"<p>CountDownLatch源码解析</p>\n<span id=\"more\"></span>\n\n\n\n<h1 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h1><ol>\n<li>在一个任务需要多个线程来执行，并且是需要线程在同一时间一起开始执行，这样的话，可以使用CountDownLatch</li>\n</ol>\n<h1 id=\"本质\"><a href=\"#本质\" class=\"headerlink\" title=\"本质\"></a>本质</h1><ol>\n<li><p>虽然CountDownLatch这个类并没有直接继承AbstractQueuedSynchronizer,但是他使用的一个final修饰的变量sync继承AbstractQueuedSynchronizer，所以其本质上还是使用了AQS的共享模式</p>\n</li>\n<li><p>这个类的作用实际上就是在线程开始之后设置了一个栅栏，这个栅栏将所有线程阻塞住了，只有所有线程都激活的情况下，栅栏才会消失</p>\n</li>\n</ol>\n<h1 id=\"图解\"><a href=\"#图解\" class=\"headerlink\" title=\"图解\"></a>图解</h1><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210822195328075.png\" alt=\"image-20210822195328075\" loading=\"lazy\"></p>\n<h1 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h1><h2 id=\"Sync\"><a href=\"#Sync\" class=\"headerlink\" title=\"Sync\"></a>Sync</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Sync</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractQueuedSynchronizer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">4982264981922014374L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实际上这个count相当于AQS中的state</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Sync(<span class=\"type\">int</span> count) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        setState(count);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取state的状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">getCount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> getState();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"tryAcquireShared\"><a href=\"#tryAcquireShared\" class=\"headerlink\" title=\"tryAcquireShared\"></a>tryAcquireShared</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//尝试获取共享锁</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//其实一个线程的初始状态就是0，但是由于加入队列的时候，设置state的状态为shared，所以第一次进来一般不会时0，所以直接返回-1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"type\">int</span> <span class=\"title function_\">tryAcquireShared</span><span class=\"params\">(<span class=\"type\">int</span> acquires)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (getState() == <span class=\"number\">0</span>) ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"tryReleaseShared\"><a href=\"#tryReleaseShared\" class=\"headerlink\" title=\"tryReleaseShared\"></a>tryReleaseShared</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用自旋的方法实现 state 减 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryReleaseShared</span><span class=\"params\">(<span class=\"type\">int</span> releases)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Decrement count; signal when transition to zero</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> getState();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">nextc</span> <span class=\"operator\">=</span> c-<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compareAndSetState(c, nextc))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//重点在这里，是判断nextc等于0之后才会提出循环，</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//所以其实就是将state变为1才会跳出循环，返回true</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> nextc == <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"await\"><a href=\"#await\" class=\"headerlink\" title=\"await\"></a>await</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">await</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    sync.acquireSharedInterruptibly(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"acquireSharedInterruptibly\"><a href=\"#acquireSharedInterruptibly\" class=\"headerlink\" title=\"acquireSharedInterruptibly\"></a>acquireSharedInterruptibly</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">acquireSharedInterruptibly</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//查看当前线程是否被中断</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Thread.interrupted())</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InterruptedException</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//tryAcquireShared方法就是上面sync中继承aqs重写的方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//其实就是判断线程状态是否为0，为0，返回1，否则返回-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tryAcquireShared(arg) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        doAcquireSharedInterruptibly(arg);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"doAcquireSharedInterruptibly\"><a href=\"#doAcquireSharedInterruptibly\" class=\"headerlink\" title=\"doAcquireSharedInterruptibly\"></a>doAcquireSharedInterruptibly</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doAcquireSharedInterruptibly</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将当前节点加入阻塞队列中</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> addWaiter(Node.SHARED);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">failed</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//返回上一个节点，用来帮助gc</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> node.predecessor();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == head) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 只要 state 不等于 0，那么这个方法返回 -1</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> tryAcquireShared(arg);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (r &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    setHeadAndPropagate(node, r);</span><br><span class=\"line\"></span><br><span class=\"line\">                    p.next = <span class=\"literal\">null</span>; <span class=\"comment\">// help GC</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    failed = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//删除取消等待的节点，然后将前一个节点的state设置为</span></span><br><span class=\"line\"></span><br><span class=\"line\">            -<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">                parkAndCheckInterrupt())</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InterruptedException</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (failed)</span><br><span class=\"line\"></span><br><span class=\"line\">            cancelAcquire(node);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"predecessor\"><a href=\"#predecessor\" class=\"headerlink\" title=\"predecessor\"></a>predecessor</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> Node <span class=\"title function_\">predecessor</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> NullPointerException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"countDown\"><a href=\"#countDown\" class=\"headerlink\" title=\"countDown\"></a>countDown</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">countDown</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    sync.releaseShared(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"releaseShared\"><a href=\"#releaseShared\" class=\"headerlink\" title=\"releaseShared\"></a>releaseShared</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">releaseShared</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 只有当 state 减为 0 的时候，tryReleaseShared 才返回 true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 否则只是简单的 state = state - 1 那么 countDown() 方法就结束了</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//    将 state 减到 0 的那个操作才是最复杂的，继续往下吧</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tryReleaseShared(arg)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        doReleaseShared();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"doReleaseShared\"><a href=\"#doReleaseShared\" class=\"headerlink\" title=\"doReleaseShared\"></a>doReleaseShared</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doReleaseShared</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h != <span class=\"literal\">null</span> &amp;&amp; h != tail) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">ws</span> <span class=\"operator\">=</span> h.waitStatus;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ws == Node.SIGNAL) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//比较替换，期待是-1，想要将其变为0</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!compareAndSetWaitStatus(h, Node.SIGNAL, <span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;            </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//  唤醒 head 的后继节点，也就是阻塞队列中的第一个节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">                unparkSuccessor(h);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ws == <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">                     !compareAndSetWaitStatus(h, <span class=\"number\">0</span>, Node.PROPAGATE))</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;                <span class=\"comment\">// loop on failed CAS</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h == head)                   <span class=\"comment\">// loop if head changed</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"unparkSuccessor\"><a href=\"#unparkSuccessor\" class=\"headerlink\" title=\"unparkSuccessor\"></a>unparkSuccessor</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unparkSuccessor</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取到节点的状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">ws</span> <span class=\"operator\">=</span> node.waitStatus;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        compareAndSetWaitStatus(node, ws, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> node.next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"literal\">null</span> || s.waitStatus &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        s = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">Node</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> tail; t != <span class=\"literal\">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t.waitStatus &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                s = t;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s != <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        LockSupport.unpark(s.thread);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>参考链接：</p>\n<p> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9qYXZhZG9vcC5jb20vcG9zdC9BYnN0cmFjdFF1ZXVlZFN5bmNocm9uaXplci0z\">一行一行源码分析清楚 AbstractQueuedSynchronizer (三)<i class=\"fa fa-external-link-alt\"></i></span></p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"CountDownLatch源码解析\n\n使用场景\n 1. 在一个任务需要多个线程来执行，并且是需要线程在同一时间一起开始执行，这样的话，可以使用CountDownLatch\n\n本质\n 1. 虽然CountDownLatch这个类并没有直接继承AbstractQueuedSynchronizer,但是他使用的一个final修饰的变量sync继承AbstractQueuedSynchronizer，所以其本质上还是使用了AQS的共享模式\n    \n    \n 2. 这个类的作用实际上就是在线程开始之后设置了一个栅栏，这个栅栏将所有线程阻塞住了，只有所有线程都激活的情况下，栅栏才会消失\n    \n ","more":"<h1 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h1><ol>\n<li>在一个任务需要多个线程来执行，并且是需要线程在同一时间一起开始执行，这样的话，可以使用CountDownLatch</li>\n</ol>\n<h1 id=\"本质\"><a href=\"#本质\" class=\"headerlink\" title=\"本质\"></a>本质</h1><ol>\n<li><p>虽然CountDownLatch这个类并没有直接继承AbstractQueuedSynchronizer,但是他使用的一个final修饰的变量sync继承AbstractQueuedSynchronizer，所以其本质上还是使用了AQS的共享模式</p>\n</li>\n<li><p>这个类的作用实际上就是在线程开始之后设置了一个栅栏，这个栅栏将所有线程阻塞住了，只有所有线程都激活的情况下，栅栏才会消失</p>\n</li>\n</ol>\n<h1 id=\"图解\"><a href=\"#图解\" class=\"headerlink\" title=\"图解\"></a>图解</h1><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210822195328075.png\" alt=\"image-20210822195328075\" loading=\"lazy\"></p>\n<h1 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h1><h2 id=\"Sync\"><a href=\"#Sync\" class=\"headerlink\" title=\"Sync\"></a>Sync</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Sync</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractQueuedSynchronizer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">4982264981922014374L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实际上这个count相当于AQS中的state</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Sync(<span class=\"type\">int</span> count) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        setState(count);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取state的状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">getCount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> getState();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"tryAcquireShared\"><a href=\"#tryAcquireShared\" class=\"headerlink\" title=\"tryAcquireShared\"></a>tryAcquireShared</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//尝试获取共享锁</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//其实一个线程的初始状态就是0，但是由于加入队列的时候，设置state的状态为shared，所以第一次进来一般不会时0，所以直接返回-1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"type\">int</span> <span class=\"title function_\">tryAcquireShared</span><span class=\"params\">(<span class=\"type\">int</span> acquires)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (getState() == <span class=\"number\">0</span>) ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"tryReleaseShared\"><a href=\"#tryReleaseShared\" class=\"headerlink\" title=\"tryReleaseShared\"></a>tryReleaseShared</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用自旋的方法实现 state 减 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryReleaseShared</span><span class=\"params\">(<span class=\"type\">int</span> releases)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Decrement count; signal when transition to zero</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> getState();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">nextc</span> <span class=\"operator\">=</span> c-<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compareAndSetState(c, nextc))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//重点在这里，是判断nextc等于0之后才会提出循环，</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//所以其实就是将state变为1才会跳出循环，返回true</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> nextc == <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"await\"><a href=\"#await\" class=\"headerlink\" title=\"await\"></a>await</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">await</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    sync.acquireSharedInterruptibly(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"acquireSharedInterruptibly\"><a href=\"#acquireSharedInterruptibly\" class=\"headerlink\" title=\"acquireSharedInterruptibly\"></a>acquireSharedInterruptibly</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">acquireSharedInterruptibly</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//查看当前线程是否被中断</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Thread.interrupted())</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InterruptedException</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//tryAcquireShared方法就是上面sync中继承aqs重写的方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//其实就是判断线程状态是否为0，为0，返回1，否则返回-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tryAcquireShared(arg) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        doAcquireSharedInterruptibly(arg);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"doAcquireSharedInterruptibly\"><a href=\"#doAcquireSharedInterruptibly\" class=\"headerlink\" title=\"doAcquireSharedInterruptibly\"></a>doAcquireSharedInterruptibly</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doAcquireSharedInterruptibly</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将当前节点加入阻塞队列中</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> addWaiter(Node.SHARED);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">failed</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//返回上一个节点，用来帮助gc</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> node.predecessor();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == head) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 只要 state 不等于 0，那么这个方法返回 -1</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> tryAcquireShared(arg);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (r &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    setHeadAndPropagate(node, r);</span><br><span class=\"line\"></span><br><span class=\"line\">                    p.next = <span class=\"literal\">null</span>; <span class=\"comment\">// help GC</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    failed = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//删除取消等待的节点，然后将前一个节点的state设置为</span></span><br><span class=\"line\"></span><br><span class=\"line\">            -<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">                parkAndCheckInterrupt())</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InterruptedException</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (failed)</span><br><span class=\"line\"></span><br><span class=\"line\">            cancelAcquire(node);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"predecessor\"><a href=\"#predecessor\" class=\"headerlink\" title=\"predecessor\"></a>predecessor</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> Node <span class=\"title function_\">predecessor</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> NullPointerException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"countDown\"><a href=\"#countDown\" class=\"headerlink\" title=\"countDown\"></a>countDown</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">countDown</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    sync.releaseShared(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"releaseShared\"><a href=\"#releaseShared\" class=\"headerlink\" title=\"releaseShared\"></a>releaseShared</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">releaseShared</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 只有当 state 减为 0 的时候，tryReleaseShared 才返回 true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 否则只是简单的 state = state - 1 那么 countDown() 方法就结束了</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//    将 state 减到 0 的那个操作才是最复杂的，继续往下吧</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tryReleaseShared(arg)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        doReleaseShared();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"doReleaseShared\"><a href=\"#doReleaseShared\" class=\"headerlink\" title=\"doReleaseShared\"></a>doReleaseShared</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doReleaseShared</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h != <span class=\"literal\">null</span> &amp;&amp; h != tail) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">ws</span> <span class=\"operator\">=</span> h.waitStatus;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ws == Node.SIGNAL) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//比较替换，期待是-1，想要将其变为0</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!compareAndSetWaitStatus(h, Node.SIGNAL, <span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;            </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//  唤醒 head 的后继节点，也就是阻塞队列中的第一个节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">                unparkSuccessor(h);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ws == <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">                     !compareAndSetWaitStatus(h, <span class=\"number\">0</span>, Node.PROPAGATE))</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;                <span class=\"comment\">// loop on failed CAS</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h == head)                   <span class=\"comment\">// loop if head changed</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"unparkSuccessor\"><a href=\"#unparkSuccessor\" class=\"headerlink\" title=\"unparkSuccessor\"></a>unparkSuccessor</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unparkSuccessor</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取到节点的状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">ws</span> <span class=\"operator\">=</span> node.waitStatus;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        compareAndSetWaitStatus(node, ws, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> node.next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"literal\">null</span> || s.waitStatus &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        s = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">Node</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> tail; t != <span class=\"literal\">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t.waitStatus &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                s = t;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s != <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        LockSupport.unpark(s.thread);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>参考链接：</p>\n<p> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9qYXZhZG9vcC5jb20vcG9zdC9BYnN0cmFjdFF1ZXVlZFN5bmNocm9uaXplci0z\">一行一行源码分析清楚 AbstractQueuedSynchronizer (三)<i class=\"fa fa-external-link-alt\"></i></span></p>"},{"title":"JVM-1","description":"","abbrlink":"33b1a3cd","date":"2021-04-24T16:00:00.000Z","_content":"\n\nJVM内存模型的初步认识\n\n\n\n<!-- more -->\n\n\n\n### 内存模型\n\n\n\n![image-20210425121015195](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210425121015195.png)\n\n\n\n#### 堆\n\n\n\n![image-20210425121057530](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210425121057530.png)\n\n\n\n上图其实就是jdk1.8之前和之后的一个堆内容的区别，就是把永久代改名为元空间而已\n\n\n\n如上图所示\n\n\n\n方法区、堆是所有线程共享的，java栈、本地方法栈、程序计数器都是线程私有的\n\n\n\n默认情况下，JVM使用的内存的最大内存为电脑内存的四分之一，初始化的内存为六十四分之一\n\n\n\n##### 内存布局\n\n\n\n![image-20210425202425177](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210425202425177.png)\n\n\n\n###### 对象头\n\n\n\n对象头中主要是有两类数据\n\n\n\n1. 官方称它为“Mark Word\"，用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等\n\n2. 类型指针，即对象指向它的类型元数据的指针，Java虚拟机通过这个指针来确定该对象是哪个类的实例\n\n\n\n>- 通过类型指针来确定该对象是哪个类的实例。并不是所有的虚拟机实现都必须在对象数据上保留类型指针，换句话说，查找对象的元数据信息并不一定要经过对象本身\n\n>- 果对象是一个Java数组，那在对象头中还必须有一块用于记录数组长度的数据，因为虚拟机可以通过普通Java对象的元数据信息确定Java对象的大小，但是如果数组的长度是不确定的，将无法通过元数据中的信息推断出数组的大小。\n\n\n\n###### 实例数据\n\n\n\n这部分是对象真正存储的有效信息，即我们在程序代码里面所定义的各种类型的字段内容，无论是从父类继承下来的，还是在子类中定义的字段都必须记录起来\n\n\n\n> 在默认的分配策略来看\n\n>\n\n> - 前提条件：相同宽度的字段总是被分配到一起存放\n\n> - 在满足这个前提条件的情况下，在父类中定义的变量会出现在子类之前\n\n\n\n###### 对齐填充\n\n\n\n由于HotSpot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换句话说就是任何对象的大小都必须是8字节的整数倍。对象头部分已经被精心设计成正好是8字节的倍数（1倍或者2倍），因此，如果对象实例数据部分没有对齐的话，就需要通过对齐填充来补全。\n\n\n\n##### 对象指针\n\n\n\n###### 句柄\n\n\n\n·如果使用句柄访问的话，Java堆中将可能会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自具体的地址信息\n\n\n\n![image-20210425205226086](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210425205226086.png)\n\n\n\n###### 直接指针\n\n\n\n如果使用直接指针访问的话，Java堆中对象的内存布局就必须考虑如何放置访问类型数据的相关信息，reference中存储的直接就是对象地址，如果只是访问对象本身的话，就不需要多一次间接访问的开销\n\n\n\n![image-20210425205250644](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210425205250644.png)\n\n\n\n###### 对比\n\n\n\n直接指针的优势：速度更快，它节省了一次指针定位的时间开销，由于对象访问在Java中非常频繁，因此这类开销积少成多也是一项极为可观的执行成本\n\n\n\n> 就虚拟机HotSpot而言，采用的是直接指针\n\n\n\n句柄的优势： 当在进行垃圾回收的时候，会产生对象移动，而句柄，只需要修改句柄池到对象实例数据的指针即可，速度非常快；而直接指针是需要修改java栈中的reference的\n\n\n\n#### 永久代（元空间）\n\n\n\n作用：这个区域是常驻内存的，一般用来存放JDK自身携带的Class对象，interface原数据，存储的是java运行时的一些环境吗，这个区域不会存在垃圾回收，关闭jvm会释放这个区域的内存。\n\n\n\njdk1.6之前：永久代，常量池在永久代中\n\n\n\njdk1.7：永久代，但是慢慢退化了，“去永久代”，常量池在堆中\n\n\n\njdk1.8之后：无永久代，改名为元空间，常量池在元空间内\n\n\n\n元空间逻辑上存在，但是物理上不存在。\n\n\n\n新生代内存+老年代内存=JVM最大内存\n\n\n\n#### 本地方法栈\n\n\n\n本地方法栈、java栈、程序计数器这三个部分中是不会有垃圾垃圾产生的，栈的作用是就是排序，用完就弹出了，所以不会有垃圾，而程序计数器只是单纯的进行数字的加减，当然不会有垃圾。\n\n\n\n所以说平常说的jvm调优通常都是在堆（方法区其实是特殊的堆）中进行调优的\n\n\n\n> 本地方法栈中的方法就是 带有native关键字的方法，带有native关键字表示java语言已经访问不到，需要调用c的库来执行，通过JNI来调用\n\n\n\nJNI作用：扩展java的使用，融合不同的编程语言供java所使用\n\n\n\n#### 方法区\n\n\n\n方法区时被所有线程所共享的，所有字段和方法字节码，以及一些特殊方法，如构造函数，接口代码也在此定义，简单说，所有定义的方法的信息都保存在该区域，此区域属于共享区间\n\n\n\n静态变量、常量、类信息（构造方法、接口定义）、运行时的常量池存在方法区中，但是实例变量存在堆内存中，和方法区无关\n\n\n\n#### 运行时常量池\n\n\n\n运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池表（Constant Pool Table），用于存放编译期生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。\n\n\n\n运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性，Java语言并不要求常量一定只有编译期才能产生，也就是说，并非预置入Class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可以将新的常量放入池中，这种特性被开发人员利用得比较多的便是String类的intern()方法。\n\n\n\n#### 程序计数器\n\n\n\n程序计数器（Program Counter Register）是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。\n\n\n\n>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是本地（Native）方法，这个计数器值则应为空（Undefined）。此内存区域是唯一一个在《Java虚拟机规范》中没有规定任何OutOfMemoryError情况的区域。\n\n\n\n### 垃圾清理过程\n\n\n\n[垃圾清理过程](https://www.processon.com/view/link/603ef1f95653bb6efa46ff6d)\n\n\n\n### gc日志查看\n\n\n\n#### young gc\n\n\n\n![image-20210425152637368](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210425152637368.png)\n\n\n\n#### full gc\n\n\n\n![image-20210425152702546](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210425152702546.png)\n\n\n\n### 垃圾回收\n\n\n\n#### 算法\n\n\n\n##### 引用计数法\n\n\n\n在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的\n\n\n\n> 问题在于，当a引用b，b也引用a，除此之外，无任何引用的时候，两个对象再无任何引用，实际上这两个对象已经不可能再被访问，但是它们因为互相引用着对方，导致它们的引用计数都不为零，引用计数算法也就无法回收它们。\n\n\n\n##### 可达性分析算法\n\n\n\n从GC Roots开始，根据引用关系向下搜索，搜索过程所走过的路径称为“引用链”（Reference Chain）\n\n\n\n如果某个对象到GC Roots间没有任何引用链相连，或者用图论的话来说就是从GC Roots到这个对象不可达时，则证明此对象是不可能再被使用的。\n\n\n\n###### GC Roots\n\n\n\n- 在虚拟机栈（栈帧中的本地变量表）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等。·\n\n- 在方法区中类静态属性引用的对象，譬如Java类的引用类型静态变量。\n\n- ·在方法区中常量引用的对象，譬如字符串常量池（String Table）里的引用。·\n\n- 在本地方法栈中JNI（即通常所说的Native方法）引用的对象。\n\n- ·Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如NullPointExcepiton、OutOfMemoryError）等，还有系统类加载器。·\n\n- 所有被同步锁（synchronized关键字）持有的对象。·\n\n- 反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。\n\n\n\n> 除了这些固定的GC Roots集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象“临时性”地加入，共同构成完整GC Roots集合。\n\n>\n\n> 譬如后文将会提到的分代收集和局部回收（Partial GC），如果只针对Java堆中某一块区域发起垃圾收集时（如最典型的只针对新生代的垃圾收集），必须考虑到内存区域是虚拟机自己的实现细节（在用户视角里任何内存区域都是不可见的），更不是孤立封闭的，这时候就需要将这些关联区域的对象也一并加入GC Roots集合中去，才能保证可达性分析的正确性\n\n\n\n#### 引用\n\n\n\n##### 强引用\n\n\n\n强引用是最传统的“引用”的定义，是指在程序代码之中普遍存在的引用赋值，即类似“Object obj=new Object()”这种引用关系。无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。\n\n\n\n##### 软引用\n\n\n\n·软引用是用来描述一些还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。在JDK 1.2版之后提供了SoftReference类来实现软引用\n\n\n\n##### 弱引用\n\n\n\n·弱引用也是用来描述那些非必须对象，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生为止。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK 1.2版之后提供了WeakReference类来实现弱引用。\n\n\n\n##### 虚引用\n\n\n\n·虚引用也称为“幽灵引用”或者“幻影引用”，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被收集器回收时收到一个系统通知。在JDK 1.2版之后提供了PhantomReference类来实现虚引用。\n\n\n\n#### 对象死亡\n\n\n\n即使在可达性分析算法中判定为不可达的对象，也不是“非死不可”的，这时候它们暂时还处于“缓刑”阶段，要真正宣告一个对象死亡，至少要经历两次标记过程：\n\n\n\n1. 如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记，随后进行一次筛选\n\n2. 筛选的条件是此对象是否有必要执行finalize()方法。假如对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，那么虚拟机将这两种情况都视为“没有必要执行”。\n\n\n\n> 任何一个对象的finalize()方法都只会被系统自动调用一次，如果对象面临下一次回收，它的finalize()方法不会被再次执行\n\n\n\n不建议使用finalize\n\n\n\n>它的运行代价高昂，不确定性大，无法保证各个对象的调用顺序，如今已被官方明确声明为不推荐使用的语法。有些教材中描述它适合做“关闭外部资源”之类的清理性工作，这完全是对finalize()方法用途的一种自我安慰。finalize()能做的所有工作，使用try-finally或者其他方式都可以做得更好、更及时，所以笔者建议大家完全可以忘掉Java语言里面的这个方法。\n\n\n\n#### 时机\n\n\n\n##### metadata\n\n\n\nmetadata区域满了之后会触发full gc\n\n\n\n###### young gc\n\n\n\nyoung gc之前\n\n\n\n1. 空间担保机制：检查老年代可用对象是否大于新生代所有空间的大小，大于则进行young gc，小于则走第二步\n\n2. 是否开启HandlePromotionFailure  这个参数，开启则判断 判断老年代的内存大小是都大于之前每一次minor gc之后的进入老年代的对象的平均大小，如果大于则冒险直接往下走，小于则提前进行fullgc，否则提前进行full gc\n\n\n\nyoung gc之后\n\n\n\n1. 年龄太大了\n\n2. suvivor区域放不下新生的对象\n\n3. 动态年龄判断：相同年龄对象总和大于s区的50%，此时年龄n以上的对象进入老年代\n\n\n\n###### full gc\n\n\n\n1. 老年代可以设置一个阈值，大于这个这个阈值就会触发full gc\n\n2. 在执行Young GC之前，如果判断发现老年代可用空间小于了历次Young GC后升入老年代的平均对象大小的话，那么就会在Young GC之前触发Full GC，先回收掉老年代一批对象，然后再执行Young GC\n\n3. 如果Young GC过后的存活对象太多，Survivor区域放不下，就要放入老年代，要是此时老年代也放不下，就会触发Full GC，回收老年代一批对象，再把这些年轻代的存活对象放入老年代中\n\n\n\n##### 进入老年代时机\n\n\n\n1. 年龄到默认的15\n\n2. 对象太大了，直接进入老年代，不经过新生代\n\n3. Minor gc之后，发现剩余对象太多，s区放不下\n\n4. 动态年龄判断，所有年龄大小的内存加起来超过一个s区的50%，n个年龄及以上对象直接进入老年代\n\n\n\n##### oom\n\n\n\n如果是full gc之后，老年代还是没有足够的大小来放minor gc存活的对象，就会触发oom\n\n\n\n三种情况\n\n\n\n###### metaspace\n\n\n\n- 元空间设置参数使用默认的\n\n- 动态代理动态生成了一些类，可能会导致内存溢出\n\n\n\n###### 虚拟机栈\n\n\n\n可能是方法递归调用，就是有些残忍\n\n\n\n###### 堆内存\n\n\n\n- 高并发\n\n- 内存泄露","source":"_posts/JVM-1.md","raw":"---\ntitle: JVM-1\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 33b1a3cd\ndate: 2021-04-25 00:00:00\n---\n\n\nJVM内存模型的初步认识\n\n\n\n<!-- more -->\n\n\n\n### 内存模型\n\n\n\n![image-20210425121015195](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210425121015195.png)\n\n\n\n#### 堆\n\n\n\n![image-20210425121057530](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210425121057530.png)\n\n\n\n上图其实就是jdk1.8之前和之后的一个堆内容的区别，就是把永久代改名为元空间而已\n\n\n\n如上图所示\n\n\n\n方法区、堆是所有线程共享的，java栈、本地方法栈、程序计数器都是线程私有的\n\n\n\n默认情况下，JVM使用的内存的最大内存为电脑内存的四分之一，初始化的内存为六十四分之一\n\n\n\n##### 内存布局\n\n\n\n![image-20210425202425177](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210425202425177.png)\n\n\n\n###### 对象头\n\n\n\n对象头中主要是有两类数据\n\n\n\n1. 官方称它为“Mark Word\"，用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等\n\n2. 类型指针，即对象指向它的类型元数据的指针，Java虚拟机通过这个指针来确定该对象是哪个类的实例\n\n\n\n>- 通过类型指针来确定该对象是哪个类的实例。并不是所有的虚拟机实现都必须在对象数据上保留类型指针，换句话说，查找对象的元数据信息并不一定要经过对象本身\n\n>- 果对象是一个Java数组，那在对象头中还必须有一块用于记录数组长度的数据，因为虚拟机可以通过普通Java对象的元数据信息确定Java对象的大小，但是如果数组的长度是不确定的，将无法通过元数据中的信息推断出数组的大小。\n\n\n\n###### 实例数据\n\n\n\n这部分是对象真正存储的有效信息，即我们在程序代码里面所定义的各种类型的字段内容，无论是从父类继承下来的，还是在子类中定义的字段都必须记录起来\n\n\n\n> 在默认的分配策略来看\n\n>\n\n> - 前提条件：相同宽度的字段总是被分配到一起存放\n\n> - 在满足这个前提条件的情况下，在父类中定义的变量会出现在子类之前\n\n\n\n###### 对齐填充\n\n\n\n由于HotSpot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换句话说就是任何对象的大小都必须是8字节的整数倍。对象头部分已经被精心设计成正好是8字节的倍数（1倍或者2倍），因此，如果对象实例数据部分没有对齐的话，就需要通过对齐填充来补全。\n\n\n\n##### 对象指针\n\n\n\n###### 句柄\n\n\n\n·如果使用句柄访问的话，Java堆中将可能会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自具体的地址信息\n\n\n\n![image-20210425205226086](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210425205226086.png)\n\n\n\n###### 直接指针\n\n\n\n如果使用直接指针访问的话，Java堆中对象的内存布局就必须考虑如何放置访问类型数据的相关信息，reference中存储的直接就是对象地址，如果只是访问对象本身的话，就不需要多一次间接访问的开销\n\n\n\n![image-20210425205250644](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210425205250644.png)\n\n\n\n###### 对比\n\n\n\n直接指针的优势：速度更快，它节省了一次指针定位的时间开销，由于对象访问在Java中非常频繁，因此这类开销积少成多也是一项极为可观的执行成本\n\n\n\n> 就虚拟机HotSpot而言，采用的是直接指针\n\n\n\n句柄的优势： 当在进行垃圾回收的时候，会产生对象移动，而句柄，只需要修改句柄池到对象实例数据的指针即可，速度非常快；而直接指针是需要修改java栈中的reference的\n\n\n\n#### 永久代（元空间）\n\n\n\n作用：这个区域是常驻内存的，一般用来存放JDK自身携带的Class对象，interface原数据，存储的是java运行时的一些环境吗，这个区域不会存在垃圾回收，关闭jvm会释放这个区域的内存。\n\n\n\njdk1.6之前：永久代，常量池在永久代中\n\n\n\njdk1.7：永久代，但是慢慢退化了，“去永久代”，常量池在堆中\n\n\n\njdk1.8之后：无永久代，改名为元空间，常量池在元空间内\n\n\n\n元空间逻辑上存在，但是物理上不存在。\n\n\n\n新生代内存+老年代内存=JVM最大内存\n\n\n\n#### 本地方法栈\n\n\n\n本地方法栈、java栈、程序计数器这三个部分中是不会有垃圾垃圾产生的，栈的作用是就是排序，用完就弹出了，所以不会有垃圾，而程序计数器只是单纯的进行数字的加减，当然不会有垃圾。\n\n\n\n所以说平常说的jvm调优通常都是在堆（方法区其实是特殊的堆）中进行调优的\n\n\n\n> 本地方法栈中的方法就是 带有native关键字的方法，带有native关键字表示java语言已经访问不到，需要调用c的库来执行，通过JNI来调用\n\n\n\nJNI作用：扩展java的使用，融合不同的编程语言供java所使用\n\n\n\n#### 方法区\n\n\n\n方法区时被所有线程所共享的，所有字段和方法字节码，以及一些特殊方法，如构造函数，接口代码也在此定义，简单说，所有定义的方法的信息都保存在该区域，此区域属于共享区间\n\n\n\n静态变量、常量、类信息（构造方法、接口定义）、运行时的常量池存在方法区中，但是实例变量存在堆内存中，和方法区无关\n\n\n\n#### 运行时常量池\n\n\n\n运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池表（Constant Pool Table），用于存放编译期生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。\n\n\n\n运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性，Java语言并不要求常量一定只有编译期才能产生，也就是说，并非预置入Class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可以将新的常量放入池中，这种特性被开发人员利用得比较多的便是String类的intern()方法。\n\n\n\n#### 程序计数器\n\n\n\n程序计数器（Program Counter Register）是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。\n\n\n\n>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是本地（Native）方法，这个计数器值则应为空（Undefined）。此内存区域是唯一一个在《Java虚拟机规范》中没有规定任何OutOfMemoryError情况的区域。\n\n\n\n### 垃圾清理过程\n\n\n\n[垃圾清理过程](https://www.processon.com/view/link/603ef1f95653bb6efa46ff6d)\n\n\n\n### gc日志查看\n\n\n\n#### young gc\n\n\n\n![image-20210425152637368](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210425152637368.png)\n\n\n\n#### full gc\n\n\n\n![image-20210425152702546](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210425152702546.png)\n\n\n\n### 垃圾回收\n\n\n\n#### 算法\n\n\n\n##### 引用计数法\n\n\n\n在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的\n\n\n\n> 问题在于，当a引用b，b也引用a，除此之外，无任何引用的时候，两个对象再无任何引用，实际上这两个对象已经不可能再被访问，但是它们因为互相引用着对方，导致它们的引用计数都不为零，引用计数算法也就无法回收它们。\n\n\n\n##### 可达性分析算法\n\n\n\n从GC Roots开始，根据引用关系向下搜索，搜索过程所走过的路径称为“引用链”（Reference Chain）\n\n\n\n如果某个对象到GC Roots间没有任何引用链相连，或者用图论的话来说就是从GC Roots到这个对象不可达时，则证明此对象是不可能再被使用的。\n\n\n\n###### GC Roots\n\n\n\n- 在虚拟机栈（栈帧中的本地变量表）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等。·\n\n- 在方法区中类静态属性引用的对象，譬如Java类的引用类型静态变量。\n\n- ·在方法区中常量引用的对象，譬如字符串常量池（String Table）里的引用。·\n\n- 在本地方法栈中JNI（即通常所说的Native方法）引用的对象。\n\n- ·Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如NullPointExcepiton、OutOfMemoryError）等，还有系统类加载器。·\n\n- 所有被同步锁（synchronized关键字）持有的对象。·\n\n- 反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。\n\n\n\n> 除了这些固定的GC Roots集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象“临时性”地加入，共同构成完整GC Roots集合。\n\n>\n\n> 譬如后文将会提到的分代收集和局部回收（Partial GC），如果只针对Java堆中某一块区域发起垃圾收集时（如最典型的只针对新生代的垃圾收集），必须考虑到内存区域是虚拟机自己的实现细节（在用户视角里任何内存区域都是不可见的），更不是孤立封闭的，这时候就需要将这些关联区域的对象也一并加入GC Roots集合中去，才能保证可达性分析的正确性\n\n\n\n#### 引用\n\n\n\n##### 强引用\n\n\n\n强引用是最传统的“引用”的定义，是指在程序代码之中普遍存在的引用赋值，即类似“Object obj=new Object()”这种引用关系。无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。\n\n\n\n##### 软引用\n\n\n\n·软引用是用来描述一些还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。在JDK 1.2版之后提供了SoftReference类来实现软引用\n\n\n\n##### 弱引用\n\n\n\n·弱引用也是用来描述那些非必须对象，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生为止。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK 1.2版之后提供了WeakReference类来实现弱引用。\n\n\n\n##### 虚引用\n\n\n\n·虚引用也称为“幽灵引用”或者“幻影引用”，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被收集器回收时收到一个系统通知。在JDK 1.2版之后提供了PhantomReference类来实现虚引用。\n\n\n\n#### 对象死亡\n\n\n\n即使在可达性分析算法中判定为不可达的对象，也不是“非死不可”的，这时候它们暂时还处于“缓刑”阶段，要真正宣告一个对象死亡，至少要经历两次标记过程：\n\n\n\n1. 如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记，随后进行一次筛选\n\n2. 筛选的条件是此对象是否有必要执行finalize()方法。假如对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，那么虚拟机将这两种情况都视为“没有必要执行”。\n\n\n\n> 任何一个对象的finalize()方法都只会被系统自动调用一次，如果对象面临下一次回收，它的finalize()方法不会被再次执行\n\n\n\n不建议使用finalize\n\n\n\n>它的运行代价高昂，不确定性大，无法保证各个对象的调用顺序，如今已被官方明确声明为不推荐使用的语法。有些教材中描述它适合做“关闭外部资源”之类的清理性工作，这完全是对finalize()方法用途的一种自我安慰。finalize()能做的所有工作，使用try-finally或者其他方式都可以做得更好、更及时，所以笔者建议大家完全可以忘掉Java语言里面的这个方法。\n\n\n\n#### 时机\n\n\n\n##### metadata\n\n\n\nmetadata区域满了之后会触发full gc\n\n\n\n###### young gc\n\n\n\nyoung gc之前\n\n\n\n1. 空间担保机制：检查老年代可用对象是否大于新生代所有空间的大小，大于则进行young gc，小于则走第二步\n\n2. 是否开启HandlePromotionFailure  这个参数，开启则判断 判断老年代的内存大小是都大于之前每一次minor gc之后的进入老年代的对象的平均大小，如果大于则冒险直接往下走，小于则提前进行fullgc，否则提前进行full gc\n\n\n\nyoung gc之后\n\n\n\n1. 年龄太大了\n\n2. suvivor区域放不下新生的对象\n\n3. 动态年龄判断：相同年龄对象总和大于s区的50%，此时年龄n以上的对象进入老年代\n\n\n\n###### full gc\n\n\n\n1. 老年代可以设置一个阈值，大于这个这个阈值就会触发full gc\n\n2. 在执行Young GC之前，如果判断发现老年代可用空间小于了历次Young GC后升入老年代的平均对象大小的话，那么就会在Young GC之前触发Full GC，先回收掉老年代一批对象，然后再执行Young GC\n\n3. 如果Young GC过后的存活对象太多，Survivor区域放不下，就要放入老年代，要是此时老年代也放不下，就会触发Full GC，回收老年代一批对象，再把这些年轻代的存活对象放入老年代中\n\n\n\n##### 进入老年代时机\n\n\n\n1. 年龄到默认的15\n\n2. 对象太大了，直接进入老年代，不经过新生代\n\n3. Minor gc之后，发现剩余对象太多，s区放不下\n\n4. 动态年龄判断，所有年龄大小的内存加起来超过一个s区的50%，n个年龄及以上对象直接进入老年代\n\n\n\n##### oom\n\n\n\n如果是full gc之后，老年代还是没有足够的大小来放minor gc存活的对象，就会触发oom\n\n\n\n三种情况\n\n\n\n###### metaspace\n\n\n\n- 元空间设置参数使用默认的\n\n- 动态代理动态生成了一些类，可能会导致内存溢出\n\n\n\n###### 虚拟机栈\n\n\n\n可能是方法递归调用，就是有些残忍\n\n\n\n###### 堆内存\n\n\n\n- 高并发\n\n- 内存泄露","slug":"JVM-1","published":1,"updated":"2025-03-02T03:37:34.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4a000hn0ukcjpx2o5q","content":"<p>JVM内存模型的初步认识</p>\n<span id=\"more\"></span>\n\n\n\n<h3 id=\"内存模型\"><a href=\"#内存模型\" class=\"headerlink\" title=\"内存模型\"></a>内存模型</h3><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210425121015195.png\" alt=\"image-20210425121015195\" loading=\"lazy\"></p>\n<h4 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h4><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210425121057530.png\" alt=\"image-20210425121057530\" loading=\"lazy\"></p>\n<p>上图其实就是jdk1.8之前和之后的一个堆内容的区别，就是把永久代改名为元空间而已</p>\n<p>如上图所示</p>\n<p>方法区、堆是所有线程共享的，java栈、本地方法栈、程序计数器都是线程私有的</p>\n<p>默认情况下，JVM使用的内存的最大内存为电脑内存的四分之一，初始化的内存为六十四分之一</p>\n<h5 id=\"内存布局\"><a href=\"#内存布局\" class=\"headerlink\" title=\"内存布局\"></a>内存布局</h5><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210425202425177.png\" alt=\"image-20210425202425177\" loading=\"lazy\"></p>\n<h6 id=\"对象头\"><a href=\"#对象头\" class=\"headerlink\" title=\"对象头\"></a>对象头</h6><p>对象头中主要是有两类数据</p>\n<ol>\n<li><p>官方称它为“Mark Word&quot;，用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等</p>\n</li>\n<li><p>类型指针，即对象指向它的类型元数据的指针，Java虚拟机通过这个指针来确定该对象是哪个类的实例</p>\n</li>\n</ol>\n<blockquote>\n<ul>\n<li>通过类型指针来确定该对象是哪个类的实例。并不是所有的虚拟机实现都必须在对象数据上保留类型指针，换句话说，查找对象的元数据信息并不一定要经过对象本身</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>果对象是一个Java数组，那在对象头中还必须有一块用于记录数组长度的数据，因为虚拟机可以通过普通Java对象的元数据信息确定Java对象的大小，但是如果数组的长度是不确定的，将无法通过元数据中的信息推断出数组的大小。</li>\n</ul>\n</blockquote>\n<h6 id=\"实例数据\"><a href=\"#实例数据\" class=\"headerlink\" title=\"实例数据\"></a>实例数据</h6><p>这部分是对象真正存储的有效信息，即我们在程序代码里面所定义的各种类型的字段内容，无论是从父类继承下来的，还是在子类中定义的字段都必须记录起来</p>\n<blockquote>\n<p>在默认的分配策略来看</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ul>\n<li>前提条件：相同宽度的字段总是被分配到一起存放</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>在满足这个前提条件的情况下，在父类中定义的变量会出现在子类之前</li>\n</ul>\n</blockquote>\n<h6 id=\"对齐填充\"><a href=\"#对齐填充\" class=\"headerlink\" title=\"对齐填充\"></a>对齐填充</h6><p>由于HotSpot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换句话说就是任何对象的大小都必须是8字节的整数倍。对象头部分已经被精心设计成正好是8字节的倍数（1倍或者2倍），因此，如果对象实例数据部分没有对齐的话，就需要通过对齐填充来补全。</p>\n<h5 id=\"对象指针\"><a href=\"#对象指针\" class=\"headerlink\" title=\"对象指针\"></a>对象指针</h5><h6 id=\"句柄\"><a href=\"#句柄\" class=\"headerlink\" title=\"句柄\"></a>句柄</h6><p>·如果使用句柄访问的话，Java堆中将可能会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自具体的地址信息</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210425205226086.png\" alt=\"image-20210425205226086\" loading=\"lazy\"></p>\n<h6 id=\"直接指针\"><a href=\"#直接指针\" class=\"headerlink\" title=\"直接指针\"></a>直接指针</h6><p>如果使用直接指针访问的话，Java堆中对象的内存布局就必须考虑如何放置访问类型数据的相关信息，reference中存储的直接就是对象地址，如果只是访问对象本身的话，就不需要多一次间接访问的开销</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210425205250644.png\" alt=\"image-20210425205250644\" loading=\"lazy\"></p>\n<h6 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h6><p>直接指针的优势：速度更快，它节省了一次指针定位的时间开销，由于对象访问在Java中非常频繁，因此这类开销积少成多也是一项极为可观的执行成本</p>\n<blockquote>\n<p>就虚拟机HotSpot而言，采用的是直接指针</p>\n</blockquote>\n<p>句柄的优势： 当在进行垃圾回收的时候，会产生对象移动，而句柄，只需要修改句柄池到对象实例数据的指针即可，速度非常快；而直接指针是需要修改java栈中的reference的</p>\n<h4 id=\"永久代（元空间）\"><a href=\"#永久代（元空间）\" class=\"headerlink\" title=\"永久代（元空间）\"></a>永久代（元空间）</h4><p>作用：这个区域是常驻内存的，一般用来存放JDK自身携带的Class对象，interface原数据，存储的是java运行时的一些环境吗，这个区域不会存在垃圾回收，关闭jvm会释放这个区域的内存。</p>\n<p>jdk1.6之前：永久代，常量池在永久代中</p>\n<p>jdk1.7：永久代，但是慢慢退化了，“去永久代”，常量池在堆中</p>\n<p>jdk1.8之后：无永久代，改名为元空间，常量池在元空间内</p>\n<p>元空间逻辑上存在，但是物理上不存在。</p>\n<p>新生代内存+老年代内存&#x3D;JVM最大内存</p>\n<h4 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h4><p>本地方法栈、java栈、程序计数器这三个部分中是不会有垃圾垃圾产生的，栈的作用是就是排序，用完就弹出了，所以不会有垃圾，而程序计数器只是单纯的进行数字的加减，当然不会有垃圾。</p>\n<p>所以说平常说的jvm调优通常都是在堆（方法区其实是特殊的堆）中进行调优的</p>\n<blockquote>\n<p>本地方法栈中的方法就是 带有native关键字的方法，带有native关键字表示java语言已经访问不到，需要调用c的库来执行，通过JNI来调用</p>\n</blockquote>\n<p>JNI作用：扩展java的使用，融合不同的编程语言供java所使用</p>\n<h4 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h4><p>方法区时被所有线程所共享的，所有字段和方法字节码，以及一些特殊方法，如构造函数，接口代码也在此定义，简单说，所有定义的方法的信息都保存在该区域，此区域属于共享区间</p>\n<p>静态变量、常量、类信息（构造方法、接口定义）、运行时的常量池存在方法区中，但是实例变量存在堆内存中，和方法区无关</p>\n<h4 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h4><p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池表（Constant Pool Table），用于存放编译期生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。</p>\n<p>运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性，Java语言并不要求常量一定只有编译期才能产生，也就是说，并非预置入Class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可以将新的常量放入池中，这种特性被开发人员利用得比较多的便是String类的intern()方法。</p>\n<h4 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h4><p>程序计数器（Program Counter Register）是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。</p>\n<blockquote>\n<p>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是本地（Native）方法，这个计数器值则应为空（Undefined）。此内存区域是唯一一个在《Java虚拟机规范》中没有规定任何OutOfMemoryError情况的区域。</p>\n</blockquote>\n<h3 id=\"垃圾清理过程\"><a href=\"#垃圾清理过程\" class=\"headerlink\" title=\"垃圾清理过程\"></a>垃圾清理过程</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucHJvY2Vzc29uLmNvbS92aWV3L2xpbmsvNjAzZWYxZjk1NjUzYmI2ZWZhNDZmZjZk\">垃圾清理过程<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"gc日志查看\"><a href=\"#gc日志查看\" class=\"headerlink\" title=\"gc日志查看\"></a>gc日志查看</h3><h4 id=\"young-gc\"><a href=\"#young-gc\" class=\"headerlink\" title=\"young gc\"></a>young gc</h4><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210425152637368.png\" alt=\"image-20210425152637368\" loading=\"lazy\"></p>\n<h4 id=\"full-gc\"><a href=\"#full-gc\" class=\"headerlink\" title=\"full gc\"></a>full gc</h4><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210425152702546.png\" alt=\"image-20210425152702546\" loading=\"lazy\"></p>\n<h3 id=\"垃圾回收\"><a href=\"#垃圾回收\" class=\"headerlink\" title=\"垃圾回收\"></a>垃圾回收</h3><h4 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h4><h5 id=\"引用计数法\"><a href=\"#引用计数法\" class=\"headerlink\" title=\"引用计数法\"></a>引用计数法</h5><p>在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的</p>\n<blockquote>\n<p>问题在于，当a引用b，b也引用a，除此之外，无任何引用的时候，两个对象再无任何引用，实际上这两个对象已经不可能再被访问，但是它们因为互相引用着对方，导致它们的引用计数都不为零，引用计数算法也就无法回收它们。</p>\n</blockquote>\n<h5 id=\"可达性分析算法\"><a href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"></a>可达性分析算法</h5><p>从GC Roots开始，根据引用关系向下搜索，搜索过程所走过的路径称为“引用链”（Reference Chain）</p>\n<p>如果某个对象到GC Roots间没有任何引用链相连，或者用图论的话来说就是从GC Roots到这个对象不可达时，则证明此对象是不可能再被使用的。</p>\n<h6 id=\"GC-Roots\"><a href=\"#GC-Roots\" class=\"headerlink\" title=\"GC Roots\"></a>GC Roots</h6><ul>\n<li><p>在虚拟机栈（栈帧中的本地变量表）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等。·</p>\n</li>\n<li><p>在方法区中类静态属性引用的对象，譬如Java类的引用类型静态变量。</p>\n</li>\n<li><p>·在方法区中常量引用的对象，譬如字符串常量池（String Table）里的引用。·</p>\n</li>\n<li><p>在本地方法栈中JNI（即通常所说的Native方法）引用的对象。</p>\n</li>\n<li><p>·Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如NullPointExcepiton、OutOfMemoryError）等，还有系统类加载器。·</p>\n</li>\n<li><p>所有被同步锁（synchronized关键字）持有的对象。·</p>\n</li>\n<li><p>反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。</p>\n</li>\n</ul>\n<blockquote>\n<p>除了这些固定的GC Roots集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象“临时性”地加入，共同构成完整GC Roots集合。</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>譬如后文将会提到的分代收集和局部回收（Partial GC），如果只针对Java堆中某一块区域发起垃圾收集时（如最典型的只针对新生代的垃圾收集），必须考虑到内存区域是虚拟机自己的实现细节（在用户视角里任何内存区域都是不可见的），更不是孤立封闭的，这时候就需要将这些关联区域的对象也一并加入GC Roots集合中去，才能保证可达性分析的正确性</p>\n</blockquote>\n<h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><h5 id=\"强引用\"><a href=\"#强引用\" class=\"headerlink\" title=\"强引用\"></a>强引用</h5><p>强引用是最传统的“引用”的定义，是指在程序代码之中普遍存在的引用赋值，即类似“Object obj&#x3D;new Object()”这种引用关系。无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。</p>\n<h5 id=\"软引用\"><a href=\"#软引用\" class=\"headerlink\" title=\"软引用\"></a>软引用</h5><p>·软引用是用来描述一些还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。在JDK 1.2版之后提供了SoftReference类来实现软引用</p>\n<h5 id=\"弱引用\"><a href=\"#弱引用\" class=\"headerlink\" title=\"弱引用\"></a>弱引用</h5><p>·弱引用也是用来描述那些非必须对象，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生为止。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK 1.2版之后提供了WeakReference类来实现弱引用。</p>\n<h5 id=\"虚引用\"><a href=\"#虚引用\" class=\"headerlink\" title=\"虚引用\"></a>虚引用</h5><p>·虚引用也称为“幽灵引用”或者“幻影引用”，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被收集器回收时收到一个系统通知。在JDK 1.2版之后提供了PhantomReference类来实现虚引用。</p>\n<h4 id=\"对象死亡\"><a href=\"#对象死亡\" class=\"headerlink\" title=\"对象死亡\"></a>对象死亡</h4><p>即使在可达性分析算法中判定为不可达的对象，也不是“非死不可”的，这时候它们暂时还处于“缓刑”阶段，要真正宣告一个对象死亡，至少要经历两次标记过程：</p>\n<ol>\n<li><p>如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记，随后进行一次筛选</p>\n</li>\n<li><p>筛选的条件是此对象是否有必要执行finalize()方法。假如对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，那么虚拟机将这两种情况都视为“没有必要执行”。</p>\n</li>\n</ol>\n<blockquote>\n<p>任何一个对象的finalize()方法都只会被系统自动调用一次，如果对象面临下一次回收，它的finalize()方法不会被再次执行</p>\n</blockquote>\n<p>不建议使用finalize</p>\n<blockquote>\n<p>它的运行代价高昂，不确定性大，无法保证各个对象的调用顺序，如今已被官方明确声明为不推荐使用的语法。有些教材中描述它适合做“关闭外部资源”之类的清理性工作，这完全是对finalize()方法用途的一种自我安慰。finalize()能做的所有工作，使用try-finally或者其他方式都可以做得更好、更及时，所以笔者建议大家完全可以忘掉Java语言里面的这个方法。</p>\n</blockquote>\n<h4 id=\"时机\"><a href=\"#时机\" class=\"headerlink\" title=\"时机\"></a>时机</h4><h5 id=\"metadata\"><a href=\"#metadata\" class=\"headerlink\" title=\"metadata\"></a>metadata</h5><p>metadata区域满了之后会触发full gc</p>\n<h6 id=\"young-gc-1\"><a href=\"#young-gc-1\" class=\"headerlink\" title=\"young gc\"></a>young gc</h6><p>young gc之前</p>\n<ol>\n<li><p>空间担保机制：检查老年代可用对象是否大于新生代所有空间的大小，大于则进行young gc，小于则走第二步</p>\n</li>\n<li><p>是否开启HandlePromotionFailure  这个参数，开启则判断 判断老年代的内存大小是都大于之前每一次minor gc之后的进入老年代的对象的平均大小，如果大于则冒险直接往下走，小于则提前进行fullgc，否则提前进行full gc</p>\n</li>\n</ol>\n<p>young gc之后</p>\n<ol>\n<li><p>年龄太大了</p>\n</li>\n<li><p>suvivor区域放不下新生的对象</p>\n</li>\n<li><p>动态年龄判断：相同年龄对象总和大于s区的50%，此时年龄n以上的对象进入老年代</p>\n</li>\n</ol>\n<h6 id=\"full-gc-1\"><a href=\"#full-gc-1\" class=\"headerlink\" title=\"full gc\"></a>full gc</h6><ol>\n<li><p>老年代可以设置一个阈值，大于这个这个阈值就会触发full gc</p>\n</li>\n<li><p>在执行Young GC之前，如果判断发现老年代可用空间小于了历次Young GC后升入老年代的平均对象大小的话，那么就会在Young GC之前触发Full GC，先回收掉老年代一批对象，然后再执行Young GC</p>\n</li>\n<li><p>如果Young GC过后的存活对象太多，Survivor区域放不下，就要放入老年代，要是此时老年代也放不下，就会触发Full GC，回收老年代一批对象，再把这些年轻代的存活对象放入老年代中</p>\n</li>\n</ol>\n<h5 id=\"进入老年代时机\"><a href=\"#进入老年代时机\" class=\"headerlink\" title=\"进入老年代时机\"></a>进入老年代时机</h5><ol>\n<li><p>年龄到默认的15</p>\n</li>\n<li><p>对象太大了，直接进入老年代，不经过新生代</p>\n</li>\n<li><p>Minor gc之后，发现剩余对象太多，s区放不下</p>\n</li>\n<li><p>动态年龄判断，所有年龄大小的内存加起来超过一个s区的50%，n个年龄及以上对象直接进入老年代</p>\n</li>\n</ol>\n<h5 id=\"oom\"><a href=\"#oom\" class=\"headerlink\" title=\"oom\"></a>oom</h5><p>如果是full gc之后，老年代还是没有足够的大小来放minor gc存活的对象，就会触发oom</p>\n<p>三种情况</p>\n<h6 id=\"metaspace\"><a href=\"#metaspace\" class=\"headerlink\" title=\"metaspace\"></a>metaspace</h6><ul>\n<li><p>元空间设置参数使用默认的</p>\n</li>\n<li><p>动态代理动态生成了一些类，可能会导致内存溢出</p>\n</li>\n</ul>\n<h6 id=\"虚拟机栈\"><a href=\"#虚拟机栈\" class=\"headerlink\" title=\"虚拟机栈\"></a>虚拟机栈</h6><p>可能是方法递归调用，就是有些残忍</p>\n<h6 id=\"堆内存\"><a href=\"#堆内存\" class=\"headerlink\" title=\"堆内存\"></a>堆内存</h6><ul>\n<li><p>高并发</p>\n</li>\n<li><p>内存泄露</p>\n</li>\n</ul>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"JVM内存模型的初步认识\n\n内存模型\n\n\n堆\n\n\n上图其实就是jdk1.8之前和之后的一个堆内容的区别，就是把永久代改名为元空间而已\n\n如上图所示\n\n方法区、堆是所有线程共享的，java栈、本地方法栈、程序计数器都是线程私有的\n\n默认情况下，JVM使用的内存的最大内存为电脑内存的四分之一，初始化的内存为六十四分之一\n\n内存布局\n\n\n对象头\n对象头中主要是有两类数据\n\n 1. 官方称它为“Mark Word\"，用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等\n    \n    \n 2. 类型指针，即对象指向它的类型元数","more":"<h3 id=\"内存模型\"><a href=\"#内存模型\" class=\"headerlink\" title=\"内存模型\"></a>内存模型</h3><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210425121015195.png\" alt=\"image-20210425121015195\" loading=\"lazy\"></p>\n<h4 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h4><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210425121057530.png\" alt=\"image-20210425121057530\" loading=\"lazy\"></p>\n<p>上图其实就是jdk1.8之前和之后的一个堆内容的区别，就是把永久代改名为元空间而已</p>\n<p>如上图所示</p>\n<p>方法区、堆是所有线程共享的，java栈、本地方法栈、程序计数器都是线程私有的</p>\n<p>默认情况下，JVM使用的内存的最大内存为电脑内存的四分之一，初始化的内存为六十四分之一</p>\n<h5 id=\"内存布局\"><a href=\"#内存布局\" class=\"headerlink\" title=\"内存布局\"></a>内存布局</h5><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210425202425177.png\" alt=\"image-20210425202425177\" loading=\"lazy\"></p>\n<h6 id=\"对象头\"><a href=\"#对象头\" class=\"headerlink\" title=\"对象头\"></a>对象头</h6><p>对象头中主要是有两类数据</p>\n<ol>\n<li><p>官方称它为“Mark Word&quot;，用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等</p>\n</li>\n<li><p>类型指针，即对象指向它的类型元数据的指针，Java虚拟机通过这个指针来确定该对象是哪个类的实例</p>\n</li>\n</ol>\n<blockquote>\n<ul>\n<li>通过类型指针来确定该对象是哪个类的实例。并不是所有的虚拟机实现都必须在对象数据上保留类型指针，换句话说，查找对象的元数据信息并不一定要经过对象本身</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>果对象是一个Java数组，那在对象头中还必须有一块用于记录数组长度的数据，因为虚拟机可以通过普通Java对象的元数据信息确定Java对象的大小，但是如果数组的长度是不确定的，将无法通过元数据中的信息推断出数组的大小。</li>\n</ul>\n</blockquote>\n<h6 id=\"实例数据\"><a href=\"#实例数据\" class=\"headerlink\" title=\"实例数据\"></a>实例数据</h6><p>这部分是对象真正存储的有效信息，即我们在程序代码里面所定义的各种类型的字段内容，无论是从父类继承下来的，还是在子类中定义的字段都必须记录起来</p>\n<blockquote>\n<p>在默认的分配策略来看</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ul>\n<li>前提条件：相同宽度的字段总是被分配到一起存放</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>在满足这个前提条件的情况下，在父类中定义的变量会出现在子类之前</li>\n</ul>\n</blockquote>\n<h6 id=\"对齐填充\"><a href=\"#对齐填充\" class=\"headerlink\" title=\"对齐填充\"></a>对齐填充</h6><p>由于HotSpot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换句话说就是任何对象的大小都必须是8字节的整数倍。对象头部分已经被精心设计成正好是8字节的倍数（1倍或者2倍），因此，如果对象实例数据部分没有对齐的话，就需要通过对齐填充来补全。</p>\n<h5 id=\"对象指针\"><a href=\"#对象指针\" class=\"headerlink\" title=\"对象指针\"></a>对象指针</h5><h6 id=\"句柄\"><a href=\"#句柄\" class=\"headerlink\" title=\"句柄\"></a>句柄</h6><p>·如果使用句柄访问的话，Java堆中将可能会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自具体的地址信息</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210425205226086.png\" alt=\"image-20210425205226086\" loading=\"lazy\"></p>\n<h6 id=\"直接指针\"><a href=\"#直接指针\" class=\"headerlink\" title=\"直接指针\"></a>直接指针</h6><p>如果使用直接指针访问的话，Java堆中对象的内存布局就必须考虑如何放置访问类型数据的相关信息，reference中存储的直接就是对象地址，如果只是访问对象本身的话，就不需要多一次间接访问的开销</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210425205250644.png\" alt=\"image-20210425205250644\" loading=\"lazy\"></p>\n<h6 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h6><p>直接指针的优势：速度更快，它节省了一次指针定位的时间开销，由于对象访问在Java中非常频繁，因此这类开销积少成多也是一项极为可观的执行成本</p>\n<blockquote>\n<p>就虚拟机HotSpot而言，采用的是直接指针</p>\n</blockquote>\n<p>句柄的优势： 当在进行垃圾回收的时候，会产生对象移动，而句柄，只需要修改句柄池到对象实例数据的指针即可，速度非常快；而直接指针是需要修改java栈中的reference的</p>\n<h4 id=\"永久代（元空间）\"><a href=\"#永久代（元空间）\" class=\"headerlink\" title=\"永久代（元空间）\"></a>永久代（元空间）</h4><p>作用：这个区域是常驻内存的，一般用来存放JDK自身携带的Class对象，interface原数据，存储的是java运行时的一些环境吗，这个区域不会存在垃圾回收，关闭jvm会释放这个区域的内存。</p>\n<p>jdk1.6之前：永久代，常量池在永久代中</p>\n<p>jdk1.7：永久代，但是慢慢退化了，“去永久代”，常量池在堆中</p>\n<p>jdk1.8之后：无永久代，改名为元空间，常量池在元空间内</p>\n<p>元空间逻辑上存在，但是物理上不存在。</p>\n<p>新生代内存+老年代内存&#x3D;JVM最大内存</p>\n<h4 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h4><p>本地方法栈、java栈、程序计数器这三个部分中是不会有垃圾垃圾产生的，栈的作用是就是排序，用完就弹出了，所以不会有垃圾，而程序计数器只是单纯的进行数字的加减，当然不会有垃圾。</p>\n<p>所以说平常说的jvm调优通常都是在堆（方法区其实是特殊的堆）中进行调优的</p>\n<blockquote>\n<p>本地方法栈中的方法就是 带有native关键字的方法，带有native关键字表示java语言已经访问不到，需要调用c的库来执行，通过JNI来调用</p>\n</blockquote>\n<p>JNI作用：扩展java的使用，融合不同的编程语言供java所使用</p>\n<h4 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h4><p>方法区时被所有线程所共享的，所有字段和方法字节码，以及一些特殊方法，如构造函数，接口代码也在此定义，简单说，所有定义的方法的信息都保存在该区域，此区域属于共享区间</p>\n<p>静态变量、常量、类信息（构造方法、接口定义）、运行时的常量池存在方法区中，但是实例变量存在堆内存中，和方法区无关</p>\n<h4 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h4><p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池表（Constant Pool Table），用于存放编译期生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。</p>\n<p>运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性，Java语言并不要求常量一定只有编译期才能产生，也就是说，并非预置入Class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可以将新的常量放入池中，这种特性被开发人员利用得比较多的便是String类的intern()方法。</p>\n<h4 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h4><p>程序计数器（Program Counter Register）是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。</p>\n<blockquote>\n<p>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是本地（Native）方法，这个计数器值则应为空（Undefined）。此内存区域是唯一一个在《Java虚拟机规范》中没有规定任何OutOfMemoryError情况的区域。</p>\n</blockquote>\n<h3 id=\"垃圾清理过程\"><a href=\"#垃圾清理过程\" class=\"headerlink\" title=\"垃圾清理过程\"></a>垃圾清理过程</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucHJvY2Vzc29uLmNvbS92aWV3L2xpbmsvNjAzZWYxZjk1NjUzYmI2ZWZhNDZmZjZk\">垃圾清理过程<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"gc日志查看\"><a href=\"#gc日志查看\" class=\"headerlink\" title=\"gc日志查看\"></a>gc日志查看</h3><h4 id=\"young-gc\"><a href=\"#young-gc\" class=\"headerlink\" title=\"young gc\"></a>young gc</h4><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210425152637368.png\" alt=\"image-20210425152637368\" loading=\"lazy\"></p>\n<h4 id=\"full-gc\"><a href=\"#full-gc\" class=\"headerlink\" title=\"full gc\"></a>full gc</h4><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210425152702546.png\" alt=\"image-20210425152702546\" loading=\"lazy\"></p>\n<h3 id=\"垃圾回收\"><a href=\"#垃圾回收\" class=\"headerlink\" title=\"垃圾回收\"></a>垃圾回收</h3><h4 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h4><h5 id=\"引用计数法\"><a href=\"#引用计数法\" class=\"headerlink\" title=\"引用计数法\"></a>引用计数法</h5><p>在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的</p>\n<blockquote>\n<p>问题在于，当a引用b，b也引用a，除此之外，无任何引用的时候，两个对象再无任何引用，实际上这两个对象已经不可能再被访问，但是它们因为互相引用着对方，导致它们的引用计数都不为零，引用计数算法也就无法回收它们。</p>\n</blockquote>\n<h5 id=\"可达性分析算法\"><a href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"></a>可达性分析算法</h5><p>从GC Roots开始，根据引用关系向下搜索，搜索过程所走过的路径称为“引用链”（Reference Chain）</p>\n<p>如果某个对象到GC Roots间没有任何引用链相连，或者用图论的话来说就是从GC Roots到这个对象不可达时，则证明此对象是不可能再被使用的。</p>\n<h6 id=\"GC-Roots\"><a href=\"#GC-Roots\" class=\"headerlink\" title=\"GC Roots\"></a>GC Roots</h6><ul>\n<li><p>在虚拟机栈（栈帧中的本地变量表）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等。·</p>\n</li>\n<li><p>在方法区中类静态属性引用的对象，譬如Java类的引用类型静态变量。</p>\n</li>\n<li><p>·在方法区中常量引用的对象，譬如字符串常量池（String Table）里的引用。·</p>\n</li>\n<li><p>在本地方法栈中JNI（即通常所说的Native方法）引用的对象。</p>\n</li>\n<li><p>·Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如NullPointExcepiton、OutOfMemoryError）等，还有系统类加载器。·</p>\n</li>\n<li><p>所有被同步锁（synchronized关键字）持有的对象。·</p>\n</li>\n<li><p>反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。</p>\n</li>\n</ul>\n<blockquote>\n<p>除了这些固定的GC Roots集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象“临时性”地加入，共同构成完整GC Roots集合。</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>譬如后文将会提到的分代收集和局部回收（Partial GC），如果只针对Java堆中某一块区域发起垃圾收集时（如最典型的只针对新生代的垃圾收集），必须考虑到内存区域是虚拟机自己的实现细节（在用户视角里任何内存区域都是不可见的），更不是孤立封闭的，这时候就需要将这些关联区域的对象也一并加入GC Roots集合中去，才能保证可达性分析的正确性</p>\n</blockquote>\n<h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><h5 id=\"强引用\"><a href=\"#强引用\" class=\"headerlink\" title=\"强引用\"></a>强引用</h5><p>强引用是最传统的“引用”的定义，是指在程序代码之中普遍存在的引用赋值，即类似“Object obj&#x3D;new Object()”这种引用关系。无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。</p>\n<h5 id=\"软引用\"><a href=\"#软引用\" class=\"headerlink\" title=\"软引用\"></a>软引用</h5><p>·软引用是用来描述一些还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。在JDK 1.2版之后提供了SoftReference类来实现软引用</p>\n<h5 id=\"弱引用\"><a href=\"#弱引用\" class=\"headerlink\" title=\"弱引用\"></a>弱引用</h5><p>·弱引用也是用来描述那些非必须对象，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生为止。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK 1.2版之后提供了WeakReference类来实现弱引用。</p>\n<h5 id=\"虚引用\"><a href=\"#虚引用\" class=\"headerlink\" title=\"虚引用\"></a>虚引用</h5><p>·虚引用也称为“幽灵引用”或者“幻影引用”，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被收集器回收时收到一个系统通知。在JDK 1.2版之后提供了PhantomReference类来实现虚引用。</p>\n<h4 id=\"对象死亡\"><a href=\"#对象死亡\" class=\"headerlink\" title=\"对象死亡\"></a>对象死亡</h4><p>即使在可达性分析算法中判定为不可达的对象，也不是“非死不可”的，这时候它们暂时还处于“缓刑”阶段，要真正宣告一个对象死亡，至少要经历两次标记过程：</p>\n<ol>\n<li><p>如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记，随后进行一次筛选</p>\n</li>\n<li><p>筛选的条件是此对象是否有必要执行finalize()方法。假如对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，那么虚拟机将这两种情况都视为“没有必要执行”。</p>\n</li>\n</ol>\n<blockquote>\n<p>任何一个对象的finalize()方法都只会被系统自动调用一次，如果对象面临下一次回收，它的finalize()方法不会被再次执行</p>\n</blockquote>\n<p>不建议使用finalize</p>\n<blockquote>\n<p>它的运行代价高昂，不确定性大，无法保证各个对象的调用顺序，如今已被官方明确声明为不推荐使用的语法。有些教材中描述它适合做“关闭外部资源”之类的清理性工作，这完全是对finalize()方法用途的一种自我安慰。finalize()能做的所有工作，使用try-finally或者其他方式都可以做得更好、更及时，所以笔者建议大家完全可以忘掉Java语言里面的这个方法。</p>\n</blockquote>\n<h4 id=\"时机\"><a href=\"#时机\" class=\"headerlink\" title=\"时机\"></a>时机</h4><h5 id=\"metadata\"><a href=\"#metadata\" class=\"headerlink\" title=\"metadata\"></a>metadata</h5><p>metadata区域满了之后会触发full gc</p>\n<h6 id=\"young-gc-1\"><a href=\"#young-gc-1\" class=\"headerlink\" title=\"young gc\"></a>young gc</h6><p>young gc之前</p>\n<ol>\n<li><p>空间担保机制：检查老年代可用对象是否大于新生代所有空间的大小，大于则进行young gc，小于则走第二步</p>\n</li>\n<li><p>是否开启HandlePromotionFailure  这个参数，开启则判断 判断老年代的内存大小是都大于之前每一次minor gc之后的进入老年代的对象的平均大小，如果大于则冒险直接往下走，小于则提前进行fullgc，否则提前进行full gc</p>\n</li>\n</ol>\n<p>young gc之后</p>\n<ol>\n<li><p>年龄太大了</p>\n</li>\n<li><p>suvivor区域放不下新生的对象</p>\n</li>\n<li><p>动态年龄判断：相同年龄对象总和大于s区的50%，此时年龄n以上的对象进入老年代</p>\n</li>\n</ol>\n<h6 id=\"full-gc-1\"><a href=\"#full-gc-1\" class=\"headerlink\" title=\"full gc\"></a>full gc</h6><ol>\n<li><p>老年代可以设置一个阈值，大于这个这个阈值就会触发full gc</p>\n</li>\n<li><p>在执行Young GC之前，如果判断发现老年代可用空间小于了历次Young GC后升入老年代的平均对象大小的话，那么就会在Young GC之前触发Full GC，先回收掉老年代一批对象，然后再执行Young GC</p>\n</li>\n<li><p>如果Young GC过后的存活对象太多，Survivor区域放不下，就要放入老年代，要是此时老年代也放不下，就会触发Full GC，回收老年代一批对象，再把这些年轻代的存活对象放入老年代中</p>\n</li>\n</ol>\n<h5 id=\"进入老年代时机\"><a href=\"#进入老年代时机\" class=\"headerlink\" title=\"进入老年代时机\"></a>进入老年代时机</h5><ol>\n<li><p>年龄到默认的15</p>\n</li>\n<li><p>对象太大了，直接进入老年代，不经过新生代</p>\n</li>\n<li><p>Minor gc之后，发现剩余对象太多，s区放不下</p>\n</li>\n<li><p>动态年龄判断，所有年龄大小的内存加起来超过一个s区的50%，n个年龄及以上对象直接进入老年代</p>\n</li>\n</ol>\n<h5 id=\"oom\"><a href=\"#oom\" class=\"headerlink\" title=\"oom\"></a>oom</h5><p>如果是full gc之后，老年代还是没有足够的大小来放minor gc存活的对象，就会触发oom</p>\n<p>三种情况</p>\n<h6 id=\"metaspace\"><a href=\"#metaspace\" class=\"headerlink\" title=\"metaspace\"></a>metaspace</h6><ul>\n<li><p>元空间设置参数使用默认的</p>\n</li>\n<li><p>动态代理动态生成了一些类，可能会导致内存溢出</p>\n</li>\n</ul>\n<h6 id=\"虚拟机栈\"><a href=\"#虚拟机栈\" class=\"headerlink\" title=\"虚拟机栈\"></a>虚拟机栈</h6><p>可能是方法递归调用，就是有些残忍</p>\n<h6 id=\"堆内存\"><a href=\"#堆内存\" class=\"headerlink\" title=\"堆内存\"></a>堆内存</h6><ul>\n<li><p>高并发</p>\n</li>\n<li><p>内存泄露</p>\n</li>\n</ul>"},{"title":"JVM-2","description":"","abbrlink":"aab8f277","date":"2021-04-25T16:00:00.000Z","_content":"\n\n主要是用来介绍各种垃圾回收器的执行过程和优缺点\n\n\n\n<!-- more -->\n\n\n\n## 垃圾回收器的种类\n\n\n\n#### Serial收集器\n\n\n\n最早的垃圾回收器，是个单线程工作的收集器，但是他的单线程并不是真的垃圾会受到时候真的使用的是单线程，而是说进行垃圾回收的时候，会stop the world ，会停止所有的用户线程工作\n\n\n\n特点：\n\n\n\n1. 垃圾回收的时候，会停止所有的用户线程进行工作\n\n2. 在资源受限的情况下，与其他收集器的单线程相比，效率依然是最高的\n\n\n\n#### ParNew收集器\n\n\n\n其实这就是Serial收集器的多线程并行版本，除了同时使用多条线程进行垃圾收集之外，其余的行为都和Serial收集器一样\n\n\n\n特点：\n\n\n\n1. 除了Serial收集器外，目前只有它能与CMS收集器配合工作\n\n2. 一般来说是CMS和ParNew来一起使用，CMS 主要用来回收老年代，ParNew主要用来回收新生代\n\n\n\n#### Parallel Scavenge收集器\n\n\n\nParallel Scavenge收集器也是一款新生代收集器，它同样是基于标记-复制算法实现的收集器\n\n\n\n特点：\n\n\n\n1. 它主要关注的点是达到一个可控制的吞吐量\n\n2. 自适应调节策略：自动进行内存的调优\n\n\n\n#### Serial Old收集器\n\n\n\nSerial Old是Serial收集器的老年代版本，它同样是一个单线程收集器，使用标记-整理算法\n\n\n\n两种用途：一种是在JDK 5以及之前的版本中与Parallel Scavenge收集器搭配使用[插图]，另外一种就是作为CMS收集器发生失败时的后备预案，在并发收集发生Concurrent Mode Failure时使用\n\n\n\n#### Parallel Old收集器\n\n\n\nParallel Old是Parallel Scavenge收集器的老年代版本，支持多线程并发收集，基于标记-整理算法实现\n\n\n\n- 在注重吞吐量或者处理器资源较为稀缺的场合，都可以优先考虑Parallel Scavenge加Parallel Old收集器这个组合\n\n\n\n#### CMS收集器\n\n\n\nCMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器,是基于标记-清楚算法实现的\n\n\n\n过程分为四个步骤：\n\n\n\n1. 初始化标记：就是标记GC ROOTs，静态变量和方法中的成员变量都数据GCROOTS，速度很快\n\n2. 并发标记 ：链路追踪，标记GGROOT 中引用其他的\n\n3. 重新标记：标记并发标记引用变动的对象\n\n4. 并发清理：并发清理掉可回收的内存，但是用户线程依旧在执行，所以会产生浮动垃圾\n\n\n\n缺点：\n\n\n\n1. 对处理器资源比较敏感\n\n2. 无法处理“浮动垃圾”\n\n3. 由于使用的是标记-清理算法，故会产生大量的碎片空间\n\n\n\n浮动垃圾：在CMS的并发标记和并发清理阶段，用户线程是还在继续运行的，程序在运行自然就还会伴随有新的垃圾对象不断产生，但这一部分垃圾对象是出现在标记过程结束以后，CMS无法在当次收集中处理掉它们，只好留待下一次垃圾收集时再清理掉。这一部分垃圾就称为“浮动垃圾”\n\n\n\n实际处理\n\n\n\n-XX:CMSlnitiatingOccupancyFaction   用来设置老年代占用多少比例的时候触发CMS垃圾回收\n\n\n\njsk1.6默认的值是92%\n\n\n\n如果Cms垃圾回收期间，系统程序要放入老年代的对象大于可用内存空间，会发生Concurrent Mode Failure ，就是说并发垃圾回收失败了，我一遍回收，你一遍把对象放入老年带中，内存不够了\n\n\n\n此时也会自动启用“Seral Old”垃圾回收器，就是直接把系统程序\"Stop the World\" ，重新进行长时间的GC Roots追踪，标记出来全部垃圾对象，不允许新的对象产生，然后一次性把垃圾对象都回收掉，完事儿了再回复系统线程\n\n\n\n注意、\n\n\n\ncms垃圾回收期也不是仅仅用“标记-清理”算法的，由于太多的内存随便实际上会更加频繁的full gc\n\n\n\ncms 有一个-XX：+UseCMSCompactAtFullCollection  默认开启\n\n\n\n这个参数的意思是full gc之后要再次进行\"Stop the World\"，停止工作线程，然后进行碎片整理，就是把存活的对象挪到一起，空出来大片连续的内存空间，避免内存碎片\n\n\n\n-XX：CMSFullGCsBeforeCompaction 这个参数的意思是执行多少期Full gc之后再执行一次内存碎片的整理工作，默认是0，意思就是每次full gc之后都会进行一次内存整理\n\n\n\n#### Garbage First收集器\n\n\n\n简称G1收集器，它开创了收集器面向局部收集的设计思路和基于Region的内存布局形式\n\n\n\n在JDK9中，，G1宣告取代Parallel Scavenge加ParallelOld组合，成为服务端模式下的默认垃圾收集器\n\n\n\n垃圾收集的目标范围要么是整个新生代（Minor GC），要么就是整个老年代（Major GC），再要么就是整个Java堆（Full GC）。而G1跳出了这个樊笼，它可以面向堆内存任何部分来组成回收集（Collection Set，一般简称CSet）进行回收，衡量标准不再是它属于哪个分代，而是哪块内存中存放的垃圾数量最多，回收收益最大，这就是G1收集器的MixedGC模式\n\n\n\nG1会将连续的Java堆划分为多个大小相等的独立区域（Region），每一个Region都可以根据需要，扮演新生代的Eden空间、Survivor空间，或者老年代空间。收集器能够对扮演不同角色的Region采用不同的策略去处理，这样无论是新创建的对象还是已经存活了一段时间、熬过多次收集的旧对象都能获取很好的收集效果\n\n\n\nRegion中还有一类特殊的Humongous区域，专门用来存储大对象。G1认为只要大小超过了一个Region容量一半的对象即可判定为大对象。每个Region的大小可以通过参数-XX：G1HeapRegionSize设定，取值范围为1MB～32MB，且应为2的N次幂。而对于那些超过了整个Region容量的超级大对象，将会被存放在N个连续的Humongous Region之中，G1的大多数行为都把Humongous Region作为老年代的一部分来进行看待\n\n\n\n**垃圾回收思路：**\n\n\n\n让G1收集器去跟踪各个Region里面的垃圾堆积的“价值”大小，价值即回收所获得的空间大小以及回收所需时间的经验值，然后在后台维护一个优先级列表，根据优先级列表来进行垃圾回收\n\n\n\n#### Shenandoah收集器\n\n\n\n低延迟收集器\n\n\n\nShenandoah相比起G1又有什么改进呢？\n\n\n\n1. 支持并发的整理算法，而不是只会支持多线程回收并行\n\n2. 默认不使用分代收集的，没有实现分代，主要通过“性价比”来衡量垃圾回收的优先级\n\n3. 记录跨Region的引用关系发生改变，不使用耗费大量内存和计算资源去维护的记忆集，改用名为“连接矩阵”\n\n\n\n工作过程：\n\n\n\n[ZGC收集器](https://www.wolai.com/i46Yf9RNDy2zZDotU7Acqa)\n\n\n\n### 垃圾回收的类型\n\n\n\n#### 部分收集（Partial GC）\n\n\n\n指目标不是完整收集整个Java堆的垃圾收集\n\n\n\n#### 新生代收集\n\n\n\n（Minor GC/Young GC）：指目标只是新生代的垃圾收集\n\n\n\n#### 老年代收集\n\n\n\n（Major GC/Old GC）：指目标只是老年代的垃圾收集。目前只有CMS收集器会有单独收集老年代的行为。另外请注意“Major GC”这个说法现在有点混淆，在不同资料上常有不同所指，读者需按上下文区分到底是指老年代的收集还是整堆收集\n\n\n\n#### 混合收集\n\n\n\n（Mixed GC）：指目标是收集整个新生代以及部分老年代的垃圾收集。目前只有G1收集器会有这种行为\n\n\n\n#### 整堆收集\n\n\n\n（Full GC）：收集整个Java堆和方法区的垃圾收集。\n\n\n\n### 垃圾回收算法\n\n\n\n#### 标记清除算法\n\n\n\n顾名思义标记所有需要回收的对象，统一回收被标记的对象\n\n\n\n两个过程：标记过程和清理过程\n\n\n\n标记过程其实就是判断对象是否需要回收的过程，也就是对象是否已死的过程\n\n\n\n清理过程就是清理掉所有的已死对象\n\n\n\n> 关注延迟的CMS收集器则是基于标记-清除算法的\n\n\n\n**缺点：**\n\n\n\n1. 执行效率低\n\n\n\n如果对象需要回收的数量比较大，那么它的执行效率必然会随着数量的增加而减少\n\n\n\n1. 内部空间碎片化\n\n\n\n由于被回收的对象位置不能保证是连续的，必然会产生大量的不连续的内存碎片，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作\n\n\n\n#### 标记复制算法\n\n\n\n新生代分为一块较大的Eden空间和两块较小的Survivor空间，每次分配内存只使用Eden和其中一块Survivor。发生垃圾搜集时，将Eden和Survivor中仍然存活的对象一次性复制到另外一块Survivor空间上，然后直接清理掉Eden和已用过的那块Survivor空间\n\n\n\nHotSpot虚拟机默认Eden和Survivor的大小比例是8∶1，也即每次新生代中可用内存空间为整个新生代容量的90%（Eden的80%加上一个Survivor的10%），只有一个Survivor空间，即10%的新生代是会被“浪费”的。当然，98%的对象可被回收仅仅是“普通场景”下测得的数据，任何人都没有办法百分百保证每次回收都只有不多于10%的对象存活，因此Appel式回收还有一个充当罕见情况的“逃生门”的安全设计，当Survivor空间不足以容纳一次Minor GC之后存活的对象时，就需要依赖其他内存区域（实际上大多就是老年代）进行分配担保（Handle Promotion）\n\n\n\n#### 标记-整理算法\n\n\n\n标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向内存空间一端移动，然后直接清理掉边界以外的内存\n\n\n\n标记-整理算法和标记复制算法区别\n\n\n\n#### Stop TheWorld\n\n\n\n定义：全程暂停用户应用程序才能进行的过程\n\n\n\n如果移动存活对象，尤其是在老年代这种每次回收都有大量对象存活区域，移动存活对象并更新所有引用这些对象的地方将会是一种极为负重的操作，而且这种对象移动操作必须全程暂停用户应用程序才能进行[插图]，这就更加让使用者不得不小心翼翼地权衡其弊端了，像这样的停顿被最初的虚拟机设计者形象地描述为“Stop TheWorld”\n\n\n\n- 关注吞吐量的Parallel Scavenge收集器是基于标记-整理算法的\n\n\n\n### 方法区的回收\n\n\n\n回收类型两种：废弃的常量和不再使用的类\n\n\n\n#### 废弃的常量\n\n\n\n假如一个字符串“java”曾经进入常量池中，但是当前系统又没有任何一个字符串对象的值是“java”，换句话说，已经没有任何字符串对象引用常量池中的“java”常量，且虚拟机中也没有其他地方引用这个字面量。如果在这时发生内存回收，而且垃圾收集器判断确有必要的话，这个“java”常量就将会被系统清理出常量池\n\n\n\n#### 不再使用的类\n\n\n\n如何确定一个类是一个不再使用的类那，需要满足一下三个条件\n\n\n\n1. 该类所有的实例都已经被回收，也就是Java堆中不存在该类及其任何派生子类的实例\n\n2. 加载该类的类加载器已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如OSGi、JSP的重加载等，否则通常是很难达成的\n\n3. 该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法\n\n\n\n### 垃圾回收(堆)的具体过程\n\n\n\n#### 开始\n\n\n\n开始的时候，一定是stop the word的状态，就是所有的用户线程都会停止的，但是具体什么时候进行垃圾回收那，就是到达***安全点***的时候\n\n\n\n安全点的选取标准是是否具有让程序长时间执行的特征”为标准进行选定的。“长时间执行”的最明显特征就是指令序列的复用，例如方法调用、循环跳转、异常跳转等都属于指令序列复用，所以只有具有这些功能的指令才会产生安全点\n\n\n\n到达安全点会停顿下来，那么停顿方式是什么那？\n\n\n\n1. 抢占式中断\n\n2. 主动式中断\n\n\n\n抢占式中断：抢先式中断不需要线程的执行代码主动去配合，在垃圾收集发生时，系统首先把所有用户线程全部中断，如果发现有用户线程中断的地方不在安全点上，就恢复这条线程执行，让它一会再重新中断，直到跑到安全点上。现在几乎没有虚拟机实现采用抢先式中断来暂停线程响应GC事件\n\n\n\n主动式中断：当垃圾收集需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志位，各个线程执行过程时会不停地主动去轮询这个标志，一旦发现中断标志为真时就自己在最近的安全点上主动中断挂起。轮询标志的地方和安全点是重合的，另外还要加上所有创建对象和其他需要在Java堆上分配内存的地方，这是为了检查是否即将要发生垃圾收集，避免没有足够内存分配新对象\n\n\n\n安全区域：安全区域是指能够确保在某一段代码片段之中，引用关系不会发生变化，因此，在这个区域中任意地方开始垃圾收集都是安全的。我们也可以把安全区域看作被扩展拉伸了的安全点。\n\n\n\n程序执行的时候可以使用到达安全点的方法来进行垃圾回收，程序不执行的时候，就需要采用**安全区域**的方来进行垃圾回收了\n\n\n\n当用户线程执行到安全区域里面的代码时，首先会标识自己已经进入了安全区域，那样当这段时间里虚拟机要发起垃圾收集时就不必去管这些已声明自己在安全区域内的线程了。当线程要离开安全区域时，它要检查虚拟机是否已经完成了根节点枚举（或者垃圾收集过程中其他需要暂停用户线程的阶段），如果完成了，那线程就当作没事发生过，继续执行；否则它就必须一直等待，直到收到可以离开安全区域的信号为止\n\n\n\n#### 根节点枚举\n\n\n\n如果采用的是可达性分析性算法将会从GC Roots集合中查找引用链\n\n\n\n> GC Roots集合：通常是常量、类静态属性、栈帧中的本地变量表\n\n\n\n由于目前java应用越做越大，每次都要从GC Roots集合中找会很慢，于是HotSpot给出了一种解决方案，使用OopMap的数据结构来达到这个目的。一旦类加载动作完成的时候，HotSpot就会把对象内什么偏移量上是什么类型的数据计算出来，在即时编译（见第11章）过程中，也会在特定的位置记录下栈里和寄存器里哪些位置是引用。这样收集器在扫描时就可以直接得知这些信息了，并不需要真正一个不漏地从方法区等GC Roots开始查找\n\n\n\n但是并不是每一次的操作都会存到OopMap的数据结构中，这样做的话所需要的空间太大了，违背最初节省空空间的想法，因此通常是到了安全点之后，才会进行\n\n\n\n#### 数据结构\n\n\n\nOopMap\n\n\n\n记忆集\n\n\n\n作用：记录从非收集区域指向收集区域的指针集合的抽象数据结构\n\n\n\n目前经常采用的实现记忆集的方式是卡表\n\n\n\n卡表和记忆集的关系可以用hashmap和map之间的关系来对比，一个是具体实现方式，一个是抽象数据结构\n\n\n\n一个卡页的内存中通常包含不止一个对象，只要卡页内有一个（或更多）对象的字段存在着跨代指针，那就将对应卡表的数组元素的值标识为1，称为这个元素变脏（Dirty），没有则标识为0。在垃圾收集发生时，只要筛选出卡表中变脏的元素，就能轻易得出哪些卡页内存块中包含跨代指针，把它们加入GC Roots中一并扫描。\n\n\n\n并发情况下是如何保证卡表变脏的，是采用写屏障的方式\n\n\n\n### 垃圾回收器的优化\n\n\n\n把遍历对象图中遇到的对象按照“是否访问过”这个条件标记成以下三种颜色\n\n\n\n1. 白色：表示对象尚未被垃圾收集器访问过。显然在可达性分析刚刚开始的阶段，所有的对象都是白色的，若在分析结束的阶段，仍然是白色的对象，即代表不可达\n\n2. 黑色：表示对象已经被垃圾收集器访问过，且这个对象的所有引用都已经扫描过。黑色的对象代表已经扫描过，它是安全存活的，如果有其他对象引用指向了黑色对象，无须重新扫描一遍。黑色对象不可能直接（不经过灰色对象）指向某个白色对象\n\n3. 灰色：表示对象已经被垃圾收集器访问过，但这个对象上至少存在一个引用还没有被扫描过\n\n\n\n“对象消失”的问题需要同时满足以下两种条件\n\n\n\n1. 赋值器插入了一条或多条从黑色对象到白色对象的新引用\n\n2. ·赋值器删除了全部从灰色对象到该白色对象的直接或间接引用\n\n\n\n因此，我们要解决并发扫描时的对象消失问题，只需破坏这两个条件的任意一个即可。由此分别产生了两种解决方案：增量更新（Incremental Update）和原始快照（Snapshot At The Beginning，SATB）\n\n\n\n增量更新要破坏的是第一个条件，当黑色对象插入新的指向白色对象的引用关系时，就将这个新插入的引用记录下来，等并发扫描结束之后，再将这些记录过的引用关系中的黑色对象为根，重新扫描一次。这可以简化理解为，黑色对象一旦新插入了指向白色对象的引用之后，它就变回灰色对象了\n\n\n\n原始快照要破坏的是第二个条件，当灰色对象要删除指向白色对象的引用关系时，就将这个要删除的引用记录下来，在并发扫描结束之后，再将这些记录过的引用关系中的灰色对象为根，重新扫描一次。这也可以简化理解为，无论引用关系删除与否，都会按照刚刚开始扫描那一刻的对象图快照来进行搜索\n\n\n\n增量更新和原始快照这两种解决方案都有实际应用，譬如，CMS是基于增量更新来做并发标记的，G1、Shenandoah则是用原始快照来实现。","source":"_posts/JVM-2.md","raw":"---\ntitle: JVM-2\ndescription: ''\ntags:\n  - 无标签\nabbrlink: aab8f277\ndate: 2021-04-26 00:00:00\n---\n\n\n主要是用来介绍各种垃圾回收器的执行过程和优缺点\n\n\n\n<!-- more -->\n\n\n\n## 垃圾回收器的种类\n\n\n\n#### Serial收集器\n\n\n\n最早的垃圾回收器，是个单线程工作的收集器，但是他的单线程并不是真的垃圾会受到时候真的使用的是单线程，而是说进行垃圾回收的时候，会stop the world ，会停止所有的用户线程工作\n\n\n\n特点：\n\n\n\n1. 垃圾回收的时候，会停止所有的用户线程进行工作\n\n2. 在资源受限的情况下，与其他收集器的单线程相比，效率依然是最高的\n\n\n\n#### ParNew收集器\n\n\n\n其实这就是Serial收集器的多线程并行版本，除了同时使用多条线程进行垃圾收集之外，其余的行为都和Serial收集器一样\n\n\n\n特点：\n\n\n\n1. 除了Serial收集器外，目前只有它能与CMS收集器配合工作\n\n2. 一般来说是CMS和ParNew来一起使用，CMS 主要用来回收老年代，ParNew主要用来回收新生代\n\n\n\n#### Parallel Scavenge收集器\n\n\n\nParallel Scavenge收集器也是一款新生代收集器，它同样是基于标记-复制算法实现的收集器\n\n\n\n特点：\n\n\n\n1. 它主要关注的点是达到一个可控制的吞吐量\n\n2. 自适应调节策略：自动进行内存的调优\n\n\n\n#### Serial Old收集器\n\n\n\nSerial Old是Serial收集器的老年代版本，它同样是一个单线程收集器，使用标记-整理算法\n\n\n\n两种用途：一种是在JDK 5以及之前的版本中与Parallel Scavenge收集器搭配使用[插图]，另外一种就是作为CMS收集器发生失败时的后备预案，在并发收集发生Concurrent Mode Failure时使用\n\n\n\n#### Parallel Old收集器\n\n\n\nParallel Old是Parallel Scavenge收集器的老年代版本，支持多线程并发收集，基于标记-整理算法实现\n\n\n\n- 在注重吞吐量或者处理器资源较为稀缺的场合，都可以优先考虑Parallel Scavenge加Parallel Old收集器这个组合\n\n\n\n#### CMS收集器\n\n\n\nCMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器,是基于标记-清楚算法实现的\n\n\n\n过程分为四个步骤：\n\n\n\n1. 初始化标记：就是标记GC ROOTs，静态变量和方法中的成员变量都数据GCROOTS，速度很快\n\n2. 并发标记 ：链路追踪，标记GGROOT 中引用其他的\n\n3. 重新标记：标记并发标记引用变动的对象\n\n4. 并发清理：并发清理掉可回收的内存，但是用户线程依旧在执行，所以会产生浮动垃圾\n\n\n\n缺点：\n\n\n\n1. 对处理器资源比较敏感\n\n2. 无法处理“浮动垃圾”\n\n3. 由于使用的是标记-清理算法，故会产生大量的碎片空间\n\n\n\n浮动垃圾：在CMS的并发标记和并发清理阶段，用户线程是还在继续运行的，程序在运行自然就还会伴随有新的垃圾对象不断产生，但这一部分垃圾对象是出现在标记过程结束以后，CMS无法在当次收集中处理掉它们，只好留待下一次垃圾收集时再清理掉。这一部分垃圾就称为“浮动垃圾”\n\n\n\n实际处理\n\n\n\n-XX:CMSlnitiatingOccupancyFaction   用来设置老年代占用多少比例的时候触发CMS垃圾回收\n\n\n\njsk1.6默认的值是92%\n\n\n\n如果Cms垃圾回收期间，系统程序要放入老年代的对象大于可用内存空间，会发生Concurrent Mode Failure ，就是说并发垃圾回收失败了，我一遍回收，你一遍把对象放入老年带中，内存不够了\n\n\n\n此时也会自动启用“Seral Old”垃圾回收器，就是直接把系统程序\"Stop the World\" ，重新进行长时间的GC Roots追踪，标记出来全部垃圾对象，不允许新的对象产生，然后一次性把垃圾对象都回收掉，完事儿了再回复系统线程\n\n\n\n注意、\n\n\n\ncms垃圾回收期也不是仅仅用“标记-清理”算法的，由于太多的内存随便实际上会更加频繁的full gc\n\n\n\ncms 有一个-XX：+UseCMSCompactAtFullCollection  默认开启\n\n\n\n这个参数的意思是full gc之后要再次进行\"Stop the World\"，停止工作线程，然后进行碎片整理，就是把存活的对象挪到一起，空出来大片连续的内存空间，避免内存碎片\n\n\n\n-XX：CMSFullGCsBeforeCompaction 这个参数的意思是执行多少期Full gc之后再执行一次内存碎片的整理工作，默认是0，意思就是每次full gc之后都会进行一次内存整理\n\n\n\n#### Garbage First收集器\n\n\n\n简称G1收集器，它开创了收集器面向局部收集的设计思路和基于Region的内存布局形式\n\n\n\n在JDK9中，，G1宣告取代Parallel Scavenge加ParallelOld组合，成为服务端模式下的默认垃圾收集器\n\n\n\n垃圾收集的目标范围要么是整个新生代（Minor GC），要么就是整个老年代（Major GC），再要么就是整个Java堆（Full GC）。而G1跳出了这个樊笼，它可以面向堆内存任何部分来组成回收集（Collection Set，一般简称CSet）进行回收，衡量标准不再是它属于哪个分代，而是哪块内存中存放的垃圾数量最多，回收收益最大，这就是G1收集器的MixedGC模式\n\n\n\nG1会将连续的Java堆划分为多个大小相等的独立区域（Region），每一个Region都可以根据需要，扮演新生代的Eden空间、Survivor空间，或者老年代空间。收集器能够对扮演不同角色的Region采用不同的策略去处理，这样无论是新创建的对象还是已经存活了一段时间、熬过多次收集的旧对象都能获取很好的收集效果\n\n\n\nRegion中还有一类特殊的Humongous区域，专门用来存储大对象。G1认为只要大小超过了一个Region容量一半的对象即可判定为大对象。每个Region的大小可以通过参数-XX：G1HeapRegionSize设定，取值范围为1MB～32MB，且应为2的N次幂。而对于那些超过了整个Region容量的超级大对象，将会被存放在N个连续的Humongous Region之中，G1的大多数行为都把Humongous Region作为老年代的一部分来进行看待\n\n\n\n**垃圾回收思路：**\n\n\n\n让G1收集器去跟踪各个Region里面的垃圾堆积的“价值”大小，价值即回收所获得的空间大小以及回收所需时间的经验值，然后在后台维护一个优先级列表，根据优先级列表来进行垃圾回收\n\n\n\n#### Shenandoah收集器\n\n\n\n低延迟收集器\n\n\n\nShenandoah相比起G1又有什么改进呢？\n\n\n\n1. 支持并发的整理算法，而不是只会支持多线程回收并行\n\n2. 默认不使用分代收集的，没有实现分代，主要通过“性价比”来衡量垃圾回收的优先级\n\n3. 记录跨Region的引用关系发生改变，不使用耗费大量内存和计算资源去维护的记忆集，改用名为“连接矩阵”\n\n\n\n工作过程：\n\n\n\n[ZGC收集器](https://www.wolai.com/i46Yf9RNDy2zZDotU7Acqa)\n\n\n\n### 垃圾回收的类型\n\n\n\n#### 部分收集（Partial GC）\n\n\n\n指目标不是完整收集整个Java堆的垃圾收集\n\n\n\n#### 新生代收集\n\n\n\n（Minor GC/Young GC）：指目标只是新生代的垃圾收集\n\n\n\n#### 老年代收集\n\n\n\n（Major GC/Old GC）：指目标只是老年代的垃圾收集。目前只有CMS收集器会有单独收集老年代的行为。另外请注意“Major GC”这个说法现在有点混淆，在不同资料上常有不同所指，读者需按上下文区分到底是指老年代的收集还是整堆收集\n\n\n\n#### 混合收集\n\n\n\n（Mixed GC）：指目标是收集整个新生代以及部分老年代的垃圾收集。目前只有G1收集器会有这种行为\n\n\n\n#### 整堆收集\n\n\n\n（Full GC）：收集整个Java堆和方法区的垃圾收集。\n\n\n\n### 垃圾回收算法\n\n\n\n#### 标记清除算法\n\n\n\n顾名思义标记所有需要回收的对象，统一回收被标记的对象\n\n\n\n两个过程：标记过程和清理过程\n\n\n\n标记过程其实就是判断对象是否需要回收的过程，也就是对象是否已死的过程\n\n\n\n清理过程就是清理掉所有的已死对象\n\n\n\n> 关注延迟的CMS收集器则是基于标记-清除算法的\n\n\n\n**缺点：**\n\n\n\n1. 执行效率低\n\n\n\n如果对象需要回收的数量比较大，那么它的执行效率必然会随着数量的增加而减少\n\n\n\n1. 内部空间碎片化\n\n\n\n由于被回收的对象位置不能保证是连续的，必然会产生大量的不连续的内存碎片，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作\n\n\n\n#### 标记复制算法\n\n\n\n新生代分为一块较大的Eden空间和两块较小的Survivor空间，每次分配内存只使用Eden和其中一块Survivor。发生垃圾搜集时，将Eden和Survivor中仍然存活的对象一次性复制到另外一块Survivor空间上，然后直接清理掉Eden和已用过的那块Survivor空间\n\n\n\nHotSpot虚拟机默认Eden和Survivor的大小比例是8∶1，也即每次新生代中可用内存空间为整个新生代容量的90%（Eden的80%加上一个Survivor的10%），只有一个Survivor空间，即10%的新生代是会被“浪费”的。当然，98%的对象可被回收仅仅是“普通场景”下测得的数据，任何人都没有办法百分百保证每次回收都只有不多于10%的对象存活，因此Appel式回收还有一个充当罕见情况的“逃生门”的安全设计，当Survivor空间不足以容纳一次Minor GC之后存活的对象时，就需要依赖其他内存区域（实际上大多就是老年代）进行分配担保（Handle Promotion）\n\n\n\n#### 标记-整理算法\n\n\n\n标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向内存空间一端移动，然后直接清理掉边界以外的内存\n\n\n\n标记-整理算法和标记复制算法区别\n\n\n\n#### Stop TheWorld\n\n\n\n定义：全程暂停用户应用程序才能进行的过程\n\n\n\n如果移动存活对象，尤其是在老年代这种每次回收都有大量对象存活区域，移动存活对象并更新所有引用这些对象的地方将会是一种极为负重的操作，而且这种对象移动操作必须全程暂停用户应用程序才能进行[插图]，这就更加让使用者不得不小心翼翼地权衡其弊端了，像这样的停顿被最初的虚拟机设计者形象地描述为“Stop TheWorld”\n\n\n\n- 关注吞吐量的Parallel Scavenge收集器是基于标记-整理算法的\n\n\n\n### 方法区的回收\n\n\n\n回收类型两种：废弃的常量和不再使用的类\n\n\n\n#### 废弃的常量\n\n\n\n假如一个字符串“java”曾经进入常量池中，但是当前系统又没有任何一个字符串对象的值是“java”，换句话说，已经没有任何字符串对象引用常量池中的“java”常量，且虚拟机中也没有其他地方引用这个字面量。如果在这时发生内存回收，而且垃圾收集器判断确有必要的话，这个“java”常量就将会被系统清理出常量池\n\n\n\n#### 不再使用的类\n\n\n\n如何确定一个类是一个不再使用的类那，需要满足一下三个条件\n\n\n\n1. 该类所有的实例都已经被回收，也就是Java堆中不存在该类及其任何派生子类的实例\n\n2. 加载该类的类加载器已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如OSGi、JSP的重加载等，否则通常是很难达成的\n\n3. 该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法\n\n\n\n### 垃圾回收(堆)的具体过程\n\n\n\n#### 开始\n\n\n\n开始的时候，一定是stop the word的状态，就是所有的用户线程都会停止的，但是具体什么时候进行垃圾回收那，就是到达***安全点***的时候\n\n\n\n安全点的选取标准是是否具有让程序长时间执行的特征”为标准进行选定的。“长时间执行”的最明显特征就是指令序列的复用，例如方法调用、循环跳转、异常跳转等都属于指令序列复用，所以只有具有这些功能的指令才会产生安全点\n\n\n\n到达安全点会停顿下来，那么停顿方式是什么那？\n\n\n\n1. 抢占式中断\n\n2. 主动式中断\n\n\n\n抢占式中断：抢先式中断不需要线程的执行代码主动去配合，在垃圾收集发生时，系统首先把所有用户线程全部中断，如果发现有用户线程中断的地方不在安全点上，就恢复这条线程执行，让它一会再重新中断，直到跑到安全点上。现在几乎没有虚拟机实现采用抢先式中断来暂停线程响应GC事件\n\n\n\n主动式中断：当垃圾收集需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志位，各个线程执行过程时会不停地主动去轮询这个标志，一旦发现中断标志为真时就自己在最近的安全点上主动中断挂起。轮询标志的地方和安全点是重合的，另外还要加上所有创建对象和其他需要在Java堆上分配内存的地方，这是为了检查是否即将要发生垃圾收集，避免没有足够内存分配新对象\n\n\n\n安全区域：安全区域是指能够确保在某一段代码片段之中，引用关系不会发生变化，因此，在这个区域中任意地方开始垃圾收集都是安全的。我们也可以把安全区域看作被扩展拉伸了的安全点。\n\n\n\n程序执行的时候可以使用到达安全点的方法来进行垃圾回收，程序不执行的时候，就需要采用**安全区域**的方来进行垃圾回收了\n\n\n\n当用户线程执行到安全区域里面的代码时，首先会标识自己已经进入了安全区域，那样当这段时间里虚拟机要发起垃圾收集时就不必去管这些已声明自己在安全区域内的线程了。当线程要离开安全区域时，它要检查虚拟机是否已经完成了根节点枚举（或者垃圾收集过程中其他需要暂停用户线程的阶段），如果完成了，那线程就当作没事发生过，继续执行；否则它就必须一直等待，直到收到可以离开安全区域的信号为止\n\n\n\n#### 根节点枚举\n\n\n\n如果采用的是可达性分析性算法将会从GC Roots集合中查找引用链\n\n\n\n> GC Roots集合：通常是常量、类静态属性、栈帧中的本地变量表\n\n\n\n由于目前java应用越做越大，每次都要从GC Roots集合中找会很慢，于是HotSpot给出了一种解决方案，使用OopMap的数据结构来达到这个目的。一旦类加载动作完成的时候，HotSpot就会把对象内什么偏移量上是什么类型的数据计算出来，在即时编译（见第11章）过程中，也会在特定的位置记录下栈里和寄存器里哪些位置是引用。这样收集器在扫描时就可以直接得知这些信息了，并不需要真正一个不漏地从方法区等GC Roots开始查找\n\n\n\n但是并不是每一次的操作都会存到OopMap的数据结构中，这样做的话所需要的空间太大了，违背最初节省空空间的想法，因此通常是到了安全点之后，才会进行\n\n\n\n#### 数据结构\n\n\n\nOopMap\n\n\n\n记忆集\n\n\n\n作用：记录从非收集区域指向收集区域的指针集合的抽象数据结构\n\n\n\n目前经常采用的实现记忆集的方式是卡表\n\n\n\n卡表和记忆集的关系可以用hashmap和map之间的关系来对比，一个是具体实现方式，一个是抽象数据结构\n\n\n\n一个卡页的内存中通常包含不止一个对象，只要卡页内有一个（或更多）对象的字段存在着跨代指针，那就将对应卡表的数组元素的值标识为1，称为这个元素变脏（Dirty），没有则标识为0。在垃圾收集发生时，只要筛选出卡表中变脏的元素，就能轻易得出哪些卡页内存块中包含跨代指针，把它们加入GC Roots中一并扫描。\n\n\n\n并发情况下是如何保证卡表变脏的，是采用写屏障的方式\n\n\n\n### 垃圾回收器的优化\n\n\n\n把遍历对象图中遇到的对象按照“是否访问过”这个条件标记成以下三种颜色\n\n\n\n1. 白色：表示对象尚未被垃圾收集器访问过。显然在可达性分析刚刚开始的阶段，所有的对象都是白色的，若在分析结束的阶段，仍然是白色的对象，即代表不可达\n\n2. 黑色：表示对象已经被垃圾收集器访问过，且这个对象的所有引用都已经扫描过。黑色的对象代表已经扫描过，它是安全存活的，如果有其他对象引用指向了黑色对象，无须重新扫描一遍。黑色对象不可能直接（不经过灰色对象）指向某个白色对象\n\n3. 灰色：表示对象已经被垃圾收集器访问过，但这个对象上至少存在一个引用还没有被扫描过\n\n\n\n“对象消失”的问题需要同时满足以下两种条件\n\n\n\n1. 赋值器插入了一条或多条从黑色对象到白色对象的新引用\n\n2. ·赋值器删除了全部从灰色对象到该白色对象的直接或间接引用\n\n\n\n因此，我们要解决并发扫描时的对象消失问题，只需破坏这两个条件的任意一个即可。由此分别产生了两种解决方案：增量更新（Incremental Update）和原始快照（Snapshot At The Beginning，SATB）\n\n\n\n增量更新要破坏的是第一个条件，当黑色对象插入新的指向白色对象的引用关系时，就将这个新插入的引用记录下来，等并发扫描结束之后，再将这些记录过的引用关系中的黑色对象为根，重新扫描一次。这可以简化理解为，黑色对象一旦新插入了指向白色对象的引用之后，它就变回灰色对象了\n\n\n\n原始快照要破坏的是第二个条件，当灰色对象要删除指向白色对象的引用关系时，就将这个要删除的引用记录下来，在并发扫描结束之后，再将这些记录过的引用关系中的灰色对象为根，重新扫描一次。这也可以简化理解为，无论引用关系删除与否，都会按照刚刚开始扫描那一刻的对象图快照来进行搜索\n\n\n\n增量更新和原始快照这两种解决方案都有实际应用，譬如，CMS是基于增量更新来做并发标记的，G1、Shenandoah则是用原始快照来实现。","slug":"JVM-2","published":1,"updated":"2025-03-02T03:37:34.364Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4b000kn0uk6n7f4lck","content":"<p>主要是用来介绍各种垃圾回收器的执行过程和优缺点</p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"垃圾回收器的种类\"><a href=\"#垃圾回收器的种类\" class=\"headerlink\" title=\"垃圾回收器的种类\"></a>垃圾回收器的种类</h2><h4 id=\"Serial收集器\"><a href=\"#Serial收集器\" class=\"headerlink\" title=\"Serial收集器\"></a>Serial收集器</h4><p>最早的垃圾回收器，是个单线程工作的收集器，但是他的单线程并不是真的垃圾会受到时候真的使用的是单线程，而是说进行垃圾回收的时候，会stop the world ，会停止所有的用户线程工作</p>\n<p>特点：</p>\n<ol>\n<li><p>垃圾回收的时候，会停止所有的用户线程进行工作</p>\n</li>\n<li><p>在资源受限的情况下，与其他收集器的单线程相比，效率依然是最高的</p>\n</li>\n</ol>\n<h4 id=\"ParNew收集器\"><a href=\"#ParNew收集器\" class=\"headerlink\" title=\"ParNew收集器\"></a>ParNew收集器</h4><p>其实这就是Serial收集器的多线程并行版本，除了同时使用多条线程进行垃圾收集之外，其余的行为都和Serial收集器一样</p>\n<p>特点：</p>\n<ol>\n<li><p>除了Serial收集器外，目前只有它能与CMS收集器配合工作</p>\n</li>\n<li><p>一般来说是CMS和ParNew来一起使用，CMS 主要用来回收老年代，ParNew主要用来回收新生代</p>\n</li>\n</ol>\n<h4 id=\"Parallel-Scavenge收集器\"><a href=\"#Parallel-Scavenge收集器\" class=\"headerlink\" title=\"Parallel Scavenge收集器\"></a>Parallel Scavenge收集器</h4><p>Parallel Scavenge收集器也是一款新生代收集器，它同样是基于标记-复制算法实现的收集器</p>\n<p>特点：</p>\n<ol>\n<li><p>它主要关注的点是达到一个可控制的吞吐量</p>\n</li>\n<li><p>自适应调节策略：自动进行内存的调优</p>\n</li>\n</ol>\n<h4 id=\"Serial-Old收集器\"><a href=\"#Serial-Old收集器\" class=\"headerlink\" title=\"Serial Old收集器\"></a>Serial Old收集器</h4><p>Serial Old是Serial收集器的老年代版本，它同样是一个单线程收集器，使用标记-整理算法</p>\n<p>两种用途：一种是在JDK 5以及之前的版本中与Parallel Scavenge收集器搭配使用[插图]，另外一种就是作为CMS收集器发生失败时的后备预案，在并发收集发生Concurrent Mode Failure时使用</p>\n<h4 id=\"Parallel-Old收集器\"><a href=\"#Parallel-Old收集器\" class=\"headerlink\" title=\"Parallel Old收集器\"></a>Parallel Old收集器</h4><p>Parallel Old是Parallel Scavenge收集器的老年代版本，支持多线程并发收集，基于标记-整理算法实现</p>\n<ul>\n<li>在注重吞吐量或者处理器资源较为稀缺的场合，都可以优先考虑Parallel Scavenge加Parallel Old收集器这个组合</li>\n</ul>\n<h4 id=\"CMS收集器\"><a href=\"#CMS收集器\" class=\"headerlink\" title=\"CMS收集器\"></a>CMS收集器</h4><p>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器,是基于标记-清楚算法实现的</p>\n<p>过程分为四个步骤：</p>\n<ol>\n<li><p>初始化标记：就是标记GC ROOTs，静态变量和方法中的成员变量都数据GCROOTS，速度很快</p>\n</li>\n<li><p>并发标记 ：链路追踪，标记GGROOT 中引用其他的</p>\n</li>\n<li><p>重新标记：标记并发标记引用变动的对象</p>\n</li>\n<li><p>并发清理：并发清理掉可回收的内存，但是用户线程依旧在执行，所以会产生浮动垃圾</p>\n</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li><p>对处理器资源比较敏感</p>\n</li>\n<li><p>无法处理“浮动垃圾”</p>\n</li>\n<li><p>由于使用的是标记-清理算法，故会产生大量的碎片空间</p>\n</li>\n</ol>\n<p>浮动垃圾：在CMS的并发标记和并发清理阶段，用户线程是还在继续运行的，程序在运行自然就还会伴随有新的垃圾对象不断产生，但这一部分垃圾对象是出现在标记过程结束以后，CMS无法在当次收集中处理掉它们，只好留待下一次垃圾收集时再清理掉。这一部分垃圾就称为“浮动垃圾”</p>\n<p>实际处理</p>\n<p>-XX:CMSlnitiatingOccupancyFaction   用来设置老年代占用多少比例的时候触发CMS垃圾回收</p>\n<p>jsk1.6默认的值是92%</p>\n<p>如果Cms垃圾回收期间，系统程序要放入老年代的对象大于可用内存空间，会发生Concurrent Mode Failure ，就是说并发垃圾回收失败了，我一遍回收，你一遍把对象放入老年带中，内存不够了</p>\n<p>此时也会自动启用“Seral Old”垃圾回收器，就是直接把系统程序&quot;Stop the World&quot; ，重新进行长时间的GC Roots追踪，标记出来全部垃圾对象，不允许新的对象产生，然后一次性把垃圾对象都回收掉，完事儿了再回复系统线程</p>\n<p>注意、</p>\n<p>cms垃圾回收期也不是仅仅用“标记-清理”算法的，由于太多的内存随便实际上会更加频繁的full gc</p>\n<p>cms 有一个-XX：+UseCMSCompactAtFullCollection  默认开启</p>\n<p>这个参数的意思是full gc之后要再次进行&quot;Stop the World&quot;，停止工作线程，然后进行碎片整理，就是把存活的对象挪到一起，空出来大片连续的内存空间，避免内存碎片</p>\n<p>-XX：CMSFullGCsBeforeCompaction 这个参数的意思是执行多少期Full gc之后再执行一次内存碎片的整理工作，默认是0，意思就是每次full gc之后都会进行一次内存整理</p>\n<h4 id=\"Garbage-First收集器\"><a href=\"#Garbage-First收集器\" class=\"headerlink\" title=\"Garbage First收集器\"></a>Garbage First收集器</h4><p>简称G1收集器，它开创了收集器面向局部收集的设计思路和基于Region的内存布局形式</p>\n<p>在JDK9中，，G1宣告取代Parallel Scavenge加ParallelOld组合，成为服务端模式下的默认垃圾收集器</p>\n<p>垃圾收集的目标范围要么是整个新生代（Minor GC），要么就是整个老年代（Major GC），再要么就是整个Java堆（Full GC）。而G1跳出了这个樊笼，它可以面向堆内存任何部分来组成回收集（Collection Set，一般简称CSet）进行回收，衡量标准不再是它属于哪个分代，而是哪块内存中存放的垃圾数量最多，回收收益最大，这就是G1收集器的MixedGC模式</p>\n<p>G1会将连续的Java堆划分为多个大小相等的独立区域（Region），每一个Region都可以根据需要，扮演新生代的Eden空间、Survivor空间，或者老年代空间。收集器能够对扮演不同角色的Region采用不同的策略去处理，这样无论是新创建的对象还是已经存活了一段时间、熬过多次收集的旧对象都能获取很好的收集效果</p>\n<p>Region中还有一类特殊的Humongous区域，专门用来存储大对象。G1认为只要大小超过了一个Region容量一半的对象即可判定为大对象。每个Region的大小可以通过参数-XX：G1HeapRegionSize设定，取值范围为1MB～32MB，且应为2的N次幂。而对于那些超过了整个Region容量的超级大对象，将会被存放在N个连续的Humongous Region之中，G1的大多数行为都把Humongous Region作为老年代的一部分来进行看待</p>\n<p><strong>垃圾回收思路：</strong></p>\n<p>让G1收集器去跟踪各个Region里面的垃圾堆积的“价值”大小，价值即回收所获得的空间大小以及回收所需时间的经验值，然后在后台维护一个优先级列表，根据优先级列表来进行垃圾回收</p>\n<h4 id=\"Shenandoah收集器\"><a href=\"#Shenandoah收集器\" class=\"headerlink\" title=\"Shenandoah收集器\"></a>Shenandoah收集器</h4><p>低延迟收集器</p>\n<p>Shenandoah相比起G1又有什么改进呢？</p>\n<ol>\n<li><p>支持并发的整理算法，而不是只会支持多线程回收并行</p>\n</li>\n<li><p>默认不使用分代收集的，没有实现分代，主要通过“性价比”来衡量垃圾回收的优先级</p>\n</li>\n<li><p>记录跨Region的引用关系发生改变，不使用耗费大量内存和计算资源去维护的记忆集，改用名为“连接矩阵”</p>\n</li>\n</ol>\n<p>工作过程：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud29sYWkuY29tL2k0NllmOVJORHkyelpEb3RVN0FjcWE=\">ZGC收集器<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"垃圾回收的类型\"><a href=\"#垃圾回收的类型\" class=\"headerlink\" title=\"垃圾回收的类型\"></a>垃圾回收的类型</h3><h4 id=\"部分收集（Partial-GC）\"><a href=\"#部分收集（Partial-GC）\" class=\"headerlink\" title=\"部分收集（Partial GC）\"></a>部分收集（Partial GC）</h4><p>指目标不是完整收集整个Java堆的垃圾收集</p>\n<h4 id=\"新生代收集\"><a href=\"#新生代收集\" class=\"headerlink\" title=\"新生代收集\"></a>新生代收集</h4><p>（Minor GC&#x2F;Young GC）：指目标只是新生代的垃圾收集</p>\n<h4 id=\"老年代收集\"><a href=\"#老年代收集\" class=\"headerlink\" title=\"老年代收集\"></a>老年代收集</h4><p>（Major GC&#x2F;Old GC）：指目标只是老年代的垃圾收集。目前只有CMS收集器会有单独收集老年代的行为。另外请注意“Major GC”这个说法现在有点混淆，在不同资料上常有不同所指，读者需按上下文区分到底是指老年代的收集还是整堆收集</p>\n<h4 id=\"混合收集\"><a href=\"#混合收集\" class=\"headerlink\" title=\"混合收集\"></a>混合收集</h4><p>（Mixed GC）：指目标是收集整个新生代以及部分老年代的垃圾收集。目前只有G1收集器会有这种行为</p>\n<h4 id=\"整堆收集\"><a href=\"#整堆收集\" class=\"headerlink\" title=\"整堆收集\"></a>整堆收集</h4><p>（Full GC）：收集整个Java堆和方法区的垃圾收集。</p>\n<h3 id=\"垃圾回收算法\"><a href=\"#垃圾回收算法\" class=\"headerlink\" title=\"垃圾回收算法\"></a>垃圾回收算法</h3><h4 id=\"标记清除算法\"><a href=\"#标记清除算法\" class=\"headerlink\" title=\"标记清除算法\"></a>标记清除算法</h4><p>顾名思义标记所有需要回收的对象，统一回收被标记的对象</p>\n<p>两个过程：标记过程和清理过程</p>\n<p>标记过程其实就是判断对象是否需要回收的过程，也就是对象是否已死的过程</p>\n<p>清理过程就是清理掉所有的已死对象</p>\n<blockquote>\n<p>关注延迟的CMS收集器则是基于标记-清除算法的</p>\n</blockquote>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>执行效率低</li>\n</ol>\n<p>如果对象需要回收的数量比较大，那么它的执行效率必然会随着数量的增加而减少</p>\n<ol>\n<li>内部空间碎片化</li>\n</ol>\n<p>由于被回收的对象位置不能保证是连续的，必然会产生大量的不连续的内存碎片，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作</p>\n<h4 id=\"标记复制算法\"><a href=\"#标记复制算法\" class=\"headerlink\" title=\"标记复制算法\"></a>标记复制算法</h4><p>新生代分为一块较大的Eden空间和两块较小的Survivor空间，每次分配内存只使用Eden和其中一块Survivor。发生垃圾搜集时，将Eden和Survivor中仍然存活的对象一次性复制到另外一块Survivor空间上，然后直接清理掉Eden和已用过的那块Survivor空间</p>\n<p>HotSpot虚拟机默认Eden和Survivor的大小比例是8∶1，也即每次新生代中可用内存空间为整个新生代容量的90%（Eden的80%加上一个Survivor的10%），只有一个Survivor空间，即10%的新生代是会被“浪费”的。当然，98%的对象可被回收仅仅是“普通场景”下测得的数据，任何人都没有办法百分百保证每次回收都只有不多于10%的对象存活，因此Appel式回收还有一个充当罕见情况的“逃生门”的安全设计，当Survivor空间不足以容纳一次Minor GC之后存活的对象时，就需要依赖其他内存区域（实际上大多就是老年代）进行分配担保（Handle Promotion）</p>\n<h4 id=\"标记-整理算法\"><a href=\"#标记-整理算法\" class=\"headerlink\" title=\"标记-整理算法\"></a>标记-整理算法</h4><p>标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向内存空间一端移动，然后直接清理掉边界以外的内存</p>\n<p>标记-整理算法和标记复制算法区别</p>\n<h4 id=\"Stop-TheWorld\"><a href=\"#Stop-TheWorld\" class=\"headerlink\" title=\"Stop TheWorld\"></a>Stop TheWorld</h4><p>定义：全程暂停用户应用程序才能进行的过程</p>\n<p>如果移动存活对象，尤其是在老年代这种每次回收都有大量对象存活区域，移动存活对象并更新所有引用这些对象的地方将会是一种极为负重的操作，而且这种对象移动操作必须全程暂停用户应用程序才能进行[插图]，这就更加让使用者不得不小心翼翼地权衡其弊端了，像这样的停顿被最初的虚拟机设计者形象地描述为“Stop TheWorld”</p>\n<ul>\n<li>关注吞吐量的Parallel Scavenge收集器是基于标记-整理算法的</li>\n</ul>\n<h3 id=\"方法区的回收\"><a href=\"#方法区的回收\" class=\"headerlink\" title=\"方法区的回收\"></a>方法区的回收</h3><p>回收类型两种：废弃的常量和不再使用的类</p>\n<h4 id=\"废弃的常量\"><a href=\"#废弃的常量\" class=\"headerlink\" title=\"废弃的常量\"></a>废弃的常量</h4><p>假如一个字符串“java”曾经进入常量池中，但是当前系统又没有任何一个字符串对象的值是“java”，换句话说，已经没有任何字符串对象引用常量池中的“java”常量，且虚拟机中也没有其他地方引用这个字面量。如果在这时发生内存回收，而且垃圾收集器判断确有必要的话，这个“java”常量就将会被系统清理出常量池</p>\n<h4 id=\"不再使用的类\"><a href=\"#不再使用的类\" class=\"headerlink\" title=\"不再使用的类\"></a>不再使用的类</h4><p>如何确定一个类是一个不再使用的类那，需要满足一下三个条件</p>\n<ol>\n<li><p>该类所有的实例都已经被回收，也就是Java堆中不存在该类及其任何派生子类的实例</p>\n</li>\n<li><p>加载该类的类加载器已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如OSGi、JSP的重加载等，否则通常是很难达成的</p>\n</li>\n<li><p>该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法</p>\n</li>\n</ol>\n<h3 id=\"垃圾回收-堆-的具体过程\"><a href=\"#垃圾回收-堆-的具体过程\" class=\"headerlink\" title=\"垃圾回收(堆)的具体过程\"></a>垃圾回收(堆)的具体过程</h3><h4 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h4><p>开始的时候，一定是stop the word的状态，就是所有的用户线程都会停止的，但是具体什么时候进行垃圾回收那，就是到达<em><strong>安全点</strong></em>的时候</p>\n<p>安全点的选取标准是是否具有让程序长时间执行的特征”为标准进行选定的。“长时间执行”的最明显特征就是指令序列的复用，例如方法调用、循环跳转、异常跳转等都属于指令序列复用，所以只有具有这些功能的指令才会产生安全点</p>\n<p>到达安全点会停顿下来，那么停顿方式是什么那？</p>\n<ol>\n<li><p>抢占式中断</p>\n</li>\n<li><p>主动式中断</p>\n</li>\n</ol>\n<p>抢占式中断：抢先式中断不需要线程的执行代码主动去配合，在垃圾收集发生时，系统首先把所有用户线程全部中断，如果发现有用户线程中断的地方不在安全点上，就恢复这条线程执行，让它一会再重新中断，直到跑到安全点上。现在几乎没有虚拟机实现采用抢先式中断来暂停线程响应GC事件</p>\n<p>主动式中断：当垃圾收集需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志位，各个线程执行过程时会不停地主动去轮询这个标志，一旦发现中断标志为真时就自己在最近的安全点上主动中断挂起。轮询标志的地方和安全点是重合的，另外还要加上所有创建对象和其他需要在Java堆上分配内存的地方，这是为了检查是否即将要发生垃圾收集，避免没有足够内存分配新对象</p>\n<p>安全区域：安全区域是指能够确保在某一段代码片段之中，引用关系不会发生变化，因此，在这个区域中任意地方开始垃圾收集都是安全的。我们也可以把安全区域看作被扩展拉伸了的安全点。</p>\n<p>程序执行的时候可以使用到达安全点的方法来进行垃圾回收，程序不执行的时候，就需要采用<strong>安全区域</strong>的方来进行垃圾回收了</p>\n<p>当用户线程执行到安全区域里面的代码时，首先会标识自己已经进入了安全区域，那样当这段时间里虚拟机要发起垃圾收集时就不必去管这些已声明自己在安全区域内的线程了。当线程要离开安全区域时，它要检查虚拟机是否已经完成了根节点枚举（或者垃圾收集过程中其他需要暂停用户线程的阶段），如果完成了，那线程就当作没事发生过，继续执行；否则它就必须一直等待，直到收到可以离开安全区域的信号为止</p>\n<h4 id=\"根节点枚举\"><a href=\"#根节点枚举\" class=\"headerlink\" title=\"根节点枚举\"></a>根节点枚举</h4><p>如果采用的是可达性分析性算法将会从GC Roots集合中查找引用链</p>\n<blockquote>\n<p>GC Roots集合：通常是常量、类静态属性、栈帧中的本地变量表</p>\n</blockquote>\n<p>由于目前java应用越做越大，每次都要从GC Roots集合中找会很慢，于是HotSpot给出了一种解决方案，使用OopMap的数据结构来达到这个目的。一旦类加载动作完成的时候，HotSpot就会把对象内什么偏移量上是什么类型的数据计算出来，在即时编译（见第11章）过程中，也会在特定的位置记录下栈里和寄存器里哪些位置是引用。这样收集器在扫描时就可以直接得知这些信息了，并不需要真正一个不漏地从方法区等GC Roots开始查找</p>\n<p>但是并不是每一次的操作都会存到OopMap的数据结构中，这样做的话所需要的空间太大了，违背最初节省空空间的想法，因此通常是到了安全点之后，才会进行</p>\n<h4 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h4><p>OopMap</p>\n<p>记忆集</p>\n<p>作用：记录从非收集区域指向收集区域的指针集合的抽象数据结构</p>\n<p>目前经常采用的实现记忆集的方式是卡表</p>\n<p>卡表和记忆集的关系可以用hashmap和map之间的关系来对比，一个是具体实现方式，一个是抽象数据结构</p>\n<p>一个卡页的内存中通常包含不止一个对象，只要卡页内有一个（或更多）对象的字段存在着跨代指针，那就将对应卡表的数组元素的值标识为1，称为这个元素变脏（Dirty），没有则标识为0。在垃圾收集发生时，只要筛选出卡表中变脏的元素，就能轻易得出哪些卡页内存块中包含跨代指针，把它们加入GC Roots中一并扫描。</p>\n<p>并发情况下是如何保证卡表变脏的，是采用写屏障的方式</p>\n<h3 id=\"垃圾回收器的优化\"><a href=\"#垃圾回收器的优化\" class=\"headerlink\" title=\"垃圾回收器的优化\"></a>垃圾回收器的优化</h3><p>把遍历对象图中遇到的对象按照“是否访问过”这个条件标记成以下三种颜色</p>\n<ol>\n<li><p>白色：表示对象尚未被垃圾收集器访问过。显然在可达性分析刚刚开始的阶段，所有的对象都是白色的，若在分析结束的阶段，仍然是白色的对象，即代表不可达</p>\n</li>\n<li><p>黑色：表示对象已经被垃圾收集器访问过，且这个对象的所有引用都已经扫描过。黑色的对象代表已经扫描过，它是安全存活的，如果有其他对象引用指向了黑色对象，无须重新扫描一遍。黑色对象不可能直接（不经过灰色对象）指向某个白色对象</p>\n</li>\n<li><p>灰色：表示对象已经被垃圾收集器访问过，但这个对象上至少存在一个引用还没有被扫描过</p>\n</li>\n</ol>\n<p>“对象消失”的问题需要同时满足以下两种条件</p>\n<ol>\n<li><p>赋值器插入了一条或多条从黑色对象到白色对象的新引用</p>\n</li>\n<li><p>·赋值器删除了全部从灰色对象到该白色对象的直接或间接引用</p>\n</li>\n</ol>\n<p>因此，我们要解决并发扫描时的对象消失问题，只需破坏这两个条件的任意一个即可。由此分别产生了两种解决方案：增量更新（Incremental Update）和原始快照（Snapshot At The Beginning，SATB）</p>\n<p>增量更新要破坏的是第一个条件，当黑色对象插入新的指向白色对象的引用关系时，就将这个新插入的引用记录下来，等并发扫描结束之后，再将这些记录过的引用关系中的黑色对象为根，重新扫描一次。这可以简化理解为，黑色对象一旦新插入了指向白色对象的引用之后，它就变回灰色对象了</p>\n<p>原始快照要破坏的是第二个条件，当灰色对象要删除指向白色对象的引用关系时，就将这个要删除的引用记录下来，在并发扫描结束之后，再将这些记录过的引用关系中的灰色对象为根，重新扫描一次。这也可以简化理解为，无论引用关系删除与否，都会按照刚刚开始扫描那一刻的对象图快照来进行搜索</p>\n<p>增量更新和原始快照这两种解决方案都有实际应用，譬如，CMS是基于增量更新来做并发标记的，G1、Shenandoah则是用原始快照来实现。</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"主要是用来介绍各种垃圾回收器的执行过程和优缺点\n\n垃圾回收器的种类\nSerial收集器\n最早的垃圾回收器，是个单线程工作的收集器，但是他的单线程并不是真的垃圾会受到时候真的使用的是单线程，而是说进行垃圾回收的时候，会stop the world ，会停止所有的用户线程工作\n\n特点：\n\n 1. 垃圾回收的时候，会停止所有的用户线程进行工作\n    \n    \n 2. 在资源受限的情况下，与其他收集器的单线程相比，效率依然是最高的\n    \n    \n\nParNew收集器\n其实这就是Serial收集器的多线程并行版本，除了同时使用多条线程进行垃圾收集之外，其余的行为都和Serial收集器一样\n\n特","more":"<h2 id=\"垃圾回收器的种类\"><a href=\"#垃圾回收器的种类\" class=\"headerlink\" title=\"垃圾回收器的种类\"></a>垃圾回收器的种类</h2><h4 id=\"Serial收集器\"><a href=\"#Serial收集器\" class=\"headerlink\" title=\"Serial收集器\"></a>Serial收集器</h4><p>最早的垃圾回收器，是个单线程工作的收集器，但是他的单线程并不是真的垃圾会受到时候真的使用的是单线程，而是说进行垃圾回收的时候，会stop the world ，会停止所有的用户线程工作</p>\n<p>特点：</p>\n<ol>\n<li><p>垃圾回收的时候，会停止所有的用户线程进行工作</p>\n</li>\n<li><p>在资源受限的情况下，与其他收集器的单线程相比，效率依然是最高的</p>\n</li>\n</ol>\n<h4 id=\"ParNew收集器\"><a href=\"#ParNew收集器\" class=\"headerlink\" title=\"ParNew收集器\"></a>ParNew收集器</h4><p>其实这就是Serial收集器的多线程并行版本，除了同时使用多条线程进行垃圾收集之外，其余的行为都和Serial收集器一样</p>\n<p>特点：</p>\n<ol>\n<li><p>除了Serial收集器外，目前只有它能与CMS收集器配合工作</p>\n</li>\n<li><p>一般来说是CMS和ParNew来一起使用，CMS 主要用来回收老年代，ParNew主要用来回收新生代</p>\n</li>\n</ol>\n<h4 id=\"Parallel-Scavenge收集器\"><a href=\"#Parallel-Scavenge收集器\" class=\"headerlink\" title=\"Parallel Scavenge收集器\"></a>Parallel Scavenge收集器</h4><p>Parallel Scavenge收集器也是一款新生代收集器，它同样是基于标记-复制算法实现的收集器</p>\n<p>特点：</p>\n<ol>\n<li><p>它主要关注的点是达到一个可控制的吞吐量</p>\n</li>\n<li><p>自适应调节策略：自动进行内存的调优</p>\n</li>\n</ol>\n<h4 id=\"Serial-Old收集器\"><a href=\"#Serial-Old收集器\" class=\"headerlink\" title=\"Serial Old收集器\"></a>Serial Old收集器</h4><p>Serial Old是Serial收集器的老年代版本，它同样是一个单线程收集器，使用标记-整理算法</p>\n<p>两种用途：一种是在JDK 5以及之前的版本中与Parallel Scavenge收集器搭配使用[插图]，另外一种就是作为CMS收集器发生失败时的后备预案，在并发收集发生Concurrent Mode Failure时使用</p>\n<h4 id=\"Parallel-Old收集器\"><a href=\"#Parallel-Old收集器\" class=\"headerlink\" title=\"Parallel Old收集器\"></a>Parallel Old收集器</h4><p>Parallel Old是Parallel Scavenge收集器的老年代版本，支持多线程并发收集，基于标记-整理算法实现</p>\n<ul>\n<li>在注重吞吐量或者处理器资源较为稀缺的场合，都可以优先考虑Parallel Scavenge加Parallel Old收集器这个组合</li>\n</ul>\n<h4 id=\"CMS收集器\"><a href=\"#CMS收集器\" class=\"headerlink\" title=\"CMS收集器\"></a>CMS收集器</h4><p>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器,是基于标记-清楚算法实现的</p>\n<p>过程分为四个步骤：</p>\n<ol>\n<li><p>初始化标记：就是标记GC ROOTs，静态变量和方法中的成员变量都数据GCROOTS，速度很快</p>\n</li>\n<li><p>并发标记 ：链路追踪，标记GGROOT 中引用其他的</p>\n</li>\n<li><p>重新标记：标记并发标记引用变动的对象</p>\n</li>\n<li><p>并发清理：并发清理掉可回收的内存，但是用户线程依旧在执行，所以会产生浮动垃圾</p>\n</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li><p>对处理器资源比较敏感</p>\n</li>\n<li><p>无法处理“浮动垃圾”</p>\n</li>\n<li><p>由于使用的是标记-清理算法，故会产生大量的碎片空间</p>\n</li>\n</ol>\n<p>浮动垃圾：在CMS的并发标记和并发清理阶段，用户线程是还在继续运行的，程序在运行自然就还会伴随有新的垃圾对象不断产生，但这一部分垃圾对象是出现在标记过程结束以后，CMS无法在当次收集中处理掉它们，只好留待下一次垃圾收集时再清理掉。这一部分垃圾就称为“浮动垃圾”</p>\n<p>实际处理</p>\n<p>-XX:CMSlnitiatingOccupancyFaction   用来设置老年代占用多少比例的时候触发CMS垃圾回收</p>\n<p>jsk1.6默认的值是92%</p>\n<p>如果Cms垃圾回收期间，系统程序要放入老年代的对象大于可用内存空间，会发生Concurrent Mode Failure ，就是说并发垃圾回收失败了，我一遍回收，你一遍把对象放入老年带中，内存不够了</p>\n<p>此时也会自动启用“Seral Old”垃圾回收器，就是直接把系统程序&quot;Stop the World&quot; ，重新进行长时间的GC Roots追踪，标记出来全部垃圾对象，不允许新的对象产生，然后一次性把垃圾对象都回收掉，完事儿了再回复系统线程</p>\n<p>注意、</p>\n<p>cms垃圾回收期也不是仅仅用“标记-清理”算法的，由于太多的内存随便实际上会更加频繁的full gc</p>\n<p>cms 有一个-XX：+UseCMSCompactAtFullCollection  默认开启</p>\n<p>这个参数的意思是full gc之后要再次进行&quot;Stop the World&quot;，停止工作线程，然后进行碎片整理，就是把存活的对象挪到一起，空出来大片连续的内存空间，避免内存碎片</p>\n<p>-XX：CMSFullGCsBeforeCompaction 这个参数的意思是执行多少期Full gc之后再执行一次内存碎片的整理工作，默认是0，意思就是每次full gc之后都会进行一次内存整理</p>\n<h4 id=\"Garbage-First收集器\"><a href=\"#Garbage-First收集器\" class=\"headerlink\" title=\"Garbage First收集器\"></a>Garbage First收集器</h4><p>简称G1收集器，它开创了收集器面向局部收集的设计思路和基于Region的内存布局形式</p>\n<p>在JDK9中，，G1宣告取代Parallel Scavenge加ParallelOld组合，成为服务端模式下的默认垃圾收集器</p>\n<p>垃圾收集的目标范围要么是整个新生代（Minor GC），要么就是整个老年代（Major GC），再要么就是整个Java堆（Full GC）。而G1跳出了这个樊笼，它可以面向堆内存任何部分来组成回收集（Collection Set，一般简称CSet）进行回收，衡量标准不再是它属于哪个分代，而是哪块内存中存放的垃圾数量最多，回收收益最大，这就是G1收集器的MixedGC模式</p>\n<p>G1会将连续的Java堆划分为多个大小相等的独立区域（Region），每一个Region都可以根据需要，扮演新生代的Eden空间、Survivor空间，或者老年代空间。收集器能够对扮演不同角色的Region采用不同的策略去处理，这样无论是新创建的对象还是已经存活了一段时间、熬过多次收集的旧对象都能获取很好的收集效果</p>\n<p>Region中还有一类特殊的Humongous区域，专门用来存储大对象。G1认为只要大小超过了一个Region容量一半的对象即可判定为大对象。每个Region的大小可以通过参数-XX：G1HeapRegionSize设定，取值范围为1MB～32MB，且应为2的N次幂。而对于那些超过了整个Region容量的超级大对象，将会被存放在N个连续的Humongous Region之中，G1的大多数行为都把Humongous Region作为老年代的一部分来进行看待</p>\n<p><strong>垃圾回收思路：</strong></p>\n<p>让G1收集器去跟踪各个Region里面的垃圾堆积的“价值”大小，价值即回收所获得的空间大小以及回收所需时间的经验值，然后在后台维护一个优先级列表，根据优先级列表来进行垃圾回收</p>\n<h4 id=\"Shenandoah收集器\"><a href=\"#Shenandoah收集器\" class=\"headerlink\" title=\"Shenandoah收集器\"></a>Shenandoah收集器</h4><p>低延迟收集器</p>\n<p>Shenandoah相比起G1又有什么改进呢？</p>\n<ol>\n<li><p>支持并发的整理算法，而不是只会支持多线程回收并行</p>\n</li>\n<li><p>默认不使用分代收集的，没有实现分代，主要通过“性价比”来衡量垃圾回收的优先级</p>\n</li>\n<li><p>记录跨Region的引用关系发生改变，不使用耗费大量内存和计算资源去维护的记忆集，改用名为“连接矩阵”</p>\n</li>\n</ol>\n<p>工作过程：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud29sYWkuY29tL2k0NllmOVJORHkyelpEb3RVN0FjcWE=\">ZGC收集器<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"垃圾回收的类型\"><a href=\"#垃圾回收的类型\" class=\"headerlink\" title=\"垃圾回收的类型\"></a>垃圾回收的类型</h3><h4 id=\"部分收集（Partial-GC）\"><a href=\"#部分收集（Partial-GC）\" class=\"headerlink\" title=\"部分收集（Partial GC）\"></a>部分收集（Partial GC）</h4><p>指目标不是完整收集整个Java堆的垃圾收集</p>\n<h4 id=\"新生代收集\"><a href=\"#新生代收集\" class=\"headerlink\" title=\"新生代收集\"></a>新生代收集</h4><p>（Minor GC&#x2F;Young GC）：指目标只是新生代的垃圾收集</p>\n<h4 id=\"老年代收集\"><a href=\"#老年代收集\" class=\"headerlink\" title=\"老年代收集\"></a>老年代收集</h4><p>（Major GC&#x2F;Old GC）：指目标只是老年代的垃圾收集。目前只有CMS收集器会有单独收集老年代的行为。另外请注意“Major GC”这个说法现在有点混淆，在不同资料上常有不同所指，读者需按上下文区分到底是指老年代的收集还是整堆收集</p>\n<h4 id=\"混合收集\"><a href=\"#混合收集\" class=\"headerlink\" title=\"混合收集\"></a>混合收集</h4><p>（Mixed GC）：指目标是收集整个新生代以及部分老年代的垃圾收集。目前只有G1收集器会有这种行为</p>\n<h4 id=\"整堆收集\"><a href=\"#整堆收集\" class=\"headerlink\" title=\"整堆收集\"></a>整堆收集</h4><p>（Full GC）：收集整个Java堆和方法区的垃圾收集。</p>\n<h3 id=\"垃圾回收算法\"><a href=\"#垃圾回收算法\" class=\"headerlink\" title=\"垃圾回收算法\"></a>垃圾回收算法</h3><h4 id=\"标记清除算法\"><a href=\"#标记清除算法\" class=\"headerlink\" title=\"标记清除算法\"></a>标记清除算法</h4><p>顾名思义标记所有需要回收的对象，统一回收被标记的对象</p>\n<p>两个过程：标记过程和清理过程</p>\n<p>标记过程其实就是判断对象是否需要回收的过程，也就是对象是否已死的过程</p>\n<p>清理过程就是清理掉所有的已死对象</p>\n<blockquote>\n<p>关注延迟的CMS收集器则是基于标记-清除算法的</p>\n</blockquote>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>执行效率低</li>\n</ol>\n<p>如果对象需要回收的数量比较大，那么它的执行效率必然会随着数量的增加而减少</p>\n<ol>\n<li>内部空间碎片化</li>\n</ol>\n<p>由于被回收的对象位置不能保证是连续的，必然会产生大量的不连续的内存碎片，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作</p>\n<h4 id=\"标记复制算法\"><a href=\"#标记复制算法\" class=\"headerlink\" title=\"标记复制算法\"></a>标记复制算法</h4><p>新生代分为一块较大的Eden空间和两块较小的Survivor空间，每次分配内存只使用Eden和其中一块Survivor。发生垃圾搜集时，将Eden和Survivor中仍然存活的对象一次性复制到另外一块Survivor空间上，然后直接清理掉Eden和已用过的那块Survivor空间</p>\n<p>HotSpot虚拟机默认Eden和Survivor的大小比例是8∶1，也即每次新生代中可用内存空间为整个新生代容量的90%（Eden的80%加上一个Survivor的10%），只有一个Survivor空间，即10%的新生代是会被“浪费”的。当然，98%的对象可被回收仅仅是“普通场景”下测得的数据，任何人都没有办法百分百保证每次回收都只有不多于10%的对象存活，因此Appel式回收还有一个充当罕见情况的“逃生门”的安全设计，当Survivor空间不足以容纳一次Minor GC之后存活的对象时，就需要依赖其他内存区域（实际上大多就是老年代）进行分配担保（Handle Promotion）</p>\n<h4 id=\"标记-整理算法\"><a href=\"#标记-整理算法\" class=\"headerlink\" title=\"标记-整理算法\"></a>标记-整理算法</h4><p>标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向内存空间一端移动，然后直接清理掉边界以外的内存</p>\n<p>标记-整理算法和标记复制算法区别</p>\n<h4 id=\"Stop-TheWorld\"><a href=\"#Stop-TheWorld\" class=\"headerlink\" title=\"Stop TheWorld\"></a>Stop TheWorld</h4><p>定义：全程暂停用户应用程序才能进行的过程</p>\n<p>如果移动存活对象，尤其是在老年代这种每次回收都有大量对象存活区域，移动存活对象并更新所有引用这些对象的地方将会是一种极为负重的操作，而且这种对象移动操作必须全程暂停用户应用程序才能进行[插图]，这就更加让使用者不得不小心翼翼地权衡其弊端了，像这样的停顿被最初的虚拟机设计者形象地描述为“Stop TheWorld”</p>\n<ul>\n<li>关注吞吐量的Parallel Scavenge收集器是基于标记-整理算法的</li>\n</ul>\n<h3 id=\"方法区的回收\"><a href=\"#方法区的回收\" class=\"headerlink\" title=\"方法区的回收\"></a>方法区的回收</h3><p>回收类型两种：废弃的常量和不再使用的类</p>\n<h4 id=\"废弃的常量\"><a href=\"#废弃的常量\" class=\"headerlink\" title=\"废弃的常量\"></a>废弃的常量</h4><p>假如一个字符串“java”曾经进入常量池中，但是当前系统又没有任何一个字符串对象的值是“java”，换句话说，已经没有任何字符串对象引用常量池中的“java”常量，且虚拟机中也没有其他地方引用这个字面量。如果在这时发生内存回收，而且垃圾收集器判断确有必要的话，这个“java”常量就将会被系统清理出常量池</p>\n<h4 id=\"不再使用的类\"><a href=\"#不再使用的类\" class=\"headerlink\" title=\"不再使用的类\"></a>不再使用的类</h4><p>如何确定一个类是一个不再使用的类那，需要满足一下三个条件</p>\n<ol>\n<li><p>该类所有的实例都已经被回收，也就是Java堆中不存在该类及其任何派生子类的实例</p>\n</li>\n<li><p>加载该类的类加载器已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如OSGi、JSP的重加载等，否则通常是很难达成的</p>\n</li>\n<li><p>该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法</p>\n</li>\n</ol>\n<h3 id=\"垃圾回收-堆-的具体过程\"><a href=\"#垃圾回收-堆-的具体过程\" class=\"headerlink\" title=\"垃圾回收(堆)的具体过程\"></a>垃圾回收(堆)的具体过程</h3><h4 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h4><p>开始的时候，一定是stop the word的状态，就是所有的用户线程都会停止的，但是具体什么时候进行垃圾回收那，就是到达<em><strong>安全点</strong></em>的时候</p>\n<p>安全点的选取标准是是否具有让程序长时间执行的特征”为标准进行选定的。“长时间执行”的最明显特征就是指令序列的复用，例如方法调用、循环跳转、异常跳转等都属于指令序列复用，所以只有具有这些功能的指令才会产生安全点</p>\n<p>到达安全点会停顿下来，那么停顿方式是什么那？</p>\n<ol>\n<li><p>抢占式中断</p>\n</li>\n<li><p>主动式中断</p>\n</li>\n</ol>\n<p>抢占式中断：抢先式中断不需要线程的执行代码主动去配合，在垃圾收集发生时，系统首先把所有用户线程全部中断，如果发现有用户线程中断的地方不在安全点上，就恢复这条线程执行，让它一会再重新中断，直到跑到安全点上。现在几乎没有虚拟机实现采用抢先式中断来暂停线程响应GC事件</p>\n<p>主动式中断：当垃圾收集需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志位，各个线程执行过程时会不停地主动去轮询这个标志，一旦发现中断标志为真时就自己在最近的安全点上主动中断挂起。轮询标志的地方和安全点是重合的，另外还要加上所有创建对象和其他需要在Java堆上分配内存的地方，这是为了检查是否即将要发生垃圾收集，避免没有足够内存分配新对象</p>\n<p>安全区域：安全区域是指能够确保在某一段代码片段之中，引用关系不会发生变化，因此，在这个区域中任意地方开始垃圾收集都是安全的。我们也可以把安全区域看作被扩展拉伸了的安全点。</p>\n<p>程序执行的时候可以使用到达安全点的方法来进行垃圾回收，程序不执行的时候，就需要采用<strong>安全区域</strong>的方来进行垃圾回收了</p>\n<p>当用户线程执行到安全区域里面的代码时，首先会标识自己已经进入了安全区域，那样当这段时间里虚拟机要发起垃圾收集时就不必去管这些已声明自己在安全区域内的线程了。当线程要离开安全区域时，它要检查虚拟机是否已经完成了根节点枚举（或者垃圾收集过程中其他需要暂停用户线程的阶段），如果完成了，那线程就当作没事发生过，继续执行；否则它就必须一直等待，直到收到可以离开安全区域的信号为止</p>\n<h4 id=\"根节点枚举\"><a href=\"#根节点枚举\" class=\"headerlink\" title=\"根节点枚举\"></a>根节点枚举</h4><p>如果采用的是可达性分析性算法将会从GC Roots集合中查找引用链</p>\n<blockquote>\n<p>GC Roots集合：通常是常量、类静态属性、栈帧中的本地变量表</p>\n</blockquote>\n<p>由于目前java应用越做越大，每次都要从GC Roots集合中找会很慢，于是HotSpot给出了一种解决方案，使用OopMap的数据结构来达到这个目的。一旦类加载动作完成的时候，HotSpot就会把对象内什么偏移量上是什么类型的数据计算出来，在即时编译（见第11章）过程中，也会在特定的位置记录下栈里和寄存器里哪些位置是引用。这样收集器在扫描时就可以直接得知这些信息了，并不需要真正一个不漏地从方法区等GC Roots开始查找</p>\n<p>但是并不是每一次的操作都会存到OopMap的数据结构中，这样做的话所需要的空间太大了，违背最初节省空空间的想法，因此通常是到了安全点之后，才会进行</p>\n<h4 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h4><p>OopMap</p>\n<p>记忆集</p>\n<p>作用：记录从非收集区域指向收集区域的指针集合的抽象数据结构</p>\n<p>目前经常采用的实现记忆集的方式是卡表</p>\n<p>卡表和记忆集的关系可以用hashmap和map之间的关系来对比，一个是具体实现方式，一个是抽象数据结构</p>\n<p>一个卡页的内存中通常包含不止一个对象，只要卡页内有一个（或更多）对象的字段存在着跨代指针，那就将对应卡表的数组元素的值标识为1，称为这个元素变脏（Dirty），没有则标识为0。在垃圾收集发生时，只要筛选出卡表中变脏的元素，就能轻易得出哪些卡页内存块中包含跨代指针，把它们加入GC Roots中一并扫描。</p>\n<p>并发情况下是如何保证卡表变脏的，是采用写屏障的方式</p>\n<h3 id=\"垃圾回收器的优化\"><a href=\"#垃圾回收器的优化\" class=\"headerlink\" title=\"垃圾回收器的优化\"></a>垃圾回收器的优化</h3><p>把遍历对象图中遇到的对象按照“是否访问过”这个条件标记成以下三种颜色</p>\n<ol>\n<li><p>白色：表示对象尚未被垃圾收集器访问过。显然在可达性分析刚刚开始的阶段，所有的对象都是白色的，若在分析结束的阶段，仍然是白色的对象，即代表不可达</p>\n</li>\n<li><p>黑色：表示对象已经被垃圾收集器访问过，且这个对象的所有引用都已经扫描过。黑色的对象代表已经扫描过，它是安全存活的，如果有其他对象引用指向了黑色对象，无须重新扫描一遍。黑色对象不可能直接（不经过灰色对象）指向某个白色对象</p>\n</li>\n<li><p>灰色：表示对象已经被垃圾收集器访问过，但这个对象上至少存在一个引用还没有被扫描过</p>\n</li>\n</ol>\n<p>“对象消失”的问题需要同时满足以下两种条件</p>\n<ol>\n<li><p>赋值器插入了一条或多条从黑色对象到白色对象的新引用</p>\n</li>\n<li><p>·赋值器删除了全部从灰色对象到该白色对象的直接或间接引用</p>\n</li>\n</ol>\n<p>因此，我们要解决并发扫描时的对象消失问题，只需破坏这两个条件的任意一个即可。由此分别产生了两种解决方案：增量更新（Incremental Update）和原始快照（Snapshot At The Beginning，SATB）</p>\n<p>增量更新要破坏的是第一个条件，当黑色对象插入新的指向白色对象的引用关系时，就将这个新插入的引用记录下来，等并发扫描结束之后，再将这些记录过的引用关系中的黑色对象为根，重新扫描一次。这可以简化理解为，黑色对象一旦新插入了指向白色对象的引用之后，它就变回灰色对象了</p>\n<p>原始快照要破坏的是第二个条件，当灰色对象要删除指向白色对象的引用关系时，就将这个要删除的引用记录下来，在并发扫描结束之后，再将这些记录过的引用关系中的灰色对象为根，重新扫描一次。这也可以简化理解为，无论引用关系删除与否，都会按照刚刚开始扫描那一刻的对象图快照来进行搜索</p>\n<p>增量更新和原始快照这两种解决方案都有实际应用，譬如，CMS是基于增量更新来做并发标记的，G1、Shenandoah则是用原始快照来实现。</p>"},{"title":"JVM常用参数","description":"","abbrlink":"2e9e2da2","date":"2021-04-25T16:00:00.000Z","_content":"\n\n常用参数和日志打印\n\n\n\n<!-- more -->\n\n\n\n## 常用设置\n\n\n\n| 参数                                 | 解释                                                         |\n\n| ------------------------------------ | ------------------------------------------------------------ |\n\n| -Xms                                 | java堆内存的大小                                             |\n\n| -Xmx                                 | java堆内存的最大大小                                         |\n\n| -XX:PeremSize                        | 永久代大小                                                   |\n\n| -XX:MaxpermSize                      | 永久代最大大小                                               |\n\n| -Xmn                                 | 堆内存中的新生代大小                                         |\n\n| -Xss                                 | 每个线程栈内存的大小                                         |\n\n| -XX:Max Tenuring Threshold           | 多少岁进入老年代，默认是15                                   |\n\n| -XX PretenureSize Threshold          | 对象多大直接进入老年代，不经过新生代                         |\n\n| -XX HandlePromotionFailure           | 是否要进行判断 判断老年代的内存大小是都大于之前每一次minor gc之后的进入老年代的对象的平均大小 |\n\n| -XX：SurvivorRatio=8                 | 表示eden区域占比为80%                                        |\n\n| -XX: +UseParNewGC                    | 定垃圾回收器为ParNew，一般来说机器是几核，垃圾回收器并发执行的线程就会有几个，四核机器就是4个，8核机器就是8个 |\n\n| -XX：ParallelGCThreads               | 设置垃圾回收器使用线程数量，一般来说不要动                   |\n\n| -XX: NewSize                         | 新生代                                                       |\n\n| -XX: +UserCMSCOmpactAtFullCollection | 整理碎片                                                     |\n\n| -XX: CMSFullBeforeCompaction=5       | 五次fullgc之后进行一次碎片整理                               |\n\n| XX:CMSInitiatingOccupancyFraction    | 设置CMS老年代回收阀值百分比                                  |\n\n| -XX:+CMSParallelInitialMarkEnabled   | CMS垃圾回收器的“初始标记”阶段开启多线程并发执行              |\n\n| -XX:+CMSScavengeBeforeRemark         | CMS的重新标记阶段之前，先尽量执行一次Young GC，原因：如果大部分新生代的对象被回收掉了，那么作为GC根的部分少了，从而提高重新标记的效率 |\n\n| -XX：TraceClassLoding                | 追踪类加载情况                                               |\n\n| -XX: TraceClassUnloading             | 追踪类卸载情况                                               |\n\n| -XX: SoftRefLRUPolicyMSPerMB         | 软引用存活时间                                               |\n\n| -XX:+DisableExplicltGC               | 禁止显示执行GC，为了避免开发工程师调用system.gc()，在流量高时候频发触发full gc |\n\n| -XX:MetaspaceSize=10M                | 元空间内存设置                                               |\n\n| -XX:MaxMetaspaceSize=10M             | 元空间最大内存设置                                           |\n\n| -XX:+UseConcMarkSweepGC              | 使用CMS垃圾回收器                                            |\n\n\n\n## 打印日志\n\n\n\n| 参数                                | 作用                        |\n\n| ----------------------------------- | --------------------------- |\n\n| -XX：+PrintGCDetails                | 打印gc详细日志              |\n\n| -XX:HeapDumpPath=/usr/local/app/oom | 内存快照存放位置            |\n\n| -XX:+HeapDumpOnOutOfMemoryError     | 在oom的时候自动dump快照出来 |\n\n| -XX：+PrintGC                       | 打印gc日志                  |\n\n| -XX: =PrintGCTimesStamps            | 打印gc时间戳                |\n\n| -XX: +PrintHeapAtGC                 | gc之后，打印堆信息          |\n\n| -Xloggc                             | 打印日志                    |\n\n\n","source":"_posts/JVM常用参数.md","raw":"---\ntitle: JVM常用参数\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 2e9e2da2\ndate: 2021-04-26 00:00:00\n---\n\n\n常用参数和日志打印\n\n\n\n<!-- more -->\n\n\n\n## 常用设置\n\n\n\n| 参数                                 | 解释                                                         |\n\n| ------------------------------------ | ------------------------------------------------------------ |\n\n| -Xms                                 | java堆内存的大小                                             |\n\n| -Xmx                                 | java堆内存的最大大小                                         |\n\n| -XX:PeremSize                        | 永久代大小                                                   |\n\n| -XX:MaxpermSize                      | 永久代最大大小                                               |\n\n| -Xmn                                 | 堆内存中的新生代大小                                         |\n\n| -Xss                                 | 每个线程栈内存的大小                                         |\n\n| -XX:Max Tenuring Threshold           | 多少岁进入老年代，默认是15                                   |\n\n| -XX PretenureSize Threshold          | 对象多大直接进入老年代，不经过新生代                         |\n\n| -XX HandlePromotionFailure           | 是否要进行判断 判断老年代的内存大小是都大于之前每一次minor gc之后的进入老年代的对象的平均大小 |\n\n| -XX：SurvivorRatio=8                 | 表示eden区域占比为80%                                        |\n\n| -XX: +UseParNewGC                    | 定垃圾回收器为ParNew，一般来说机器是几核，垃圾回收器并发执行的线程就会有几个，四核机器就是4个，8核机器就是8个 |\n\n| -XX：ParallelGCThreads               | 设置垃圾回收器使用线程数量，一般来说不要动                   |\n\n| -XX: NewSize                         | 新生代                                                       |\n\n| -XX: +UserCMSCOmpactAtFullCollection | 整理碎片                                                     |\n\n| -XX: CMSFullBeforeCompaction=5       | 五次fullgc之后进行一次碎片整理                               |\n\n| XX:CMSInitiatingOccupancyFraction    | 设置CMS老年代回收阀值百分比                                  |\n\n| -XX:+CMSParallelInitialMarkEnabled   | CMS垃圾回收器的“初始标记”阶段开启多线程并发执行              |\n\n| -XX:+CMSScavengeBeforeRemark         | CMS的重新标记阶段之前，先尽量执行一次Young GC，原因：如果大部分新生代的对象被回收掉了，那么作为GC根的部分少了，从而提高重新标记的效率 |\n\n| -XX：TraceClassLoding                | 追踪类加载情况                                               |\n\n| -XX: TraceClassUnloading             | 追踪类卸载情况                                               |\n\n| -XX: SoftRefLRUPolicyMSPerMB         | 软引用存活时间                                               |\n\n| -XX:+DisableExplicltGC               | 禁止显示执行GC，为了避免开发工程师调用system.gc()，在流量高时候频发触发full gc |\n\n| -XX:MetaspaceSize=10M                | 元空间内存设置                                               |\n\n| -XX:MaxMetaspaceSize=10M             | 元空间最大内存设置                                           |\n\n| -XX:+UseConcMarkSweepGC              | 使用CMS垃圾回收器                                            |\n\n\n\n## 打印日志\n\n\n\n| 参数                                | 作用                        |\n\n| ----------------------------------- | --------------------------- |\n\n| -XX：+PrintGCDetails                | 打印gc详细日志              |\n\n| -XX:HeapDumpPath=/usr/local/app/oom | 内存快照存放位置            |\n\n| -XX:+HeapDumpOnOutOfMemoryError     | 在oom的时候自动dump快照出来 |\n\n| -XX：+PrintGC                       | 打印gc日志                  |\n\n| -XX: =PrintGCTimesStamps            | 打印gc时间戳                |\n\n| -XX: +PrintHeapAtGC                 | gc之后，打印堆信息          |\n\n| -Xloggc                             | 打印日志                    |\n\n\n","slug":"JVM常用参数","published":1,"updated":"2025-03-02T03:37:34.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4c000mn0uka867bnzw","content":"<p>常用参数和日志打印</p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"常用设置\"><a href=\"#常用设置\" class=\"headerlink\" title=\"常用设置\"></a>常用设置</h2><p>| 参数                                 | 解释                                                         |</p>\n<p>| ------------------------------------ | ------------------------------------------------------------ |</p>\n<p>| -Xms                                 | java堆内存的大小                                             |</p>\n<p>| -Xmx                                 | java堆内存的最大大小                                         |</p>\n<p>| -XX:PeremSize                        | 永久代大小                                                   |</p>\n<p>| -XX:MaxpermSize                      | 永久代最大大小                                               |</p>\n<p>| -Xmn                                 | 堆内存中的新生代大小                                         |</p>\n<p>| -Xss                                 | 每个线程栈内存的大小                                         |</p>\n<p>| -XX:Max Tenuring Threshold           | 多少岁进入老年代，默认是15                                   |</p>\n<p>| -XX PretenureSize Threshold          | 对象多大直接进入老年代，不经过新生代                         |</p>\n<p>| -XX HandlePromotionFailure           | 是否要进行判断 判断老年代的内存大小是都大于之前每一次minor gc之后的进入老年代的对象的平均大小 |</p>\n<p>| -XX：SurvivorRatio&#x3D;8                 | 表示eden区域占比为80%                                        |</p>\n<p>| -XX: +UseParNewGC                    | 定垃圾回收器为ParNew，一般来说机器是几核，垃圾回收器并发执行的线程就会有几个，四核机器就是4个，8核机器就是8个 |</p>\n<p>| -XX：ParallelGCThreads               | 设置垃圾回收器使用线程数量，一般来说不要动                   |</p>\n<p>| -XX: NewSize                         | 新生代                                                       |</p>\n<p>| -XX: +UserCMSCOmpactAtFullCollection | 整理碎片                                                     |</p>\n<p>| -XX: CMSFullBeforeCompaction&#x3D;5       | 五次fullgc之后进行一次碎片整理                               |</p>\n<p>| XX:CMSInitiatingOccupancyFraction    | 设置CMS老年代回收阀值百分比                                  |</p>\n<p>| -XX:+CMSParallelInitialMarkEnabled   | CMS垃圾回收器的“初始标记”阶段开启多线程并发执行              |</p>\n<p>| -XX:+CMSScavengeBeforeRemark         | CMS的重新标记阶段之前，先尽量执行一次Young GC，原因：如果大部分新生代的对象被回收掉了，那么作为GC根的部分少了，从而提高重新标记的效率 |</p>\n<p>| -XX：TraceClassLoding                | 追踪类加载情况                                               |</p>\n<p>| -XX: TraceClassUnloading             | 追踪类卸载情况                                               |</p>\n<p>| -XX: SoftRefLRUPolicyMSPerMB         | 软引用存活时间                                               |</p>\n<p>| -XX:+DisableExplicltGC               | 禁止显示执行GC，为了避免开发工程师调用system.gc()，在流量高时候频发触发full gc |</p>\n<p>| -XX:MetaspaceSize&#x3D;10M                | 元空间内存设置                                               |</p>\n<p>| -XX:MaxMetaspaceSize&#x3D;10M             | 元空间最大内存设置                                           |</p>\n<p>| -XX:+UseConcMarkSweepGC              | 使用CMS垃圾回收器                                            |</p>\n<h2 id=\"打印日志\"><a href=\"#打印日志\" class=\"headerlink\" title=\"打印日志\"></a>打印日志</h2><p>| 参数                                | 作用                        |</p>\n<p>| ----------------------------------- | --------------------------- |</p>\n<p>| -XX：+PrintGCDetails                | 打印gc详细日志              |</p>\n<p>| -XX:HeapDumpPath&#x3D;&#x2F;usr&#x2F;local&#x2F;app&#x2F;oom | 内存快照存放位置            |</p>\n<p>| -XX:+HeapDumpOnOutOfMemoryError     | 在oom的时候自动dump快照出来 |</p>\n<p>| -XX：+PrintGC                       | 打印gc日志                  |</p>\n<p>| -XX: &#x3D;PrintGCTimesStamps            | 打印gc时间戳                |</p>\n<p>| -XX: +PrintHeapAtGC                 | gc之后，打印堆信息          |</p>\n<p>| -Xloggc                             | 打印日志                    |</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"常用参数和日志打印\n\n常用设置\n| 参数 | 解释 |\n\n| ------------------------------------ | ------------------------------------------------------------ |\n\n| -Xms | java堆内存的大小 |\n\n| -Xmx | java堆内存的最大大小 |\n\n| -XX:PeremSize | 永久代大小 |\n\n| -XX:MaxpermSize | 永久代最大大小 |\n\n| -Xmn | 堆内存中的新生代大小 |\n\n| -Xss | 每个线程栈内存的大小 |\n\n| -XX:Max Tenu","more":"<h2 id=\"常用设置\"><a href=\"#常用设置\" class=\"headerlink\" title=\"常用设置\"></a>常用设置</h2><p>| 参数                                 | 解释                                                         |</p>\n<p>| ------------------------------------ | ------------------------------------------------------------ |</p>\n<p>| -Xms                                 | java堆内存的大小                                             |</p>\n<p>| -Xmx                                 | java堆内存的最大大小                                         |</p>\n<p>| -XX:PeremSize                        | 永久代大小                                                   |</p>\n<p>| -XX:MaxpermSize                      | 永久代最大大小                                               |</p>\n<p>| -Xmn                                 | 堆内存中的新生代大小                                         |</p>\n<p>| -Xss                                 | 每个线程栈内存的大小                                         |</p>\n<p>| -XX:Max Tenuring Threshold           | 多少岁进入老年代，默认是15                                   |</p>\n<p>| -XX PretenureSize Threshold          | 对象多大直接进入老年代，不经过新生代                         |</p>\n<p>| -XX HandlePromotionFailure           | 是否要进行判断 判断老年代的内存大小是都大于之前每一次minor gc之后的进入老年代的对象的平均大小 |</p>\n<p>| -XX：SurvivorRatio&#x3D;8                 | 表示eden区域占比为80%                                        |</p>\n<p>| -XX: +UseParNewGC                    | 定垃圾回收器为ParNew，一般来说机器是几核，垃圾回收器并发执行的线程就会有几个，四核机器就是4个，8核机器就是8个 |</p>\n<p>| -XX：ParallelGCThreads               | 设置垃圾回收器使用线程数量，一般来说不要动                   |</p>\n<p>| -XX: NewSize                         | 新生代                                                       |</p>\n<p>| -XX: +UserCMSCOmpactAtFullCollection | 整理碎片                                                     |</p>\n<p>| -XX: CMSFullBeforeCompaction&#x3D;5       | 五次fullgc之后进行一次碎片整理                               |</p>\n<p>| XX:CMSInitiatingOccupancyFraction    | 设置CMS老年代回收阀值百分比                                  |</p>\n<p>| -XX:+CMSParallelInitialMarkEnabled   | CMS垃圾回收器的“初始标记”阶段开启多线程并发执行              |</p>\n<p>| -XX:+CMSScavengeBeforeRemark         | CMS的重新标记阶段之前，先尽量执行一次Young GC，原因：如果大部分新生代的对象被回收掉了，那么作为GC根的部分少了，从而提高重新标记的效率 |</p>\n<p>| -XX：TraceClassLoding                | 追踪类加载情况                                               |</p>\n<p>| -XX: TraceClassUnloading             | 追踪类卸载情况                                               |</p>\n<p>| -XX: SoftRefLRUPolicyMSPerMB         | 软引用存活时间                                               |</p>\n<p>| -XX:+DisableExplicltGC               | 禁止显示执行GC，为了避免开发工程师调用system.gc()，在流量高时候频发触发full gc |</p>\n<p>| -XX:MetaspaceSize&#x3D;10M                | 元空间内存设置                                               |</p>\n<p>| -XX:MaxMetaspaceSize&#x3D;10M             | 元空间最大内存设置                                           |</p>\n<p>| -XX:+UseConcMarkSweepGC              | 使用CMS垃圾回收器                                            |</p>\n<h2 id=\"打印日志\"><a href=\"#打印日志\" class=\"headerlink\" title=\"打印日志\"></a>打印日志</h2><p>| 参数                                | 作用                        |</p>\n<p>| ----------------------------------- | --------------------------- |</p>\n<p>| -XX：+PrintGCDetails                | 打印gc详细日志              |</p>\n<p>| -XX:HeapDumpPath&#x3D;&#x2F;usr&#x2F;local&#x2F;app&#x2F;oom | 内存快照存放位置            |</p>\n<p>| -XX:+HeapDumpOnOutOfMemoryError     | 在oom的时候自动dump快照出来 |</p>\n<p>| -XX：+PrintGC                       | 打印gc日志                  |</p>\n<p>| -XX: &#x3D;PrintGCTimesStamps            | 打印gc时间戳                |</p>\n<p>| -XX: +PrintHeapAtGC                 | gc之后，打印堆信息          |</p>\n<p>| -Xloggc                             | 打印日志                    |</p>"},{"title":"OCR对比","description":"","abbrlink":"536c3de7","date":"2023-12-26T16:00:00.000Z","_content":"\n\n------\n\n\n\n# 百度\n\n\n\n识别效果不太理想\n\n\n\n![b49660deaa56e3b5812a53347f8e6a7](https://shyblog.oss-cn-beijing.aliyuncs.com/img/b49660deaa56e3b5812a53347f8e6a7.png)\n\n\n\n# 华为\n\n\n\n需要付费才可以调用api\n\n\n\n![image-20231227175607361](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20231227175607361.png)\n\n\n\n![image-20231227175502287](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20231227175502287.png)\n\n\n\n# 阿里\n\n\n\n```XML\n\nsellerBankAccountInfo:\n\npurchaserBankAccountInfo:\n\nsellerName:金华企客管网络科技有限公司\n\ninvoiceTax:297.03\n\npasswordArea:\n\ntitle:电子发票(普通发票)\n\nprintedInvoiceNumber:\n\ntotalAmountInWords:叁万圆整\n\ninvoiceNumber:23332000000091017218\n\ninvoiceType:数电普通发票\n\ninvoiceDetails1\n\nunitPrice: 29702.9702970297\n\ntaxRate: 1%\n\nitemName: *软件*财务软件源码\n\nunit: 套\n\namount: 29702.97\n\nquantity: 1\n\nspecification: V4\n\ntax: 297.03\n\npurchaserContactInfo:\n\nformType:\n\nmachineCode:\n\nspecialTag:\n\nprintedInvoiceCode:\n\ndrawer:刘黎明\n\nreviewer:\n\ninvoiceDate:2023年12月26日\n\npurchaserTaxNumber:91310113MA1GNRK851\n\ninvoiceCode:\n\npurchaserName:上海迭特信息科技有限公司\n\ncheckCode:\n\ntotalAmount:30000.00\n\nsellerContactInfo:\n\ninvoiceAmountPreTax:29702.97\n\nrecipient:\n\nsellerTaxNumber:91330703MA2HUM3X9J\n\nremarks:\n\nisCopy:否\n\n```\n\n\n\n阿里的付费价格有些复杂\n\n\n\n# 薪火科技\n\n\n\n需要付费才可以调用api\n\n\n\n![  ](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20231227175147492.png)\n\n\n\n![image-20231227175055645](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20231227175055645.png)\n\n\n\n# 总结\n\n\n\n百度的效果不行，华为 阿里 薪火科技 识别效果基本准确，差不太多，对比价格，阿里的价格比较复杂，华为和薪火科技对比，华为便宜一点，比如10万次的时候  华为5600，薪火科技6980，但是华为这个是限制使用年份的，一年一年买的，过了这年没用完的可能就不能用了。\n\n\n\n- 如果知道或者预估了调用量的话  可以使用华为ocr\n\n- 如果不知道的话，也先用华为ocr比较好，毕竟便宜一点\n","source":"_posts/OCR对比.md","raw":"---\ntitle: OCR对比\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 536c3de7\ndate: 2023-12-27 00:00:00\n---\n\n\n------\n\n\n\n# 百度\n\n\n\n识别效果不太理想\n\n\n\n![b49660deaa56e3b5812a53347f8e6a7](https://shyblog.oss-cn-beijing.aliyuncs.com/img/b49660deaa56e3b5812a53347f8e6a7.png)\n\n\n\n# 华为\n\n\n\n需要付费才可以调用api\n\n\n\n![image-20231227175607361](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20231227175607361.png)\n\n\n\n![image-20231227175502287](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20231227175502287.png)\n\n\n\n# 阿里\n\n\n\n```XML\n\nsellerBankAccountInfo:\n\npurchaserBankAccountInfo:\n\nsellerName:金华企客管网络科技有限公司\n\ninvoiceTax:297.03\n\npasswordArea:\n\ntitle:电子发票(普通发票)\n\nprintedInvoiceNumber:\n\ntotalAmountInWords:叁万圆整\n\ninvoiceNumber:23332000000091017218\n\ninvoiceType:数电普通发票\n\ninvoiceDetails1\n\nunitPrice: 29702.9702970297\n\ntaxRate: 1%\n\nitemName: *软件*财务软件源码\n\nunit: 套\n\namount: 29702.97\n\nquantity: 1\n\nspecification: V4\n\ntax: 297.03\n\npurchaserContactInfo:\n\nformType:\n\nmachineCode:\n\nspecialTag:\n\nprintedInvoiceCode:\n\ndrawer:刘黎明\n\nreviewer:\n\ninvoiceDate:2023年12月26日\n\npurchaserTaxNumber:91310113MA1GNRK851\n\ninvoiceCode:\n\npurchaserName:上海迭特信息科技有限公司\n\ncheckCode:\n\ntotalAmount:30000.00\n\nsellerContactInfo:\n\ninvoiceAmountPreTax:29702.97\n\nrecipient:\n\nsellerTaxNumber:91330703MA2HUM3X9J\n\nremarks:\n\nisCopy:否\n\n```\n\n\n\n阿里的付费价格有些复杂\n\n\n\n# 薪火科技\n\n\n\n需要付费才可以调用api\n\n\n\n![  ](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20231227175147492.png)\n\n\n\n![image-20231227175055645](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20231227175055645.png)\n\n\n\n# 总结\n\n\n\n百度的效果不行，华为 阿里 薪火科技 识别效果基本准确，差不太多，对比价格，阿里的价格比较复杂，华为和薪火科技对比，华为便宜一点，比如10万次的时候  华为5600，薪火科技6980，但是华为这个是限制使用年份的，一年一年买的，过了这年没用完的可能就不能用了。\n\n\n\n- 如果知道或者预估了调用量的话  可以使用华为ocr\n\n- 如果不知道的话，也先用华为ocr比较好，毕竟便宜一点\n","slug":"OCR对比","published":1,"updated":"2025-03-02T03:37:34.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4d000pn0uka9fo6jyk","content":"<hr>\n<h1 id=\"百度\"><a href=\"#百度\" class=\"headerlink\" title=\"百度\"></a>百度</h1><p>识别效果不太理想</p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/b49660deaa56e3b5812a53347f8e6a7.png\" alt=\"b49660deaa56e3b5812a53347f8e6a7\" loading=\"lazy\"></p>\n<h1 id=\"华为\"><a href=\"#华为\" class=\"headerlink\" title=\"华为\"></a>华为</h1><p>需要付费才可以调用api</p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20231227175607361.png\" alt=\"image-20231227175607361\" loading=\"lazy\"></p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20231227175502287.png\" alt=\"image-20231227175502287\" loading=\"lazy\"></p>\n<h1 id=\"阿里\"><a href=\"#阿里\" class=\"headerlink\" title=\"阿里\"></a>阿里</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">sellerBankAccountInfo:</span><br><span class=\"line\"></span><br><span class=\"line\">purchaserBankAccountInfo:</span><br><span class=\"line\"></span><br><span class=\"line\">sellerName:金华企客管网络科技有限公司</span><br><span class=\"line\"></span><br><span class=\"line\">invoiceTax:297.03</span><br><span class=\"line\"></span><br><span class=\"line\">passwordArea:</span><br><span class=\"line\"></span><br><span class=\"line\">title:电子发票(普通发票)</span><br><span class=\"line\"></span><br><span class=\"line\">printedInvoiceNumber:</span><br><span class=\"line\"></span><br><span class=\"line\">totalAmountInWords:叁万圆整</span><br><span class=\"line\"></span><br><span class=\"line\">invoiceNumber:23332000000091017218</span><br><span class=\"line\"></span><br><span class=\"line\">invoiceType:数电普通发票</span><br><span class=\"line\"></span><br><span class=\"line\">invoiceDetails1</span><br><span class=\"line\"></span><br><span class=\"line\">unitPrice: 29702.9702970297</span><br><span class=\"line\"></span><br><span class=\"line\">taxRate: 1%</span><br><span class=\"line\"></span><br><span class=\"line\">itemName: *软件*财务软件源码</span><br><span class=\"line\"></span><br><span class=\"line\">unit: 套</span><br><span class=\"line\"></span><br><span class=\"line\">amount: 29702.97</span><br><span class=\"line\"></span><br><span class=\"line\">quantity: 1</span><br><span class=\"line\"></span><br><span class=\"line\">specification: V4</span><br><span class=\"line\"></span><br><span class=\"line\">tax: 297.03</span><br><span class=\"line\"></span><br><span class=\"line\">purchaserContactInfo:</span><br><span class=\"line\"></span><br><span class=\"line\">formType:</span><br><span class=\"line\"></span><br><span class=\"line\">machineCode:</span><br><span class=\"line\"></span><br><span class=\"line\">specialTag:</span><br><span class=\"line\"></span><br><span class=\"line\">printedInvoiceCode:</span><br><span class=\"line\"></span><br><span class=\"line\">drawer:刘黎明</span><br><span class=\"line\"></span><br><span class=\"line\">reviewer:</span><br><span class=\"line\"></span><br><span class=\"line\">invoiceDate:2023年12月26日</span><br><span class=\"line\"></span><br><span class=\"line\">purchaserTaxNumber:91310113MA1GNRK851</span><br><span class=\"line\"></span><br><span class=\"line\">invoiceCode:</span><br><span class=\"line\"></span><br><span class=\"line\">purchaserName:上海迭特信息科技有限公司</span><br><span class=\"line\"></span><br><span class=\"line\">checkCode:</span><br><span class=\"line\"></span><br><span class=\"line\">totalAmount:30000.00</span><br><span class=\"line\"></span><br><span class=\"line\">sellerContactInfo:</span><br><span class=\"line\"></span><br><span class=\"line\">invoiceAmountPreTax:29702.97</span><br><span class=\"line\"></span><br><span class=\"line\">recipient:</span><br><span class=\"line\"></span><br><span class=\"line\">sellerTaxNumber:91330703MA2HUM3X9J</span><br><span class=\"line\"></span><br><span class=\"line\">remarks:</span><br><span class=\"line\"></span><br><span class=\"line\">isCopy:否</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>阿里的付费价格有些复杂</p>\n<h1 id=\"薪火科技\"><a href=\"#薪火科技\" class=\"headerlink\" title=\"薪火科技\"></a>薪火科技</h1><p>需要付费才可以调用api</p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20231227175147492.png\" alt=\"  \" loading=\"lazy\"></p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20231227175055645.png\" alt=\"image-20231227175055645\" loading=\"lazy\"></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>百度的效果不行，华为 阿里 薪火科技 识别效果基本准确，差不太多，对比价格，阿里的价格比较复杂，华为和薪火科技对比，华为便宜一点，比如10万次的时候  华为5600，薪火科技6980，但是华为这个是限制使用年份的，一年一年买的，过了这年没用完的可能就不能用了。</p>\n<ul>\n<li><p>如果知道或者预估了调用量的话  可以使用华为ocr</p>\n</li>\n<li><p>如果不知道的话，也先用华为ocr比较好，毕竟便宜一点</p>\n</li>\n</ul>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"百度\n识别效果不太理想\n\n\n\n华为\n需要付费才可以调用api\n\n\n\n\n\n阿里\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n\n\n\nsellerBankAccountInfo:\n\npurchaserBan","more":"<hr>\n<h1 id=\"百度\"><a href=\"#百度\" class=\"headerlink\" title=\"百度\"></a>百度</h1><p>识别效果不太理想</p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/b49660deaa56e3b5812a53347f8e6a7.png\" alt=\"b49660deaa56e3b5812a53347f8e6a7\" loading=\"lazy\"></p>\n<h1 id=\"华为\"><a href=\"#华为\" class=\"headerlink\" title=\"华为\"></a>华为</h1><p>需要付费才可以调用api</p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20231227175607361.png\" alt=\"image-20231227175607361\" loading=\"lazy\"></p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20231227175502287.png\" alt=\"image-20231227175502287\" loading=\"lazy\"></p>\n<h1 id=\"阿里\"><a href=\"#阿里\" class=\"headerlink\" title=\"阿里\"></a>阿里</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">sellerBankAccountInfo:</span><br><span class=\"line\"></span><br><span class=\"line\">purchaserBankAccountInfo:</span><br><span class=\"line\"></span><br><span class=\"line\">sellerName:金华企客管网络科技有限公司</span><br><span class=\"line\"></span><br><span class=\"line\">invoiceTax:297.03</span><br><span class=\"line\"></span><br><span class=\"line\">passwordArea:</span><br><span class=\"line\"></span><br><span class=\"line\">title:电子发票(普通发票)</span><br><span class=\"line\"></span><br><span class=\"line\">printedInvoiceNumber:</span><br><span class=\"line\"></span><br><span class=\"line\">totalAmountInWords:叁万圆整</span><br><span class=\"line\"></span><br><span class=\"line\">invoiceNumber:23332000000091017218</span><br><span class=\"line\"></span><br><span class=\"line\">invoiceType:数电普通发票</span><br><span class=\"line\"></span><br><span class=\"line\">invoiceDetails1</span><br><span class=\"line\"></span><br><span class=\"line\">unitPrice: 29702.9702970297</span><br><span class=\"line\"></span><br><span class=\"line\">taxRate: 1%</span><br><span class=\"line\"></span><br><span class=\"line\">itemName: *软件*财务软件源码</span><br><span class=\"line\"></span><br><span class=\"line\">unit: 套</span><br><span class=\"line\"></span><br><span class=\"line\">amount: 29702.97</span><br><span class=\"line\"></span><br><span class=\"line\">quantity: 1</span><br><span class=\"line\"></span><br><span class=\"line\">specification: V4</span><br><span class=\"line\"></span><br><span class=\"line\">tax: 297.03</span><br><span class=\"line\"></span><br><span class=\"line\">purchaserContactInfo:</span><br><span class=\"line\"></span><br><span class=\"line\">formType:</span><br><span class=\"line\"></span><br><span class=\"line\">machineCode:</span><br><span class=\"line\"></span><br><span class=\"line\">specialTag:</span><br><span class=\"line\"></span><br><span class=\"line\">printedInvoiceCode:</span><br><span class=\"line\"></span><br><span class=\"line\">drawer:刘黎明</span><br><span class=\"line\"></span><br><span class=\"line\">reviewer:</span><br><span class=\"line\"></span><br><span class=\"line\">invoiceDate:2023年12月26日</span><br><span class=\"line\"></span><br><span class=\"line\">purchaserTaxNumber:91310113MA1GNRK851</span><br><span class=\"line\"></span><br><span class=\"line\">invoiceCode:</span><br><span class=\"line\"></span><br><span class=\"line\">purchaserName:上海迭特信息科技有限公司</span><br><span class=\"line\"></span><br><span class=\"line\">checkCode:</span><br><span class=\"line\"></span><br><span class=\"line\">totalAmount:30000.00</span><br><span class=\"line\"></span><br><span class=\"line\">sellerContactInfo:</span><br><span class=\"line\"></span><br><span class=\"line\">invoiceAmountPreTax:29702.97</span><br><span class=\"line\"></span><br><span class=\"line\">recipient:</span><br><span class=\"line\"></span><br><span class=\"line\">sellerTaxNumber:91330703MA2HUM3X9J</span><br><span class=\"line\"></span><br><span class=\"line\">remarks:</span><br><span class=\"line\"></span><br><span class=\"line\">isCopy:否</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>阿里的付费价格有些复杂</p>\n<h1 id=\"薪火科技\"><a href=\"#薪火科技\" class=\"headerlink\" title=\"薪火科技\"></a>薪火科技</h1><p>需要付费才可以调用api</p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20231227175147492.png\" alt=\"  \" loading=\"lazy\"></p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20231227175055645.png\" alt=\"image-20231227175055645\" loading=\"lazy\"></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>百度的效果不行，华为 阿里 薪火科技 识别效果基本准确，差不太多，对比价格，阿里的价格比较复杂，华为和薪火科技对比，华为便宜一点，比如10万次的时候  华为5600，薪火科技6980，但是华为这个是限制使用年份的，一年一年买的，过了这年没用完的可能就不能用了。</p>\n<ul>\n<li><p>如果知道或者预估了调用量的话  可以使用华为ocr</p>\n</li>\n<li><p>如果不知道的话，也先用华为ocr比较好，毕竟便宜一点</p>\n</li>\n</ul>\n"},{"title":"RabbitMQ","description":"","abbrlink":"b543ced0","date":"2021-05-19T16:00:00.000Z","_content":"\n\n文章摘要\n\n\n\n<!-- more -->\n\n\n\n### 保证消息不丢失\n\n\n\n#### 生产者\n\n\n\n通过rabbitmq的一个confirm机制，消息发送到mq之后，将消息持久化到磁盘之后，才会返回confirm给生产者\n\n\n\n#### 消费者\n\n\n\nrabbitmq默认的是自动ack的机制，但是可能会发生消费者已经收到消息，但是还没有来得及处理消息就宕机的情况，这中情况下，会出现消息丢失的情况\n\n\n\n> 自动ack的机制：\n\n>\n\n> 就是消费者只要接收到mq的消息，就会立即返回ack，不管消息是否已经处理完毕\n\n\n\n所以采用手动ack机制来确保，消息处理完毕之后，才将ack发送给mq集群\n\n\n\n#### 高并发\n\n\n\n⾸先，⽤来临时存放未 ack 消息的存储需要承载⾼并发写⼊，⽽且我们不需要什么复杂的运算 操作，这种存储⾸选绝对不是 MySQL 之类的数据库，⽽建议采⽤ kv 存储。kv 存储承载⾼并发 能⼒极强，⽽且 kv 操作性能很⾼。 其次，投递消息之后等待 ack 的过程必须是异步的，也就是类似上⾯那样的代码，已经给出了 ⼀个初步的异步回调的⽅式。 消息投递出去之后，这个投递的线程其实就可以返回了，⾄于每个消息的异步回调，是通过在 channel 注册⼀个 confirm 监听器实现的。 收到⼀个消息 ack 之后，就从 kv 存储中删除这条临时消息；收到⼀个消息 nack 之后，就从 kv 存储提取这条消息然后重新投递⼀次即可；也可以⾃⼰对 kv 存储⾥的消息做监控，如果超过⼀ 定时⻓没收到 ack，就主动重发消息。\n\n\n\n### ack机制原理\n\n\n\n主要是通过delivery tag\n\n\n\ndelivery tag是一次消息的唯一标识，delivery tag是在一次channle中传递的\n\n\n\n### 消息积压\n\n\n\n这个消息积压，主要是当你开启批量处理ack消息的时候，很多消息目前处于unack的情况\n\n\n\nRabbitMQ基于一个prefetch count来控制这个unack message的数量。\n\n\n\n如果消息的数量小于这个prefetch count，会继续将消息放入这个channel中，如果大于，必须要等待已经投递过去的消息被ack了，此时才能继续投递下一个消息。\n\n\n\nprefetch count的这个数量非常重要\n\n\n\n- 如果设置过大，会导致mq中存储了海量的数据，会导致消费者服务直接被击垮了，内存溢出，OOM，服务宕机，然后大量unack的消息会被重新投递给其他的消费者服务，此时其他消费者服务一样的情况，直接宕机，最后造成**雪崩效应**。\n\n- 如果设置过小，此时就必然会导致消费者服务的吞吐量极低。因为你即使处理完一条消息，执行ack了也是异步的。\n\n\n\n所以鉴于上面两种极端情况，RabbitMQ官方给出的建议是**prefetch count一般设置在100~300之间。**\n\n\n\n### 集群\n\n\n\n#### 普通集群模式\n\n\n\n![image-20210521080303083](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210521080303083.png)\n\n\n\n这种模式严格来说不算是分布式的结构，因为它所有的数据都是在一台机器上的，消费者消费的时候可以在任意一个rabbitmq中进行消费，如果没有实际数据，就从有实际数据上的mq上进行拉取元数据、真实数据的描述如具体位置等\n\n\n\n##### 优点\n\n\n\n1. 提高吞吐量，可以从多个节点来消费信息\n\n\n\n##### 缺点\n\n\n\n1. 如果放实际数据的mq宕机了，基本上这个架构就失效了\n\n2. 集群内部有大量数据传输\n\n3. 可用性几乎没有保障\n\n\n\n#### 镜像集群模式\n\n\n\n![image-20210521080335361](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210521080335361.png)\n\n\n\n生产者生产一条消息，将消息发送到一个mq中，mq会自动将信息同步到其他的mq上，每个mq上的数\n\n\n\n据都是一样的，所以称之为镜像集群模式\n\n\n\n##### 开启方式\n\n\n\nrabbitmq有个很好的控制台，新增一条策略、这个策略就是开启开启镜像集群模式策略、指定的时候可以指定数据同步到所有的节点，也可以要求同步到指定的节点数量，之后你在创建queue时使用这个策略、就会在动降数据同步到其它节点上去了。\n\n\n\n##### 缺点\n\n\n\n1. 性能开销太大，消息同步到所有的节点服务器会导致网络带宽压力和消耗很严重。\n\n2. 这种模式没有扩展性可言，如果你某个queue的负载很高，你加机器，新增的机器也包含了这个queue的所有数据，并没有办法线性扩展你的queue\n\n3. 不是分布式的\n\n\n\n> 为什么不是分布式的那？ 因为所有的数据还是单独存在在每一个机器上，而分布式应该是将数据存储在不同的的机器上，几个机器上合起来的数据才是一个完整的数据\n\n\n\n### 性能优化\n\n\n\n#### 批量发送ack消息\n\n\n","source":"_posts/RabbitMQ.md","raw":"---\ntitle: RabbitMQ\ndescription: ''\ntags:\n  - 无标签\nabbrlink: b543ced0\ndate: 2021-05-20 00:00:00\n---\n\n\n文章摘要\n\n\n\n<!-- more -->\n\n\n\n### 保证消息不丢失\n\n\n\n#### 生产者\n\n\n\n通过rabbitmq的一个confirm机制，消息发送到mq之后，将消息持久化到磁盘之后，才会返回confirm给生产者\n\n\n\n#### 消费者\n\n\n\nrabbitmq默认的是自动ack的机制，但是可能会发生消费者已经收到消息，但是还没有来得及处理消息就宕机的情况，这中情况下，会出现消息丢失的情况\n\n\n\n> 自动ack的机制：\n\n>\n\n> 就是消费者只要接收到mq的消息，就会立即返回ack，不管消息是否已经处理完毕\n\n\n\n所以采用手动ack机制来确保，消息处理完毕之后，才将ack发送给mq集群\n\n\n\n#### 高并发\n\n\n\n⾸先，⽤来临时存放未 ack 消息的存储需要承载⾼并发写⼊，⽽且我们不需要什么复杂的运算 操作，这种存储⾸选绝对不是 MySQL 之类的数据库，⽽建议采⽤ kv 存储。kv 存储承载⾼并发 能⼒极强，⽽且 kv 操作性能很⾼。 其次，投递消息之后等待 ack 的过程必须是异步的，也就是类似上⾯那样的代码，已经给出了 ⼀个初步的异步回调的⽅式。 消息投递出去之后，这个投递的线程其实就可以返回了，⾄于每个消息的异步回调，是通过在 channel 注册⼀个 confirm 监听器实现的。 收到⼀个消息 ack 之后，就从 kv 存储中删除这条临时消息；收到⼀个消息 nack 之后，就从 kv 存储提取这条消息然后重新投递⼀次即可；也可以⾃⼰对 kv 存储⾥的消息做监控，如果超过⼀ 定时⻓没收到 ack，就主动重发消息。\n\n\n\n### ack机制原理\n\n\n\n主要是通过delivery tag\n\n\n\ndelivery tag是一次消息的唯一标识，delivery tag是在一次channle中传递的\n\n\n\n### 消息积压\n\n\n\n这个消息积压，主要是当你开启批量处理ack消息的时候，很多消息目前处于unack的情况\n\n\n\nRabbitMQ基于一个prefetch count来控制这个unack message的数量。\n\n\n\n如果消息的数量小于这个prefetch count，会继续将消息放入这个channel中，如果大于，必须要等待已经投递过去的消息被ack了，此时才能继续投递下一个消息。\n\n\n\nprefetch count的这个数量非常重要\n\n\n\n- 如果设置过大，会导致mq中存储了海量的数据，会导致消费者服务直接被击垮了，内存溢出，OOM，服务宕机，然后大量unack的消息会被重新投递给其他的消费者服务，此时其他消费者服务一样的情况，直接宕机，最后造成**雪崩效应**。\n\n- 如果设置过小，此时就必然会导致消费者服务的吞吐量极低。因为你即使处理完一条消息，执行ack了也是异步的。\n\n\n\n所以鉴于上面两种极端情况，RabbitMQ官方给出的建议是**prefetch count一般设置在100~300之间。**\n\n\n\n### 集群\n\n\n\n#### 普通集群模式\n\n\n\n![image-20210521080303083](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210521080303083.png)\n\n\n\n这种模式严格来说不算是分布式的结构，因为它所有的数据都是在一台机器上的，消费者消费的时候可以在任意一个rabbitmq中进行消费，如果没有实际数据，就从有实际数据上的mq上进行拉取元数据、真实数据的描述如具体位置等\n\n\n\n##### 优点\n\n\n\n1. 提高吞吐量，可以从多个节点来消费信息\n\n\n\n##### 缺点\n\n\n\n1. 如果放实际数据的mq宕机了，基本上这个架构就失效了\n\n2. 集群内部有大量数据传输\n\n3. 可用性几乎没有保障\n\n\n\n#### 镜像集群模式\n\n\n\n![image-20210521080335361](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210521080335361.png)\n\n\n\n生产者生产一条消息，将消息发送到一个mq中，mq会自动将信息同步到其他的mq上，每个mq上的数\n\n\n\n据都是一样的，所以称之为镜像集群模式\n\n\n\n##### 开启方式\n\n\n\nrabbitmq有个很好的控制台，新增一条策略、这个策略就是开启开启镜像集群模式策略、指定的时候可以指定数据同步到所有的节点，也可以要求同步到指定的节点数量，之后你在创建queue时使用这个策略、就会在动降数据同步到其它节点上去了。\n\n\n\n##### 缺点\n\n\n\n1. 性能开销太大，消息同步到所有的节点服务器会导致网络带宽压力和消耗很严重。\n\n2. 这种模式没有扩展性可言，如果你某个queue的负载很高，你加机器，新增的机器也包含了这个queue的所有数据，并没有办法线性扩展你的queue\n\n3. 不是分布式的\n\n\n\n> 为什么不是分布式的那？ 因为所有的数据还是单独存在在每一个机器上，而分布式应该是将数据存储在不同的的机器上，几个机器上合起来的数据才是一个完整的数据\n\n\n\n### 性能优化\n\n\n\n#### 批量发送ack消息\n\n\n","slug":"RabbitMQ","published":1,"updated":"2025-03-02T03:37:34.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4d000rn0ukgnvv0h4z","content":"<p>文章摘要</p>\n<span id=\"more\"></span>\n\n\n\n<h3 id=\"保证消息不丢失\"><a href=\"#保证消息不丢失\" class=\"headerlink\" title=\"保证消息不丢失\"></a>保证消息不丢失</h3><h4 id=\"生产者\"><a href=\"#生产者\" class=\"headerlink\" title=\"生产者\"></a>生产者</h4><p>通过rabbitmq的一个confirm机制，消息发送到mq之后，将消息持久化到磁盘之后，才会返回confirm给生产者</p>\n<h4 id=\"消费者\"><a href=\"#消费者\" class=\"headerlink\" title=\"消费者\"></a>消费者</h4><p>rabbitmq默认的是自动ack的机制，但是可能会发生消费者已经收到消息，但是还没有来得及处理消息就宕机的情况，这中情况下，会出现消息丢失的情况</p>\n<blockquote>\n<p>自动ack的机制：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>就是消费者只要接收到mq的消息，就会立即返回ack，不管消息是否已经处理完毕</p>\n</blockquote>\n<p>所以采用手动ack机制来确保，消息处理完毕之后，才将ack发送给mq集群</p>\n<h4 id=\"高并发\"><a href=\"#高并发\" class=\"headerlink\" title=\"高并发\"></a>高并发</h4><p>⾸先，⽤来临时存放未 ack 消息的存储需要承载⾼并发写⼊，⽽且我们不需要什么复杂的运算 操作，这种存储⾸选绝对不是 MySQL 之类的数据库，⽽建议采⽤ kv 存储。kv 存储承载⾼并发 能⼒极强，⽽且 kv 操作性能很⾼。 其次，投递消息之后等待 ack 的过程必须是异步的，也就是类似上⾯那样的代码，已经给出了 ⼀个初步的异步回调的⽅式。 消息投递出去之后，这个投递的线程其实就可以返回了，⾄于每个消息的异步回调，是通过在 channel 注册⼀个 confirm 监听器实现的。 收到⼀个消息 ack 之后，就从 kv 存储中删除这条临时消息；收到⼀个消息 nack 之后，就从 kv 存储提取这条消息然后重新投递⼀次即可；也可以⾃⼰对 kv 存储⾥的消息做监控，如果超过⼀ 定时⻓没收到 ack，就主动重发消息。</p>\n<h3 id=\"ack机制原理\"><a href=\"#ack机制原理\" class=\"headerlink\" title=\"ack机制原理\"></a>ack机制原理</h3><p>主要是通过delivery tag</p>\n<p>delivery tag是一次消息的唯一标识，delivery tag是在一次channle中传递的</p>\n<h3 id=\"消息积压\"><a href=\"#消息积压\" class=\"headerlink\" title=\"消息积压\"></a>消息积压</h3><p>这个消息积压，主要是当你开启批量处理ack消息的时候，很多消息目前处于unack的情况</p>\n<p>RabbitMQ基于一个prefetch count来控制这个unack message的数量。</p>\n<p>如果消息的数量小于这个prefetch count，会继续将消息放入这个channel中，如果大于，必须要等待已经投递过去的消息被ack了，此时才能继续投递下一个消息。</p>\n<p>prefetch count的这个数量非常重要</p>\n<ul>\n<li><p>如果设置过大，会导致mq中存储了海量的数据，会导致消费者服务直接被击垮了，内存溢出，OOM，服务宕机，然后大量unack的消息会被重新投递给其他的消费者服务，此时其他消费者服务一样的情况，直接宕机，最后造成<strong>雪崩效应</strong>。</p>\n</li>\n<li><p>如果设置过小，此时就必然会导致消费者服务的吞吐量极低。因为你即使处理完一条消息，执行ack了也是异步的。</p>\n</li>\n</ul>\n<p>所以鉴于上面两种极端情况，RabbitMQ官方给出的建议是<strong>prefetch count一般设置在100~300之间。</strong></p>\n<h3 id=\"集群\"><a href=\"#集群\" class=\"headerlink\" title=\"集群\"></a>集群</h3><h4 id=\"普通集群模式\"><a href=\"#普通集群模式\" class=\"headerlink\" title=\"普通集群模式\"></a>普通集群模式</h4><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210521080303083.png\" alt=\"image-20210521080303083\" loading=\"lazy\"></p>\n<p>这种模式严格来说不算是分布式的结构，因为它所有的数据都是在一台机器上的，消费者消费的时候可以在任意一个rabbitmq中进行消费，如果没有实际数据，就从有实际数据上的mq上进行拉取元数据、真实数据的描述如具体位置等</p>\n<h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ol>\n<li>提高吞吐量，可以从多个节点来消费信息</li>\n</ol>\n<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ol>\n<li><p>如果放实际数据的mq宕机了，基本上这个架构就失效了</p>\n</li>\n<li><p>集群内部有大量数据传输</p>\n</li>\n<li><p>可用性几乎没有保障</p>\n</li>\n</ol>\n<h4 id=\"镜像集群模式\"><a href=\"#镜像集群模式\" class=\"headerlink\" title=\"镜像集群模式\"></a>镜像集群模式</h4><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210521080335361.png\" alt=\"image-20210521080335361\" loading=\"lazy\"></p>\n<p>生产者生产一条消息，将消息发送到一个mq中，mq会自动将信息同步到其他的mq上，每个mq上的数</p>\n<p>据都是一样的，所以称之为镜像集群模式</p>\n<h5 id=\"开启方式\"><a href=\"#开启方式\" class=\"headerlink\" title=\"开启方式\"></a>开启方式</h5><p>rabbitmq有个很好的控制台，新增一条策略、这个策略就是开启开启镜像集群模式策略、指定的时候可以指定数据同步到所有的节点，也可以要求同步到指定的节点数量，之后你在创建queue时使用这个策略、就会在动降数据同步到其它节点上去了。</p>\n<h5 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ol>\n<li><p>性能开销太大，消息同步到所有的节点服务器会导致网络带宽压力和消耗很严重。</p>\n</li>\n<li><p>这种模式没有扩展性可言，如果你某个queue的负载很高，你加机器，新增的机器也包含了这个queue的所有数据，并没有办法线性扩展你的queue</p>\n</li>\n<li><p>不是分布式的</p>\n</li>\n</ol>\n<blockquote>\n<p>为什么不是分布式的那？ 因为所有的数据还是单独存在在每一个机器上，而分布式应该是将数据存储在不同的的机器上，几个机器上合起来的数据才是一个完整的数据</p>\n</blockquote>\n<h3 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h3><h4 id=\"批量发送ack消息\"><a href=\"#批量发送ack消息\" class=\"headerlink\" title=\"批量发送ack消息\"></a>批量发送ack消息</h4>","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"文章摘要\n\n保证消息不丢失\n生产者\n通过rabbitmq的一个confirm机制，消息发送到mq之后，将消息持久化到磁盘之后，才会返回confirm给生产者\n\n消费者\nrabbitmq默认的是自动ack的机制，但是可能会发生消费者已经收到消息，但是还没有来得及处理消息就宕机的情况，这中情况下，会出现消息丢失的情况\n\n自动ack的机制：\n\n就是消费者只要接收到mq的消息，就会立即返回ack，不管消息是否已经处理完毕\n\n所以采用手动ack机制来确保，消息处理完毕之后，才将ack发送给mq集群\n\n高并发\n⾸先，⽤来临时存放未 ack 消息的存储需要承载⾼并发写⼊，⽽且我们不需要什么复杂的运算 操作，","more":"<h3 id=\"保证消息不丢失\"><a href=\"#保证消息不丢失\" class=\"headerlink\" title=\"保证消息不丢失\"></a>保证消息不丢失</h3><h4 id=\"生产者\"><a href=\"#生产者\" class=\"headerlink\" title=\"生产者\"></a>生产者</h4><p>通过rabbitmq的一个confirm机制，消息发送到mq之后，将消息持久化到磁盘之后，才会返回confirm给生产者</p>\n<h4 id=\"消费者\"><a href=\"#消费者\" class=\"headerlink\" title=\"消费者\"></a>消费者</h4><p>rabbitmq默认的是自动ack的机制，但是可能会发生消费者已经收到消息，但是还没有来得及处理消息就宕机的情况，这中情况下，会出现消息丢失的情况</p>\n<blockquote>\n<p>自动ack的机制：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>就是消费者只要接收到mq的消息，就会立即返回ack，不管消息是否已经处理完毕</p>\n</blockquote>\n<p>所以采用手动ack机制来确保，消息处理完毕之后，才将ack发送给mq集群</p>\n<h4 id=\"高并发\"><a href=\"#高并发\" class=\"headerlink\" title=\"高并发\"></a>高并发</h4><p>⾸先，⽤来临时存放未 ack 消息的存储需要承载⾼并发写⼊，⽽且我们不需要什么复杂的运算 操作，这种存储⾸选绝对不是 MySQL 之类的数据库，⽽建议采⽤ kv 存储。kv 存储承载⾼并发 能⼒极强，⽽且 kv 操作性能很⾼。 其次，投递消息之后等待 ack 的过程必须是异步的，也就是类似上⾯那样的代码，已经给出了 ⼀个初步的异步回调的⽅式。 消息投递出去之后，这个投递的线程其实就可以返回了，⾄于每个消息的异步回调，是通过在 channel 注册⼀个 confirm 监听器实现的。 收到⼀个消息 ack 之后，就从 kv 存储中删除这条临时消息；收到⼀个消息 nack 之后，就从 kv 存储提取这条消息然后重新投递⼀次即可；也可以⾃⼰对 kv 存储⾥的消息做监控，如果超过⼀ 定时⻓没收到 ack，就主动重发消息。</p>\n<h3 id=\"ack机制原理\"><a href=\"#ack机制原理\" class=\"headerlink\" title=\"ack机制原理\"></a>ack机制原理</h3><p>主要是通过delivery tag</p>\n<p>delivery tag是一次消息的唯一标识，delivery tag是在一次channle中传递的</p>\n<h3 id=\"消息积压\"><a href=\"#消息积压\" class=\"headerlink\" title=\"消息积压\"></a>消息积压</h3><p>这个消息积压，主要是当你开启批量处理ack消息的时候，很多消息目前处于unack的情况</p>\n<p>RabbitMQ基于一个prefetch count来控制这个unack message的数量。</p>\n<p>如果消息的数量小于这个prefetch count，会继续将消息放入这个channel中，如果大于，必须要等待已经投递过去的消息被ack了，此时才能继续投递下一个消息。</p>\n<p>prefetch count的这个数量非常重要</p>\n<ul>\n<li><p>如果设置过大，会导致mq中存储了海量的数据，会导致消费者服务直接被击垮了，内存溢出，OOM，服务宕机，然后大量unack的消息会被重新投递给其他的消费者服务，此时其他消费者服务一样的情况，直接宕机，最后造成<strong>雪崩效应</strong>。</p>\n</li>\n<li><p>如果设置过小，此时就必然会导致消费者服务的吞吐量极低。因为你即使处理完一条消息，执行ack了也是异步的。</p>\n</li>\n</ul>\n<p>所以鉴于上面两种极端情况，RabbitMQ官方给出的建议是<strong>prefetch count一般设置在100~300之间。</strong></p>\n<h3 id=\"集群\"><a href=\"#集群\" class=\"headerlink\" title=\"集群\"></a>集群</h3><h4 id=\"普通集群模式\"><a href=\"#普通集群模式\" class=\"headerlink\" title=\"普通集群模式\"></a>普通集群模式</h4><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210521080303083.png\" alt=\"image-20210521080303083\" loading=\"lazy\"></p>\n<p>这种模式严格来说不算是分布式的结构，因为它所有的数据都是在一台机器上的，消费者消费的时候可以在任意一个rabbitmq中进行消费，如果没有实际数据，就从有实际数据上的mq上进行拉取元数据、真实数据的描述如具体位置等</p>\n<h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ol>\n<li>提高吞吐量，可以从多个节点来消费信息</li>\n</ol>\n<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ol>\n<li><p>如果放实际数据的mq宕机了，基本上这个架构就失效了</p>\n</li>\n<li><p>集群内部有大量数据传输</p>\n</li>\n<li><p>可用性几乎没有保障</p>\n</li>\n</ol>\n<h4 id=\"镜像集群模式\"><a href=\"#镜像集群模式\" class=\"headerlink\" title=\"镜像集群模式\"></a>镜像集群模式</h4><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210521080335361.png\" alt=\"image-20210521080335361\" loading=\"lazy\"></p>\n<p>生产者生产一条消息，将消息发送到一个mq中，mq会自动将信息同步到其他的mq上，每个mq上的数</p>\n<p>据都是一样的，所以称之为镜像集群模式</p>\n<h5 id=\"开启方式\"><a href=\"#开启方式\" class=\"headerlink\" title=\"开启方式\"></a>开启方式</h5><p>rabbitmq有个很好的控制台，新增一条策略、这个策略就是开启开启镜像集群模式策略、指定的时候可以指定数据同步到所有的节点，也可以要求同步到指定的节点数量，之后你在创建queue时使用这个策略、就会在动降数据同步到其它节点上去了。</p>\n<h5 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ol>\n<li><p>性能开销太大，消息同步到所有的节点服务器会导致网络带宽压力和消耗很严重。</p>\n</li>\n<li><p>这种模式没有扩展性可言，如果你某个queue的负载很高，你加机器，新增的机器也包含了这个queue的所有数据，并没有办法线性扩展你的queue</p>\n</li>\n<li><p>不是分布式的</p>\n</li>\n</ol>\n<blockquote>\n<p>为什么不是分布式的那？ 因为所有的数据还是单独存在在每一个机器上，而分布式应该是将数据存储在不同的的机器上，几个机器上合起来的数据才是一个完整的数据</p>\n</blockquote>\n<h3 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h3><h4 id=\"批量发送ack消息\"><a href=\"#批量发送ack消息\" class=\"headerlink\" title=\"批量发送ack消息\"></a>批量发送ack消息</h4>"},{"title":"Rocketmq中的NameServer源码分析","description":"","abbrlink":"6216fa64","date":"2021-03-26T16:00:00.000Z","_content":"\n\n## 创建NamesrvController\n\n\n\n<!-- more -->\n\n\n\n> 我这里都是截取的部分代码，梳理大概逻辑，具体细节部分需要大家自行去阅读源码\n\n\n\n### NamesrvStartup\n\n\n\n```java\n\n    public static NamesrvController main0(String[] args) {\n\n        try {\n\n            NamesrvController controller = createNamesrvController(args);\n\n            start(controller);\n\n        }\n\n```\n\n\n\n```java\n\npublic static NamesrvController start(final NamesrvController controller) throws Exception {\n\n    boolean initResult = controller.initialize();\n\n    controller.start();\n\n    return controller;\n\n}\n\n```\n\n\n\n```java\n\n    public void start() throws Exception {\n\n        //真正地启动nameserver，这个start的是调用了remotingServer接口的start\n\n        this.remotingServer.start();\n\n        if (this.fileWatchService != null) {\n\n            this.fileWatchService.start();\n\n        }\n\n    }\n\n```\n\n\n\n### RemotingService\n\n\n\n```java\n\npublic interface RemotingService {\n\n    //这个start的实现类分两种，一个是客户端的，一个是服务端的，都是借助了netty来完成的\n\n    void start();\n\n\n\n    void shutdown();\n\n\n\n    void registerRPCHook(RPCHook rpcHook);\n\n}\n\n```\n\n\n\n## 初始化NameServerController\n\n\n\n```java\n\npublic boolean initialize() {\n\n\n\n    this.kvConfigManager.load();\n\n\n\n    this.remotingServer = new NettyRemotingServer(this.nettyServerConfig, this.brokerHousekeepingService);\n\n\n\n    this.remotingExecutor =\n\n        Executors.newFixedThreadPool(nettyServerConfig.getServerWorkerThreads(), new ThreadFactoryImpl(\"RemotingExecutorThread_\"));\n\n\n\n    this.registerProcessor();\n\n\n\n    this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n\n        //每隔10秒就要进行一次扫描，扫描出来所有已经掉线的broker，第一次延迟五秒\n\n        @Override\n\n        public void run() {\n\n            NamesrvController.this.routeInfoManager.scanNotActiveBroker();\n\n        }\n\n    }, 5, 10, TimeUnit.SECONDS);\n\n\n\n    this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n\n\n\n        @Override\n\n        public void run() {\n\n            NamesrvController.this.kvConfigManager.printAllPeriodically();\n\n        }\n\n    }, 1, 10, TimeUnit.MINUTES);\n\n    return true;\n\n}\n\n```\n\n\n\n### RouteInfoManager\n\n\n\n```java\n\n//过期时间是两分钟\n\nprivate final static long BROKER_CHANNEL_EXPIRED_TIME = 1000 * 60 * 2;\n\n//扫描出所有已经掉线的broker\n\npublic void scanNotActiveBroker() {\n\n    Iterator<Entry<String, BrokerLiveInfo>> it = this.brokerLiveTable.entrySet().iterator();\n\n    while (it.hasNext()) {\n\n        Entry<String, BrokerLiveInfo> next = it.next();\n\n        long last = next.getValue().getLastUpdateTimestamp();\n\n        if ((last + BROKER_CHANNEL_EXPIRED_TIME) < System.currentTimeMillis()) {\n\n            RemotingUtil.closeChannel(next.getValue().getChannel());\n\n            it.remove();\n\n            log.warn(\"The broker channel expired, {} {}ms\", next.getKey(), BROKER_CHANNEL_EXPIRED_TIME);\n\n            this.onChannelDestroy(next.getKey(), next.getValue().getChannel());\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n## broker注册到nameserver\n\n\n\n### NamesrvController\n\n\n\n```java\n\n    private void registerProcessor() {\n\n        if (namesrvConfig.isClusterTest()) {\n\n\n\n            this.remotingServer.registerDefaultProcessor(new ClusterTestRequestProcessor(this, namesrvConfig.getProductEnvName()),\n\n                this.remotingExecutor);\n\n        } else {\n\n            //nameservier默认的请求注册进入了，都交给nettyserver来进行处理\n\n            this.remotingServer.registerDefaultProcessor(new DefaultRequestProcessor(this), this.remotingExecutor);\n\n        }\n\n    }\n\n```\n\n### DefaultRequestProcessor\n\n```java\n\n        switch (request.getCode()) {\n\n            case RequestCode.PUT_KV_CONFIG:\n\n                return this.putKVConfig(ctx, request);\n\n            case RequestCode.GET_KV_CONFIG:\n\n                return this.getKVConfig(ctx, request);\n\n            case RequestCode.DELETE_KV_CONFIG:\n\n                return this.deleteKVConfig(ctx, request);\n\n            case RequestCode.QUERY_DATA_VERSION:\n\n                return queryBrokerTopicConfig(ctx, request);\n\n                //将broker的请求注册到nameserver中\n\n            case RequestCode.REGISTER_BROKER:\n\n                Version brokerVersion = MQVersion.value2Version(request.getVersion());\n\n                if (brokerVersion.ordinal() >= MQVersion.Version.V3_0_11.ordinal()) {\n\n                    return this.registerBrokerWithFilterServer(ctx, request);\n\n                } else {\n\n                //注册broker到nameserver\n\n                    return this.registerBroker(ctx, request);\n\n                }\n\n```\n\n\n\n```java\n\n//调用了namesrvController.getRouteInfoManager().registerBroker方法真正将broker注册到nameserver中了\n\n        RegisterBrokerResult result = this.namesrvController.getRouteInfoManager().registerBroker(\n\n            requestHeader.getClusterName(),\n\n            requestHeader.getBrokerAddr(),\n\n            requestHeader.getBrokerName(),\n\n            requestHeader.getBrokerId(),\n\n            requestHeader.getHaServerAddr(),\n\n            topicConfigWrapper,\n\n            null,\n\n            ctx.channel()\n\n        );\n\n```\n\n\n\n```java\n\n    public RegisterBrokerResult registerBroker(\n\n        final String clusterName,\n\n        final String brokerAddr,\n\n        final String brokerName,\n\n        final long brokerId,\n\n        final String haServerAddr,\n\n        final TopicConfigSerializeWrapper topicConfigWrapper,\n\n        final List<String> filterServerList,\n\n        final Channel channel) {\n\n        RegisterBrokerResult result = new RegisterBrokerResult();\n\n        try {\n\n            try {\n\n            //加锁，同一时间只能有一个线程访问\n\n                this.lock.writeLock().lockInterruptibly();\n\n//根据clusterName获取到了一个set，之后每隔30秒发送的请求是没有影响的，set会自动去重的\n\n                Set<String> brokerNames = this.clusterAddrTable.get(clusterName);\n\n                if (null == brokerNames) {\n\n                    brokerNames = new HashSet<String>();\n\n                    this.clusterAddrTable.put(clusterName, brokerNames);\n\n                }\n\n                //将broker添加到一个集群里面\n\n                brokerNames.add(brokerName);\n\n\n\n                boolean registerFirst = false;\n\n//根据brokername获取到brokerdata\n\n//brokerAddrTable存放了所有broker的详细路由信息\n\n                BrokerData brokerData = this.brokerAddrTable.get(brokerName);\n\n                //如果broker第第一次进行注册，brokerDate会是null，会new一个BrokerData，将路由信息放入brokerAddrTable中\n\n                if (null == brokerData) {\n\n                    registerFirst = true;\n\n                    brokerData = new BrokerData(clusterName, brokerName, new HashMap<Long, String>());\n\n                    this.brokerAddrTable.put(brokerName, brokerData);\n\n                }\n\n                Map<Long, String> brokerAddrsMap = brokerData.getBrokerAddrs();\n\n                //Switch slave to master: first remove <1, IP:PORT> in namesrv, then add <0, IP:PORT>\n\n                //The same IP:PORT must only have one record in brokerAddrTable\n\n                Iterator<Entry<Long, String>> it = brokerAddrsMap.entrySet().iterator();\n\n                while (it.hasNext()) {\n\n                    Entry<Long, String> item = it.next();\n\n                    if (null != brokerAddr && brokerAddr.equals(item.getValue()) && brokerId != item.getKey()) {\n\n                        it.remove();\n\n                    }\n\n                }\n\n\n\n                String oldAddr = brokerData.getBrokerAddrs().put(brokerId, brokerAddr);\n\n                registerFirst = registerFirst || (null == oldAddr);\n\n\n\n                if (null != topicConfigWrapper\n\n                    && MixAll.MASTER_ID == brokerId) {\n\n                    if (this.isBrokerTopicConfigChanged(brokerAddr, topicConfigWrapper.getDataVersion())\n\n                        || registerFirst) {\n\n                        ConcurrentMap<String, TopicConfig> tcTable =\n\n                            topicConfigWrapper.getTopicConfigTable();\n\n                        if (tcTable != null) {\n\n                            for (Map.Entry<String, TopicConfig> entry : tcTable.entrySet()) {\n\n                                this.createAndUpdateQueueData(brokerName, entry.getValue());\n\n                            }\n\n                        }\n\n                    }\n\n                }\n\n//这里是broker心跳的核心处理逻辑\n\n//默认每隔30秒就会有一个新的BrokerLiveInfo被put到brokerLiveTable，覆盖上一次的心跳时间\n\n//BrokerLiveInfo里面的这个 System.currentTimeMillis(),当前时间戳就是broker最新的心跳时间\n\n                BrokerLiveInfo prevBrokerLiveInfo = this.brokerLiveTable.put(brokerAddr,\n\n                    new BrokerLiveInfo(\n\n                        System.currentTimeMillis(),\n\n                        topicConfigWrapper.getDataVersion(),\n\n                        channel,\n\n                        haServerAddr));\n\n                if (null == prevBrokerLiveInfo) {\n\n                    log.info(\"new broker registered, {} HAServer: {}\", brokerAddr, haServerAddr);\n\n                }\n\n\n\n                if (filterServerList != null) {\n\n                    if (filterServerList.isEmpty()) {\n\n                        this.filterServerTable.remove(brokerAddr);\n\n                    } else {\n\n                        this.filterServerTable.put(brokerAddr, filterServerList);\n\n                    }\n\n                }\n\n\n\n                if (MixAll.MASTER_ID != brokerId) {\n\n                    String masterAddr = brokerData.getBrokerAddrs().get(MixAll.MASTER_ID);\n\n                    if (masterAddr != null) {\n\n                        BrokerLiveInfo brokerLiveInfo = this.brokerLiveTable.get(masterAddr);\n\n                        if (brokerLiveInfo != null) {\n\n                            result.setHaServerAddr(brokerLiveInfo.getHaServerAddr());\n\n                            result.setMasterAddr(masterAddr);\n\n                        }\n\n                    }\n\n                }\n\n            } finally {\n\n                this.lock.writeLock().unlock();\n\n            }\n\n        } catch (Exception e) {\n\n            log.error(\"registerBroker Exception\", e);\n\n        }\n\n\n\n        return result;\n\n    }\n\n```","source":"_posts/Rocketmq中的NameServer源码分析.md","raw":"---\ntitle: Rocketmq中的NameServer源码分析\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 6216fa64\ndate: 2021-03-27 00:00:00\n---\n\n\n## 创建NamesrvController\n\n\n\n<!-- more -->\n\n\n\n> 我这里都是截取的部分代码，梳理大概逻辑，具体细节部分需要大家自行去阅读源码\n\n\n\n### NamesrvStartup\n\n\n\n```java\n\n    public static NamesrvController main0(String[] args) {\n\n        try {\n\n            NamesrvController controller = createNamesrvController(args);\n\n            start(controller);\n\n        }\n\n```\n\n\n\n```java\n\npublic static NamesrvController start(final NamesrvController controller) throws Exception {\n\n    boolean initResult = controller.initialize();\n\n    controller.start();\n\n    return controller;\n\n}\n\n```\n\n\n\n```java\n\n    public void start() throws Exception {\n\n        //真正地启动nameserver，这个start的是调用了remotingServer接口的start\n\n        this.remotingServer.start();\n\n        if (this.fileWatchService != null) {\n\n            this.fileWatchService.start();\n\n        }\n\n    }\n\n```\n\n\n\n### RemotingService\n\n\n\n```java\n\npublic interface RemotingService {\n\n    //这个start的实现类分两种，一个是客户端的，一个是服务端的，都是借助了netty来完成的\n\n    void start();\n\n\n\n    void shutdown();\n\n\n\n    void registerRPCHook(RPCHook rpcHook);\n\n}\n\n```\n\n\n\n## 初始化NameServerController\n\n\n\n```java\n\npublic boolean initialize() {\n\n\n\n    this.kvConfigManager.load();\n\n\n\n    this.remotingServer = new NettyRemotingServer(this.nettyServerConfig, this.brokerHousekeepingService);\n\n\n\n    this.remotingExecutor =\n\n        Executors.newFixedThreadPool(nettyServerConfig.getServerWorkerThreads(), new ThreadFactoryImpl(\"RemotingExecutorThread_\"));\n\n\n\n    this.registerProcessor();\n\n\n\n    this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n\n        //每隔10秒就要进行一次扫描，扫描出来所有已经掉线的broker，第一次延迟五秒\n\n        @Override\n\n        public void run() {\n\n            NamesrvController.this.routeInfoManager.scanNotActiveBroker();\n\n        }\n\n    }, 5, 10, TimeUnit.SECONDS);\n\n\n\n    this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n\n\n\n        @Override\n\n        public void run() {\n\n            NamesrvController.this.kvConfigManager.printAllPeriodically();\n\n        }\n\n    }, 1, 10, TimeUnit.MINUTES);\n\n    return true;\n\n}\n\n```\n\n\n\n### RouteInfoManager\n\n\n\n```java\n\n//过期时间是两分钟\n\nprivate final static long BROKER_CHANNEL_EXPIRED_TIME = 1000 * 60 * 2;\n\n//扫描出所有已经掉线的broker\n\npublic void scanNotActiveBroker() {\n\n    Iterator<Entry<String, BrokerLiveInfo>> it = this.brokerLiveTable.entrySet().iterator();\n\n    while (it.hasNext()) {\n\n        Entry<String, BrokerLiveInfo> next = it.next();\n\n        long last = next.getValue().getLastUpdateTimestamp();\n\n        if ((last + BROKER_CHANNEL_EXPIRED_TIME) < System.currentTimeMillis()) {\n\n            RemotingUtil.closeChannel(next.getValue().getChannel());\n\n            it.remove();\n\n            log.warn(\"The broker channel expired, {} {}ms\", next.getKey(), BROKER_CHANNEL_EXPIRED_TIME);\n\n            this.onChannelDestroy(next.getKey(), next.getValue().getChannel());\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n## broker注册到nameserver\n\n\n\n### NamesrvController\n\n\n\n```java\n\n    private void registerProcessor() {\n\n        if (namesrvConfig.isClusterTest()) {\n\n\n\n            this.remotingServer.registerDefaultProcessor(new ClusterTestRequestProcessor(this, namesrvConfig.getProductEnvName()),\n\n                this.remotingExecutor);\n\n        } else {\n\n            //nameservier默认的请求注册进入了，都交给nettyserver来进行处理\n\n            this.remotingServer.registerDefaultProcessor(new DefaultRequestProcessor(this), this.remotingExecutor);\n\n        }\n\n    }\n\n```\n\n### DefaultRequestProcessor\n\n```java\n\n        switch (request.getCode()) {\n\n            case RequestCode.PUT_KV_CONFIG:\n\n                return this.putKVConfig(ctx, request);\n\n            case RequestCode.GET_KV_CONFIG:\n\n                return this.getKVConfig(ctx, request);\n\n            case RequestCode.DELETE_KV_CONFIG:\n\n                return this.deleteKVConfig(ctx, request);\n\n            case RequestCode.QUERY_DATA_VERSION:\n\n                return queryBrokerTopicConfig(ctx, request);\n\n                //将broker的请求注册到nameserver中\n\n            case RequestCode.REGISTER_BROKER:\n\n                Version brokerVersion = MQVersion.value2Version(request.getVersion());\n\n                if (brokerVersion.ordinal() >= MQVersion.Version.V3_0_11.ordinal()) {\n\n                    return this.registerBrokerWithFilterServer(ctx, request);\n\n                } else {\n\n                //注册broker到nameserver\n\n                    return this.registerBroker(ctx, request);\n\n                }\n\n```\n\n\n\n```java\n\n//调用了namesrvController.getRouteInfoManager().registerBroker方法真正将broker注册到nameserver中了\n\n        RegisterBrokerResult result = this.namesrvController.getRouteInfoManager().registerBroker(\n\n            requestHeader.getClusterName(),\n\n            requestHeader.getBrokerAddr(),\n\n            requestHeader.getBrokerName(),\n\n            requestHeader.getBrokerId(),\n\n            requestHeader.getHaServerAddr(),\n\n            topicConfigWrapper,\n\n            null,\n\n            ctx.channel()\n\n        );\n\n```\n\n\n\n```java\n\n    public RegisterBrokerResult registerBroker(\n\n        final String clusterName,\n\n        final String brokerAddr,\n\n        final String brokerName,\n\n        final long brokerId,\n\n        final String haServerAddr,\n\n        final TopicConfigSerializeWrapper topicConfigWrapper,\n\n        final List<String> filterServerList,\n\n        final Channel channel) {\n\n        RegisterBrokerResult result = new RegisterBrokerResult();\n\n        try {\n\n            try {\n\n            //加锁，同一时间只能有一个线程访问\n\n                this.lock.writeLock().lockInterruptibly();\n\n//根据clusterName获取到了一个set，之后每隔30秒发送的请求是没有影响的，set会自动去重的\n\n                Set<String> brokerNames = this.clusterAddrTable.get(clusterName);\n\n                if (null == brokerNames) {\n\n                    brokerNames = new HashSet<String>();\n\n                    this.clusterAddrTable.put(clusterName, brokerNames);\n\n                }\n\n                //将broker添加到一个集群里面\n\n                brokerNames.add(brokerName);\n\n\n\n                boolean registerFirst = false;\n\n//根据brokername获取到brokerdata\n\n//brokerAddrTable存放了所有broker的详细路由信息\n\n                BrokerData brokerData = this.brokerAddrTable.get(brokerName);\n\n                //如果broker第第一次进行注册，brokerDate会是null，会new一个BrokerData，将路由信息放入brokerAddrTable中\n\n                if (null == brokerData) {\n\n                    registerFirst = true;\n\n                    brokerData = new BrokerData(clusterName, brokerName, new HashMap<Long, String>());\n\n                    this.brokerAddrTable.put(brokerName, brokerData);\n\n                }\n\n                Map<Long, String> brokerAddrsMap = brokerData.getBrokerAddrs();\n\n                //Switch slave to master: first remove <1, IP:PORT> in namesrv, then add <0, IP:PORT>\n\n                //The same IP:PORT must only have one record in brokerAddrTable\n\n                Iterator<Entry<Long, String>> it = brokerAddrsMap.entrySet().iterator();\n\n                while (it.hasNext()) {\n\n                    Entry<Long, String> item = it.next();\n\n                    if (null != brokerAddr && brokerAddr.equals(item.getValue()) && brokerId != item.getKey()) {\n\n                        it.remove();\n\n                    }\n\n                }\n\n\n\n                String oldAddr = brokerData.getBrokerAddrs().put(brokerId, brokerAddr);\n\n                registerFirst = registerFirst || (null == oldAddr);\n\n\n\n                if (null != topicConfigWrapper\n\n                    && MixAll.MASTER_ID == brokerId) {\n\n                    if (this.isBrokerTopicConfigChanged(brokerAddr, topicConfigWrapper.getDataVersion())\n\n                        || registerFirst) {\n\n                        ConcurrentMap<String, TopicConfig> tcTable =\n\n                            topicConfigWrapper.getTopicConfigTable();\n\n                        if (tcTable != null) {\n\n                            for (Map.Entry<String, TopicConfig> entry : tcTable.entrySet()) {\n\n                                this.createAndUpdateQueueData(brokerName, entry.getValue());\n\n                            }\n\n                        }\n\n                    }\n\n                }\n\n//这里是broker心跳的核心处理逻辑\n\n//默认每隔30秒就会有一个新的BrokerLiveInfo被put到brokerLiveTable，覆盖上一次的心跳时间\n\n//BrokerLiveInfo里面的这个 System.currentTimeMillis(),当前时间戳就是broker最新的心跳时间\n\n                BrokerLiveInfo prevBrokerLiveInfo = this.brokerLiveTable.put(brokerAddr,\n\n                    new BrokerLiveInfo(\n\n                        System.currentTimeMillis(),\n\n                        topicConfigWrapper.getDataVersion(),\n\n                        channel,\n\n                        haServerAddr));\n\n                if (null == prevBrokerLiveInfo) {\n\n                    log.info(\"new broker registered, {} HAServer: {}\", brokerAddr, haServerAddr);\n\n                }\n\n\n\n                if (filterServerList != null) {\n\n                    if (filterServerList.isEmpty()) {\n\n                        this.filterServerTable.remove(brokerAddr);\n\n                    } else {\n\n                        this.filterServerTable.put(brokerAddr, filterServerList);\n\n                    }\n\n                }\n\n\n\n                if (MixAll.MASTER_ID != brokerId) {\n\n                    String masterAddr = brokerData.getBrokerAddrs().get(MixAll.MASTER_ID);\n\n                    if (masterAddr != null) {\n\n                        BrokerLiveInfo brokerLiveInfo = this.brokerLiveTable.get(masterAddr);\n\n                        if (brokerLiveInfo != null) {\n\n                            result.setHaServerAddr(brokerLiveInfo.getHaServerAddr());\n\n                            result.setMasterAddr(masterAddr);\n\n                        }\n\n                    }\n\n                }\n\n            } finally {\n\n                this.lock.writeLock().unlock();\n\n            }\n\n        } catch (Exception e) {\n\n            log.error(\"registerBroker Exception\", e);\n\n        }\n\n\n\n        return result;\n\n    }\n\n```","slug":"Rocketmq中的NameServer源码分析","published":1,"updated":"2025-03-02T03:37:34.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4e000tn0uk5a2y648o","content":"<h2 id=\"创建NamesrvController\"><a href=\"#创建NamesrvController\" class=\"headerlink\" title=\"创建NamesrvController\"></a>创建NamesrvController</h2><span id=\"more\"></span>\n\n\n\n<blockquote>\n<p>我这里都是截取的部分代码，梳理大概逻辑，具体细节部分需要大家自行去阅读源码</p>\n</blockquote>\n<h3 id=\"NamesrvStartup\"><a href=\"#NamesrvStartup\" class=\"headerlink\" title=\"NamesrvStartup\"></a>NamesrvStartup</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> NamesrvController <span class=\"title function_\">main0</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">NamesrvController</span> <span class=\"variable\">controller</span> <span class=\"operator\">=</span> createNamesrvController(args);</span><br><span class=\"line\"></span><br><span class=\"line\">        start(controller);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> NamesrvController <span class=\"title function_\">start</span><span class=\"params\">(<span class=\"keyword\">final</span> NamesrvController controller)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">initResult</span> <span class=\"operator\">=</span> controller.initialize();</span><br><span class=\"line\"></span><br><span class=\"line\">    controller.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> controller;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//真正地启动nameserver，这个start的是调用了remotingServer接口的start</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.remotingServer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.fileWatchService != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.fileWatchService.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"RemotingService\"><a href=\"#RemotingService\" class=\"headerlink\" title=\"RemotingService\"></a>RemotingService</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">RemotingService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这个start的实现类分两种，一个是客户端的，一个是服务端的，都是借助了netty来完成的</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">shutdown</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">registerRPCHook</span><span class=\"params\">(RPCHook rpcHook)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"初始化NameServerController\"><a href=\"#初始化NameServerController\" class=\"headerlink\" title=\"初始化NameServerController\"></a>初始化NameServerController</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">initialize</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.kvConfigManager.load();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.remotingServer = <span class=\"keyword\">new</span> <span class=\"title class_\">NettyRemotingServer</span>(<span class=\"built_in\">this</span>.nettyServerConfig, <span class=\"built_in\">this</span>.brokerHousekeepingService);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.remotingExecutor =</span><br><span class=\"line\"></span><br><span class=\"line\">        Executors.newFixedThreadPool(nettyServerConfig.getServerWorkerThreads(), <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadFactoryImpl</span>(<span class=\"string\">&quot;RemotingExecutorThread_&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.registerProcessor();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.scheduledExecutorService.scheduleAtFixedRate(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//每隔10秒就要进行一次扫描，扫描出来所有已经掉线的broker，第一次延迟五秒</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            NamesrvController.<span class=\"built_in\">this</span>.routeInfoManager.scanNotActiveBroker();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;, <span class=\"number\">5</span>, <span class=\"number\">10</span>, TimeUnit.SECONDS);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.scheduledExecutorService.scheduleAtFixedRate(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            NamesrvController.<span class=\"built_in\">this</span>.kvConfigManager.printAllPeriodically();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;, <span class=\"number\">1</span>, <span class=\"number\">10</span>, TimeUnit.MINUTES);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"RouteInfoManager\"><a href=\"#RouteInfoManager\" class=\"headerlink\" title=\"RouteInfoManager\"></a>RouteInfoManager</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//过期时间是两分钟</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">long</span> <span class=\"variable\">BROKER_CHANNEL_EXPIRED_TIME</span> <span class=\"operator\">=</span> <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//扫描出所有已经掉线的broker</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">scanNotActiveBroker</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Iterator&lt;Entry&lt;String, BrokerLiveInfo&gt;&gt; it = <span class=\"built_in\">this</span>.brokerLiveTable.entrySet().iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Entry&lt;String, BrokerLiveInfo&gt; next = it.next();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">last</span> <span class=\"operator\">=</span> next.getValue().getLastUpdateTimestamp();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((last + BROKER_CHANNEL_EXPIRED_TIME) &lt; System.currentTimeMillis()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            RemotingUtil.closeChannel(next.getValue().getChannel());</span><br><span class=\"line\"></span><br><span class=\"line\">            it.remove();</span><br><span class=\"line\"></span><br><span class=\"line\">            log.warn(<span class=\"string\">&quot;The broker channel expired, &#123;&#125; &#123;&#125;ms&quot;</span>, next.getKey(), BROKER_CHANNEL_EXPIRED_TIME);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.onChannelDestroy(next.getKey(), next.getValue().getChannel());</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"broker注册到nameserver\"><a href=\"#broker注册到nameserver\" class=\"headerlink\" title=\"broker注册到nameserver\"></a>broker注册到nameserver</h2><h3 id=\"NamesrvController\"><a href=\"#NamesrvController\" class=\"headerlink\" title=\"NamesrvController\"></a>NamesrvController</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerProcessor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (namesrvConfig.isClusterTest()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.remotingServer.registerDefaultProcessor(<span class=\"keyword\">new</span> <span class=\"title class_\">ClusterTestRequestProcessor</span>(<span class=\"built_in\">this</span>, namesrvConfig.getProductEnvName()),</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.remotingExecutor);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//nameservier默认的请求注册进入了，都交给nettyserver来进行处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.remotingServer.registerDefaultProcessor(<span class=\"keyword\">new</span> <span class=\"title class_\">DefaultRequestProcessor</span>(<span class=\"built_in\">this</span>), <span class=\"built_in\">this</span>.remotingExecutor);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DefaultRequestProcessor\"><a href=\"#DefaultRequestProcessor\" class=\"headerlink\" title=\"DefaultRequestProcessor\"></a>DefaultRequestProcessor</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (request.getCode()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> RequestCode.PUT_KV_CONFIG:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.putKVConfig(ctx, request);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> RequestCode.GET_KV_CONFIG:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.getKVConfig(ctx, request);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> RequestCode.DELETE_KV_CONFIG:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.deleteKVConfig(ctx, request);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> RequestCode.QUERY_DATA_VERSION:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> queryBrokerTopicConfig(ctx, request);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将broker的请求注册到nameserver中</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> RequestCode.REGISTER_BROKER:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Version</span> <span class=\"variable\">brokerVersion</span> <span class=\"operator\">=</span> MQVersion.value2Version(request.getVersion());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (brokerVersion.ordinal() &gt;= MQVersion.Version.V3_0_11.ordinal()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.registerBrokerWithFilterServer(ctx, request);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//注册broker到nameserver</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.registerBroker(ctx, request);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用了namesrvController.getRouteInfoManager().registerBroker方法真正将broker注册到nameserver中了</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">RegisterBrokerResult</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.namesrvController.getRouteInfoManager().registerBroker(</span><br><span class=\"line\"></span><br><span class=\"line\">            requestHeader.getClusterName(),</span><br><span class=\"line\"></span><br><span class=\"line\">            requestHeader.getBrokerAddr(),</span><br><span class=\"line\"></span><br><span class=\"line\">            requestHeader.getBrokerName(),</span><br><span class=\"line\"></span><br><span class=\"line\">            requestHeader.getBrokerId(),</span><br><span class=\"line\"></span><br><span class=\"line\">            requestHeader.getHaServerAddr(),</span><br><span class=\"line\"></span><br><span class=\"line\">            topicConfigWrapper,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"literal\">null</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            ctx.channel()</span><br><span class=\"line\"></span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RegisterBrokerResult <span class=\"title function_\">registerBroker</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> String clusterName,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> String brokerAddr,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> String brokerName,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> <span class=\"type\">long</span> brokerId,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> String haServerAddr,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> TopicConfigSerializeWrapper topicConfigWrapper,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> List&lt;String&gt; filterServerList,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> Channel channel)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">RegisterBrokerResult</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RegisterBrokerResult</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//加锁，同一时间只能有一个线程访问</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"built_in\">this</span>.lock.writeLock().lockInterruptibly();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据clusterName获取到了一个set，之后每隔30秒发送的请求是没有影响的，set会自动去重的</span></span><br><span class=\"line\"></span><br><span class=\"line\">                Set&lt;String&gt; brokerNames = <span class=\"built_in\">this</span>.clusterAddrTable.get(clusterName);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == brokerNames) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    brokerNames = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;String&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.clusterAddrTable.put(clusterName, brokerNames);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//将broker添加到一个集群里面</span></span><br><span class=\"line\"></span><br><span class=\"line\">                brokerNames.add(brokerName);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"type\">boolean</span> <span class=\"variable\">registerFirst</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据brokername获取到brokerdata</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//brokerAddrTable存放了所有broker的详细路由信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"type\">BrokerData</span> <span class=\"variable\">brokerData</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.brokerAddrTable.get(brokerName);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//如果broker第第一次进行注册，brokerDate会是null，会new一个BrokerData，将路由信息放入brokerAddrTable中</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == brokerData) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    registerFirst = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    brokerData = <span class=\"keyword\">new</span> <span class=\"title class_\">BrokerData</span>(clusterName, brokerName, <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;Long, String&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.brokerAddrTable.put(brokerName, brokerData);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                Map&lt;Long, String&gt; brokerAddrsMap = brokerData.getBrokerAddrs();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//Switch slave to master: first remove &lt;1, IP:PORT&gt; in namesrv, then add &lt;0, IP:PORT&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//The same IP:PORT must only have one record in brokerAddrTable</span></span><br><span class=\"line\"></span><br><span class=\"line\">                Iterator&lt;Entry&lt;Long, String&gt;&gt; it = brokerAddrsMap.entrySet().iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    Entry&lt;Long, String&gt; item = it.next();</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != brokerAddr &amp;&amp; brokerAddr.equals(item.getValue()) &amp;&amp; brokerId != item.getKey()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        it.remove();</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">oldAddr</span> <span class=\"operator\">=</span> brokerData.getBrokerAddrs().put(brokerId, brokerAddr);</span><br><span class=\"line\"></span><br><span class=\"line\">                registerFirst = registerFirst || (<span class=\"literal\">null</span> == oldAddr);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != topicConfigWrapper</span><br><span class=\"line\"></span><br><span class=\"line\">                    &amp;&amp; MixAll.MASTER_ID == brokerId) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.isBrokerTopicConfigChanged(brokerAddr, topicConfigWrapper.getDataVersion())</span><br><span class=\"line\"></span><br><span class=\"line\">                        || registerFirst) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        ConcurrentMap&lt;String, TopicConfig&gt; tcTable =</span><br><span class=\"line\"></span><br><span class=\"line\">                            topicConfigWrapper.getTopicConfigTable();</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (tcTable != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">for</span> (Map.Entry&lt;String, TopicConfig&gt; entry : tcTable.entrySet()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                                <span class=\"built_in\">this</span>.createAndUpdateQueueData(brokerName, entry.getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这里是broker心跳的核心处理逻辑</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//默认每隔30秒就会有一个新的BrokerLiveInfo被put到brokerLiveTable，覆盖上一次的心跳时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//BrokerLiveInfo里面的这个 System.currentTimeMillis(),当前时间戳就是broker最新的心跳时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"type\">BrokerLiveInfo</span> <span class=\"variable\">prevBrokerLiveInfo</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.brokerLiveTable.put(brokerAddr,</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">new</span> <span class=\"title class_\">BrokerLiveInfo</span>(</span><br><span class=\"line\"></span><br><span class=\"line\">                        System.currentTimeMillis(),</span><br><span class=\"line\"></span><br><span class=\"line\">                        topicConfigWrapper.getDataVersion(),</span><br><span class=\"line\"></span><br><span class=\"line\">                        channel,</span><br><span class=\"line\"></span><br><span class=\"line\">                        haServerAddr));</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == prevBrokerLiveInfo) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    log.info(<span class=\"string\">&quot;new broker registered, &#123;&#125; HAServer: &#123;&#125;&quot;</span>, brokerAddr, haServerAddr);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (filterServerList != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (filterServerList.isEmpty()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"built_in\">this</span>.filterServerTable.remove(brokerAddr);</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"built_in\">this</span>.filterServerTable.put(brokerAddr, filterServerList);</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (MixAll.MASTER_ID != brokerId) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">masterAddr</span> <span class=\"operator\">=</span> brokerData.getBrokerAddrs().get(MixAll.MASTER_ID);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (masterAddr != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"type\">BrokerLiveInfo</span> <span class=\"variable\">brokerLiveInfo</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.brokerLiveTable.get(masterAddr);</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (brokerLiveInfo != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                            result.setHaServerAddr(brokerLiveInfo.getHaServerAddr());</span><br><span class=\"line\"></span><br><span class=\"line\">                            result.setMasterAddr(masterAddr);</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"built_in\">this</span>.lock.writeLock().unlock();</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;registerBroker Exception&quot;</span>, e);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"创建NamesrvController\n我这里都是截取的部分代码，梳理大概逻辑，具体细节部分需要大家自行去阅读源码\n\nNamesrvStartup\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\npublic static NamesrvController main0(String[] args) {\n\n    try {\n\n        NamesrvController controller = createNamesrvController(args);\n\n        start(controller);\n\n    }\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n","more":"<blockquote>\n<p>我这里都是截取的部分代码，梳理大概逻辑，具体细节部分需要大家自行去阅读源码</p>\n</blockquote>\n<h3 id=\"NamesrvStartup\"><a href=\"#NamesrvStartup\" class=\"headerlink\" title=\"NamesrvStartup\"></a>NamesrvStartup</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> NamesrvController <span class=\"title function_\">main0</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">NamesrvController</span> <span class=\"variable\">controller</span> <span class=\"operator\">=</span> createNamesrvController(args);</span><br><span class=\"line\"></span><br><span class=\"line\">        start(controller);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> NamesrvController <span class=\"title function_\">start</span><span class=\"params\">(<span class=\"keyword\">final</span> NamesrvController controller)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">initResult</span> <span class=\"operator\">=</span> controller.initialize();</span><br><span class=\"line\"></span><br><span class=\"line\">    controller.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> controller;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//真正地启动nameserver，这个start的是调用了remotingServer接口的start</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.remotingServer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.fileWatchService != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.fileWatchService.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"RemotingService\"><a href=\"#RemotingService\" class=\"headerlink\" title=\"RemotingService\"></a>RemotingService</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">RemotingService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这个start的实现类分两种，一个是客户端的，一个是服务端的，都是借助了netty来完成的</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">shutdown</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">registerRPCHook</span><span class=\"params\">(RPCHook rpcHook)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"初始化NameServerController\"><a href=\"#初始化NameServerController\" class=\"headerlink\" title=\"初始化NameServerController\"></a>初始化NameServerController</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">initialize</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.kvConfigManager.load();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.remotingServer = <span class=\"keyword\">new</span> <span class=\"title class_\">NettyRemotingServer</span>(<span class=\"built_in\">this</span>.nettyServerConfig, <span class=\"built_in\">this</span>.brokerHousekeepingService);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.remotingExecutor =</span><br><span class=\"line\"></span><br><span class=\"line\">        Executors.newFixedThreadPool(nettyServerConfig.getServerWorkerThreads(), <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadFactoryImpl</span>(<span class=\"string\">&quot;RemotingExecutorThread_&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.registerProcessor();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.scheduledExecutorService.scheduleAtFixedRate(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//每隔10秒就要进行一次扫描，扫描出来所有已经掉线的broker，第一次延迟五秒</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            NamesrvController.<span class=\"built_in\">this</span>.routeInfoManager.scanNotActiveBroker();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;, <span class=\"number\">5</span>, <span class=\"number\">10</span>, TimeUnit.SECONDS);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.scheduledExecutorService.scheduleAtFixedRate(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            NamesrvController.<span class=\"built_in\">this</span>.kvConfigManager.printAllPeriodically();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;, <span class=\"number\">1</span>, <span class=\"number\">10</span>, TimeUnit.MINUTES);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"RouteInfoManager\"><a href=\"#RouteInfoManager\" class=\"headerlink\" title=\"RouteInfoManager\"></a>RouteInfoManager</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//过期时间是两分钟</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">long</span> <span class=\"variable\">BROKER_CHANNEL_EXPIRED_TIME</span> <span class=\"operator\">=</span> <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//扫描出所有已经掉线的broker</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">scanNotActiveBroker</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Iterator&lt;Entry&lt;String, BrokerLiveInfo&gt;&gt; it = <span class=\"built_in\">this</span>.brokerLiveTable.entrySet().iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Entry&lt;String, BrokerLiveInfo&gt; next = it.next();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">last</span> <span class=\"operator\">=</span> next.getValue().getLastUpdateTimestamp();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((last + BROKER_CHANNEL_EXPIRED_TIME) &lt; System.currentTimeMillis()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            RemotingUtil.closeChannel(next.getValue().getChannel());</span><br><span class=\"line\"></span><br><span class=\"line\">            it.remove();</span><br><span class=\"line\"></span><br><span class=\"line\">            log.warn(<span class=\"string\">&quot;The broker channel expired, &#123;&#125; &#123;&#125;ms&quot;</span>, next.getKey(), BROKER_CHANNEL_EXPIRED_TIME);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.onChannelDestroy(next.getKey(), next.getValue().getChannel());</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"broker注册到nameserver\"><a href=\"#broker注册到nameserver\" class=\"headerlink\" title=\"broker注册到nameserver\"></a>broker注册到nameserver</h2><h3 id=\"NamesrvController\"><a href=\"#NamesrvController\" class=\"headerlink\" title=\"NamesrvController\"></a>NamesrvController</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerProcessor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (namesrvConfig.isClusterTest()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.remotingServer.registerDefaultProcessor(<span class=\"keyword\">new</span> <span class=\"title class_\">ClusterTestRequestProcessor</span>(<span class=\"built_in\">this</span>, namesrvConfig.getProductEnvName()),</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.remotingExecutor);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//nameservier默认的请求注册进入了，都交给nettyserver来进行处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.remotingServer.registerDefaultProcessor(<span class=\"keyword\">new</span> <span class=\"title class_\">DefaultRequestProcessor</span>(<span class=\"built_in\">this</span>), <span class=\"built_in\">this</span>.remotingExecutor);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DefaultRequestProcessor\"><a href=\"#DefaultRequestProcessor\" class=\"headerlink\" title=\"DefaultRequestProcessor\"></a>DefaultRequestProcessor</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (request.getCode()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> RequestCode.PUT_KV_CONFIG:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.putKVConfig(ctx, request);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> RequestCode.GET_KV_CONFIG:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.getKVConfig(ctx, request);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> RequestCode.DELETE_KV_CONFIG:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.deleteKVConfig(ctx, request);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> RequestCode.QUERY_DATA_VERSION:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> queryBrokerTopicConfig(ctx, request);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将broker的请求注册到nameserver中</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> RequestCode.REGISTER_BROKER:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Version</span> <span class=\"variable\">brokerVersion</span> <span class=\"operator\">=</span> MQVersion.value2Version(request.getVersion());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (brokerVersion.ordinal() &gt;= MQVersion.Version.V3_0_11.ordinal()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.registerBrokerWithFilterServer(ctx, request);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//注册broker到nameserver</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.registerBroker(ctx, request);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用了namesrvController.getRouteInfoManager().registerBroker方法真正将broker注册到nameserver中了</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">RegisterBrokerResult</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.namesrvController.getRouteInfoManager().registerBroker(</span><br><span class=\"line\"></span><br><span class=\"line\">            requestHeader.getClusterName(),</span><br><span class=\"line\"></span><br><span class=\"line\">            requestHeader.getBrokerAddr(),</span><br><span class=\"line\"></span><br><span class=\"line\">            requestHeader.getBrokerName(),</span><br><span class=\"line\"></span><br><span class=\"line\">            requestHeader.getBrokerId(),</span><br><span class=\"line\"></span><br><span class=\"line\">            requestHeader.getHaServerAddr(),</span><br><span class=\"line\"></span><br><span class=\"line\">            topicConfigWrapper,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"literal\">null</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            ctx.channel()</span><br><span class=\"line\"></span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RegisterBrokerResult <span class=\"title function_\">registerBroker</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> String clusterName,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> String brokerAddr,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> String brokerName,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> <span class=\"type\">long</span> brokerId,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> String haServerAddr,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> TopicConfigSerializeWrapper topicConfigWrapper,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> List&lt;String&gt; filterServerList,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> Channel channel)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">RegisterBrokerResult</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RegisterBrokerResult</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//加锁，同一时间只能有一个线程访问</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"built_in\">this</span>.lock.writeLock().lockInterruptibly();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据clusterName获取到了一个set，之后每隔30秒发送的请求是没有影响的，set会自动去重的</span></span><br><span class=\"line\"></span><br><span class=\"line\">                Set&lt;String&gt; brokerNames = <span class=\"built_in\">this</span>.clusterAddrTable.get(clusterName);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == brokerNames) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    brokerNames = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;String&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.clusterAddrTable.put(clusterName, brokerNames);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//将broker添加到一个集群里面</span></span><br><span class=\"line\"></span><br><span class=\"line\">                brokerNames.add(brokerName);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"type\">boolean</span> <span class=\"variable\">registerFirst</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据brokername获取到brokerdata</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//brokerAddrTable存放了所有broker的详细路由信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"type\">BrokerData</span> <span class=\"variable\">brokerData</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.brokerAddrTable.get(brokerName);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//如果broker第第一次进行注册，brokerDate会是null，会new一个BrokerData，将路由信息放入brokerAddrTable中</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == brokerData) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    registerFirst = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    brokerData = <span class=\"keyword\">new</span> <span class=\"title class_\">BrokerData</span>(clusterName, brokerName, <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;Long, String&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.brokerAddrTable.put(brokerName, brokerData);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                Map&lt;Long, String&gt; brokerAddrsMap = brokerData.getBrokerAddrs();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//Switch slave to master: first remove &lt;1, IP:PORT&gt; in namesrv, then add &lt;0, IP:PORT&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//The same IP:PORT must only have one record in brokerAddrTable</span></span><br><span class=\"line\"></span><br><span class=\"line\">                Iterator&lt;Entry&lt;Long, String&gt;&gt; it = brokerAddrsMap.entrySet().iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    Entry&lt;Long, String&gt; item = it.next();</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != brokerAddr &amp;&amp; brokerAddr.equals(item.getValue()) &amp;&amp; brokerId != item.getKey()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        it.remove();</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">oldAddr</span> <span class=\"operator\">=</span> brokerData.getBrokerAddrs().put(brokerId, brokerAddr);</span><br><span class=\"line\"></span><br><span class=\"line\">                registerFirst = registerFirst || (<span class=\"literal\">null</span> == oldAddr);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != topicConfigWrapper</span><br><span class=\"line\"></span><br><span class=\"line\">                    &amp;&amp; MixAll.MASTER_ID == brokerId) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.isBrokerTopicConfigChanged(brokerAddr, topicConfigWrapper.getDataVersion())</span><br><span class=\"line\"></span><br><span class=\"line\">                        || registerFirst) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        ConcurrentMap&lt;String, TopicConfig&gt; tcTable =</span><br><span class=\"line\"></span><br><span class=\"line\">                            topicConfigWrapper.getTopicConfigTable();</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (tcTable != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">for</span> (Map.Entry&lt;String, TopicConfig&gt; entry : tcTable.entrySet()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                                <span class=\"built_in\">this</span>.createAndUpdateQueueData(brokerName, entry.getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这里是broker心跳的核心处理逻辑</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//默认每隔30秒就会有一个新的BrokerLiveInfo被put到brokerLiveTable，覆盖上一次的心跳时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//BrokerLiveInfo里面的这个 System.currentTimeMillis(),当前时间戳就是broker最新的心跳时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"type\">BrokerLiveInfo</span> <span class=\"variable\">prevBrokerLiveInfo</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.brokerLiveTable.put(brokerAddr,</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">new</span> <span class=\"title class_\">BrokerLiveInfo</span>(</span><br><span class=\"line\"></span><br><span class=\"line\">                        System.currentTimeMillis(),</span><br><span class=\"line\"></span><br><span class=\"line\">                        topicConfigWrapper.getDataVersion(),</span><br><span class=\"line\"></span><br><span class=\"line\">                        channel,</span><br><span class=\"line\"></span><br><span class=\"line\">                        haServerAddr));</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == prevBrokerLiveInfo) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    log.info(<span class=\"string\">&quot;new broker registered, &#123;&#125; HAServer: &#123;&#125;&quot;</span>, brokerAddr, haServerAddr);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (filterServerList != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (filterServerList.isEmpty()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"built_in\">this</span>.filterServerTable.remove(brokerAddr);</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"built_in\">this</span>.filterServerTable.put(brokerAddr, filterServerList);</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (MixAll.MASTER_ID != brokerId) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">masterAddr</span> <span class=\"operator\">=</span> brokerData.getBrokerAddrs().get(MixAll.MASTER_ID);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (masterAddr != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"type\">BrokerLiveInfo</span> <span class=\"variable\">brokerLiveInfo</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.brokerLiveTable.get(masterAddr);</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (brokerLiveInfo != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                            result.setHaServerAddr(brokerLiveInfo.getHaServerAddr());</span><br><span class=\"line\"></span><br><span class=\"line\">                            result.setMasterAddr(masterAddr);</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"built_in\">this</span>.lock.writeLock().unlock();</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;registerBroker Exception&quot;</span>, e);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"SpringBoot自动装配","description":"","abbrlink":"d4e5e1b1","date":"2021-05-12T16:00:00.000Z","_content":"\n\n自动装配原理介绍\n\n\n\n<!-- more -->\n\n\n\n## 启动类注解\n\n\n\n众所周知，这是springboot的启动类的注解\n\n\n\n```java\n\n@SpringBootApplication\n\npublic class DemoApplication {\n\n\n\n    public static void main(String[] args) {\n\n        SpringApplication.run(DemoApplication.class, args);\n\n    }\n\n\n\n}\n\n```\n\n\n\n## @SpringBootApplication\n\n\n\n```java\n\n@Target(ElementType.TYPE)\n\n@Retention(RetentionPolicy.RUNTIME)\n\n@Documented\n\n@Inherited\n\n@SpringBootConfiguration\n\n@EnableAutoConfiguration\n\n@ComponentScan(excludeFilters = { @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),\n\n      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })\n\npublic @interface SpringBootApplication {\n\n}\n\n```\n\n\n\n大概可以把 `@SpringBootApplication`看作是 `@Configuration`、`@EnableAutoConfiguration`、`@ComponentScan` 注解的集合。根据 SpringBoot 官网，这三个注解的作用分别是：\n\n\n\n- `@EnableAutoConfiguration`：启用 SpringBoot 的自动配置机制\n\n\n\n- `@Configuration`：允许在上下文中注册额外的 bean 或导入其他配置类\n\n\n\n- `@ComponentScan`： 扫描被`@Component` (`@Service`,`@Controller`)注解的 bean，注解默认会扫描启动类所在的包下所有的类 ，可以自定义不扫描某些 bean。如下图所示，容器中将排除`TypeExcludeFilter`和`AutoConfigurationExcludeFilter`。\n\n\n\n  @EnableAutoConfiguration` 是实现自动装配的重要注解，我们以这个注解入手。\n\n\n\n## @EnableAutoConfiguration\n\n\n\n```java\n\n@Target({ElementType.TYPE})\n\n@Retention(RetentionPolicy.RUNTIME)\n\n@Documented\n\n@Inherited\n\n@AutoConfigurationPackage//将main包下的所欲组件注册到容器中\n\n@Import({AutoConfigurationImportSelector.class})//加载自动装配类 xxxAutoconfiguration\n\npublic @interface EnableAutoConfiguration {\n\n    String ENABLED_OVERRIDE_PROPERTY = \"spring.boot.enableautoconfiguration\";\n\n\n\n    Class<?>[] exclude() default {};\n\n\n\n    String[] excludeName() default {};\n\n}\n\n```\n\n\n\n这个注解最重要的就是    AutoConfigurationImportSelector这个类了\n\n\n\n### AutoConfigurationImportSelector\n\n\n\nAutoConfigurationImportSelector中重要的方法就是这个，主要负责加载自动配置类的。\n\n\n\n```java\n\nprotected AutoConfigurationEntry getAutoConfigurationEntry(AnnotationMetadata annotationMetadata) {\n\n   if (!isEnabled(annotationMetadata)) {\n\n      return EMPTY_ENTRY;\n\n   }\n\n   //默认情况下返回的是@EnableAutoConfiguration中的两个属性\n\n   AnnotationAttributes attributes = getAttributes(annotationMetadata);\n\n   List<String> configurations = getCandidateConfigurations(annotationMetadata, attributes);\n\n   configurations = removeDuplicates(configurations);\n\n   Set<String> exclusions = getExclusions(annotationMetadata, attributes);\n\n   checkExcludedClasses(configurations, exclusions);\n\n   configurations.removeAll(exclusions);\n\n   configurations = getConfigurationClassFilter().filter(configurations);\n\n   fireAutoConfigurationImportEvents(configurations, exclusions);\n\n   return new AutoConfigurationEntry(configurations, exclusions);\n\n}\n\n```\n\n\n\n#### getAttributes\n\n\n\n这个方法返回了@EnableAutoConfiguration中的两个属性\n\n\n\n![image-20210514093032660](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210514093032660.png)\n\n\n\n#### getCandidateConfigurations\n\n\n\n```java\n\n//返回应考虑的自动配置类名称。 默认情况下，此方法将使用SpringFactoriesLoader和getSpringFactoriesLoaderFactoryClass()来加载候选SpringFactoriesLoader 。\n\nprotected List<String> getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) {\n\n   List<String> configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),\n\n         getBeanClassLoader());\n\n   Assert.notEmpty(configurations, \"No auto configuration classes found in META-INF/spring.factories. If you \"\n\n         + \"are using a custom packaging, make sure that file is correct.\");\n\n   return configurations;\n\n}\n\n```\n\n\n\n#### filter\n\n\n\n这个方法主要是扫描到所有的\n\n\n\n![image-20210514093526289](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210514093526289.png)\n\n\n\n去除一些\n\n\n\n![image-20210514094139509](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210514094139509.png)","source":"_posts/SpringBoot自动装配.md","raw":"---\ntitle: SpringBoot自动装配\ndescription: ''\ntags:\n  - 无标签\nabbrlink: d4e5e1b1\ndate: 2021-05-13 00:00:00\n---\n\n\n自动装配原理介绍\n\n\n\n<!-- more -->\n\n\n\n## 启动类注解\n\n\n\n众所周知，这是springboot的启动类的注解\n\n\n\n```java\n\n@SpringBootApplication\n\npublic class DemoApplication {\n\n\n\n    public static void main(String[] args) {\n\n        SpringApplication.run(DemoApplication.class, args);\n\n    }\n\n\n\n}\n\n```\n\n\n\n## @SpringBootApplication\n\n\n\n```java\n\n@Target(ElementType.TYPE)\n\n@Retention(RetentionPolicy.RUNTIME)\n\n@Documented\n\n@Inherited\n\n@SpringBootConfiguration\n\n@EnableAutoConfiguration\n\n@ComponentScan(excludeFilters = { @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),\n\n      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })\n\npublic @interface SpringBootApplication {\n\n}\n\n```\n\n\n\n大概可以把 `@SpringBootApplication`看作是 `@Configuration`、`@EnableAutoConfiguration`、`@ComponentScan` 注解的集合。根据 SpringBoot 官网，这三个注解的作用分别是：\n\n\n\n- `@EnableAutoConfiguration`：启用 SpringBoot 的自动配置机制\n\n\n\n- `@Configuration`：允许在上下文中注册额外的 bean 或导入其他配置类\n\n\n\n- `@ComponentScan`： 扫描被`@Component` (`@Service`,`@Controller`)注解的 bean，注解默认会扫描启动类所在的包下所有的类 ，可以自定义不扫描某些 bean。如下图所示，容器中将排除`TypeExcludeFilter`和`AutoConfigurationExcludeFilter`。\n\n\n\n  @EnableAutoConfiguration` 是实现自动装配的重要注解，我们以这个注解入手。\n\n\n\n## @EnableAutoConfiguration\n\n\n\n```java\n\n@Target({ElementType.TYPE})\n\n@Retention(RetentionPolicy.RUNTIME)\n\n@Documented\n\n@Inherited\n\n@AutoConfigurationPackage//将main包下的所欲组件注册到容器中\n\n@Import({AutoConfigurationImportSelector.class})//加载自动装配类 xxxAutoconfiguration\n\npublic @interface EnableAutoConfiguration {\n\n    String ENABLED_OVERRIDE_PROPERTY = \"spring.boot.enableautoconfiguration\";\n\n\n\n    Class<?>[] exclude() default {};\n\n\n\n    String[] excludeName() default {};\n\n}\n\n```\n\n\n\n这个注解最重要的就是    AutoConfigurationImportSelector这个类了\n\n\n\n### AutoConfigurationImportSelector\n\n\n\nAutoConfigurationImportSelector中重要的方法就是这个，主要负责加载自动配置类的。\n\n\n\n```java\n\nprotected AutoConfigurationEntry getAutoConfigurationEntry(AnnotationMetadata annotationMetadata) {\n\n   if (!isEnabled(annotationMetadata)) {\n\n      return EMPTY_ENTRY;\n\n   }\n\n   //默认情况下返回的是@EnableAutoConfiguration中的两个属性\n\n   AnnotationAttributes attributes = getAttributes(annotationMetadata);\n\n   List<String> configurations = getCandidateConfigurations(annotationMetadata, attributes);\n\n   configurations = removeDuplicates(configurations);\n\n   Set<String> exclusions = getExclusions(annotationMetadata, attributes);\n\n   checkExcludedClasses(configurations, exclusions);\n\n   configurations.removeAll(exclusions);\n\n   configurations = getConfigurationClassFilter().filter(configurations);\n\n   fireAutoConfigurationImportEvents(configurations, exclusions);\n\n   return new AutoConfigurationEntry(configurations, exclusions);\n\n}\n\n```\n\n\n\n#### getAttributes\n\n\n\n这个方法返回了@EnableAutoConfiguration中的两个属性\n\n\n\n![image-20210514093032660](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210514093032660.png)\n\n\n\n#### getCandidateConfigurations\n\n\n\n```java\n\n//返回应考虑的自动配置类名称。 默认情况下，此方法将使用SpringFactoriesLoader和getSpringFactoriesLoaderFactoryClass()来加载候选SpringFactoriesLoader 。\n\nprotected List<String> getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) {\n\n   List<String> configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),\n\n         getBeanClassLoader());\n\n   Assert.notEmpty(configurations, \"No auto configuration classes found in META-INF/spring.factories. If you \"\n\n         + \"are using a custom packaging, make sure that file is correct.\");\n\n   return configurations;\n\n}\n\n```\n\n\n\n#### filter\n\n\n\n这个方法主要是扫描到所有的\n\n\n\n![image-20210514093526289](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210514093526289.png)\n\n\n\n去除一些\n\n\n\n![image-20210514094139509](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210514094139509.png)","slug":"SpringBoot自动装配","published":1,"updated":"2025-03-02T03:37:34.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4e000vn0ukhpmo0mh7","content":"<p>自动装配原理介绍</p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"启动类注解\"><a href=\"#启动类注解\" class=\"headerlink\" title=\"启动类注解\"></a>启动类注解</h2><p>众所周知，这是springboot的启动类的注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        SpringApplication.run(DemoApplication.class, args);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"SpringBootApplication\"><a href=\"#SpringBootApplication\" class=\"headerlink\" title=\"@SpringBootApplication\"></a>@SpringBootApplication</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootConfiguration</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SpringBootApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>大概可以把 <code>@SpringBootApplication</code>看作是 <code>@Configuration</code>、<code>@EnableAutoConfiguration</code>、<code>@ComponentScan</code> 注解的集合。根据 SpringBoot 官网，这三个注解的作用分别是：</p>\n<ul>\n<li><p><code>@EnableAutoConfiguration</code>：启用 SpringBoot 的自动配置机制</p>\n</li>\n<li><p><code>@Configuration</code>：允许在上下文中注册额外的 bean 或导入其他配置类</p>\n</li>\n<li><p><code>@ComponentScan</code>： 扫描被<code>@Component</code> (<code>@Service</code>,<code>@Controller</code>)注解的 bean，注解默认会扫描启动类所在的包下所有的类 ，可以自定义不扫描某些 bean。如下图所示，容器中将排除<code>TypeExcludeFilter</code>和<code>AutoConfigurationExcludeFilter</code>。</p>\n<p>@EnableAutoConfiguration&#96; 是实现自动装配的重要注解，我们以这个注解入手。</p>\n</li>\n</ul>\n<h2 id=\"EnableAutoConfiguration\"><a href=\"#EnableAutoConfiguration\" class=\"headerlink\" title=\"@EnableAutoConfiguration\"></a>@EnableAutoConfiguration</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigurationPackage</span><span class=\"comment\">//将main包下的所欲组件注册到容器中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span><span class=\"comment\">//加载自动装配类 xxxAutoconfiguration</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableAutoConfiguration &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">ENABLED_OVERRIDE_PROPERTY</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;?&gt;[] exclude() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    String[] excludeName() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这个注解最重要的就是    AutoConfigurationImportSelector这个类了</p>\n<h3 id=\"AutoConfigurationImportSelector\"><a href=\"#AutoConfigurationImportSelector\" class=\"headerlink\" title=\"AutoConfigurationImportSelector\"></a>AutoConfigurationImportSelector</h3><p>AutoConfigurationImportSelector中重要的方法就是这个，主要负责加载自动配置类的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> AutoConfigurationEntry <span class=\"title function_\">getAutoConfigurationEntry</span><span class=\"params\">(AnnotationMetadata annotationMetadata)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> EMPTY_ENTRY;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//默认情况下返回的是@EnableAutoConfiguration中的两个属性</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"type\">AnnotationAttributes</span> <span class=\"variable\">attributes</span> <span class=\"operator\">=</span> getAttributes(annotationMetadata);</span><br><span class=\"line\"></span><br><span class=\"line\">   List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class=\"line\"></span><br><span class=\"line\">   configurations = removeDuplicates(configurations);</span><br><span class=\"line\"></span><br><span class=\"line\">   Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class=\"line\"></span><br><span class=\"line\">   checkExcludedClasses(configurations, exclusions);</span><br><span class=\"line\"></span><br><span class=\"line\">   configurations.removeAll(exclusions);</span><br><span class=\"line\"></span><br><span class=\"line\">   configurations = getConfigurationClassFilter().filter(configurations);</span><br><span class=\"line\"></span><br><span class=\"line\">   fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AutoConfigurationEntry</span>(configurations, exclusions);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"getAttributes\"><a href=\"#getAttributes\" class=\"headerlink\" title=\"getAttributes\"></a>getAttributes</h4><p>这个方法返回了@EnableAutoConfiguration中的两个属性</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210514093032660.png\" alt=\"image-20210514093032660\" loading=\"lazy\"></p>\n<h4 id=\"getCandidateConfigurations\"><a href=\"#getCandidateConfigurations\" class=\"headerlink\" title=\"getCandidateConfigurations\"></a>getCandidateConfigurations</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回应考虑的自动配置类名称。 默认情况下，此方法将使用SpringFactoriesLoader和getSpringFactoriesLoaderFactoryClass()来加载候选SpringFactoriesLoader 。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> List&lt;String&gt; <span class=\"title function_\">getCandidateConfigurations</span><span class=\"params\">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class=\"line\"></span><br><span class=\"line\">         getBeanClassLoader());</span><br><span class=\"line\"></span><br><span class=\"line\">   Assert.notEmpty(configurations, <span class=\"string\">&quot;No auto configuration classes found in META-INF/spring.factories. If you &quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">         + <span class=\"string\">&quot;are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> configurations;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h4><p>这个方法主要是扫描到所有的</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210514093526289.png\" alt=\"image-20210514093526289\" loading=\"lazy\"></p>\n<p>去除一些</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210514094139509.png\" alt=\"image-20210514094139509\" loading=\"lazy\"></p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"自动装配原理介绍\n\n启动类注解\n众所周知，这是springboot的启动类的注解\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n@SpringBootApplication\n\npublic class DemoApplication {\n\n\n\n    public static void main(String[] args) {\n\n        SpringApplication.run(DemoApplication.class, args);\n\n    }\n\n\n\n}\n\n\n\n@SpringBootApplication\n1\n2\n3\n4\n5\n6","more":"<h2 id=\"启动类注解\"><a href=\"#启动类注解\" class=\"headerlink\" title=\"启动类注解\"></a>启动类注解</h2><p>众所周知，这是springboot的启动类的注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        SpringApplication.run(DemoApplication.class, args);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"SpringBootApplication\"><a href=\"#SpringBootApplication\" class=\"headerlink\" title=\"@SpringBootApplication\"></a>@SpringBootApplication</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootConfiguration</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SpringBootApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>大概可以把 <code>@SpringBootApplication</code>看作是 <code>@Configuration</code>、<code>@EnableAutoConfiguration</code>、<code>@ComponentScan</code> 注解的集合。根据 SpringBoot 官网，这三个注解的作用分别是：</p>\n<ul>\n<li><p><code>@EnableAutoConfiguration</code>：启用 SpringBoot 的自动配置机制</p>\n</li>\n<li><p><code>@Configuration</code>：允许在上下文中注册额外的 bean 或导入其他配置类</p>\n</li>\n<li><p><code>@ComponentScan</code>： 扫描被<code>@Component</code> (<code>@Service</code>,<code>@Controller</code>)注解的 bean，注解默认会扫描启动类所在的包下所有的类 ，可以自定义不扫描某些 bean。如下图所示，容器中将排除<code>TypeExcludeFilter</code>和<code>AutoConfigurationExcludeFilter</code>。</p>\n<p>@EnableAutoConfiguration&#96; 是实现自动装配的重要注解，我们以这个注解入手。</p>\n</li>\n</ul>\n<h2 id=\"EnableAutoConfiguration\"><a href=\"#EnableAutoConfiguration\" class=\"headerlink\" title=\"@EnableAutoConfiguration\"></a>@EnableAutoConfiguration</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigurationPackage</span><span class=\"comment\">//将main包下的所欲组件注册到容器中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span><span class=\"comment\">//加载自动装配类 xxxAutoconfiguration</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableAutoConfiguration &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">ENABLED_OVERRIDE_PROPERTY</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;?&gt;[] exclude() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    String[] excludeName() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这个注解最重要的就是    AutoConfigurationImportSelector这个类了</p>\n<h3 id=\"AutoConfigurationImportSelector\"><a href=\"#AutoConfigurationImportSelector\" class=\"headerlink\" title=\"AutoConfigurationImportSelector\"></a>AutoConfigurationImportSelector</h3><p>AutoConfigurationImportSelector中重要的方法就是这个，主要负责加载自动配置类的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> AutoConfigurationEntry <span class=\"title function_\">getAutoConfigurationEntry</span><span class=\"params\">(AnnotationMetadata annotationMetadata)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> EMPTY_ENTRY;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//默认情况下返回的是@EnableAutoConfiguration中的两个属性</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"type\">AnnotationAttributes</span> <span class=\"variable\">attributes</span> <span class=\"operator\">=</span> getAttributes(annotationMetadata);</span><br><span class=\"line\"></span><br><span class=\"line\">   List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class=\"line\"></span><br><span class=\"line\">   configurations = removeDuplicates(configurations);</span><br><span class=\"line\"></span><br><span class=\"line\">   Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class=\"line\"></span><br><span class=\"line\">   checkExcludedClasses(configurations, exclusions);</span><br><span class=\"line\"></span><br><span class=\"line\">   configurations.removeAll(exclusions);</span><br><span class=\"line\"></span><br><span class=\"line\">   configurations = getConfigurationClassFilter().filter(configurations);</span><br><span class=\"line\"></span><br><span class=\"line\">   fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AutoConfigurationEntry</span>(configurations, exclusions);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"getAttributes\"><a href=\"#getAttributes\" class=\"headerlink\" title=\"getAttributes\"></a>getAttributes</h4><p>这个方法返回了@EnableAutoConfiguration中的两个属性</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210514093032660.png\" alt=\"image-20210514093032660\" loading=\"lazy\"></p>\n<h4 id=\"getCandidateConfigurations\"><a href=\"#getCandidateConfigurations\" class=\"headerlink\" title=\"getCandidateConfigurations\"></a>getCandidateConfigurations</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回应考虑的自动配置类名称。 默认情况下，此方法将使用SpringFactoriesLoader和getSpringFactoriesLoaderFactoryClass()来加载候选SpringFactoriesLoader 。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> List&lt;String&gt; <span class=\"title function_\">getCandidateConfigurations</span><span class=\"params\">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class=\"line\"></span><br><span class=\"line\">         getBeanClassLoader());</span><br><span class=\"line\"></span><br><span class=\"line\">   Assert.notEmpty(configurations, <span class=\"string\">&quot;No auto configuration classes found in META-INF/spring.factories. If you &quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">         + <span class=\"string\">&quot;are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> configurations;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h4><p>这个方法主要是扫描到所有的</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210514093526289.png\" alt=\"image-20210514093526289\" loading=\"lazy\"></p>\n<p>去除一些</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210514094139509.png\" alt=\"image-20210514094139509\" loading=\"lazy\"></p>"},{"title":"ReentrantLock.lock（公平锁）最多要尝试加锁几次才会挂起？","description":"","abbrlink":"b7aa4b03","date":"2021-07-19T16:00:00.000Z","_content":"\n\n你猜猜\n\n\n\n<!-- more -->\n\n\n\n# 不同点\n\n\n\n其实第一种情况和第二次情况，都是在tryAcquire这个方法的差别，\n\n\n\n## tryAcquire\n\n\n\n```java\n\nprotected final boolean tryAcquire(int acquires) {\n\n    final Thread current = Thread.currentThread();\n\n    int c = getState();\n\n    if (c == 0) {\n\n        if (!hasQueuedPredecessors() &&\n\n            compareAndSetState(0, acquires)) {\n\n            setExclusiveOwnerThread(current);\n\n            return true;\n\n        }\n\n    }\n\n\n\n    else if (current == getExclusiveOwnerThread()) {\n\n        int nextc = c + acquires;\n\n        if (nextc < 0)\n\n            throw new Error(\"Maximum lock count exceeded\");\n\n        setState(nextc);\n\n        return true;\n\n    }\n\n    return false;\n\n}\n\n```\n\n主要是!hasQueuedPredecessors()这个方法区别了两种情况，如果为true，就会进行尝试，如果false，就不会，代码就会往下走\n\n## hasQueuedPredecessors\n\n```java\n\npublic final boolean hasQueuedPredecessors() {\n\n    Node t = tail; \n\n    Node h = head;\n\n    Node s;\n\n    return h != t &&\n\n        ((s = h.next) == null || s.thread != Thread.currentThread());\n\n}\n\n```\n\n!hasQueuedPredecessors()的两种情况\n\n1. true 阻塞队列为空，或者队列不为空，头结点的下一个节点不是null，并且头结点的下一个节点的线程和当前线程是同一个线程的时候\n\n2. false 阻塞队列不为空，或者头结点的下一个节点是null，或者头结点下一个节点的线程和当前线程不相同\n\n# 相同点\n\n## acquireQueued\n\n```java\n\nfinal boolean acquireQueued(final Node node, int arg) {\n\n    boolean failed = true;\n\n    try {\n\n        boolean interrupted = false;\n\n        for (;;) {\n\n            final Node p = node.predecessor();\n\n            if (p == head && tryAcquire(arg)) {\n\n\n\n                setHead(node);\n\n                p.next = null; // help GC\n\n                failed = false;\n\n                return interrupted;\n\n            }\n\n            if (shouldParkAfterFailedAcquire(p, node) &&\n\n                parkAndCheckInterrupt())\n\n                interrupted = true;\n\n        }\n\n    } finally {\n\n        if (failed)\n\n            cancelAcquire(node);\n\n    }\n\n}\n\n```\n\n这个方法其实看起来也很简单，第一次进来就是判断是不是头结点，如果是头结点就尝试获取锁，如果不是就走shouldParkAfterFailedAcquire方法\n\n> - 注意这个方法只有在当前节点的前缀节点是头结点的时候才能进行尝试获取锁\n\n> - 只有当一进来的时候，当前节点是头结点才会进行尝试，如果一进来，当前节点的前缀节点不是头结点，之后三次，就都不太可能进行尝试，因为node节点的位置并没有发生变化，但是好像也存在一种极端情况，就是阻塞队列中的一个节点到当前节点中间的节点都不打算等待了，然后当前节点就直接挂在了头结点的后面，于是再次进入这个方法就会进行尝试了\n\n> -  在acquireQueued方法中，如果考虑极端情况，如果一进来，当前节点的前缀节点就是头结点，并且当前线程和头结点线程不同，而且三次都尝试获取失败，那么最多可以尝试三次获取锁\n\n> - 当然也存在一种情况，就是当前节点的前缀节点是头结点，并且当前线程节点和头结点线程的线程相同，那么会在tryAcquire的方法中直接返回true\n\n## shouldParkAfterFailedAcquire\n\n\n\n```java\n\nprivate static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {\n\n    int ws = pred.waitStatus;\n\n    if (ws == Node.SIGNAL)\n\n        return true;\n\n    if (ws > 0) {\n\n        do {\n\n            node.prev = pred = pred.prev;\n\n        } while (pred.waitStatus > 0);\n\n        pred.next = node;\n\n    } else {\n\n        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n\n    }\n\n    return false;\n\n}\n\n````\n\n分析一下，这个方法最多几次之后可以返回true。 从这个方法的判断条件可以看出，state的值应该是三种情况\n\n\n\n1.  0\n\n1.  -1\n\n1.  大于0\n\n\n\n那么我们就一一来谈论，\n\n\n\n1.  如果是0，就会将变为-1，第二次进来直接返回（其实这种情况并不存在，因为每个进来阻塞队列的线程最终都会变成-1，但是如果这个节点之后还没有新的节点进来，那么可能是0）\n\n1.  如果是-1，进来之后就直接返回\n\n1.  如果是大于0，那么要进入循环，直到前缀节点等于0或者等于-1的时候才会返回，如果是等于0，第二次进来就会走到第一种情况，总的来说就是到了第三次才会返回true。\n\n\n\n所以，这个方法最多三次可以返回true。\n\n### waitState的变化\n\n\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/736dd6e2e89e4803b62e5eeeb52ba0ca~tplv-k3u1fbpfcp-watermark.image)\n\n\n\n![39b79058776f552eb5cab0401b72293.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/595621b843b946ab9ae4fbb2e808a4bf~tplv-k3u1fbpfcp-watermark.image)\n\n# 结论\n\n分为两种情况，\n\n1. 阻塞队列为空，或者队列不为空，头结点的下一个节点不是null，并且头结点的下一个节点的线程和当前线程是同一个线程的时候，这个时候最多3次尝试\n\n> 两次尝试的这种结果，是阻塞队列为空，tryAcquire会尝试一次，接着走到addWaiter，当前节点就会变为阻塞队列的头结点，此时state为0，然后走acquireQueued，因为state为0所以会进行两次尝试shouldParkAfterFailedAcquire就会返回true了，那么最多就是三次尝试\n\n2. 阻塞队列不为空，或者头结点的下一个节点是null，或者头结点下一个节点的线程和当前线程不相同，这个时候最多3次尝试\n\n\n\n> 头结点的下一个节点和当前线程不是一个线程，假设一直竞争锁失败，那么最终","source":"_posts/ReentrantLock-lock（公平锁）最多要尝试加锁几次才会挂起？.md","raw":"---\ntitle: ReentrantLock.lock（公平锁）最多要尝试加锁几次才会挂起？\ndescription: ''\ntags:\n  - 无标签\nabbrlink: b7aa4b03\ndate: 2021-07-20 00:00:00\n---\n\n\n你猜猜\n\n\n\n<!-- more -->\n\n\n\n# 不同点\n\n\n\n其实第一种情况和第二次情况，都是在tryAcquire这个方法的差别，\n\n\n\n## tryAcquire\n\n\n\n```java\n\nprotected final boolean tryAcquire(int acquires) {\n\n    final Thread current = Thread.currentThread();\n\n    int c = getState();\n\n    if (c == 0) {\n\n        if (!hasQueuedPredecessors() &&\n\n            compareAndSetState(0, acquires)) {\n\n            setExclusiveOwnerThread(current);\n\n            return true;\n\n        }\n\n    }\n\n\n\n    else if (current == getExclusiveOwnerThread()) {\n\n        int nextc = c + acquires;\n\n        if (nextc < 0)\n\n            throw new Error(\"Maximum lock count exceeded\");\n\n        setState(nextc);\n\n        return true;\n\n    }\n\n    return false;\n\n}\n\n```\n\n主要是!hasQueuedPredecessors()这个方法区别了两种情况，如果为true，就会进行尝试，如果false，就不会，代码就会往下走\n\n## hasQueuedPredecessors\n\n```java\n\npublic final boolean hasQueuedPredecessors() {\n\n    Node t = tail; \n\n    Node h = head;\n\n    Node s;\n\n    return h != t &&\n\n        ((s = h.next) == null || s.thread != Thread.currentThread());\n\n}\n\n```\n\n!hasQueuedPredecessors()的两种情况\n\n1. true 阻塞队列为空，或者队列不为空，头结点的下一个节点不是null，并且头结点的下一个节点的线程和当前线程是同一个线程的时候\n\n2. false 阻塞队列不为空，或者头结点的下一个节点是null，或者头结点下一个节点的线程和当前线程不相同\n\n# 相同点\n\n## acquireQueued\n\n```java\n\nfinal boolean acquireQueued(final Node node, int arg) {\n\n    boolean failed = true;\n\n    try {\n\n        boolean interrupted = false;\n\n        for (;;) {\n\n            final Node p = node.predecessor();\n\n            if (p == head && tryAcquire(arg)) {\n\n\n\n                setHead(node);\n\n                p.next = null; // help GC\n\n                failed = false;\n\n                return interrupted;\n\n            }\n\n            if (shouldParkAfterFailedAcquire(p, node) &&\n\n                parkAndCheckInterrupt())\n\n                interrupted = true;\n\n        }\n\n    } finally {\n\n        if (failed)\n\n            cancelAcquire(node);\n\n    }\n\n}\n\n```\n\n这个方法其实看起来也很简单，第一次进来就是判断是不是头结点，如果是头结点就尝试获取锁，如果不是就走shouldParkAfterFailedAcquire方法\n\n> - 注意这个方法只有在当前节点的前缀节点是头结点的时候才能进行尝试获取锁\n\n> - 只有当一进来的时候，当前节点是头结点才会进行尝试，如果一进来，当前节点的前缀节点不是头结点，之后三次，就都不太可能进行尝试，因为node节点的位置并没有发生变化，但是好像也存在一种极端情况，就是阻塞队列中的一个节点到当前节点中间的节点都不打算等待了，然后当前节点就直接挂在了头结点的后面，于是再次进入这个方法就会进行尝试了\n\n> -  在acquireQueued方法中，如果考虑极端情况，如果一进来，当前节点的前缀节点就是头结点，并且当前线程和头结点线程不同，而且三次都尝试获取失败，那么最多可以尝试三次获取锁\n\n> - 当然也存在一种情况，就是当前节点的前缀节点是头结点，并且当前线程节点和头结点线程的线程相同，那么会在tryAcquire的方法中直接返回true\n\n## shouldParkAfterFailedAcquire\n\n\n\n```java\n\nprivate static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {\n\n    int ws = pred.waitStatus;\n\n    if (ws == Node.SIGNAL)\n\n        return true;\n\n    if (ws > 0) {\n\n        do {\n\n            node.prev = pred = pred.prev;\n\n        } while (pred.waitStatus > 0);\n\n        pred.next = node;\n\n    } else {\n\n        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n\n    }\n\n    return false;\n\n}\n\n````\n\n分析一下，这个方法最多几次之后可以返回true。 从这个方法的判断条件可以看出，state的值应该是三种情况\n\n\n\n1.  0\n\n1.  -1\n\n1.  大于0\n\n\n\n那么我们就一一来谈论，\n\n\n\n1.  如果是0，就会将变为-1，第二次进来直接返回（其实这种情况并不存在，因为每个进来阻塞队列的线程最终都会变成-1，但是如果这个节点之后还没有新的节点进来，那么可能是0）\n\n1.  如果是-1，进来之后就直接返回\n\n1.  如果是大于0，那么要进入循环，直到前缀节点等于0或者等于-1的时候才会返回，如果是等于0，第二次进来就会走到第一种情况，总的来说就是到了第三次才会返回true。\n\n\n\n所以，这个方法最多三次可以返回true。\n\n### waitState的变化\n\n\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/736dd6e2e89e4803b62e5eeeb52ba0ca~tplv-k3u1fbpfcp-watermark.image)\n\n\n\n![39b79058776f552eb5cab0401b72293.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/595621b843b946ab9ae4fbb2e808a4bf~tplv-k3u1fbpfcp-watermark.image)\n\n# 结论\n\n分为两种情况，\n\n1. 阻塞队列为空，或者队列不为空，头结点的下一个节点不是null，并且头结点的下一个节点的线程和当前线程是同一个线程的时候，这个时候最多3次尝试\n\n> 两次尝试的这种结果，是阻塞队列为空，tryAcquire会尝试一次，接着走到addWaiter，当前节点就会变为阻塞队列的头结点，此时state为0，然后走acquireQueued，因为state为0所以会进行两次尝试shouldParkAfterFailedAcquire就会返回true了，那么最多就是三次尝试\n\n2. 阻塞队列不为空，或者头结点的下一个节点是null，或者头结点下一个节点的线程和当前线程不相同，这个时候最多3次尝试\n\n\n\n> 头结点的下一个节点和当前线程不是一个线程，假设一直竞争锁失败，那么最终","slug":"ReentrantLock-lock（公平锁）最多要尝试加锁几次才会挂起？","published":1,"updated":"2025-03-02T03:37:34.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4e000xn0uketl61p5n","content":"<p>你猜猜</p>\n<span id=\"more\"></span>\n\n\n\n<h1 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h1><p>其实第一种情况和第二次情况，都是在tryAcquire这个方法的差别，</p>\n<h2 id=\"tryAcquire\"><a href=\"#tryAcquire\" class=\"headerlink\" title=\"tryAcquire\"></a>tryAcquire</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryAcquire</span><span class=\"params\">(<span class=\"type\">int</span> acquires)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Thread</span> <span class=\"variable\">current</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> getState();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">            compareAndSetState(<span class=\"number\">0</span>, acquires)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            setExclusiveOwnerThread(current);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">nextc</span> <span class=\"operator\">=</span> c + acquires;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextc &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        setState(nextc);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>主要是!hasQueuedPredecessors()这个方法区别了两种情况，如果为true，就会进行尝试，如果false，就不会，代码就会往下走</p>\n<h2 id=\"hasQueuedPredecessors\"><a href=\"#hasQueuedPredecessors\" class=\"headerlink\" title=\"hasQueuedPredecessors\"></a>hasQueuedPredecessors</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasQueuedPredecessors</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> tail; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> h != t &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">        ((s = h.next) == <span class=\"literal\">null</span> || s.thread != Thread.currentThread());</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>!hasQueuedPredecessors()的两种情况</p>\n<ol>\n<li><p>true 阻塞队列为空，或者队列不为空，头结点的下一个节点不是null，并且头结点的下一个节点的线程和当前线程是同一个线程的时候</p>\n</li>\n<li><p>false 阻塞队列不为空，或者头结点的下一个节点是null，或者头结点下一个节点的线程和当前线程不相同</p>\n</li>\n</ol>\n<h1 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h1><h2 id=\"acquireQueued\"><a href=\"#acquireQueued\" class=\"headerlink\" title=\"acquireQueued\"></a>acquireQueued</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">acquireQueued</span><span class=\"params\">(<span class=\"keyword\">final</span> Node node, <span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">failed</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">interrupted</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> node.predecessor();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                setHead(node);</span><br><span class=\"line\"></span><br><span class=\"line\">                p.next = <span class=\"literal\">null</span>; <span class=\"comment\">// help GC</span></span><br><span class=\"line\"></span><br><span class=\"line\">                failed = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> interrupted;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">                parkAndCheckInterrupt())</span><br><span class=\"line\"></span><br><span class=\"line\">                interrupted = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (failed)</span><br><span class=\"line\"></span><br><span class=\"line\">            cancelAcquire(node);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这个方法其实看起来也很简单，第一次进来就是判断是不是头结点，如果是头结点就尝试获取锁，如果不是就走shouldParkAfterFailedAcquire方法</p>\n<blockquote>\n<ul>\n<li>注意这个方法只有在当前节点的前缀节点是头结点的时候才能进行尝试获取锁</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>只有当一进来的时候，当前节点是头结点才会进行尝试，如果一进来，当前节点的前缀节点不是头结点，之后三次，就都不太可能进行尝试，因为node节点的位置并没有发生变化，但是好像也存在一种极端情况，就是阻塞队列中的一个节点到当前节点中间的节点都不打算等待了，然后当前节点就直接挂在了头结点的后面，于是再次进入这个方法就会进行尝试了</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>在acquireQueued方法中，如果考虑极端情况，如果一进来，当前节点的前缀节点就是头结点，并且当前线程和头结点线程不同，而且三次都尝试获取失败，那么最多可以尝试三次获取锁</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>当然也存在一种情况，就是当前节点的前缀节点是头结点，并且当前线程节点和头结点线程的线程相同，那么会在tryAcquire的方法中直接返回true</li>\n</ul>\n</blockquote>\n<h2 id=\"shouldParkAfterFailedAcquire\"><a href=\"#shouldParkAfterFailedAcquire\" class=\"headerlink\" title=\"shouldParkAfterFailedAcquire\"></a>shouldParkAfterFailedAcquire</h2><pre><code class=\"java\">\nprivate static boolean shouldParkAfterFailedAcquire(Node pred, Node node) &#123;\n\n    int ws = pred.waitStatus;\n\n    if (ws == Node.SIGNAL)\n\n        return true;\n\n    if (ws &gt; 0) &#123;\n\n        do &#123;\n\n            node.prev = pred = pred.prev;\n\n        &#125; while (pred.waitStatus &gt; 0);\n\n        pred.next = node;\n\n    &#125; else &#123;\n\n        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n\n    &#125;\n\n    return false;\n\n&#125;\n</code></pre>\n<p>分析一下，这个方法最多几次之后可以返回true。 从这个方法的判断条件可以看出，state的值应该是三种情况</p>\n<ol>\n<li><p>0</p>\n</li>\n<li><p>-1</p>\n</li>\n<li><p>大于0</p>\n</li>\n</ol>\n<p>那么我们就一一来谈论，</p>\n<ol>\n<li><p>如果是0，就会将变为-1，第二次进来直接返回（其实这种情况并不存在，因为每个进来阻塞队列的线程最终都会变成-1，但是如果这个节点之后还没有新的节点进来，那么可能是0）</p>\n</li>\n<li><p>如果是-1，进来之后就直接返回</p>\n</li>\n<li><p>如果是大于0，那么要进入循环，直到前缀节点等于0或者等于-1的时候才会返回，如果是等于0，第二次进来就会走到第一种情况，总的来说就是到了第三次才会返回true。</p>\n</li>\n</ol>\n<p>所以，这个方法最多三次可以返回true。</p>\n<h3 id=\"waitState的变化\"><a href=\"#waitState的变化\" class=\"headerlink\" title=\"waitState的变化\"></a>waitState的变化</h3><p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/736dd6e2e89e4803b62e5eeeb52ba0ca~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/595621b843b946ab9ae4fbb2e808a4bf~tplv-k3u1fbpfcp-watermark.image\" alt=\"39b79058776f552eb5cab0401b72293.png\" loading=\"lazy\"></p>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><p>分为两种情况，</p>\n<ol>\n<li>阻塞队列为空，或者队列不为空，头结点的下一个节点不是null，并且头结点的下一个节点的线程和当前线程是同一个线程的时候，这个时候最多3次尝试</li>\n</ol>\n<blockquote>\n<p>两次尝试的这种结果，是阻塞队列为空，tryAcquire会尝试一次，接着走到addWaiter，当前节点就会变为阻塞队列的头结点，此时state为0，然后走acquireQueued，因为state为0所以会进行两次尝试shouldParkAfterFailedAcquire就会返回true了，那么最多就是三次尝试</p>\n</blockquote>\n<ol start=\"2\">\n<li>阻塞队列不为空，或者头结点的下一个节点是null，或者头结点下一个节点的线程和当前线程不相同，这个时候最多3次尝试</li>\n</ol>\n<blockquote>\n<p>头结点的下一个节点和当前线程不是一个线程，假设一直竞争锁失败，那么最终</p>\n</blockquote>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"你猜猜\n\n不同点\n其实第一种情况和第二次情况，都是在tryAcquire这个方法的差别，\n\ntryAcquire\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n\n\n\nprotected final boolean tryAcquire(int acquires) {\n\n    final Thread current = Thread.currentThread();\n\n    int c = getState()","more":"<h1 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h1><p>其实第一种情况和第二次情况，都是在tryAcquire这个方法的差别，</p>\n<h2 id=\"tryAcquire\"><a href=\"#tryAcquire\" class=\"headerlink\" title=\"tryAcquire\"></a>tryAcquire</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryAcquire</span><span class=\"params\">(<span class=\"type\">int</span> acquires)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Thread</span> <span class=\"variable\">current</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> getState();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">            compareAndSetState(<span class=\"number\">0</span>, acquires)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            setExclusiveOwnerThread(current);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">nextc</span> <span class=\"operator\">=</span> c + acquires;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextc &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        setState(nextc);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>主要是!hasQueuedPredecessors()这个方法区别了两种情况，如果为true，就会进行尝试，如果false，就不会，代码就会往下走</p>\n<h2 id=\"hasQueuedPredecessors\"><a href=\"#hasQueuedPredecessors\" class=\"headerlink\" title=\"hasQueuedPredecessors\"></a>hasQueuedPredecessors</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasQueuedPredecessors</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> tail; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> h != t &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">        ((s = h.next) == <span class=\"literal\">null</span> || s.thread != Thread.currentThread());</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>!hasQueuedPredecessors()的两种情况</p>\n<ol>\n<li><p>true 阻塞队列为空，或者队列不为空，头结点的下一个节点不是null，并且头结点的下一个节点的线程和当前线程是同一个线程的时候</p>\n</li>\n<li><p>false 阻塞队列不为空，或者头结点的下一个节点是null，或者头结点下一个节点的线程和当前线程不相同</p>\n</li>\n</ol>\n<h1 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h1><h2 id=\"acquireQueued\"><a href=\"#acquireQueued\" class=\"headerlink\" title=\"acquireQueued\"></a>acquireQueued</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">acquireQueued</span><span class=\"params\">(<span class=\"keyword\">final</span> Node node, <span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">failed</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">interrupted</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> node.predecessor();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                setHead(node);</span><br><span class=\"line\"></span><br><span class=\"line\">                p.next = <span class=\"literal\">null</span>; <span class=\"comment\">// help GC</span></span><br><span class=\"line\"></span><br><span class=\"line\">                failed = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> interrupted;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">                parkAndCheckInterrupt())</span><br><span class=\"line\"></span><br><span class=\"line\">                interrupted = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (failed)</span><br><span class=\"line\"></span><br><span class=\"line\">            cancelAcquire(node);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这个方法其实看起来也很简单，第一次进来就是判断是不是头结点，如果是头结点就尝试获取锁，如果不是就走shouldParkAfterFailedAcquire方法</p>\n<blockquote>\n<ul>\n<li>注意这个方法只有在当前节点的前缀节点是头结点的时候才能进行尝试获取锁</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>只有当一进来的时候，当前节点是头结点才会进行尝试，如果一进来，当前节点的前缀节点不是头结点，之后三次，就都不太可能进行尝试，因为node节点的位置并没有发生变化，但是好像也存在一种极端情况，就是阻塞队列中的一个节点到当前节点中间的节点都不打算等待了，然后当前节点就直接挂在了头结点的后面，于是再次进入这个方法就会进行尝试了</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>在acquireQueued方法中，如果考虑极端情况，如果一进来，当前节点的前缀节点就是头结点，并且当前线程和头结点线程不同，而且三次都尝试获取失败，那么最多可以尝试三次获取锁</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>当然也存在一种情况，就是当前节点的前缀节点是头结点，并且当前线程节点和头结点线程的线程相同，那么会在tryAcquire的方法中直接返回true</li>\n</ul>\n</blockquote>\n<h2 id=\"shouldParkAfterFailedAcquire\"><a href=\"#shouldParkAfterFailedAcquire\" class=\"headerlink\" title=\"shouldParkAfterFailedAcquire\"></a>shouldParkAfterFailedAcquire</h2><pre><code class=\"java\">\nprivate static boolean shouldParkAfterFailedAcquire(Node pred, Node node) &#123;\n\n    int ws = pred.waitStatus;\n\n    if (ws == Node.SIGNAL)\n\n        return true;\n\n    if (ws &gt; 0) &#123;\n\n        do &#123;\n\n            node.prev = pred = pred.prev;\n\n        &#125; while (pred.waitStatus &gt; 0);\n\n        pred.next = node;\n\n    &#125; else &#123;\n\n        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n\n    &#125;\n\n    return false;\n\n&#125;\n</code></pre>\n<p>分析一下，这个方法最多几次之后可以返回true。 从这个方法的判断条件可以看出，state的值应该是三种情况</p>\n<ol>\n<li><p>0</p>\n</li>\n<li><p>-1</p>\n</li>\n<li><p>大于0</p>\n</li>\n</ol>\n<p>那么我们就一一来谈论，</p>\n<ol>\n<li><p>如果是0，就会将变为-1，第二次进来直接返回（其实这种情况并不存在，因为每个进来阻塞队列的线程最终都会变成-1，但是如果这个节点之后还没有新的节点进来，那么可能是0）</p>\n</li>\n<li><p>如果是-1，进来之后就直接返回</p>\n</li>\n<li><p>如果是大于0，那么要进入循环，直到前缀节点等于0或者等于-1的时候才会返回，如果是等于0，第二次进来就会走到第一种情况，总的来说就是到了第三次才会返回true。</p>\n</li>\n</ol>\n<p>所以，这个方法最多三次可以返回true。</p>\n<h3 id=\"waitState的变化\"><a href=\"#waitState的变化\" class=\"headerlink\" title=\"waitState的变化\"></a>waitState的变化</h3><p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/736dd6e2e89e4803b62e5eeeb52ba0ca~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/595621b843b946ab9ae4fbb2e808a4bf~tplv-k3u1fbpfcp-watermark.image\" alt=\"39b79058776f552eb5cab0401b72293.png\" loading=\"lazy\"></p>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><p>分为两种情况，</p>\n<ol>\n<li>阻塞队列为空，或者队列不为空，头结点的下一个节点不是null，并且头结点的下一个节点的线程和当前线程是同一个线程的时候，这个时候最多3次尝试</li>\n</ol>\n<blockquote>\n<p>两次尝试的这种结果，是阻塞队列为空，tryAcquire会尝试一次，接着走到addWaiter，当前节点就会变为阻塞队列的头结点，此时state为0，然后走acquireQueued，因为state为0所以会进行两次尝试shouldParkAfterFailedAcquire就会返回true了，那么最多就是三次尝试</p>\n</blockquote>\n<ol start=\"2\">\n<li>阻塞队列不为空，或者头结点的下一个节点是null，或者头结点下一个节点的线程和当前线程不相同，这个时候最多3次尝试</li>\n</ol>\n<blockquote>\n<p>头结点的下一个节点和当前线程不是一个线程，假设一直竞争锁失败，那么最终</p>\n</blockquote>"},{"title":"SpringCloud1","description":"","abbrlink":"f320bf21","date":"2021-05-19T16:00:00.000Z","_content":"\n\n文章摘要\n\n\n\n<!-- more -->\n\n\n\nSpringCloudNetFlix\n\n\n\n# 核心问题\n\n\n\n微服务架构核心问题\n\n\n\n1. 服务很多，客户端如何访问\n\n2. 这么多服务，服务之间如何通信\n\n3. 如何治理服务\n\n4. 服务挂了怎么办\n\n\n\n解决方案\n\n\n\nSpring Cloud 生态\n\n\n\n1. Spring Cloud  NetFlix   一站式解决方案！\n\n\n\n- api网关：zuul组件\n\n- 服务调用 Feign--HttpClinet   http通信方式。同步 阻塞\n\n- 服务注册发现 Eureka\n\n- 熔断机制 Hystrix\n\n- 负载均衡 ribbon\n\n\n\n1. Apache Dubbo Zookeeper  半自动，需要整合别人的\n\n\n\n- api：没有，用第三方插件，或者自己实现\n\n- Dubbo\n\n- Zookeeper\n\n- 没有，借助 Hystrix\n\n\n\n1. Spring Cloud Alibaba   最新的 一站式解决方案  更简单\n\n\n\n# 认识Spring Cloud\n\n\n\nspringboot专注于快速、方便的开发单个个体微服务，springCloud关注全局协调的微服务框架\n\n\n\n现在大型网站的架构图\n\n\n\n![image-20210520103022522](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210520103022522.png)\n\n\n\n# Spring Cloud  NetFlix\n\n\n\n## Eureka\n\n\n\n服务注册和服务发现\n\n\n\n必须要进行参数优化，否则速度太慢\n\n\n\nnacos zookeeper rockemq中的nameserver也是这个作用\n\n\n\nconsul\n\n\n\n![image-20210520103056022](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210520103056022.png)\n\n\n\n为什么要搞两级缓存\n\n\n\n目的就是为了避免并发冲突\n\n\n\n### 集群模式\n\n\n\n![image-20210520103108643](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210520103108643.png)\n\n\n\n## Eureka优化\n\n\n\n![image-20210520103206520](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210520103206520.png)\n\n\n\n## Eureka和Zookeeper区别\n\n\n\nCAP理论：\n\n\n\n- C 一致性\n\n- A 可用性\n\n- P 容错性\n\n\n\n由于分区容错P在分布式系统中是必须要保证的，因此，偶问你只能在A和P之间进行权衡\n\n\n\n- Zookeeper保证的是CP\n\n- Eureka保证的是AP\n\n\n\n## Feign\n\n\n\n服务调用\n\n\n\n整合eureka和ribbon\n\n\n\nFeign是面向接口的\n\n\n\n## Ribbon\n\n\n\n负载均衡\n\n\n\n服务第一次被调用的时候，他会初始话一个ribbon组件，初始化这些组件可能会耗费一定时间，所以很容易导致服务超时。开启下面参数，让每个服务启动的时候就直接初始化ribbon相关的组件，避免第一次请求的时候初始化\n\n\n\n![image-20210520103340803](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210520103340803.png)\n\n\n\n## Hystrix\n\n\n\n服务熔断在服务端\n\n\n\n服务降级在客户端\n\n\n\n> 服务熔断\n\n\n\n1. 定义：某个服务超时或者异常，引起熔断   类似于保险丝的作用\n\n2. 一般发生在服务端\n\n\n\n> 服务降级\n\n\n\n1. 定义：从整体网站请求负载考虑，当前某些服务访问量比较大，会暂时关闭一些访问量比较小的服务，将整个网站的资源倾斜在访问量比较大的服务上，等到访问量下来，就重新开启那些服务；此时在客户端上，我们可以准备一个FallbackFactory，返回默认的值，提示用户当前的服务不可用\n\n2. 一般发生在客户端\n\n\n\n## Zuul\n\n\n\n路由网关，用户一进来接触的组件就是路由网关\n\n\n\n![image-20210520103304727](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210520103304727.png)\n\n\n\n主要功能：\n\n\n\n- 路由\n\n- 过滤\n\n\n\nzuul服务最终还是会注册到Eureka中\n\n\n\n# zookeeper\n\n\n\n![image-20210520103250856](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210520103250856.png)\n\n\n\n# 网关\n\n\n\n## 核心功能\n\n\n\n1. 动态路由\n\n2. 灰度发布\n\n3. 授权认证\n\n4. 性能监控\n\n5. 系统日志\n\n6. 数据缓存\n\n7. 限流熔断\n\n\n\nkong zuul ngnix+lua（openresty） 自研网关\n\n\n\n大厂基本上都是基于netty做的自有网关\n\n\n\nzuul：基于java开发，功能比较简单，但是比如灰度发布，限流，动态路由等没有这些功能\n\n\n\nkong：依托于ngnix实现，openresty，lua实现的模块，现成的一些插件，可以直接使用\n\n\n\n## zuul\n\n\n\n一般来讲一台8核16g的zuul每秒抗1000+不成问题","source":"_posts/SpringCloud1.md","raw":"---\ntitle: SpringCloud1\ndescription: ''\ntags:\n  - 无标签\nabbrlink: f320bf21\ndate: 2021-05-20 00:00:00\n---\n\n\n文章摘要\n\n\n\n<!-- more -->\n\n\n\nSpringCloudNetFlix\n\n\n\n# 核心问题\n\n\n\n微服务架构核心问题\n\n\n\n1. 服务很多，客户端如何访问\n\n2. 这么多服务，服务之间如何通信\n\n3. 如何治理服务\n\n4. 服务挂了怎么办\n\n\n\n解决方案\n\n\n\nSpring Cloud 生态\n\n\n\n1. Spring Cloud  NetFlix   一站式解决方案！\n\n\n\n- api网关：zuul组件\n\n- 服务调用 Feign--HttpClinet   http通信方式。同步 阻塞\n\n- 服务注册发现 Eureka\n\n- 熔断机制 Hystrix\n\n- 负载均衡 ribbon\n\n\n\n1. Apache Dubbo Zookeeper  半自动，需要整合别人的\n\n\n\n- api：没有，用第三方插件，或者自己实现\n\n- Dubbo\n\n- Zookeeper\n\n- 没有，借助 Hystrix\n\n\n\n1. Spring Cloud Alibaba   最新的 一站式解决方案  更简单\n\n\n\n# 认识Spring Cloud\n\n\n\nspringboot专注于快速、方便的开发单个个体微服务，springCloud关注全局协调的微服务框架\n\n\n\n现在大型网站的架构图\n\n\n\n![image-20210520103022522](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210520103022522.png)\n\n\n\n# Spring Cloud  NetFlix\n\n\n\n## Eureka\n\n\n\n服务注册和服务发现\n\n\n\n必须要进行参数优化，否则速度太慢\n\n\n\nnacos zookeeper rockemq中的nameserver也是这个作用\n\n\n\nconsul\n\n\n\n![image-20210520103056022](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210520103056022.png)\n\n\n\n为什么要搞两级缓存\n\n\n\n目的就是为了避免并发冲突\n\n\n\n### 集群模式\n\n\n\n![image-20210520103108643](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210520103108643.png)\n\n\n\n## Eureka优化\n\n\n\n![image-20210520103206520](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210520103206520.png)\n\n\n\n## Eureka和Zookeeper区别\n\n\n\nCAP理论：\n\n\n\n- C 一致性\n\n- A 可用性\n\n- P 容错性\n\n\n\n由于分区容错P在分布式系统中是必须要保证的，因此，偶问你只能在A和P之间进行权衡\n\n\n\n- Zookeeper保证的是CP\n\n- Eureka保证的是AP\n\n\n\n## Feign\n\n\n\n服务调用\n\n\n\n整合eureka和ribbon\n\n\n\nFeign是面向接口的\n\n\n\n## Ribbon\n\n\n\n负载均衡\n\n\n\n服务第一次被调用的时候，他会初始话一个ribbon组件，初始化这些组件可能会耗费一定时间，所以很容易导致服务超时。开启下面参数，让每个服务启动的时候就直接初始化ribbon相关的组件，避免第一次请求的时候初始化\n\n\n\n![image-20210520103340803](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210520103340803.png)\n\n\n\n## Hystrix\n\n\n\n服务熔断在服务端\n\n\n\n服务降级在客户端\n\n\n\n> 服务熔断\n\n\n\n1. 定义：某个服务超时或者异常，引起熔断   类似于保险丝的作用\n\n2. 一般发生在服务端\n\n\n\n> 服务降级\n\n\n\n1. 定义：从整体网站请求负载考虑，当前某些服务访问量比较大，会暂时关闭一些访问量比较小的服务，将整个网站的资源倾斜在访问量比较大的服务上，等到访问量下来，就重新开启那些服务；此时在客户端上，我们可以准备一个FallbackFactory，返回默认的值，提示用户当前的服务不可用\n\n2. 一般发生在客户端\n\n\n\n## Zuul\n\n\n\n路由网关，用户一进来接触的组件就是路由网关\n\n\n\n![image-20210520103304727](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210520103304727.png)\n\n\n\n主要功能：\n\n\n\n- 路由\n\n- 过滤\n\n\n\nzuul服务最终还是会注册到Eureka中\n\n\n\n# zookeeper\n\n\n\n![image-20210520103250856](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210520103250856.png)\n\n\n\n# 网关\n\n\n\n## 核心功能\n\n\n\n1. 动态路由\n\n2. 灰度发布\n\n3. 授权认证\n\n4. 性能监控\n\n5. 系统日志\n\n6. 数据缓存\n\n7. 限流熔断\n\n\n\nkong zuul ngnix+lua（openresty） 自研网关\n\n\n\n大厂基本上都是基于netty做的自有网关\n\n\n\nzuul：基于java开发，功能比较简单，但是比如灰度发布，限流，动态路由等没有这些功能\n\n\n\nkong：依托于ngnix实现，openresty，lua实现的模块，现成的一些插件，可以直接使用\n\n\n\n## zuul\n\n\n\n一般来讲一台8核16g的zuul每秒抗1000+不成问题","slug":"SpringCloud1","published":1,"updated":"2025-03-02T03:37:34.370Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4f000zn0ukd8ac4i26","content":"<p>文章摘要</p>\n<span id=\"more\"></span>\n\n\n\n<p>SpringCloudNetFlix</p>\n<h1 id=\"核心问题\"><a href=\"#核心问题\" class=\"headerlink\" title=\"核心问题\"></a>核心问题</h1><p>微服务架构核心问题</p>\n<ol>\n<li><p>服务很多，客户端如何访问</p>\n</li>\n<li><p>这么多服务，服务之间如何通信</p>\n</li>\n<li><p>如何治理服务</p>\n</li>\n<li><p>服务挂了怎么办</p>\n</li>\n</ol>\n<p>解决方案</p>\n<p>Spring Cloud 生态</p>\n<ol>\n<li>Spring Cloud  NetFlix   一站式解决方案！</li>\n</ol>\n<ul>\n<li><p>api网关：zuul组件</p>\n</li>\n<li><p>服务调用 Feign--HttpClinet   http通信方式。同步 阻塞</p>\n</li>\n<li><p>服务注册发现 Eureka</p>\n</li>\n<li><p>熔断机制 Hystrix</p>\n</li>\n<li><p>负载均衡 ribbon</p>\n</li>\n</ul>\n<ol>\n<li>Apache Dubbo Zookeeper  半自动，需要整合别人的</li>\n</ol>\n<ul>\n<li><p>api：没有，用第三方插件，或者自己实现</p>\n</li>\n<li><p>Dubbo</p>\n</li>\n<li><p>Zookeeper</p>\n</li>\n<li><p>没有，借助 Hystrix</p>\n</li>\n</ul>\n<ol>\n<li>Spring Cloud Alibaba   最新的 一站式解决方案  更简单</li>\n</ol>\n<h1 id=\"认识Spring-Cloud\"><a href=\"#认识Spring-Cloud\" class=\"headerlink\" title=\"认识Spring Cloud\"></a>认识Spring Cloud</h1><p>springboot专注于快速、方便的开发单个个体微服务，springCloud关注全局协调的微服务框架</p>\n<p>现在大型网站的架构图</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210520103022522.png\" alt=\"image-20210520103022522\" loading=\"lazy\"></p>\n<h1 id=\"Spring-Cloud-NetFlix\"><a href=\"#Spring-Cloud-NetFlix\" class=\"headerlink\" title=\"Spring Cloud  NetFlix\"></a>Spring Cloud  NetFlix</h1><h2 id=\"Eureka\"><a href=\"#Eureka\" class=\"headerlink\" title=\"Eureka\"></a>Eureka</h2><p>服务注册和服务发现</p>\n<p>必须要进行参数优化，否则速度太慢</p>\n<p>nacos zookeeper rockemq中的nameserver也是这个作用</p>\n<p>consul</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210520103056022.png\" alt=\"image-20210520103056022\" loading=\"lazy\"></p>\n<p>为什么要搞两级缓存</p>\n<p>目的就是为了避免并发冲突</p>\n<h3 id=\"集群模式\"><a href=\"#集群模式\" class=\"headerlink\" title=\"集群模式\"></a>集群模式</h3><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210520103108643.png\" alt=\"image-20210520103108643\" loading=\"lazy\"></p>\n<h2 id=\"Eureka优化\"><a href=\"#Eureka优化\" class=\"headerlink\" title=\"Eureka优化\"></a>Eureka优化</h2><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210520103206520.png\" alt=\"image-20210520103206520\" loading=\"lazy\"></p>\n<h2 id=\"Eureka和Zookeeper区别\"><a href=\"#Eureka和Zookeeper区别\" class=\"headerlink\" title=\"Eureka和Zookeeper区别\"></a>Eureka和Zookeeper区别</h2><p>CAP理论：</p>\n<ul>\n<li><p>C 一致性</p>\n</li>\n<li><p>A 可用性</p>\n</li>\n<li><p>P 容错性</p>\n</li>\n</ul>\n<p>由于分区容错P在分布式系统中是必须要保证的，因此，偶问你只能在A和P之间进行权衡</p>\n<ul>\n<li><p>Zookeeper保证的是CP</p>\n</li>\n<li><p>Eureka保证的是AP</p>\n</li>\n</ul>\n<h2 id=\"Feign\"><a href=\"#Feign\" class=\"headerlink\" title=\"Feign\"></a>Feign</h2><p>服务调用</p>\n<p>整合eureka和ribbon</p>\n<p>Feign是面向接口的</p>\n<h2 id=\"Ribbon\"><a href=\"#Ribbon\" class=\"headerlink\" title=\"Ribbon\"></a>Ribbon</h2><p>负载均衡</p>\n<p>服务第一次被调用的时候，他会初始话一个ribbon组件，初始化这些组件可能会耗费一定时间，所以很容易导致服务超时。开启下面参数，让每个服务启动的时候就直接初始化ribbon相关的组件，避免第一次请求的时候初始化</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210520103340803.png\" alt=\"image-20210520103340803\" loading=\"lazy\"></p>\n<h2 id=\"Hystrix\"><a href=\"#Hystrix\" class=\"headerlink\" title=\"Hystrix\"></a>Hystrix</h2><p>服务熔断在服务端</p>\n<p>服务降级在客户端</p>\n<blockquote>\n<p>服务熔断</p>\n</blockquote>\n<ol>\n<li><p>定义：某个服务超时或者异常，引起熔断   类似于保险丝的作用</p>\n</li>\n<li><p>一般发生在服务端</p>\n</li>\n</ol>\n<blockquote>\n<p>服务降级</p>\n</blockquote>\n<ol>\n<li><p>定义：从整体网站请求负载考虑，当前某些服务访问量比较大，会暂时关闭一些访问量比较小的服务，将整个网站的资源倾斜在访问量比较大的服务上，等到访问量下来，就重新开启那些服务；此时在客户端上，我们可以准备一个FallbackFactory，返回默认的值，提示用户当前的服务不可用</p>\n</li>\n<li><p>一般发生在客户端</p>\n</li>\n</ol>\n<h2 id=\"Zuul\"><a href=\"#Zuul\" class=\"headerlink\" title=\"Zuul\"></a>Zuul</h2><p>路由网关，用户一进来接触的组件就是路由网关</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210520103304727.png\" alt=\"image-20210520103304727\" loading=\"lazy\"></p>\n<p>主要功能：</p>\n<ul>\n<li><p>路由</p>\n</li>\n<li><p>过滤</p>\n</li>\n</ul>\n<p>zuul服务最终还是会注册到Eureka中</p>\n<h1 id=\"zookeeper\"><a href=\"#zookeeper\" class=\"headerlink\" title=\"zookeeper\"></a>zookeeper</h1><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210520103250856.png\" alt=\"image-20210520103250856\" loading=\"lazy\"></p>\n<h1 id=\"网关\"><a href=\"#网关\" class=\"headerlink\" title=\"网关\"></a>网关</h1><h2 id=\"核心功能\"><a href=\"#核心功能\" class=\"headerlink\" title=\"核心功能\"></a>核心功能</h2><ol>\n<li><p>动态路由</p>\n</li>\n<li><p>灰度发布</p>\n</li>\n<li><p>授权认证</p>\n</li>\n<li><p>性能监控</p>\n</li>\n<li><p>系统日志</p>\n</li>\n<li><p>数据缓存</p>\n</li>\n<li><p>限流熔断</p>\n</li>\n</ol>\n<p>kong zuul ngnix+lua（openresty） 自研网关</p>\n<p>大厂基本上都是基于netty做的自有网关</p>\n<p>zuul：基于java开发，功能比较简单，但是比如灰度发布，限流，动态路由等没有这些功能</p>\n<p>kong：依托于ngnix实现，openresty，lua实现的模块，现成的一些插件，可以直接使用</p>\n<h2 id=\"zuul\"><a href=\"#zuul\" class=\"headerlink\" title=\"zuul\"></a>zuul</h2><p>一般来讲一台8核16g的zuul每秒抗1000+不成问题</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"文章摘要\n\nSpringCloudNetFlix\n\n核心问题\n微服务架构核心问题\n\n 1. 服务很多，客户端如何访问\n    \n    \n 2. 这么多服务，服务之间如何通信\n    \n    \n 3. 如何治理服务\n    \n    \n 4. 服务挂了怎么办\n    \n    \n\n解决方案\n\nSpring Cloud 生态\n\n 1. Spring Cloud NetFlix 一站式解决方案！\n\n * api网关：zuul组件\n   \n   \n * 服务调用 Feign--HttpClinet http通信方式。同步 阻塞\n   \n   \n * 服务注册发现 Eureka\n   \n   \n *","more":"<p>SpringCloudNetFlix</p>\n<h1 id=\"核心问题\"><a href=\"#核心问题\" class=\"headerlink\" title=\"核心问题\"></a>核心问题</h1><p>微服务架构核心问题</p>\n<ol>\n<li><p>服务很多，客户端如何访问</p>\n</li>\n<li><p>这么多服务，服务之间如何通信</p>\n</li>\n<li><p>如何治理服务</p>\n</li>\n<li><p>服务挂了怎么办</p>\n</li>\n</ol>\n<p>解决方案</p>\n<p>Spring Cloud 生态</p>\n<ol>\n<li>Spring Cloud  NetFlix   一站式解决方案！</li>\n</ol>\n<ul>\n<li><p>api网关：zuul组件</p>\n</li>\n<li><p>服务调用 Feign--HttpClinet   http通信方式。同步 阻塞</p>\n</li>\n<li><p>服务注册发现 Eureka</p>\n</li>\n<li><p>熔断机制 Hystrix</p>\n</li>\n<li><p>负载均衡 ribbon</p>\n</li>\n</ul>\n<ol>\n<li>Apache Dubbo Zookeeper  半自动，需要整合别人的</li>\n</ol>\n<ul>\n<li><p>api：没有，用第三方插件，或者自己实现</p>\n</li>\n<li><p>Dubbo</p>\n</li>\n<li><p>Zookeeper</p>\n</li>\n<li><p>没有，借助 Hystrix</p>\n</li>\n</ul>\n<ol>\n<li>Spring Cloud Alibaba   最新的 一站式解决方案  更简单</li>\n</ol>\n<h1 id=\"认识Spring-Cloud\"><a href=\"#认识Spring-Cloud\" class=\"headerlink\" title=\"认识Spring Cloud\"></a>认识Spring Cloud</h1><p>springboot专注于快速、方便的开发单个个体微服务，springCloud关注全局协调的微服务框架</p>\n<p>现在大型网站的架构图</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210520103022522.png\" alt=\"image-20210520103022522\" loading=\"lazy\"></p>\n<h1 id=\"Spring-Cloud-NetFlix\"><a href=\"#Spring-Cloud-NetFlix\" class=\"headerlink\" title=\"Spring Cloud  NetFlix\"></a>Spring Cloud  NetFlix</h1><h2 id=\"Eureka\"><a href=\"#Eureka\" class=\"headerlink\" title=\"Eureka\"></a>Eureka</h2><p>服务注册和服务发现</p>\n<p>必须要进行参数优化，否则速度太慢</p>\n<p>nacos zookeeper rockemq中的nameserver也是这个作用</p>\n<p>consul</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210520103056022.png\" alt=\"image-20210520103056022\" loading=\"lazy\"></p>\n<p>为什么要搞两级缓存</p>\n<p>目的就是为了避免并发冲突</p>\n<h3 id=\"集群模式\"><a href=\"#集群模式\" class=\"headerlink\" title=\"集群模式\"></a>集群模式</h3><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210520103108643.png\" alt=\"image-20210520103108643\" loading=\"lazy\"></p>\n<h2 id=\"Eureka优化\"><a href=\"#Eureka优化\" class=\"headerlink\" title=\"Eureka优化\"></a>Eureka优化</h2><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210520103206520.png\" alt=\"image-20210520103206520\" loading=\"lazy\"></p>\n<h2 id=\"Eureka和Zookeeper区别\"><a href=\"#Eureka和Zookeeper区别\" class=\"headerlink\" title=\"Eureka和Zookeeper区别\"></a>Eureka和Zookeeper区别</h2><p>CAP理论：</p>\n<ul>\n<li><p>C 一致性</p>\n</li>\n<li><p>A 可用性</p>\n</li>\n<li><p>P 容错性</p>\n</li>\n</ul>\n<p>由于分区容错P在分布式系统中是必须要保证的，因此，偶问你只能在A和P之间进行权衡</p>\n<ul>\n<li><p>Zookeeper保证的是CP</p>\n</li>\n<li><p>Eureka保证的是AP</p>\n</li>\n</ul>\n<h2 id=\"Feign\"><a href=\"#Feign\" class=\"headerlink\" title=\"Feign\"></a>Feign</h2><p>服务调用</p>\n<p>整合eureka和ribbon</p>\n<p>Feign是面向接口的</p>\n<h2 id=\"Ribbon\"><a href=\"#Ribbon\" class=\"headerlink\" title=\"Ribbon\"></a>Ribbon</h2><p>负载均衡</p>\n<p>服务第一次被调用的时候，他会初始话一个ribbon组件，初始化这些组件可能会耗费一定时间，所以很容易导致服务超时。开启下面参数，让每个服务启动的时候就直接初始化ribbon相关的组件，避免第一次请求的时候初始化</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210520103340803.png\" alt=\"image-20210520103340803\" loading=\"lazy\"></p>\n<h2 id=\"Hystrix\"><a href=\"#Hystrix\" class=\"headerlink\" title=\"Hystrix\"></a>Hystrix</h2><p>服务熔断在服务端</p>\n<p>服务降级在客户端</p>\n<blockquote>\n<p>服务熔断</p>\n</blockquote>\n<ol>\n<li><p>定义：某个服务超时或者异常，引起熔断   类似于保险丝的作用</p>\n</li>\n<li><p>一般发生在服务端</p>\n</li>\n</ol>\n<blockquote>\n<p>服务降级</p>\n</blockquote>\n<ol>\n<li><p>定义：从整体网站请求负载考虑，当前某些服务访问量比较大，会暂时关闭一些访问量比较小的服务，将整个网站的资源倾斜在访问量比较大的服务上，等到访问量下来，就重新开启那些服务；此时在客户端上，我们可以准备一个FallbackFactory，返回默认的值，提示用户当前的服务不可用</p>\n</li>\n<li><p>一般发生在客户端</p>\n</li>\n</ol>\n<h2 id=\"Zuul\"><a href=\"#Zuul\" class=\"headerlink\" title=\"Zuul\"></a>Zuul</h2><p>路由网关，用户一进来接触的组件就是路由网关</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210520103304727.png\" alt=\"image-20210520103304727\" loading=\"lazy\"></p>\n<p>主要功能：</p>\n<ul>\n<li><p>路由</p>\n</li>\n<li><p>过滤</p>\n</li>\n</ul>\n<p>zuul服务最终还是会注册到Eureka中</p>\n<h1 id=\"zookeeper\"><a href=\"#zookeeper\" class=\"headerlink\" title=\"zookeeper\"></a>zookeeper</h1><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210520103250856.png\" alt=\"image-20210520103250856\" loading=\"lazy\"></p>\n<h1 id=\"网关\"><a href=\"#网关\" class=\"headerlink\" title=\"网关\"></a>网关</h1><h2 id=\"核心功能\"><a href=\"#核心功能\" class=\"headerlink\" title=\"核心功能\"></a>核心功能</h2><ol>\n<li><p>动态路由</p>\n</li>\n<li><p>灰度发布</p>\n</li>\n<li><p>授权认证</p>\n</li>\n<li><p>性能监控</p>\n</li>\n<li><p>系统日志</p>\n</li>\n<li><p>数据缓存</p>\n</li>\n<li><p>限流熔断</p>\n</li>\n</ol>\n<p>kong zuul ngnix+lua（openresty） 自研网关</p>\n<p>大厂基本上都是基于netty做的自有网关</p>\n<p>zuul：基于java开发，功能比较简单，但是比如灰度发布，限流，动态路由等没有这些功能</p>\n<p>kong：依托于ngnix实现，openresty，lua实现的模块，现成的一些插件，可以直接使用</p>\n<h2 id=\"zuul\"><a href=\"#zuul\" class=\"headerlink\" title=\"zuul\"></a>zuul</h2><p>一般来讲一台8核16g的zuul每秒抗1000+不成问题</p>"},{"title":"Spring之IOC","description":"","abbrlink":"a3b49bc","date":"2021-05-01T16:00:00.000Z","_content":"\n\n详细介绍Spring的IOC\n\n\n\n <!-- more -->\n\n\n\n## IOC\n\n\n\nbeans和context两个包是IOC的基础，BeanFactory接口提供了管理bean的机制，而 ApplicationContext是BeanFactory的一个子接口，它增加了AOP的整合，资源国际化，事件发布，以及应用层的context，比如WebApplicationContext。\n\n\n\n简单点的说，BeanFactory提供了配置框架和基本功能，ApplicationContext增加了企业开发需要的特性，Spring的IOC容器一般也就是指ApplicationContext。\n\n\n\n### Bean\n\n\n\nbean的标识符必须唯一，一般情况下只有一个标识符，但可以有多个名称\n\n\n\n在xml配置中，id, name 都是指的标识符，bean可以定义多个名称，在name属性中指定(逗号，分号或者空格分隔多个别名)\n\n\n\n> 如果一个bean没有定义ID，则将会以它的simple name作为名字(首字母小写，如果多个大写字母开头，则保持原样)\n\n\n\n```xml\n\n<alias name=\"fromName\" alias=\"toName\"/>\n\n```\n\n\n\nsdlkfj \n\n\n\n\n\n\n\n\n\n\n\n### 容器的启动流程\n\n\n\n```java\n\n@Override\n\npublic void refresh() throws BeansException, IllegalStateException {\n\n   synchronized (this.startupShutdownMonitor) {\n\n      // Prepare this context for refreshing.\n\n      prepareRefresh();\n\n\n\n      // Tell the subclass to refresh the internal bean factory.\n\n      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();\n\n\n\n      // Prepare the bean factory for use in this context.\n\n      prepareBeanFactory(beanFactory);\n\n\n\n      try {\n\n         // Allows post-processing of the bean factory in context subclasses.\n\n         postProcessBeanFactory(beanFactory);\n\n\n\n         // Invoke factory processors registered as beans in the context.\n\n         invokeBeanFactoryPostProcessors(beanFactory);\n\n\n\n         // Register bean processors that intercept bean creation.\n\n         registerBeanPostProcessors(beanFactory);\n\n\n\n         // Initialize message source for this context.\n\n         initMessageSource();\n\n\n\n         // Initialize event multicaster for this context.\n\n         initApplicationEventMulticaster();\n\n\n\n         // Initialize other special beans in specific context subclasses.\n\n         onRefresh();\n\n\n\n         // Check for listener beans and register them.\n\n         registerListeners();\n\n\n\n         // Instantiate all remaining (non-lazy-init) singletons.\n\n         finishBeanFactoryInitialization(beanFactory);\n\n\n\n         // Last step: publish corresponding event.\n\n         finishRefresh();\n\n      }\n\n\n\n      catch (BeansException ex) {\n\n         if (logger.isWarnEnabled()) {\n\n            logger.warn(\"Exception encountered during context initialization - \" +\n\n                  \"cancelling refresh attempt: \" + ex);\n\n         }\n\n\n\n         // Destroy already created singletons to avoid dangling resources.\n\n         destroyBeans();\n\n\n\n         // Reset 'active' flag.\n\n         cancelRefresh(ex);\n\n\n\n         // Propagate exception to caller.\n\n         throw ex;\n\n      }\n\n\n\n      finally {\n\n         // Reset common introspection caches in Spring's core, since we\n\n         // might not ever need metadata for singleton beans anymore...\n\n         resetCommonCaches();\n\n      }\n\n   }\n\n}\n\n```\n\n\n\n### 加载过程\n\n\n\n加载过程分为三个步骤\n\n\n\n1. 资源定位\n\n2. 解析DefaultBeanDefinitionDocumentReader\n\n3. 注册\n\n\n\n##### 资源定位\n\n\n\n![image-20210503072417867](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210503072417867.png)\n\n\n\n就如上图所示，一直是在调用父类的方法，直到ResourceLoader，这个类中有个getResource方法，可以将外部的资源，读取为Resource类。\n\n\n\n##### 解析\n\n\n\n\n\n\n\n##### 注册\n\n\n","source":"_posts/Spring之IOC.md","raw":"---\ntitle: Spring之IOC\ndescription: ''\ntags:\n  - 无标签\nabbrlink: a3b49bc\ndate: 2021-05-02 00:00:00\n---\n\n\n详细介绍Spring的IOC\n\n\n\n <!-- more -->\n\n\n\n## IOC\n\n\n\nbeans和context两个包是IOC的基础，BeanFactory接口提供了管理bean的机制，而 ApplicationContext是BeanFactory的一个子接口，它增加了AOP的整合，资源国际化，事件发布，以及应用层的context，比如WebApplicationContext。\n\n\n\n简单点的说，BeanFactory提供了配置框架和基本功能，ApplicationContext增加了企业开发需要的特性，Spring的IOC容器一般也就是指ApplicationContext。\n\n\n\n### Bean\n\n\n\nbean的标识符必须唯一，一般情况下只有一个标识符，但可以有多个名称\n\n\n\n在xml配置中，id, name 都是指的标识符，bean可以定义多个名称，在name属性中指定(逗号，分号或者空格分隔多个别名)\n\n\n\n> 如果一个bean没有定义ID，则将会以它的simple name作为名字(首字母小写，如果多个大写字母开头，则保持原样)\n\n\n\n```xml\n\n<alias name=\"fromName\" alias=\"toName\"/>\n\n```\n\n\n\nsdlkfj \n\n\n\n\n\n\n\n\n\n\n\n### 容器的启动流程\n\n\n\n```java\n\n@Override\n\npublic void refresh() throws BeansException, IllegalStateException {\n\n   synchronized (this.startupShutdownMonitor) {\n\n      // Prepare this context for refreshing.\n\n      prepareRefresh();\n\n\n\n      // Tell the subclass to refresh the internal bean factory.\n\n      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();\n\n\n\n      // Prepare the bean factory for use in this context.\n\n      prepareBeanFactory(beanFactory);\n\n\n\n      try {\n\n         // Allows post-processing of the bean factory in context subclasses.\n\n         postProcessBeanFactory(beanFactory);\n\n\n\n         // Invoke factory processors registered as beans in the context.\n\n         invokeBeanFactoryPostProcessors(beanFactory);\n\n\n\n         // Register bean processors that intercept bean creation.\n\n         registerBeanPostProcessors(beanFactory);\n\n\n\n         // Initialize message source for this context.\n\n         initMessageSource();\n\n\n\n         // Initialize event multicaster for this context.\n\n         initApplicationEventMulticaster();\n\n\n\n         // Initialize other special beans in specific context subclasses.\n\n         onRefresh();\n\n\n\n         // Check for listener beans and register them.\n\n         registerListeners();\n\n\n\n         // Instantiate all remaining (non-lazy-init) singletons.\n\n         finishBeanFactoryInitialization(beanFactory);\n\n\n\n         // Last step: publish corresponding event.\n\n         finishRefresh();\n\n      }\n\n\n\n      catch (BeansException ex) {\n\n         if (logger.isWarnEnabled()) {\n\n            logger.warn(\"Exception encountered during context initialization - \" +\n\n                  \"cancelling refresh attempt: \" + ex);\n\n         }\n\n\n\n         // Destroy already created singletons to avoid dangling resources.\n\n         destroyBeans();\n\n\n\n         // Reset 'active' flag.\n\n         cancelRefresh(ex);\n\n\n\n         // Propagate exception to caller.\n\n         throw ex;\n\n      }\n\n\n\n      finally {\n\n         // Reset common introspection caches in Spring's core, since we\n\n         // might not ever need metadata for singleton beans anymore...\n\n         resetCommonCaches();\n\n      }\n\n   }\n\n}\n\n```\n\n\n\n### 加载过程\n\n\n\n加载过程分为三个步骤\n\n\n\n1. 资源定位\n\n2. 解析DefaultBeanDefinitionDocumentReader\n\n3. 注册\n\n\n\n##### 资源定位\n\n\n\n![image-20210503072417867](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210503072417867.png)\n\n\n\n就如上图所示，一直是在调用父类的方法，直到ResourceLoader，这个类中有个getResource方法，可以将外部的资源，读取为Resource类。\n\n\n\n##### 解析\n\n\n\n\n\n\n\n##### 注册\n\n\n","slug":"Spring之IOC","published":1,"updated":"2025-03-02T03:37:34.371Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4f0011n0uk10se84ia","content":"<p>详细介绍Spring的IOC</p>\n <span id=\"more\"></span>\n\n\n\n<h2 id=\"IOC\"><a href=\"#IOC\" class=\"headerlink\" title=\"IOC\"></a>IOC</h2><p>beans和context两个包是IOC的基础，BeanFactory接口提供了管理bean的机制，而 ApplicationContext是BeanFactory的一个子接口，它增加了AOP的整合，资源国际化，事件发布，以及应用层的context，比如WebApplicationContext。</p>\n<p>简单点的说，BeanFactory提供了配置框架和基本功能，ApplicationContext增加了企业开发需要的特性，Spring的IOC容器一般也就是指ApplicationContext。</p>\n<h3 id=\"Bean\"><a href=\"#Bean\" class=\"headerlink\" title=\"Bean\"></a>Bean</h3><p>bean的标识符必须唯一，一般情况下只有一个标识符，但可以有多个名称</p>\n<p>在xml配置中，id, name 都是指的标识符，bean可以定义多个名称，在name属性中指定(逗号，分号或者空格分隔多个别名)</p>\n<blockquote>\n<p>如果一个bean没有定义ID，则将会以它的simple name作为名字(首字母小写，如果多个大写字母开头，则保持原样)</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">alias</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;fromName&quot;</span> <span class=\"attr\">alias</span>=<span class=\"string\">&quot;toName&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>sdlkfj </p>\n<h3 id=\"容器的启动流程\"><a href=\"#容器的启动流程\" class=\"headerlink\" title=\"容器的启动流程\"></a>容器的启动流程</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">refresh</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException, IllegalStateException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.startupShutdownMonitor) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Prepare this context for refreshing.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      prepareRefresh();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"type\">ConfigurableListableBeanFactory</span> <span class=\"variable\">beanFactory</span> <span class=\"operator\">=</span> obtainFreshBeanFactory();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Prepare the bean factory for use in this context.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      prepareBeanFactory(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         postProcessBeanFactory(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Invoke factory processors registered as beans in the context.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Register bean processors that intercept bean creation.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         registerBeanPostProcessors(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Initialize message source for this context.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         initMessageSource();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Initialize event multicaster for this context.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         initApplicationEventMulticaster();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Initialize other special beans in specific context subclasses.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         onRefresh();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Check for listener beans and register them.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         registerListeners();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         finishBeanFactoryInitialization(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Last step: publish corresponding event.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         finishRefresh();</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">catch</span> (BeansException ex) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            logger.warn(<span class=\"string\">&quot;Exception encountered during context initialization - &quot;</span> +</span><br><span class=\"line\"></span><br><span class=\"line\">                  <span class=\"string\">&quot;cancelling refresh attempt: &quot;</span> + ex);</span><br><span class=\"line\"></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         destroyBeans();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Reset &#x27;active&#x27; flag.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         cancelRefresh(ex);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Propagate exception to caller.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Reset common introspection caches in Spring&#x27;s core, since we</span></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// might not ever need metadata for singleton beans anymore...</span></span><br><span class=\"line\"></span><br><span class=\"line\">         resetCommonCaches();</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"加载过程\"><a href=\"#加载过程\" class=\"headerlink\" title=\"加载过程\"></a>加载过程</h3><p>加载过程分为三个步骤</p>\n<ol>\n<li><p>资源定位</p>\n</li>\n<li><p>解析DefaultBeanDefinitionDocumentReader</p>\n</li>\n<li><p>注册</p>\n</li>\n</ol>\n<h5 id=\"资源定位\"><a href=\"#资源定位\" class=\"headerlink\" title=\"资源定位\"></a>资源定位</h5><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210503072417867.png\" alt=\"image-20210503072417867\" loading=\"lazy\"></p>\n<p>就如上图所示，一直是在调用父类的方法，直到ResourceLoader，这个类中有个getResource方法，可以将外部的资源，读取为Resource类。</p>\n<h5 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h5><h5 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h5>","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"详细介绍Spring的IOC\n\nIOC\nbeans和context两个包是IOC的基础，BeanFactory接口提供了管理bean的机制，而 ApplicationContext是BeanFactory的一个子接口，它增加了AOP的整合，资源国际化，事件发布，以及应用层的context，比如WebApplicationContext。\n\n简单点的说，BeanFactory提供了配置框架和基本功能，ApplicationContext增加了企业开发需要的特性，Spring的IOC容器一般也就是指ApplicationContext。\n\nBean\nbean的标识符必须唯一，一般情况下只有一个标识","more":"<h2 id=\"IOC\"><a href=\"#IOC\" class=\"headerlink\" title=\"IOC\"></a>IOC</h2><p>beans和context两个包是IOC的基础，BeanFactory接口提供了管理bean的机制，而 ApplicationContext是BeanFactory的一个子接口，它增加了AOP的整合，资源国际化，事件发布，以及应用层的context，比如WebApplicationContext。</p>\n<p>简单点的说，BeanFactory提供了配置框架和基本功能，ApplicationContext增加了企业开发需要的特性，Spring的IOC容器一般也就是指ApplicationContext。</p>\n<h3 id=\"Bean\"><a href=\"#Bean\" class=\"headerlink\" title=\"Bean\"></a>Bean</h3><p>bean的标识符必须唯一，一般情况下只有一个标识符，但可以有多个名称</p>\n<p>在xml配置中，id, name 都是指的标识符，bean可以定义多个名称，在name属性中指定(逗号，分号或者空格分隔多个别名)</p>\n<blockquote>\n<p>如果一个bean没有定义ID，则将会以它的simple name作为名字(首字母小写，如果多个大写字母开头，则保持原样)</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">alias</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;fromName&quot;</span> <span class=\"attr\">alias</span>=<span class=\"string\">&quot;toName&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>sdlkfj </p>\n<h3 id=\"容器的启动流程\"><a href=\"#容器的启动流程\" class=\"headerlink\" title=\"容器的启动流程\"></a>容器的启动流程</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">refresh</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException, IllegalStateException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.startupShutdownMonitor) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Prepare this context for refreshing.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      prepareRefresh();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"type\">ConfigurableListableBeanFactory</span> <span class=\"variable\">beanFactory</span> <span class=\"operator\">=</span> obtainFreshBeanFactory();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Prepare the bean factory for use in this context.</span></span><br><span class=\"line\"></span><br><span class=\"line\">      prepareBeanFactory(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         postProcessBeanFactory(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Invoke factory processors registered as beans in the context.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Register bean processors that intercept bean creation.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         registerBeanPostProcessors(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Initialize message source for this context.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         initMessageSource();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Initialize event multicaster for this context.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         initApplicationEventMulticaster();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Initialize other special beans in specific context subclasses.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         onRefresh();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Check for listener beans and register them.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         registerListeners();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         finishBeanFactoryInitialization(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Last step: publish corresponding event.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         finishRefresh();</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">catch</span> (BeansException ex) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            logger.warn(<span class=\"string\">&quot;Exception encountered during context initialization - &quot;</span> +</span><br><span class=\"line\"></span><br><span class=\"line\">                  <span class=\"string\">&quot;cancelling refresh attempt: &quot;</span> + ex);</span><br><span class=\"line\"></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         destroyBeans();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Reset &#x27;active&#x27; flag.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         cancelRefresh(ex);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Propagate exception to caller.</span></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Reset common introspection caches in Spring&#x27;s core, since we</span></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// might not ever need metadata for singleton beans anymore...</span></span><br><span class=\"line\"></span><br><span class=\"line\">         resetCommonCaches();</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"加载过程\"><a href=\"#加载过程\" class=\"headerlink\" title=\"加载过程\"></a>加载过程</h3><p>加载过程分为三个步骤</p>\n<ol>\n<li><p>资源定位</p>\n</li>\n<li><p>解析DefaultBeanDefinitionDocumentReader</p>\n</li>\n<li><p>注册</p>\n</li>\n</ol>\n<h5 id=\"资源定位\"><a href=\"#资源定位\" class=\"headerlink\" title=\"资源定位\"></a>资源定位</h5><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210503072417867.png\" alt=\"image-20210503072417867\" loading=\"lazy\"></p>\n<p>就如上图所示，一直是在调用父类的方法，直到ResourceLoader，这个类中有个getResource方法，可以将外部的资源，读取为Resource类。</p>\n<h5 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h5><h5 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h5>"},{"title":"Spring循环依赖","description":"","abbrlink":"a5d86a59","date":"2021-05-24T16:00:00.000Z","_content":"\n\n文章摘要\n\n\n\n\n\n\n\n<!-- more -->\n\n\n\n> 参考链接：\n\n>\n\n> - [B站视频讲解](https://www.bilibili.com/video/BV155411c7gg)","source":"_posts/Spring循环依赖.md","raw":"---\ntitle: Spring循环依赖\ndescription: ''\ntags:\n  - 无标签\nabbrlink: a5d86a59\ndate: 2021-05-25 00:00:00\n---\n\n\n文章摘要\n\n\n\n\n\n\n\n<!-- more -->\n\n\n\n> 参考链接：\n\n>\n\n> - [B站视频讲解](https://www.bilibili.com/video/BV155411c7gg)","slug":"Spring循环依赖","published":1,"updated":"2025-03-02T03:37:34.372Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4f0013n0ukgoqy3ck3","content":"<p>文章摘要</p>\n<span id=\"more\"></span>\n\n\n\n<blockquote>\n<p>参考链接：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMTU1NDExYzdnZw==\">B站视频讲解<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</blockquote>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"文章摘要\n\n参考链接：\n\n * B站视频讲解","more":"<blockquote>\n<p>参考链接：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMTU1NDExYzdnZw==\">B站视频讲解<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</blockquote>"},{"title":"Synchronized","description":"","abbrlink":"f5dbca44","date":"2021-03-26T16:00:00.000Z","_content":"\n\n## 三种形式\n\n\n\nsynchronized锁对象有三种形式，普通同步方法，静态同步方法，同步方法块\n\n\n\n- 对于普通同步方法，锁是当前实例对象\n\n- 对于静态同步方法，锁是当前类的Class对象\n\n- 对于同步方法块，锁是Synchonized括号里配置的对象\n\n\n\n<!-- more -->\n\n\n\n## 实现细节\n\n\n\n代码块同步是使用monitorenter和monitorexit指令实现的，而方法同步是使用另外一种方式实现的，细节在JVM规范里并没有详细说明。但是，方法的同步同样可以使用这两个指令来实现\n\n\n\nmonitorenter指令是在编译后插入到同步代码块的开始位置，而monitorexit是插入到方法结束处和异常处，JVM要保证每个monitorenter必须有对应的monitorexit与之配对。任何对象都有一个monitor与之关联，当且一个monitor被持有后，它将处于锁定状态。线程执行到monitorenter指令时，将会尝试获取对象所对应的monitor的所有权，即尝试获得对象的锁\n\n\n\n## Java对象头\n\n\n\nsynchronized用的锁是存在Java对象头里的。如果对象是数组类型，则虚拟机用3个字宽（Word）存储对象头，如果对象是非数组类型，则用2字宽存储对象头。在32位虚拟机中，1字宽等于4字节，即32bit\n\n![](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81e632af757f4ab4a5452989e7c7e9ac~tplv-k3u1fbpfcp-watermark.image)\n\nJava对象头里的Mark Word里默认存储对象的HashCode、分代年龄和锁标记位\n\n\n\n![](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9d3507e7713547f4966f842f7cd57702~tplv-k3u1fbpfcp-watermark.image)\n\n在运行期间，Mark Word里存储的数据会随着锁标志位的变化而变化。MarkWord可能变化为存储以下4种数据\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/07d8c19a7c364647bdae1e25f5ed029a~tplv-k3u1fbpfcp-watermark.image)\n\n在64位虚拟机下，Mark Word是64bit大小的\n\n\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea9cbc890d4e45e3b457cf6501627031~tplv-k3u1fbpfcp-watermark.image)\n\n\n\n## 锁的升级和对比\n\n\n\n目前锁是有四种状态，无锁、偏向锁、轻量级锁、重量级锁，这几个状态会随着竞争情况逐渐升级。锁可以升级但不能降级，意味着偏向锁升级成轻量级锁后不能降级成偏向锁。这种锁升级却不能降级的策略，目的是为了提高获得锁和释放锁的效率\n\n\n\n### 偏向锁\n\n\n\n#### why\n\n\n\n为什么会出现整个锁那，是因为HotSpot 的作者经过研究发现，大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低而引入了偏向锁\n\n\n\n#### what\n\n\n\n当一个线程访问同步块并获取锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程ID，以后该线程在进入和退出同步块时不需要进行CAS操作来加锁和解锁，只需简单地测试一下对象头的Mark Word里是否存储着指向当前线程的偏向锁。如果测试成功，表示线程已经获得了锁。如果测试失败，则需要再测试一下Mark Word中偏向锁的标识是否设置成1（表示当前是偏向锁）：如果没有设置，则使用CAS竞争锁；如果设置了，则尝试使用CAS将对象头的偏向锁指向当前线程\n\n\n\n#### 偏向锁的撤销\n\n\n\n偏向锁使用了一种等到竞争出现才释放锁的机制，所以当其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁。偏向锁的撤销，需要等待全局安全点（在这个时间点上没有正在执行的字节码）。它会首先暂停拥有偏向锁的线程，然后检查持有偏向锁的线程是否活着，如果线程不处于活动状态，则将对象头设置成无锁状态；如果线程仍然活着，拥有偏向锁的栈会被执行，遍历偏向对象的锁记录，栈中的锁记录和对象头的Mark Word要么重新偏向于其他线程，要么恢复到无锁或者标记对象不适合作为偏向锁，最后唤醒暂停的线程\n\n\n\n#### 偏向锁的关闭\n\n\n\n偏向锁在Java 6和Java 7里是默认启用的，但是它在应用程序启动几秒钟之后才激活，如有必要可以使用JVM参数来关闭延迟：-XX:BiasedLockingStartupDelay=0。如果你确定应用程序里所有的锁通常情况下处于竞争状态，可以通过JVM参数关闭偏向锁：-XX:-UseBiasedLocking=false，那么程序默认会进入轻量级锁状态\n\n\n\n### 轻量级锁\n\n\n\n#### what\n\n\n\n线程在执行同步块之前，JVM会先在当前线程的栈桢中创建用于存储锁记录的空间，并将对象头中的Mark Word复制到锁记录中，官方称为Displaced MarkWord。然后线程尝试使用CAS将对象头中的Mark Word替换为指向锁记录的指针。如果成功，当前线程获得锁，如果失败，表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁\n\n\n\n自旋就是不断的去使用CAS将对象头中的Mark Word替换为指向锁记录的指针\n\n\n\n#### 轻量级锁解锁\n\n\n\n轻量级解锁时，会使用原子的CAS操作将Displaced Mark Word替换回到对象头，如果成功，则表示没有竞争发生。如果失败，表示当前锁存在竞争，锁就会膨胀成重量级锁\n\n\n\n因为自旋会消耗CPU，为了避免无用的自旋（比如获得锁的线程被阻塞住了），一旦锁升级成重量级锁，就不会再恢复到轻量级锁状态。当锁处于这个状态下，其他线程试图获取锁时，都会被阻塞住，当持有锁的线程释放锁之后会唤醒这些线程，被唤醒的线程就会进行新一轮的夺锁之争\n\n\n\n### 锁的对比\n\n![](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e11d3b973dcd4160b4f434f5e4d33694~tplv-k3u1fbpfcp-watermark.image)\n\n\n\n> 参考链接：\n\n>\n\n> - [syn]（）","source":"_posts/Synchronized.md","raw":"---\ntitle: Synchronized\ndescription: ''\ntags:\n  - 无标签\nabbrlink: f5dbca44\ndate: 2021-03-27 00:00:00\n---\n\n\n## 三种形式\n\n\n\nsynchronized锁对象有三种形式，普通同步方法，静态同步方法，同步方法块\n\n\n\n- 对于普通同步方法，锁是当前实例对象\n\n- 对于静态同步方法，锁是当前类的Class对象\n\n- 对于同步方法块，锁是Synchonized括号里配置的对象\n\n\n\n<!-- more -->\n\n\n\n## 实现细节\n\n\n\n代码块同步是使用monitorenter和monitorexit指令实现的，而方法同步是使用另外一种方式实现的，细节在JVM规范里并没有详细说明。但是，方法的同步同样可以使用这两个指令来实现\n\n\n\nmonitorenter指令是在编译后插入到同步代码块的开始位置，而monitorexit是插入到方法结束处和异常处，JVM要保证每个monitorenter必须有对应的monitorexit与之配对。任何对象都有一个monitor与之关联，当且一个monitor被持有后，它将处于锁定状态。线程执行到monitorenter指令时，将会尝试获取对象所对应的monitor的所有权，即尝试获得对象的锁\n\n\n\n## Java对象头\n\n\n\nsynchronized用的锁是存在Java对象头里的。如果对象是数组类型，则虚拟机用3个字宽（Word）存储对象头，如果对象是非数组类型，则用2字宽存储对象头。在32位虚拟机中，1字宽等于4字节，即32bit\n\n![](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81e632af757f4ab4a5452989e7c7e9ac~tplv-k3u1fbpfcp-watermark.image)\n\nJava对象头里的Mark Word里默认存储对象的HashCode、分代年龄和锁标记位\n\n\n\n![](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9d3507e7713547f4966f842f7cd57702~tplv-k3u1fbpfcp-watermark.image)\n\n在运行期间，Mark Word里存储的数据会随着锁标志位的变化而变化。MarkWord可能变化为存储以下4种数据\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/07d8c19a7c364647bdae1e25f5ed029a~tplv-k3u1fbpfcp-watermark.image)\n\n在64位虚拟机下，Mark Word是64bit大小的\n\n\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea9cbc890d4e45e3b457cf6501627031~tplv-k3u1fbpfcp-watermark.image)\n\n\n\n## 锁的升级和对比\n\n\n\n目前锁是有四种状态，无锁、偏向锁、轻量级锁、重量级锁，这几个状态会随着竞争情况逐渐升级。锁可以升级但不能降级，意味着偏向锁升级成轻量级锁后不能降级成偏向锁。这种锁升级却不能降级的策略，目的是为了提高获得锁和释放锁的效率\n\n\n\n### 偏向锁\n\n\n\n#### why\n\n\n\n为什么会出现整个锁那，是因为HotSpot 的作者经过研究发现，大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低而引入了偏向锁\n\n\n\n#### what\n\n\n\n当一个线程访问同步块并获取锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程ID，以后该线程在进入和退出同步块时不需要进行CAS操作来加锁和解锁，只需简单地测试一下对象头的Mark Word里是否存储着指向当前线程的偏向锁。如果测试成功，表示线程已经获得了锁。如果测试失败，则需要再测试一下Mark Word中偏向锁的标识是否设置成1（表示当前是偏向锁）：如果没有设置，则使用CAS竞争锁；如果设置了，则尝试使用CAS将对象头的偏向锁指向当前线程\n\n\n\n#### 偏向锁的撤销\n\n\n\n偏向锁使用了一种等到竞争出现才释放锁的机制，所以当其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁。偏向锁的撤销，需要等待全局安全点（在这个时间点上没有正在执行的字节码）。它会首先暂停拥有偏向锁的线程，然后检查持有偏向锁的线程是否活着，如果线程不处于活动状态，则将对象头设置成无锁状态；如果线程仍然活着，拥有偏向锁的栈会被执行，遍历偏向对象的锁记录，栈中的锁记录和对象头的Mark Word要么重新偏向于其他线程，要么恢复到无锁或者标记对象不适合作为偏向锁，最后唤醒暂停的线程\n\n\n\n#### 偏向锁的关闭\n\n\n\n偏向锁在Java 6和Java 7里是默认启用的，但是它在应用程序启动几秒钟之后才激活，如有必要可以使用JVM参数来关闭延迟：-XX:BiasedLockingStartupDelay=0。如果你确定应用程序里所有的锁通常情况下处于竞争状态，可以通过JVM参数关闭偏向锁：-XX:-UseBiasedLocking=false，那么程序默认会进入轻量级锁状态\n\n\n\n### 轻量级锁\n\n\n\n#### what\n\n\n\n线程在执行同步块之前，JVM会先在当前线程的栈桢中创建用于存储锁记录的空间，并将对象头中的Mark Word复制到锁记录中，官方称为Displaced MarkWord。然后线程尝试使用CAS将对象头中的Mark Word替换为指向锁记录的指针。如果成功，当前线程获得锁，如果失败，表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁\n\n\n\n自旋就是不断的去使用CAS将对象头中的Mark Word替换为指向锁记录的指针\n\n\n\n#### 轻量级锁解锁\n\n\n\n轻量级解锁时，会使用原子的CAS操作将Displaced Mark Word替换回到对象头，如果成功，则表示没有竞争发生。如果失败，表示当前锁存在竞争，锁就会膨胀成重量级锁\n\n\n\n因为自旋会消耗CPU，为了避免无用的自旋（比如获得锁的线程被阻塞住了），一旦锁升级成重量级锁，就不会再恢复到轻量级锁状态。当锁处于这个状态下，其他线程试图获取锁时，都会被阻塞住，当持有锁的线程释放锁之后会唤醒这些线程，被唤醒的线程就会进行新一轮的夺锁之争\n\n\n\n### 锁的对比\n\n![](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e11d3b973dcd4160b4f434f5e4d33694~tplv-k3u1fbpfcp-watermark.image)\n\n\n\n> 参考链接：\n\n>\n\n> - [syn]（）","slug":"Synchronized","published":1,"updated":"2025-03-02T03:37:34.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4g0015n0uk5b7lb1ye","content":"<h2 id=\"三种形式\"><a href=\"#三种形式\" class=\"headerlink\" title=\"三种形式\"></a>三种形式</h2><p>synchronized锁对象有三种形式，普通同步方法，静态同步方法，同步方法块</p>\n<ul>\n<li><p>对于普通同步方法，锁是当前实例对象</p>\n</li>\n<li><p>对于静态同步方法，锁是当前类的Class对象</p>\n</li>\n<li><p>对于同步方法块，锁是Synchonized括号里配置的对象</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"实现细节\"><a href=\"#实现细节\" class=\"headerlink\" title=\"实现细节\"></a>实现细节</h2><p>代码块同步是使用monitorenter和monitorexit指令实现的，而方法同步是使用另外一种方式实现的，细节在JVM规范里并没有详细说明。但是，方法的同步同样可以使用这两个指令来实现</p>\n<p>monitorenter指令是在编译后插入到同步代码块的开始位置，而monitorexit是插入到方法结束处和异常处，JVM要保证每个monitorenter必须有对应的monitorexit与之配对。任何对象都有一个monitor与之关联，当且一个monitor被持有后，它将处于锁定状态。线程执行到monitorenter指令时，将会尝试获取对象所对应的monitor的所有权，即尝试获得对象的锁</p>\n<h2 id=\"Java对象头\"><a href=\"#Java对象头\" class=\"headerlink\" title=\"Java对象头\"></a>Java对象头</h2><p>synchronized用的锁是存在Java对象头里的。如果对象是数组类型，则虚拟机用3个字宽（Word）存储对象头，如果对象是非数组类型，则用2字宽存储对象头。在32位虚拟机中，1字宽等于4字节，即32bit</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81e632af757f4ab4a5452989e7c7e9ac~tplv-k3u1fbpfcp-watermark.image\" loading=\"lazy\"></p>\n<p>Java对象头里的Mark Word里默认存储对象的HashCode、分代年龄和锁标记位</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9d3507e7713547f4966f842f7cd57702~tplv-k3u1fbpfcp-watermark.image\" loading=\"lazy\"></p>\n<p>在运行期间，Mark Word里存储的数据会随着锁标志位的变化而变化。MarkWord可能变化为存储以下4种数据</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/07d8c19a7c364647bdae1e25f5ed029a~tplv-k3u1fbpfcp-watermark.image\" loading=\"lazy\"></p>\n<p>在64位虚拟机下，Mark Word是64bit大小的</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea9cbc890d4e45e3b457cf6501627031~tplv-k3u1fbpfcp-watermark.image\" loading=\"lazy\"></p>\n<h2 id=\"锁的升级和对比\"><a href=\"#锁的升级和对比\" class=\"headerlink\" title=\"锁的升级和对比\"></a>锁的升级和对比</h2><p>目前锁是有四种状态，无锁、偏向锁、轻量级锁、重量级锁，这几个状态会随着竞争情况逐渐升级。锁可以升级但不能降级，意味着偏向锁升级成轻量级锁后不能降级成偏向锁。这种锁升级却不能降级的策略，目的是为了提高获得锁和释放锁的效率</p>\n<h3 id=\"偏向锁\"><a href=\"#偏向锁\" class=\"headerlink\" title=\"偏向锁\"></a>偏向锁</h3><h4 id=\"why\"><a href=\"#why\" class=\"headerlink\" title=\"why\"></a>why</h4><p>为什么会出现整个锁那，是因为HotSpot 的作者经过研究发现，大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低而引入了偏向锁</p>\n<h4 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h4><p>当一个线程访问同步块并获取锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程ID，以后该线程在进入和退出同步块时不需要进行CAS操作来加锁和解锁，只需简单地测试一下对象头的Mark Word里是否存储着指向当前线程的偏向锁。如果测试成功，表示线程已经获得了锁。如果测试失败，则需要再测试一下Mark Word中偏向锁的标识是否设置成1（表示当前是偏向锁）：如果没有设置，则使用CAS竞争锁；如果设置了，则尝试使用CAS将对象头的偏向锁指向当前线程</p>\n<h4 id=\"偏向锁的撤销\"><a href=\"#偏向锁的撤销\" class=\"headerlink\" title=\"偏向锁的撤销\"></a>偏向锁的撤销</h4><p>偏向锁使用了一种等到竞争出现才释放锁的机制，所以当其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁。偏向锁的撤销，需要等待全局安全点（在这个时间点上没有正在执行的字节码）。它会首先暂停拥有偏向锁的线程，然后检查持有偏向锁的线程是否活着，如果线程不处于活动状态，则将对象头设置成无锁状态；如果线程仍然活着，拥有偏向锁的栈会被执行，遍历偏向对象的锁记录，栈中的锁记录和对象头的Mark Word要么重新偏向于其他线程，要么恢复到无锁或者标记对象不适合作为偏向锁，最后唤醒暂停的线程</p>\n<h4 id=\"偏向锁的关闭\"><a href=\"#偏向锁的关闭\" class=\"headerlink\" title=\"偏向锁的关闭\"></a>偏向锁的关闭</h4><p>偏向锁在Java 6和Java 7里是默认启用的，但是它在应用程序启动几秒钟之后才激活，如有必要可以使用JVM参数来关闭延迟：-XX:BiasedLockingStartupDelay&#x3D;0。如果你确定应用程序里所有的锁通常情况下处于竞争状态，可以通过JVM参数关闭偏向锁：-XX:-UseBiasedLocking&#x3D;false，那么程序默认会进入轻量级锁状态</p>\n<h3 id=\"轻量级锁\"><a href=\"#轻量级锁\" class=\"headerlink\" title=\"轻量级锁\"></a>轻量级锁</h3><h4 id=\"what-1\"><a href=\"#what-1\" class=\"headerlink\" title=\"what\"></a>what</h4><p>线程在执行同步块之前，JVM会先在当前线程的栈桢中创建用于存储锁记录的空间，并将对象头中的Mark Word复制到锁记录中，官方称为Displaced MarkWord。然后线程尝试使用CAS将对象头中的Mark Word替换为指向锁记录的指针。如果成功，当前线程获得锁，如果失败，表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁</p>\n<p>自旋就是不断的去使用CAS将对象头中的Mark Word替换为指向锁记录的指针</p>\n<h4 id=\"轻量级锁解锁\"><a href=\"#轻量级锁解锁\" class=\"headerlink\" title=\"轻量级锁解锁\"></a>轻量级锁解锁</h4><p>轻量级解锁时，会使用原子的CAS操作将Displaced Mark Word替换回到对象头，如果成功，则表示没有竞争发生。如果失败，表示当前锁存在竞争，锁就会膨胀成重量级锁</p>\n<p>因为自旋会消耗CPU，为了避免无用的自旋（比如获得锁的线程被阻塞住了），一旦锁升级成重量级锁，就不会再恢复到轻量级锁状态。当锁处于这个状态下，其他线程试图获取锁时，都会被阻塞住，当持有锁的线程释放锁之后会唤醒这些线程，被唤醒的线程就会进行新一轮的夺锁之争</p>\n<h3 id=\"锁的对比\"><a href=\"#锁的对比\" class=\"headerlink\" title=\"锁的对比\"></a>锁的对比</h3><p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e11d3b973dcd4160b4f434f5e4d33694~tplv-k3u1fbpfcp-watermark.image\" loading=\"lazy\"></p>\n<blockquote>\n<p>参考链接：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ul>\n<li>[syn]（）</li>\n</ul>\n</blockquote>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"三种形式\nsynchronized锁对象有三种形式，普通同步方法，静态同步方法，同步方法块\n\n * 对于普通同步方法，锁是当前实例对象\n   \n   \n * 对于静态同步方法，锁是当前类的Class对象\n   \n   \n * 对于同步方法块，锁是Synchonized括号里配置的对象\n   \n   \n\n实现细节\n代码块同步是使用monitorenter和monitorexit指令实现的，而方法同步是使用另外一种方式实现的，细节在JVM规范里并没有详细说明。但是，方法的同步同样可以使用这两个指令来实现\n\nmonitorenter指令是在编译后插入到同步代码块的开始位置，而monitorexit是","more":"<h2 id=\"实现细节\"><a href=\"#实现细节\" class=\"headerlink\" title=\"实现细节\"></a>实现细节</h2><p>代码块同步是使用monitorenter和monitorexit指令实现的，而方法同步是使用另外一种方式实现的，细节在JVM规范里并没有详细说明。但是，方法的同步同样可以使用这两个指令来实现</p>\n<p>monitorenter指令是在编译后插入到同步代码块的开始位置，而monitorexit是插入到方法结束处和异常处，JVM要保证每个monitorenter必须有对应的monitorexit与之配对。任何对象都有一个monitor与之关联，当且一个monitor被持有后，它将处于锁定状态。线程执行到monitorenter指令时，将会尝试获取对象所对应的monitor的所有权，即尝试获得对象的锁</p>\n<h2 id=\"Java对象头\"><a href=\"#Java对象头\" class=\"headerlink\" title=\"Java对象头\"></a>Java对象头</h2><p>synchronized用的锁是存在Java对象头里的。如果对象是数组类型，则虚拟机用3个字宽（Word）存储对象头，如果对象是非数组类型，则用2字宽存储对象头。在32位虚拟机中，1字宽等于4字节，即32bit</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81e632af757f4ab4a5452989e7c7e9ac~tplv-k3u1fbpfcp-watermark.image\" loading=\"lazy\"></p>\n<p>Java对象头里的Mark Word里默认存储对象的HashCode、分代年龄和锁标记位</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9d3507e7713547f4966f842f7cd57702~tplv-k3u1fbpfcp-watermark.image\" loading=\"lazy\"></p>\n<p>在运行期间，Mark Word里存储的数据会随着锁标志位的变化而变化。MarkWord可能变化为存储以下4种数据</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/07d8c19a7c364647bdae1e25f5ed029a~tplv-k3u1fbpfcp-watermark.image\" loading=\"lazy\"></p>\n<p>在64位虚拟机下，Mark Word是64bit大小的</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea9cbc890d4e45e3b457cf6501627031~tplv-k3u1fbpfcp-watermark.image\" loading=\"lazy\"></p>\n<h2 id=\"锁的升级和对比\"><a href=\"#锁的升级和对比\" class=\"headerlink\" title=\"锁的升级和对比\"></a>锁的升级和对比</h2><p>目前锁是有四种状态，无锁、偏向锁、轻量级锁、重量级锁，这几个状态会随着竞争情况逐渐升级。锁可以升级但不能降级，意味着偏向锁升级成轻量级锁后不能降级成偏向锁。这种锁升级却不能降级的策略，目的是为了提高获得锁和释放锁的效率</p>\n<h3 id=\"偏向锁\"><a href=\"#偏向锁\" class=\"headerlink\" title=\"偏向锁\"></a>偏向锁</h3><h4 id=\"why\"><a href=\"#why\" class=\"headerlink\" title=\"why\"></a>why</h4><p>为什么会出现整个锁那，是因为HotSpot 的作者经过研究发现，大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低而引入了偏向锁</p>\n<h4 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h4><p>当一个线程访问同步块并获取锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程ID，以后该线程在进入和退出同步块时不需要进行CAS操作来加锁和解锁，只需简单地测试一下对象头的Mark Word里是否存储着指向当前线程的偏向锁。如果测试成功，表示线程已经获得了锁。如果测试失败，则需要再测试一下Mark Word中偏向锁的标识是否设置成1（表示当前是偏向锁）：如果没有设置，则使用CAS竞争锁；如果设置了，则尝试使用CAS将对象头的偏向锁指向当前线程</p>\n<h4 id=\"偏向锁的撤销\"><a href=\"#偏向锁的撤销\" class=\"headerlink\" title=\"偏向锁的撤销\"></a>偏向锁的撤销</h4><p>偏向锁使用了一种等到竞争出现才释放锁的机制，所以当其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁。偏向锁的撤销，需要等待全局安全点（在这个时间点上没有正在执行的字节码）。它会首先暂停拥有偏向锁的线程，然后检查持有偏向锁的线程是否活着，如果线程不处于活动状态，则将对象头设置成无锁状态；如果线程仍然活着，拥有偏向锁的栈会被执行，遍历偏向对象的锁记录，栈中的锁记录和对象头的Mark Word要么重新偏向于其他线程，要么恢复到无锁或者标记对象不适合作为偏向锁，最后唤醒暂停的线程</p>\n<h4 id=\"偏向锁的关闭\"><a href=\"#偏向锁的关闭\" class=\"headerlink\" title=\"偏向锁的关闭\"></a>偏向锁的关闭</h4><p>偏向锁在Java 6和Java 7里是默认启用的，但是它在应用程序启动几秒钟之后才激活，如有必要可以使用JVM参数来关闭延迟：-XX:BiasedLockingStartupDelay&#x3D;0。如果你确定应用程序里所有的锁通常情况下处于竞争状态，可以通过JVM参数关闭偏向锁：-XX:-UseBiasedLocking&#x3D;false，那么程序默认会进入轻量级锁状态</p>\n<h3 id=\"轻量级锁\"><a href=\"#轻量级锁\" class=\"headerlink\" title=\"轻量级锁\"></a>轻量级锁</h3><h4 id=\"what-1\"><a href=\"#what-1\" class=\"headerlink\" title=\"what\"></a>what</h4><p>线程在执行同步块之前，JVM会先在当前线程的栈桢中创建用于存储锁记录的空间，并将对象头中的Mark Word复制到锁记录中，官方称为Displaced MarkWord。然后线程尝试使用CAS将对象头中的Mark Word替换为指向锁记录的指针。如果成功，当前线程获得锁，如果失败，表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁</p>\n<p>自旋就是不断的去使用CAS将对象头中的Mark Word替换为指向锁记录的指针</p>\n<h4 id=\"轻量级锁解锁\"><a href=\"#轻量级锁解锁\" class=\"headerlink\" title=\"轻量级锁解锁\"></a>轻量级锁解锁</h4><p>轻量级解锁时，会使用原子的CAS操作将Displaced Mark Word替换回到对象头，如果成功，则表示没有竞争发生。如果失败，表示当前锁存在竞争，锁就会膨胀成重量级锁</p>\n<p>因为自旋会消耗CPU，为了避免无用的自旋（比如获得锁的线程被阻塞住了），一旦锁升级成重量级锁，就不会再恢复到轻量级锁状态。当锁处于这个状态下，其他线程试图获取锁时，都会被阻塞住，当持有锁的线程释放锁之后会唤醒这些线程，被唤醒的线程就会进行新一轮的夺锁之争</p>\n<h3 id=\"锁的对比\"><a href=\"#锁的对比\" class=\"headerlink\" title=\"锁的对比\"></a>锁的对比</h3><p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e11d3b973dcd4160b4f434f5e4d33694~tplv-k3u1fbpfcp-watermark.image\" loading=\"lazy\"></p>\n<blockquote>\n<p>参考链接：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ul>\n<li>[syn]（）</li>\n</ul>\n</blockquote>"},{"title":"Spring注解","description":"","abbrlink":"51d35c0d","date":"2021-05-09T16:00:00.000Z","_content":"\n\n深入理解spring注解的构成\n\n\n\n<!-- more -->\n\n\n\n## 自定义注解\n\n\n\n```java\n\npublic @interface zhujie {\n\n}\n\n```\n\n\n\n其实最简单注解就是这样的，直接使用@interface后面跟上你想自定义的注解的名字即可\n\n\n\n当然了，有一些本身在注解上常用的注解，下面一一来介绍。\n\n\n\n## 原生注解\n\n\n\n### @target\n\n\n\n```java\n\n@Documented\n\n@Retention(RetentionPolicy.RUNTIME)\n\n@Target(ElementType.ANNOTATION_TYPE)\n\npublic @interface Target {\n\n    /**\n\n     * Returns an array of the kinds of elements an annotation type\n\n     * can be applied to.\n\n     * @return an array of the kinds of elements an annotation type\n\n     * can be applied to\n\n     */\n\n    ElementType[] value();\n\n}\n\n```\n\n\n\nelementpye\n\n\n\n```java\n\npublic enum ElementType {\n\n    /** Class, interface (including annotation type), or enum declaration */\n\n    //类，接口或者枚举类\n\n    TYPE,\n\n\n\n    /** Field declaration (includes enum constants) */\n\n    //变量声明\n\n    FIELD,\n\n\n\n    /** Method declaration */\n\n    //方法声明\n\n    METHOD,\n\n\n\n    /** Formal parameter declaration */\n\n    //格式化声明\n\n    PARAMETER,\n\n\n\n    /** Constructor declaration */\n\n    //构造声明\n\n    CONSTRUCTOR,\n\n\n\n    /** Local variable declaration */\n\n    //本地变量声明\n\n    LOCAL_VARIABLE,\n\n\n\n    /** Annotation type declaration */\n\n    //注解类型声明\n\n    ANNOTATION_TYPE,\n\n\n\n    /** Package declaration */\n\n    //打包\n\n    PACKAGE,\n\n\n\n    /**\n\n     * Type parameter declaration\n\n     *\n\n     * @since 1.8\n\n     */\n\n    TYPE_PARAMETER,\n\n\n\n    /**\n\n     * Use of a type\n\n     *\n\n     * @since 1.8\n\n     */\n\n    //用户类型\n\n    TYPE_USE\n\n}\n\n```\n\n\n\n### @Retention\n\n\n\n```java\n\n@Documented\n\n@Retention(RetentionPolicy.RUNTIME)\n\n@Target(ElementType.ANNOTATION_TYPE)\n\npublic @interface Retention {\n\n    /**\n\n     * Returns the retention policy.\n\n     * @return the retention policy\n\n     */\n\n    RetentionPolicy value();\n\n}\n\n```\n\n\n\n```java\n\npublic enum RetentionPolicy {\n\n    /**\n\n     * Annotations are to be discarded by the compiler.\n\n     * 批注将被编译器丢弃\n\n     */\n\n    SOURCE,\n\n\n\n    /**\n\n     * Annotations are to be recorded in the class file by the compiler\n\n     * but need not be retained by the VM at run time.  This is the default\n\n     * behavior.\n\n     *注释将由编译器记录在类文件中，但VM不必在运行时保留它们。 这是默认行为。\n\n     */\n\n    //\n\n    CLASS,\n\n\n\n    /**\n\n     * Annotations are to be recorded in the class file by the compiler and\n\n     * retained by the VM at run time, so they may be read reflectively.\n\n     *注释将由编译器记录在类文件中，并在运行时由VM保留，因此可以通过反射方式读取它们。\n\n     * @see java.lang.reflect.AnnotatedElement\n\n     */\n\n    RUNTIME\n\n}\n\n```\n\n\n\n### @Documented\n\n\n\n```java\n\n@Documented\n\n@Retention(RetentionPolicy.RUNTIME)\n\n@Target(ElementType.ANNOTATION_TYPE)\n\npublic @interface Documented {\n\n}\n\n```","source":"_posts/Spring注解.md","raw":"---\ntitle: Spring注解\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 51d35c0d\ndate: 2021-05-10 00:00:00\n---\n\n\n深入理解spring注解的构成\n\n\n\n<!-- more -->\n\n\n\n## 自定义注解\n\n\n\n```java\n\npublic @interface zhujie {\n\n}\n\n```\n\n\n\n其实最简单注解就是这样的，直接使用@interface后面跟上你想自定义的注解的名字即可\n\n\n\n当然了，有一些本身在注解上常用的注解，下面一一来介绍。\n\n\n\n## 原生注解\n\n\n\n### @target\n\n\n\n```java\n\n@Documented\n\n@Retention(RetentionPolicy.RUNTIME)\n\n@Target(ElementType.ANNOTATION_TYPE)\n\npublic @interface Target {\n\n    /**\n\n     * Returns an array of the kinds of elements an annotation type\n\n     * can be applied to.\n\n     * @return an array of the kinds of elements an annotation type\n\n     * can be applied to\n\n     */\n\n    ElementType[] value();\n\n}\n\n```\n\n\n\nelementpye\n\n\n\n```java\n\npublic enum ElementType {\n\n    /** Class, interface (including annotation type), or enum declaration */\n\n    //类，接口或者枚举类\n\n    TYPE,\n\n\n\n    /** Field declaration (includes enum constants) */\n\n    //变量声明\n\n    FIELD,\n\n\n\n    /** Method declaration */\n\n    //方法声明\n\n    METHOD,\n\n\n\n    /** Formal parameter declaration */\n\n    //格式化声明\n\n    PARAMETER,\n\n\n\n    /** Constructor declaration */\n\n    //构造声明\n\n    CONSTRUCTOR,\n\n\n\n    /** Local variable declaration */\n\n    //本地变量声明\n\n    LOCAL_VARIABLE,\n\n\n\n    /** Annotation type declaration */\n\n    //注解类型声明\n\n    ANNOTATION_TYPE,\n\n\n\n    /** Package declaration */\n\n    //打包\n\n    PACKAGE,\n\n\n\n    /**\n\n     * Type parameter declaration\n\n     *\n\n     * @since 1.8\n\n     */\n\n    TYPE_PARAMETER,\n\n\n\n    /**\n\n     * Use of a type\n\n     *\n\n     * @since 1.8\n\n     */\n\n    //用户类型\n\n    TYPE_USE\n\n}\n\n```\n\n\n\n### @Retention\n\n\n\n```java\n\n@Documented\n\n@Retention(RetentionPolicy.RUNTIME)\n\n@Target(ElementType.ANNOTATION_TYPE)\n\npublic @interface Retention {\n\n    /**\n\n     * Returns the retention policy.\n\n     * @return the retention policy\n\n     */\n\n    RetentionPolicy value();\n\n}\n\n```\n\n\n\n```java\n\npublic enum RetentionPolicy {\n\n    /**\n\n     * Annotations are to be discarded by the compiler.\n\n     * 批注将被编译器丢弃\n\n     */\n\n    SOURCE,\n\n\n\n    /**\n\n     * Annotations are to be recorded in the class file by the compiler\n\n     * but need not be retained by the VM at run time.  This is the default\n\n     * behavior.\n\n     *注释将由编译器记录在类文件中，但VM不必在运行时保留它们。 这是默认行为。\n\n     */\n\n    //\n\n    CLASS,\n\n\n\n    /**\n\n     * Annotations are to be recorded in the class file by the compiler and\n\n     * retained by the VM at run time, so they may be read reflectively.\n\n     *注释将由编译器记录在类文件中，并在运行时由VM保留，因此可以通过反射方式读取它们。\n\n     * @see java.lang.reflect.AnnotatedElement\n\n     */\n\n    RUNTIME\n\n}\n\n```\n\n\n\n### @Documented\n\n\n\n```java\n\n@Documented\n\n@Retention(RetentionPolicy.RUNTIME)\n\n@Target(ElementType.ANNOTATION_TYPE)\n\npublic @interface Documented {\n\n}\n\n```","slug":"Spring注解","published":1,"updated":"2025-03-02T03:37:34.372Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4g0017n0ukeabldjrl","content":"<p>深入理解spring注解的构成</p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> zhujie &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>其实最简单注解就是这样的，直接使用@interface后面跟上你想自定义的注解的名字即可</p>\n<p>当然了，有一些本身在注解上常用的注解，下面一一来介绍。</p>\n<h2 id=\"原生注解\"><a href=\"#原生注解\" class=\"headerlink\" title=\"原生注解\"></a>原生注解</h2><h3 id=\"target\"><a href=\"#target\" class=\"headerlink\" title=\"@target\"></a>@target</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Target &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * Returns an array of the kinds of elements an annotation type</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * can be applied to.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> an array of the kinds of elements an annotation type</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * can be applied to</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ElementType[] value();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>elementpye</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">ElementType</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Class, interface (including annotation type), or enum declaration */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//类，接口或者枚举类</span></span><br><span class=\"line\"></span><br><span class=\"line\">    TYPE,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Field declaration (includes enum constants) */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//变量声明</span></span><br><span class=\"line\"></span><br><span class=\"line\">    FIELD,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Method declaration */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//方法声明</span></span><br><span class=\"line\"></span><br><span class=\"line\">    METHOD,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Formal parameter declaration */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//格式化声明</span></span><br><span class=\"line\"></span><br><span class=\"line\">    PARAMETER,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Constructor declaration */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造声明</span></span><br><span class=\"line\"></span><br><span class=\"line\">    CONSTRUCTOR,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Local variable declaration */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//本地变量声明</span></span><br><span class=\"line\"></span><br><span class=\"line\">    LOCAL_VARIABLE,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Annotation type declaration */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//注解类型声明</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ANNOTATION_TYPE,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Package declaration */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//打包</span></span><br><span class=\"line\"></span><br><span class=\"line\">    PACKAGE,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * Type parameter declaration</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.8</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    TYPE_PARAMETER,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * Use of a type</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.8</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//用户类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">    TYPE_USE</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Retention\"><a href=\"#Retention\" class=\"headerlink\" title=\"@Retention\"></a>@Retention</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Retention &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the retention policy.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the retention policy</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    RetentionPolicy <span class=\"title function_\">value</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">RetentionPolicy</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * Annotations are to be discarded by the compiler.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * 批注将被编译器丢弃</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    SOURCE,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * Annotations are to be recorded in the class file by the compiler</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * but need not be retained by the VM at run time.  This is the default</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * behavior.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     *注释将由编译器记录在类文件中，但VM不必在运行时保留它们。 这是默认行为。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\">    CLASS,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * Annotations are to be recorded in the class file by the compiler and</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * retained by the VM at run time, so they may be read reflectively.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     *注释将由编译器记录在类文件中，并在运行时由VM保留，因此可以通过反射方式读取它们。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> java.lang.reflect.AnnotatedElement</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    RUNTIME</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Documented\"><a href=\"#Documented\" class=\"headerlink\" title=\"@Documented\"></a>@Documented</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Documented &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"深入理解spring注解的构成\n\n自定义注解\n1\n2\n3\n4\n5\n\n\n\npublic @interface zhujie {\n\n}\n\n\n\n其实最简单注解就是这样的，直接使用@interface后面跟上你想自定义的注解的名字即可\n\n当然了，有一些本身在注解上常用的注解，下面一一来介绍。\n\n原生注解\n@target\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n@Documented\n\n@Retention(RetentionPolicy.RUNTIME)\n\n@Target(ElementType.ANNO","more":"<h2 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> zhujie &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>其实最简单注解就是这样的，直接使用@interface后面跟上你想自定义的注解的名字即可</p>\n<p>当然了，有一些本身在注解上常用的注解，下面一一来介绍。</p>\n<h2 id=\"原生注解\"><a href=\"#原生注解\" class=\"headerlink\" title=\"原生注解\"></a>原生注解</h2><h3 id=\"target\"><a href=\"#target\" class=\"headerlink\" title=\"@target\"></a>@target</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Target &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * Returns an array of the kinds of elements an annotation type</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * can be applied to.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> an array of the kinds of elements an annotation type</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * can be applied to</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ElementType[] value();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>elementpye</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">ElementType</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Class, interface (including annotation type), or enum declaration */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//类，接口或者枚举类</span></span><br><span class=\"line\"></span><br><span class=\"line\">    TYPE,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Field declaration (includes enum constants) */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//变量声明</span></span><br><span class=\"line\"></span><br><span class=\"line\">    FIELD,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Method declaration */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//方法声明</span></span><br><span class=\"line\"></span><br><span class=\"line\">    METHOD,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Formal parameter declaration */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//格式化声明</span></span><br><span class=\"line\"></span><br><span class=\"line\">    PARAMETER,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Constructor declaration */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造声明</span></span><br><span class=\"line\"></span><br><span class=\"line\">    CONSTRUCTOR,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Local variable declaration */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//本地变量声明</span></span><br><span class=\"line\"></span><br><span class=\"line\">    LOCAL_VARIABLE,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Annotation type declaration */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//注解类型声明</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ANNOTATION_TYPE,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Package declaration */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//打包</span></span><br><span class=\"line\"></span><br><span class=\"line\">    PACKAGE,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * Type parameter declaration</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.8</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    TYPE_PARAMETER,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * Use of a type</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.8</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//用户类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">    TYPE_USE</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Retention\"><a href=\"#Retention\" class=\"headerlink\" title=\"@Retention\"></a>@Retention</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Retention &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the retention policy.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the retention policy</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    RetentionPolicy <span class=\"title function_\">value</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">RetentionPolicy</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * Annotations are to be discarded by the compiler.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * 批注将被编译器丢弃</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    SOURCE,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * Annotations are to be recorded in the class file by the compiler</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * but need not be retained by the VM at run time.  This is the default</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * behavior.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     *注释将由编译器记录在类文件中，但VM不必在运行时保留它们。 这是默认行为。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\">    CLASS,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * Annotations are to be recorded in the class file by the compiler and</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * retained by the VM at run time, so they may be read reflectively.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     *注释将由编译器记录在类文件中，并在运行时由VM保留，因此可以通过反射方式读取它们。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> java.lang.reflect.AnnotatedElement</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    RUNTIME</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Documented\"><a href=\"#Documented\" class=\"headerlink\" title=\"@Documented\"></a>@Documented</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Documented &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"ThreadLocal","description":"","abbrlink":"151f44ae","date":"2021-04-27T16:00:00.000Z","_content":"\n\n主要是来介绍threadlocal的使用和注意点\n\n\n\n<!-- more -->\n\n\n\n### 使用场景\n\n\n\n在任何一个类里面想用的时候直接拿出来使用\n\n\n\n### 基础认识\n\n\n\nthreadlocal其实主要是使用threadlocalmap来存储数据的，key是线程id，value是对应的值，value值默认为null\n\n\n\n### 主要方法\n\n\n\n#### set\n\n\n\n```java\n\npublic void set(T value) {\n\n    Thread t = Thread.currentThread();\n\n    ThreadLocalMap map = getMap(t);\n\n    if (map != null)\n\n        map.set(this, value);\n\n    else\n\n        createMap(t, value);\n\n}\n\n```\n\n\n\n#### get\n\n\n\n```java\n\npublic T get() {\n\n    Thread t = Thread.currentThread();\n\n    ThreadLocalMap map = getMap(t);\n\n    if (map != null) {\n\n        ThreadLocalMap.Entry e = map.getEntry(this);\n\n        if (e != null) {\n\n            @SuppressWarnings(\"unchecked\")\n\n            T result = (T)e.value;\n\n            return result;\n\n        }\n\n    }\n\n    return setInitialValue();\n\n}\n\n```\n\n\n\n#### remove\n\n\n\n```java\n\npublic void remove() {\n\n    ThreadLocalMap m = getMap(Thread.currentThread());\n\n    if (m != null)\n\n        m.remove(this);\n\n}\n\n```\n\n\n\n### 总结\n\n\n\n![image-20210428105746751](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210428105746751.png)\n\n\n\nthreadlocal常用的set get remove最终都调用了**expungeStaleEntry**方法，这个方法可以将无用entry(脏数据)回收清理掉\n\n\n\n回收垃圾数据的这方式和redis的过期淘汰策略有点像，过期淘汰策略中的**定期删除**所采用的思想与**cleanSomeSlots**如出一辙：都是选取一批而不是全部的Key来进行删除，以此来权衡内存占用与CPU占用之间的关系\n\n\n\n### 注意事项\n\n\n\n1. 每次使用过threadlocal之后一定要使用remove方法来避免内存泄漏\n\n\n\n> 参考文章链接：\n\n>\n\n> 1. https://www.jianshu.com/p/c2cea2285f67\n\n> 2. https://www.jianshu.com/p/9cc71c6a694a\n\n> 3. https://www.jianshu.com/p/f135c24a4114","source":"_posts/ThreadLocal.md","raw":"---\ntitle: ThreadLocal\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 151f44ae\ndate: 2021-04-28 00:00:00\n---\n\n\n主要是来介绍threadlocal的使用和注意点\n\n\n\n<!-- more -->\n\n\n\n### 使用场景\n\n\n\n在任何一个类里面想用的时候直接拿出来使用\n\n\n\n### 基础认识\n\n\n\nthreadlocal其实主要是使用threadlocalmap来存储数据的，key是线程id，value是对应的值，value值默认为null\n\n\n\n### 主要方法\n\n\n\n#### set\n\n\n\n```java\n\npublic void set(T value) {\n\n    Thread t = Thread.currentThread();\n\n    ThreadLocalMap map = getMap(t);\n\n    if (map != null)\n\n        map.set(this, value);\n\n    else\n\n        createMap(t, value);\n\n}\n\n```\n\n\n\n#### get\n\n\n\n```java\n\npublic T get() {\n\n    Thread t = Thread.currentThread();\n\n    ThreadLocalMap map = getMap(t);\n\n    if (map != null) {\n\n        ThreadLocalMap.Entry e = map.getEntry(this);\n\n        if (e != null) {\n\n            @SuppressWarnings(\"unchecked\")\n\n            T result = (T)e.value;\n\n            return result;\n\n        }\n\n    }\n\n    return setInitialValue();\n\n}\n\n```\n\n\n\n#### remove\n\n\n\n```java\n\npublic void remove() {\n\n    ThreadLocalMap m = getMap(Thread.currentThread());\n\n    if (m != null)\n\n        m.remove(this);\n\n}\n\n```\n\n\n\n### 总结\n\n\n\n![image-20210428105746751](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210428105746751.png)\n\n\n\nthreadlocal常用的set get remove最终都调用了**expungeStaleEntry**方法，这个方法可以将无用entry(脏数据)回收清理掉\n\n\n\n回收垃圾数据的这方式和redis的过期淘汰策略有点像，过期淘汰策略中的**定期删除**所采用的思想与**cleanSomeSlots**如出一辙：都是选取一批而不是全部的Key来进行删除，以此来权衡内存占用与CPU占用之间的关系\n\n\n\n### 注意事项\n\n\n\n1. 每次使用过threadlocal之后一定要使用remove方法来避免内存泄漏\n\n\n\n> 参考文章链接：\n\n>\n\n> 1. https://www.jianshu.com/p/c2cea2285f67\n\n> 2. https://www.jianshu.com/p/9cc71c6a694a\n\n> 3. https://www.jianshu.com/p/f135c24a4114","slug":"ThreadLocal","published":1,"updated":"2025-03-02T03:37:34.374Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4g0019n0uk84ti6pte","content":"<p>主要是来介绍threadlocal的使用和注意点</p>\n<span id=\"more\"></span>\n\n\n\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>在任何一个类里面想用的时候直接拿出来使用</p>\n<h3 id=\"基础认识\"><a href=\"#基础认识\" class=\"headerlink\" title=\"基础认识\"></a>基础认识</h3><p>threadlocal其实主要是使用threadlocalmap来存储数据的，key是线程id，value是对应的值，value值默认为null</p>\n<h3 id=\"主要方法\"><a href=\"#主要方法\" class=\"headerlink\" title=\"主要方法\"></a>主要方法</h3><h4 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">set</span><span class=\"params\">(T value)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">ThreadLocalMap</span> <span class=\"variable\">map</span> <span class=\"operator\">=</span> getMap(t);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (map != <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        map.set(<span class=\"built_in\">this</span>, value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\"></span><br><span class=\"line\">        createMap(t, value);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get\"></a>get</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> T <span class=\"title function_\">get</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">ThreadLocalMap</span> <span class=\"variable\">map</span> <span class=\"operator\">=</span> getMap(t);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (map != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ThreadLocalMap.<span class=\"type\">Entry</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> map.getEntry(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">T</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> (T)e.value;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> setInitialValue();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"remove\"><a href=\"#remove\" class=\"headerlink\" title=\"remove\"></a>remove</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">remove</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">ThreadLocalMap</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> getMap(Thread.currentThread());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m != <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        m.remove(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210428105746751.png\" alt=\"image-20210428105746751\" loading=\"lazy\"></p>\n<p>threadlocal常用的set get remove最终都调用了<strong>expungeStaleEntry</strong>方法，这个方法可以将无用entry(脏数据)回收清理掉</p>\n<p>回收垃圾数据的这方式和redis的过期淘汰策略有点像，过期淘汰策略中的<strong>定期删除</strong>所采用的思想与<strong>cleanSomeSlots</strong>如出一辙：都是选取一批而不是全部的Key来进行删除，以此来权衡内存占用与CPU占用之间的关系</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li>每次使用过threadlocal之后一定要使用remove方法来避免内存泄漏</li>\n</ol>\n<blockquote>\n<p>参考文章链接：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9jMmNlYTIyODVmNjc=\">https://www.jianshu.com/p/c2cea2285f67<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC85Y2M3MWM2YTY5NGE=\">https://www.jianshu.com/p/9cc71c6a694a<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"3\">\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9mMTM1YzI0YTQxMTQ=\">https://www.jianshu.com/p/f135c24a4114<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ol>\n</blockquote>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"主要是来介绍threadlocal的使用和注意点\n\n使用场景\n在任何一个类里面想用的时候直接拿出来使用\n\n基础认识\nthreadlocal其实主要是使用threadlocalmap来存储数据的，key是线程id，value是对应的值，value值默认为null\n\n主要方法\nset\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\npublic void set(T value) {\n\n    Thread t = Thread.currentThread();\n\n    ThreadLocalMap map = getMap(t);\n\n    if (m","more":"<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>在任何一个类里面想用的时候直接拿出来使用</p>\n<h3 id=\"基础认识\"><a href=\"#基础认识\" class=\"headerlink\" title=\"基础认识\"></a>基础认识</h3><p>threadlocal其实主要是使用threadlocalmap来存储数据的，key是线程id，value是对应的值，value值默认为null</p>\n<h3 id=\"主要方法\"><a href=\"#主要方法\" class=\"headerlink\" title=\"主要方法\"></a>主要方法</h3><h4 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">set</span><span class=\"params\">(T value)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">ThreadLocalMap</span> <span class=\"variable\">map</span> <span class=\"operator\">=</span> getMap(t);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (map != <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        map.set(<span class=\"built_in\">this</span>, value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\"></span><br><span class=\"line\">        createMap(t, value);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get\"></a>get</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> T <span class=\"title function_\">get</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">ThreadLocalMap</span> <span class=\"variable\">map</span> <span class=\"operator\">=</span> getMap(t);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (map != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ThreadLocalMap.<span class=\"type\">Entry</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> map.getEntry(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">T</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> (T)e.value;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> setInitialValue();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"remove\"><a href=\"#remove\" class=\"headerlink\" title=\"remove\"></a>remove</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">remove</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">ThreadLocalMap</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> getMap(Thread.currentThread());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m != <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        m.remove(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210428105746751.png\" alt=\"image-20210428105746751\" loading=\"lazy\"></p>\n<p>threadlocal常用的set get remove最终都调用了<strong>expungeStaleEntry</strong>方法，这个方法可以将无用entry(脏数据)回收清理掉</p>\n<p>回收垃圾数据的这方式和redis的过期淘汰策略有点像，过期淘汰策略中的<strong>定期删除</strong>所采用的思想与<strong>cleanSomeSlots</strong>如出一辙：都是选取一批而不是全部的Key来进行删除，以此来权衡内存占用与CPU占用之间的关系</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li>每次使用过threadlocal之后一定要使用remove方法来避免内存泄漏</li>\n</ol>\n<blockquote>\n<p>参考文章链接：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9jMmNlYTIyODVmNjc=\">https://www.jianshu.com/p/c2cea2285f67<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC85Y2M3MWM2YTY5NGE=\">https://www.jianshu.com/p/9cc71c6a694a<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"3\">\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9mMTM1YzI0YTQxMTQ=\">https://www.jianshu.com/p/f135c24a4114<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ol>\n</blockquote>"},{"title":"ThreadPoolExecutor","description":"","abbrlink":"9545bc72","date":"2021-05-21T16:00:00.000Z","_content":"\n\n从源码层面来详细了解\n\n\n\n<!-- more -->\n\n\n\n## why\n\n\n\n为什么要使用线程池？\n\n\n\n线程过多会带来额外的开销，其中包括创建销毁线程的开销、调度线程的开销等等，同时也降低了计算机的整体性能。线程池维护多个线程，等待监督管理者分配可并发执行的任务。这种做法，一方面避免了处理任务时创建销毁线程开销的代价，另一方面避免了线程数量膨胀导致的过分调度问题，保证了对内核的充分利用。\n\n\n\n## what\n\n\n\n```java\n\n//ctl就是把线程的运行状态和工作线程数进行统一管理的\n\n//AtomicInteger这个类可以通过CAS达到无锁并发，效率比较高,这个变量有双重身份，它的高三位表示线程池的状态，低29位表示线程池中现有的线程数，这也是Doug Lea一个天才的设计，用最少的变量来减少锁竞争，提高并发效率。\n\nprivate final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));\n\n///表示线程池线程数的bit数\n\nprivate static final int COUNT_BITS = Integer.SIZE - 3;\n\n//最大的线程数量，数量是完全够用了\n\nprivate static final int CAPACITY   = (1 << COUNT_BITS) - 1;\n\n\n\n// runState is stored in the high-order bits\n\nprivate static final int RUNNING    = -1 << COUNT_BITS;\n\nprivate static final int SHUTDOWN   =  0 << COUNT_BITS;\n\nprivate static final int STOP       =  1 << COUNT_BITS;\n\nprivate static final int TIDYING    =  2 << COUNT_BITS;\n\nprivate static final int TERMINATED =  3 << COUNT_BITS;\n\n\n\n// Packing and unpacking ctl\n\n//获取线程池的状态\n\nprivate static int runStateOf(int c)     { return c & ~CAPACITY; }\n\n//获取线程的数量\n\nprivate static int workerCountOf(int c)  { return c & CAPACITY; }\n\nprivate static int ctlOf(int rs, int wc) { return rs | wc; }\n\n    /*\n\n     * Bit field accessors that don't require unpacking ctl.\n\n     * These depend on the bit layout and on workerCount being never negative.\n\n     */\n\n\n\n    private static boolean runStateLessThan(int c, int s) {\n\n        return c < s;\n\n    }\n\n\n\n    private static boolean runStateAtLeast(int c, int s) {\n\n        return c >= s;\n\n    }\n\n\n\n    private static boolean isRunning(int c) {\n\n        return c < SHUTDOWN;\n\n    }\n\n```\n\n\n\n### 状态\n\n\n\n- RUNNING, 运行状态，值也是最小的，刚创建的线程池就是此状态，能接受新提交的任务，并且也能处理阻塞队列中的任务\n\n- SHUTDOWN，关闭状态，不再接受新提交的任务，但却可以继续处理阻塞队列中已保存的任务。在线程池处于 RUNNING 状态时，调用 shutdown()方法会使线程池进入到该状态。（finalize() 方法在执行过程中也会调用shutdown()方法进入该状态）\n\n- STOP，不能接受新任务，也不处理队列中的任务，会中断正在处理任务的线程。在线程池处于 RUNNING 或 SHUTDOWN 状态时，调用 shutdownNow() 方法会使线程池进入到该状态；\n\n- TIDYING，如果所有的任务都已终止了，workerCount (有效线程数) 为0，线程池进入该状态后会调用 terminated() 方法进入TERMINATED 状态。\n\n- TERMINATED，在terminated() 方法执行完后进入该状态，默认terminated()方法中什么也没有做。\n\n\n\n![image-20210523080302512](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210523080302512.png)\n\n\n\n### 构造方法\n\n\n\n```java\n\npublic ThreadPoolExecutor(int corePoolSize,\n\n                          int maximumPoolSize,\n\n                          long keepAliveTime,\n\n                          TimeUnit unit,\n\n                          BlockingQueue<Runnable> workQueue) {\n\n    this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,\n\n         Executors.defaultThreadFactory(), defaultHandler);\n\n}\n\n```\n\n\n\n- **corePoolSize**：核心线程数量，当有新任务在execute()方法提交时，会执行以下判断：\n\n\n\n  1. 如果运行的线程少于 corePoolSize，则创建新线程来处理任务，即使线程池中的其他线程是空闲的；\n\n  2. 如果线程池中的线程数量大于等于 corePoolSize 且小于 maximumPoolSize，则只有当workQueue满时才创建新的线程去处理任务；\n\n  3. 如果设置的corePoolSize 和 maximumPoolSize相同，则创建的线程池的大小是固定的，这时如果有新任务提交，若workQueue未满，则将请求放入workQueue中，等待有空闲的线程去从workQueue中取任务并处理；\n\n  4. 如果运行的线程数量大于等于maximumPoolSize，这时如果workQueue已经满了，则通过handler所指定的策略来处理任务；\n\n\n\n  所以，任务提交时，判断的顺序为 corePoolSize –> workQueue –> maximumPoolSize。\n\n\n\n- **maximumPoolSize**：最大线程数量；\n\n\n\n- **workQueue**：等待队列，当任务提交时，如果线程池中的线程数量大于等于corePoolSize的时候，把该任务封装成一个Worker对象放入等待队列；\n\n\n\n- workQueue\n\n\n\n  ：保存等待执行的任务的阻塞队列，当提交一个新的任务到线程池以后, 线程池会根据当前线程池中正在运行着的线程的数量来决定对该任务的处理方式，主要有以下几种处理方式:\n\n\n\n  1. **直接切换**：这种方式常用的队列是SynchronousQueue，但现在还没有研究过该队列，这里暂时还没法介绍；\n\n\n\n  2. **使用无界队列**：一般使用基于链表的阻塞队列LinkedBlockingQueue。如果使用这种方式，那么线程池中能够创建的最大线程数就是corePoolSize，而maximumPoolSize就不会起作用了（后面也会说到）。当线程池中所有的核心线程都是RUNNING状态时，这时一个新的任务提交就会放入等待队列中。\n\n\n\n  3. 使用有界队列\n\n\n\n     ：一般使用ArrayBlockingQueue。使用该方式可以将线程池的最大线程数量限制为maximumPoolSize，这样能够降低资源的消耗，但同时这种方式也使得线程池对线程的调度变得更困难，因为线程池和队列的容量都是有限的值，所以要想使线程池处理任务的吞吐率达到一个相对合理的范围，又想使线程调度相对简单，并且还要尽可能的降低线程池对资源的消耗，就需要合理的设置这两个数量。\n\n\n\n     - 如果要想降低系统资源的消耗（包括CPU的使用率，操作系统资源的消耗，上下文环境切换的开销等）, 可以设置较大的队列容量和较小的线程池容量, 但这样也会降低线程处理任务的吞吐量。\n\n     - 如果提交的任务经常发生阻塞，那么可以考虑通过调用 setMaximumPoolSize() 方法来重新设定线程池的容量。\n\n     - 如果队列的容量设置的较小，通常需要将线程池的容量设置大一点，这样CPU的使用率会相对的高一些。但如果线程池的容量设置的过大，则在提交的任务数量太多的情况下，并发量会增加，那么线程之间的调度就是一个要考虑的问题，因为这样反而有可能降低处理任务的吞吐量。\n\n\n\n- **keepAliveTime**：线程池维护线程所允许的空闲时间。当线程池中的线程数量大于corePoolSize的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了keepAliveTime；\n\n\n\n- **threadFactory**：它是ThreadFactory类型的变量，用来创建新线程。默认使用Executors.defaultThreadFactory() 来创建线程。使用默认的ThreadFactory来创建线程时，会使新创建的线程具有相同的NORM_PRIORITY优先级并且是非守护线程，同时也设置了线程的名称。\n\n\n\n- handler\n\n\n\n  ：它是RejectedExecutionHandler类型的变量，表示线程池的饱和策略。如果阻塞队列满了并且没有空闲的线程，这时如果继续提交任务，就需要采取一种策略处理该任务。线程池提供了4种策略：\n\n\n\n  1. AbortPolicy：直接抛出异常，这是默认策略；\n\n  2. CallerRunsPolicy：用调用者所在的线程来执行任务；\n\n  3. DiscardOldestPolicy：丢弃阻塞队列中靠最前的任务，并执行当前任务；\n\n  4. DiscardPolicy：直接丢弃任务；\n\n\n\n```java\n\n//上面的this调用的就是这个方法，这个方法中会进行一些异常情况的判断\n\npublic ThreadPoolExecutor(int corePoolSize,\n\n                          int maximumPoolSize,\n\n                          long keepAliveTime,\n\n                          TimeUnit unit,\n\n                          BlockingQueue<Runnable> workQueue,\n\n                          ThreadFactory threadFactory,\n\n                          RejectedExecutionHandler handler) {\n\n    if (corePoolSize < 0 ||\n\n        maximumPoolSize <= 0 ||\n\n        maximumPoolSize < corePoolSize ||\n\n        keepAliveTime < 0)\n\n        throw new IllegalArgumentException();\n\n    if (workQueue == null || threadFactory == null || handler == null)\n\n        throw new NullPointerException();\n\n    this.acc = System.getSecurityManager() == null ?\n\n            null :\n\n            AccessController.getContext();\n\n    this.corePoolSize = corePoolSize;\n\n    this.maximumPoolSize = maximumPoolSize;\n\n    this.workQueue = workQueue;\n\n    this.keepAliveTime = unit.toNanos(keepAliveTime);\n\n    this.threadFactory = threadFactory;\n\n    this.handler = handler;\n\n}\n\n```\n\n\n\n### execute方法\n\n\n\n```java\n\npublic void execute(Runnable command) {\n\n    if (command == null)\n\n        throw new NullPointerException();\n\n    //ctl的低29位表示线程数，高三位表示线程的状态\n\n    int c = ctl.get();\n\n    //如果正在工作的线程数小于核心线程数，就需要增加一个线程\n\n    if (workerCountOf(c) < corePoolSize) {\n\n        if (addWorker(command, true))\n\n            return;\n\n        //如果增加线程失败，就会重新获取ctl\n\n        c = ctl.get();\n\n    }\n\n    \n\n    if (isRunning(c) && workQueue.offer(command)) {\n\n        int recheck = ctl.get();\n\n        if (! isRunning(recheck) && remove(command))\n\n            reject(command);\n\n        else if (workerCountOf(recheck) == 0)\n\n            addWorker(null, false);\n\n    }\n\n    else if (!addWorker(command, false))\n\n        reject(command);\n\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n## 参考文章\n\n\n\n- https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html\n\n- http://www.ideabuffer.cn/2017/04/04/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%9AThreadPoolExecutor/****","source":"_posts/ThreadPoolExecutor.md","raw":"---\ntitle: ThreadPoolExecutor\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 9545bc72\ndate: 2021-05-22 00:00:00\n---\n\n\n从源码层面来详细了解\n\n\n\n<!-- more -->\n\n\n\n## why\n\n\n\n为什么要使用线程池？\n\n\n\n线程过多会带来额外的开销，其中包括创建销毁线程的开销、调度线程的开销等等，同时也降低了计算机的整体性能。线程池维护多个线程，等待监督管理者分配可并发执行的任务。这种做法，一方面避免了处理任务时创建销毁线程开销的代价，另一方面避免了线程数量膨胀导致的过分调度问题，保证了对内核的充分利用。\n\n\n\n## what\n\n\n\n```java\n\n//ctl就是把线程的运行状态和工作线程数进行统一管理的\n\n//AtomicInteger这个类可以通过CAS达到无锁并发，效率比较高,这个变量有双重身份，它的高三位表示线程池的状态，低29位表示线程池中现有的线程数，这也是Doug Lea一个天才的设计，用最少的变量来减少锁竞争，提高并发效率。\n\nprivate final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));\n\n///表示线程池线程数的bit数\n\nprivate static final int COUNT_BITS = Integer.SIZE - 3;\n\n//最大的线程数量，数量是完全够用了\n\nprivate static final int CAPACITY   = (1 << COUNT_BITS) - 1;\n\n\n\n// runState is stored in the high-order bits\n\nprivate static final int RUNNING    = -1 << COUNT_BITS;\n\nprivate static final int SHUTDOWN   =  0 << COUNT_BITS;\n\nprivate static final int STOP       =  1 << COUNT_BITS;\n\nprivate static final int TIDYING    =  2 << COUNT_BITS;\n\nprivate static final int TERMINATED =  3 << COUNT_BITS;\n\n\n\n// Packing and unpacking ctl\n\n//获取线程池的状态\n\nprivate static int runStateOf(int c)     { return c & ~CAPACITY; }\n\n//获取线程的数量\n\nprivate static int workerCountOf(int c)  { return c & CAPACITY; }\n\nprivate static int ctlOf(int rs, int wc) { return rs | wc; }\n\n    /*\n\n     * Bit field accessors that don't require unpacking ctl.\n\n     * These depend on the bit layout and on workerCount being never negative.\n\n     */\n\n\n\n    private static boolean runStateLessThan(int c, int s) {\n\n        return c < s;\n\n    }\n\n\n\n    private static boolean runStateAtLeast(int c, int s) {\n\n        return c >= s;\n\n    }\n\n\n\n    private static boolean isRunning(int c) {\n\n        return c < SHUTDOWN;\n\n    }\n\n```\n\n\n\n### 状态\n\n\n\n- RUNNING, 运行状态，值也是最小的，刚创建的线程池就是此状态，能接受新提交的任务，并且也能处理阻塞队列中的任务\n\n- SHUTDOWN，关闭状态，不再接受新提交的任务，但却可以继续处理阻塞队列中已保存的任务。在线程池处于 RUNNING 状态时，调用 shutdown()方法会使线程池进入到该状态。（finalize() 方法在执行过程中也会调用shutdown()方法进入该状态）\n\n- STOP，不能接受新任务，也不处理队列中的任务，会中断正在处理任务的线程。在线程池处于 RUNNING 或 SHUTDOWN 状态时，调用 shutdownNow() 方法会使线程池进入到该状态；\n\n- TIDYING，如果所有的任务都已终止了，workerCount (有效线程数) 为0，线程池进入该状态后会调用 terminated() 方法进入TERMINATED 状态。\n\n- TERMINATED，在terminated() 方法执行完后进入该状态，默认terminated()方法中什么也没有做。\n\n\n\n![image-20210523080302512](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210523080302512.png)\n\n\n\n### 构造方法\n\n\n\n```java\n\npublic ThreadPoolExecutor(int corePoolSize,\n\n                          int maximumPoolSize,\n\n                          long keepAliveTime,\n\n                          TimeUnit unit,\n\n                          BlockingQueue<Runnable> workQueue) {\n\n    this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,\n\n         Executors.defaultThreadFactory(), defaultHandler);\n\n}\n\n```\n\n\n\n- **corePoolSize**：核心线程数量，当有新任务在execute()方法提交时，会执行以下判断：\n\n\n\n  1. 如果运行的线程少于 corePoolSize，则创建新线程来处理任务，即使线程池中的其他线程是空闲的；\n\n  2. 如果线程池中的线程数量大于等于 corePoolSize 且小于 maximumPoolSize，则只有当workQueue满时才创建新的线程去处理任务；\n\n  3. 如果设置的corePoolSize 和 maximumPoolSize相同，则创建的线程池的大小是固定的，这时如果有新任务提交，若workQueue未满，则将请求放入workQueue中，等待有空闲的线程去从workQueue中取任务并处理；\n\n  4. 如果运行的线程数量大于等于maximumPoolSize，这时如果workQueue已经满了，则通过handler所指定的策略来处理任务；\n\n\n\n  所以，任务提交时，判断的顺序为 corePoolSize –> workQueue –> maximumPoolSize。\n\n\n\n- **maximumPoolSize**：最大线程数量；\n\n\n\n- **workQueue**：等待队列，当任务提交时，如果线程池中的线程数量大于等于corePoolSize的时候，把该任务封装成一个Worker对象放入等待队列；\n\n\n\n- workQueue\n\n\n\n  ：保存等待执行的任务的阻塞队列，当提交一个新的任务到线程池以后, 线程池会根据当前线程池中正在运行着的线程的数量来决定对该任务的处理方式，主要有以下几种处理方式:\n\n\n\n  1. **直接切换**：这种方式常用的队列是SynchronousQueue，但现在还没有研究过该队列，这里暂时还没法介绍；\n\n\n\n  2. **使用无界队列**：一般使用基于链表的阻塞队列LinkedBlockingQueue。如果使用这种方式，那么线程池中能够创建的最大线程数就是corePoolSize，而maximumPoolSize就不会起作用了（后面也会说到）。当线程池中所有的核心线程都是RUNNING状态时，这时一个新的任务提交就会放入等待队列中。\n\n\n\n  3. 使用有界队列\n\n\n\n     ：一般使用ArrayBlockingQueue。使用该方式可以将线程池的最大线程数量限制为maximumPoolSize，这样能够降低资源的消耗，但同时这种方式也使得线程池对线程的调度变得更困难，因为线程池和队列的容量都是有限的值，所以要想使线程池处理任务的吞吐率达到一个相对合理的范围，又想使线程调度相对简单，并且还要尽可能的降低线程池对资源的消耗，就需要合理的设置这两个数量。\n\n\n\n     - 如果要想降低系统资源的消耗（包括CPU的使用率，操作系统资源的消耗，上下文环境切换的开销等）, 可以设置较大的队列容量和较小的线程池容量, 但这样也会降低线程处理任务的吞吐量。\n\n     - 如果提交的任务经常发生阻塞，那么可以考虑通过调用 setMaximumPoolSize() 方法来重新设定线程池的容量。\n\n     - 如果队列的容量设置的较小，通常需要将线程池的容量设置大一点，这样CPU的使用率会相对的高一些。但如果线程池的容量设置的过大，则在提交的任务数量太多的情况下，并发量会增加，那么线程之间的调度就是一个要考虑的问题，因为这样反而有可能降低处理任务的吞吐量。\n\n\n\n- **keepAliveTime**：线程池维护线程所允许的空闲时间。当线程池中的线程数量大于corePoolSize的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了keepAliveTime；\n\n\n\n- **threadFactory**：它是ThreadFactory类型的变量，用来创建新线程。默认使用Executors.defaultThreadFactory() 来创建线程。使用默认的ThreadFactory来创建线程时，会使新创建的线程具有相同的NORM_PRIORITY优先级并且是非守护线程，同时也设置了线程的名称。\n\n\n\n- handler\n\n\n\n  ：它是RejectedExecutionHandler类型的变量，表示线程池的饱和策略。如果阻塞队列满了并且没有空闲的线程，这时如果继续提交任务，就需要采取一种策略处理该任务。线程池提供了4种策略：\n\n\n\n  1. AbortPolicy：直接抛出异常，这是默认策略；\n\n  2. CallerRunsPolicy：用调用者所在的线程来执行任务；\n\n  3. DiscardOldestPolicy：丢弃阻塞队列中靠最前的任务，并执行当前任务；\n\n  4. DiscardPolicy：直接丢弃任务；\n\n\n\n```java\n\n//上面的this调用的就是这个方法，这个方法中会进行一些异常情况的判断\n\npublic ThreadPoolExecutor(int corePoolSize,\n\n                          int maximumPoolSize,\n\n                          long keepAliveTime,\n\n                          TimeUnit unit,\n\n                          BlockingQueue<Runnable> workQueue,\n\n                          ThreadFactory threadFactory,\n\n                          RejectedExecutionHandler handler) {\n\n    if (corePoolSize < 0 ||\n\n        maximumPoolSize <= 0 ||\n\n        maximumPoolSize < corePoolSize ||\n\n        keepAliveTime < 0)\n\n        throw new IllegalArgumentException();\n\n    if (workQueue == null || threadFactory == null || handler == null)\n\n        throw new NullPointerException();\n\n    this.acc = System.getSecurityManager() == null ?\n\n            null :\n\n            AccessController.getContext();\n\n    this.corePoolSize = corePoolSize;\n\n    this.maximumPoolSize = maximumPoolSize;\n\n    this.workQueue = workQueue;\n\n    this.keepAliveTime = unit.toNanos(keepAliveTime);\n\n    this.threadFactory = threadFactory;\n\n    this.handler = handler;\n\n}\n\n```\n\n\n\n### execute方法\n\n\n\n```java\n\npublic void execute(Runnable command) {\n\n    if (command == null)\n\n        throw new NullPointerException();\n\n    //ctl的低29位表示线程数，高三位表示线程的状态\n\n    int c = ctl.get();\n\n    //如果正在工作的线程数小于核心线程数，就需要增加一个线程\n\n    if (workerCountOf(c) < corePoolSize) {\n\n        if (addWorker(command, true))\n\n            return;\n\n        //如果增加线程失败，就会重新获取ctl\n\n        c = ctl.get();\n\n    }\n\n    \n\n    if (isRunning(c) && workQueue.offer(command)) {\n\n        int recheck = ctl.get();\n\n        if (! isRunning(recheck) && remove(command))\n\n            reject(command);\n\n        else if (workerCountOf(recheck) == 0)\n\n            addWorker(null, false);\n\n    }\n\n    else if (!addWorker(command, false))\n\n        reject(command);\n\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n## 参考文章\n\n\n\n- https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html\n\n- http://www.ideabuffer.cn/2017/04/04/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%9AThreadPoolExecutor/****","slug":"ThreadPoolExecutor","published":1,"updated":"2025-03-02T03:37:34.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4h001bn0ukemux34ry","content":"<p>从源码层面来详细了解</p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"why\"><a href=\"#why\" class=\"headerlink\" title=\"why\"></a>why</h2><p>为什么要使用线程池？</p>\n<p>线程过多会带来额外的开销，其中包括创建销毁线程的开销、调度线程的开销等等，同时也降低了计算机的整体性能。线程池维护多个线程，等待监督管理者分配可并发执行的任务。这种做法，一方面避免了处理任务时创建销毁线程开销的代价，另一方面避免了线程数量膨胀导致的过分调度问题，保证了对内核的充分利用。</p>\n<h2 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ctl就是把线程的运行状态和工作线程数进行统一管理的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//AtomicInteger这个类可以通过CAS达到无锁并发，效率比较高,这个变量有双重身份，它的高三位表示线程池的状态，低29位表示线程池中现有的线程数，这也是Doug Lea一个天才的设计，用最少的变量来减少锁竞争，提高并发效率。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">AtomicInteger</span> <span class=\"variable\">ctl</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(ctlOf(RUNNING, <span class=\"number\">0</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">///表示线程池线程数的bit数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">COUNT_BITS</span> <span class=\"operator\">=</span> Integer.SIZE - <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最大的线程数量，数量是完全够用了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">CAPACITY</span>   <span class=\"operator\">=</span> (<span class=\"number\">1</span> &lt;&lt; COUNT_BITS) - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// runState is stored in the high-order bits</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">RUNNING</span>    <span class=\"operator\">=</span> -<span class=\"number\">1</span> &lt;&lt; COUNT_BITS;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">SHUTDOWN</span>   <span class=\"operator\">=</span>  <span class=\"number\">0</span> &lt;&lt; COUNT_BITS;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">STOP</span>       <span class=\"operator\">=</span>  <span class=\"number\">1</span> &lt;&lt; COUNT_BITS;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">TIDYING</span>    <span class=\"operator\">=</span>  <span class=\"number\">2</span> &lt;&lt; COUNT_BITS;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">TERMINATED</span> <span class=\"operator\">=</span>  <span class=\"number\">3</span> &lt;&lt; COUNT_BITS;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Packing and unpacking ctl</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取线程池的状态</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">runStateOf</span><span class=\"params\">(<span class=\"type\">int</span> c)</span>     &#123; <span class=\"keyword\">return</span> c &amp; ~CAPACITY; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取线程的数量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">workerCountOf</span><span class=\"params\">(<span class=\"type\">int</span> c)</span>  &#123; <span class=\"keyword\">return</span> c &amp; CAPACITY; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">ctlOf</span><span class=\"params\">(<span class=\"type\">int</span> rs, <span class=\"type\">int</span> wc)</span> &#123; <span class=\"keyword\">return</span> rs | wc; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * Bit field accessors that don&#x27;t require unpacking ctl.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * These depend on the bit layout and on workerCount being never negative.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">runStateLessThan</span><span class=\"params\">(<span class=\"type\">int</span> c, <span class=\"type\">int</span> s)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> c &lt; s;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">runStateAtLeast</span><span class=\"params\">(<span class=\"type\">int</span> c, <span class=\"type\">int</span> s)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> c &gt;= s;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isRunning</span><span class=\"params\">(<span class=\"type\">int</span> c)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> c &lt; SHUTDOWN;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h3><ul>\n<li><p>RUNNING, 运行状态，值也是最小的，刚创建的线程池就是此状态，能接受新提交的任务，并且也能处理阻塞队列中的任务</p>\n</li>\n<li><p>SHUTDOWN，关闭状态，不再接受新提交的任务，但却可以继续处理阻塞队列中已保存的任务。在线程池处于 RUNNING 状态时，调用 shutdown()方法会使线程池进入到该状态。（finalize() 方法在执行过程中也会调用shutdown()方法进入该状态）</p>\n</li>\n<li><p>STOP，不能接受新任务，也不处理队列中的任务，会中断正在处理任务的线程。在线程池处于 RUNNING 或 SHUTDOWN 状态时，调用 shutdownNow() 方法会使线程池进入到该状态；</p>\n</li>\n<li><p>TIDYING，如果所有的任务都已终止了，workerCount (有效线程数) 为0，线程池进入该状态后会调用 terminated() 方法进入TERMINATED 状态。</p>\n</li>\n<li><p>TERMINATED，在terminated() 方法执行完后进入该状态，默认terminated()方法中什么也没有做。</p>\n</li>\n</ul>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210523080302512.png\" alt=\"image-20210523080302512\" loading=\"lazy\"></p>\n<h3 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">                          <span class=\"type\">int</span> maximumPoolSize,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">                          <span class=\"type\">long</span> keepAliveTime,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">                          TimeUnit unit,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">                          BlockingQueue&lt;Runnable&gt; workQueue)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class=\"line\"></span><br><span class=\"line\">         Executors.defaultThreadFactory(), defaultHandler);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><p><strong>corePoolSize</strong>：核心线程数量，当有新任务在execute()方法提交时，会执行以下判断：</p>\n<ol>\n<li><p>如果运行的线程少于 corePoolSize，则创建新线程来处理任务，即使线程池中的其他线程是空闲的；</p>\n</li>\n<li><p>如果线程池中的线程数量大于等于 corePoolSize 且小于 maximumPoolSize，则只有当workQueue满时才创建新的线程去处理任务；</p>\n</li>\n<li><p>如果设置的corePoolSize 和 maximumPoolSize相同，则创建的线程池的大小是固定的，这时如果有新任务提交，若workQueue未满，则将请求放入workQueue中，等待有空闲的线程去从workQueue中取任务并处理；</p>\n</li>\n<li><p>如果运行的线程数量大于等于maximumPoolSize，这时如果workQueue已经满了，则通过handler所指定的策略来处理任务；</p>\n</li>\n</ol>\n<p>所以，任务提交时，判断的顺序为 corePoolSize –&gt; workQueue –&gt; maximumPoolSize。</p>\n</li>\n<li><p><strong>maximumPoolSize</strong>：最大线程数量；</p>\n</li>\n<li><p><strong>workQueue</strong>：等待队列，当任务提交时，如果线程池中的线程数量大于等于corePoolSize的时候，把该任务封装成一个Worker对象放入等待队列；</p>\n</li>\n<li><p>workQueue</p>\n<p>：保存等待执行的任务的阻塞队列，当提交一个新的任务到线程池以后, 线程池会根据当前线程池中正在运行着的线程的数量来决定对该任务的处理方式，主要有以下几种处理方式:</p>\n<ol>\n<li><p><strong>直接切换</strong>：这种方式常用的队列是SynchronousQueue，但现在还没有研究过该队列，这里暂时还没法介绍；</p>\n</li>\n<li><p><strong>使用无界队列</strong>：一般使用基于链表的阻塞队列LinkedBlockingQueue。如果使用这种方式，那么线程池中能够创建的最大线程数就是corePoolSize，而maximumPoolSize就不会起作用了（后面也会说到）。当线程池中所有的核心线程都是RUNNING状态时，这时一个新的任务提交就会放入等待队列中。</p>\n</li>\n<li><p>使用有界队列</p>\n<p>：一般使用ArrayBlockingQueue。使用该方式可以将线程池的最大线程数量限制为maximumPoolSize，这样能够降低资源的消耗，但同时这种方式也使得线程池对线程的调度变得更困难，因为线程池和队列的容量都是有限的值，所以要想使线程池处理任务的吞吐率达到一个相对合理的范围，又想使线程调度相对简单，并且还要尽可能的降低线程池对资源的消耗，就需要合理的设置这两个数量。</p>\n<ul>\n<li><p>如果要想降低系统资源的消耗（包括CPU的使用率，操作系统资源的消耗，上下文环境切换的开销等）, 可以设置较大的队列容量和较小的线程池容量, 但这样也会降低线程处理任务的吞吐量。</p>\n</li>\n<li><p>如果提交的任务经常发生阻塞，那么可以考虑通过调用 setMaximumPoolSize() 方法来重新设定线程池的容量。</p>\n</li>\n<li><p>如果队列的容量设置的较小，通常需要将线程池的容量设置大一点，这样CPU的使用率会相对的高一些。但如果线程池的容量设置的过大，则在提交的任务数量太多的情况下，并发量会增加，那么线程之间的调度就是一个要考虑的问题，因为这样反而有可能降低处理任务的吞吐量。</p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p><strong>keepAliveTime</strong>：线程池维护线程所允许的空闲时间。当线程池中的线程数量大于corePoolSize的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了keepAliveTime；</p>\n</li>\n<li><p><strong>threadFactory</strong>：它是ThreadFactory类型的变量，用来创建新线程。默认使用Executors.defaultThreadFactory() 来创建线程。使用默认的ThreadFactory来创建线程时，会使新创建的线程具有相同的NORM_PRIORITY优先级并且是非守护线程，同时也设置了线程的名称。</p>\n</li>\n<li><p>handler</p>\n<p>：它是RejectedExecutionHandler类型的变量，表示线程池的饱和策略。如果阻塞队列满了并且没有空闲的线程，这时如果继续提交任务，就需要采取一种策略处理该任务。线程池提供了4种策略：</p>\n<ol>\n<li><p>AbortPolicy：直接抛出异常，这是默认策略；</p>\n</li>\n<li><p>CallerRunsPolicy：用调用者所在的线程来执行任务；</p>\n</li>\n<li><p>DiscardOldestPolicy：丢弃阻塞队列中靠最前的任务，并执行当前任务；</p>\n</li>\n<li><p>DiscardPolicy：直接丢弃任务；</p>\n</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上面的this调用的就是这个方法，这个方法中会进行一些异常情况的判断</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">                          <span class=\"type\">int</span> maximumPoolSize,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">                          <span class=\"type\">long</span> keepAliveTime,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">                          TimeUnit unit,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">                          ThreadFactory threadFactory,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">                          RejectedExecutionHandler handler)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (corePoolSize &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\"></span><br><span class=\"line\">        maximumPoolSize &lt;= <span class=\"number\">0</span> ||</span><br><span class=\"line\"></span><br><span class=\"line\">        maximumPoolSize &lt; corePoolSize ||</span><br><span class=\"line\"></span><br><span class=\"line\">        keepAliveTime &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workQueue == <span class=\"literal\">null</span> || threadFactory == <span class=\"literal\">null</span> || handler == <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.acc = System.getSecurityManager() == <span class=\"literal\">null</span> ?</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"literal\">null</span> :</span><br><span class=\"line\"></span><br><span class=\"line\">            AccessController.getContext();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.corePoolSize = corePoolSize;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.workQueue = workQueue;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.threadFactory = threadFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.handler = handler;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"execute方法\"><a href=\"#execute方法\" class=\"headerlink\" title=\"execute方法\"></a>execute方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Runnable command)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (command == <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//ctl的低29位表示线程数，高三位表示线程的状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> ctl.get();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果正在工作的线程数小于核心线程数，就需要增加一个线程</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (addWorker(command, <span class=\"literal\">true</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果增加线程失败，就会重新获取ctl</span></span><br><span class=\"line\"></span><br><span class=\"line\">        c = ctl.get();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">recheck</span> <span class=\"operator\">=</span> ctl.get();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class=\"line\"></span><br><span class=\"line\">            reject(command);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (workerCountOf(recheck) == <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            addWorker(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!addWorker(command, <span class=\"literal\">false</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        reject(command);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMDQvMDIvamF2YS1wb29saW5nLXByYXRpY2UtaW4tbWVpdHVhbi5odG1s\">https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5pZGVhYnVmZmVyLmNuLzIwMTcvMDQvMDQvJUU2JUI3JUIxJUU1JTg1JUE1JUU3JTkwJTg2JUU4JUE3JUEzSmF2YSVFNyVCQSVCRiVFNyVBOCU4QiVFNiVCMSVBMCVFRiVCQyU5QVRocmVhZFBvb2xFeGVjdXRvci8=\">http://www.ideabuffer.cn/2017/04/04/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%9AThreadPoolExecutor/<i class=\"fa fa-external-link-alt\"></i></span>****</p>\n</li>\n</ul>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"从源码层面来详细了解\n\nwhy\n为什么要使用线程池？\n\n线程过多会带来额外的开销，其中包括创建销毁线程的开销、调度线程的开销等等，同时也降低了计算机的整体性能。线程池维护多个线程，等待监督管理者分配可并发执行的任务。这种做法，一方面避免了处理任务时创建销毁线程开销的代价，另一方面避免了线程数量膨胀导致的过分调度问题，保证了对内核的充分利用。\n\nwhat\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44","more":"<h2 id=\"why\"><a href=\"#why\" class=\"headerlink\" title=\"why\"></a>why</h2><p>为什么要使用线程池？</p>\n<p>线程过多会带来额外的开销，其中包括创建销毁线程的开销、调度线程的开销等等，同时也降低了计算机的整体性能。线程池维护多个线程，等待监督管理者分配可并发执行的任务。这种做法，一方面避免了处理任务时创建销毁线程开销的代价，另一方面避免了线程数量膨胀导致的过分调度问题，保证了对内核的充分利用。</p>\n<h2 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ctl就是把线程的运行状态和工作线程数进行统一管理的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//AtomicInteger这个类可以通过CAS达到无锁并发，效率比较高,这个变量有双重身份，它的高三位表示线程池的状态，低29位表示线程池中现有的线程数，这也是Doug Lea一个天才的设计，用最少的变量来减少锁竞争，提高并发效率。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">AtomicInteger</span> <span class=\"variable\">ctl</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(ctlOf(RUNNING, <span class=\"number\">0</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">///表示线程池线程数的bit数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">COUNT_BITS</span> <span class=\"operator\">=</span> Integer.SIZE - <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最大的线程数量，数量是完全够用了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">CAPACITY</span>   <span class=\"operator\">=</span> (<span class=\"number\">1</span> &lt;&lt; COUNT_BITS) - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// runState is stored in the high-order bits</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">RUNNING</span>    <span class=\"operator\">=</span> -<span class=\"number\">1</span> &lt;&lt; COUNT_BITS;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">SHUTDOWN</span>   <span class=\"operator\">=</span>  <span class=\"number\">0</span> &lt;&lt; COUNT_BITS;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">STOP</span>       <span class=\"operator\">=</span>  <span class=\"number\">1</span> &lt;&lt; COUNT_BITS;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">TIDYING</span>    <span class=\"operator\">=</span>  <span class=\"number\">2</span> &lt;&lt; COUNT_BITS;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">TERMINATED</span> <span class=\"operator\">=</span>  <span class=\"number\">3</span> &lt;&lt; COUNT_BITS;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Packing and unpacking ctl</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取线程池的状态</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">runStateOf</span><span class=\"params\">(<span class=\"type\">int</span> c)</span>     &#123; <span class=\"keyword\">return</span> c &amp; ~CAPACITY; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取线程的数量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">workerCountOf</span><span class=\"params\">(<span class=\"type\">int</span> c)</span>  &#123; <span class=\"keyword\">return</span> c &amp; CAPACITY; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">ctlOf</span><span class=\"params\">(<span class=\"type\">int</span> rs, <span class=\"type\">int</span> wc)</span> &#123; <span class=\"keyword\">return</span> rs | wc; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * Bit field accessors that don&#x27;t require unpacking ctl.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * These depend on the bit layout and on workerCount being never negative.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">runStateLessThan</span><span class=\"params\">(<span class=\"type\">int</span> c, <span class=\"type\">int</span> s)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> c &lt; s;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">runStateAtLeast</span><span class=\"params\">(<span class=\"type\">int</span> c, <span class=\"type\">int</span> s)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> c &gt;= s;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isRunning</span><span class=\"params\">(<span class=\"type\">int</span> c)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> c &lt; SHUTDOWN;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h3><ul>\n<li><p>RUNNING, 运行状态，值也是最小的，刚创建的线程池就是此状态，能接受新提交的任务，并且也能处理阻塞队列中的任务</p>\n</li>\n<li><p>SHUTDOWN，关闭状态，不再接受新提交的任务，但却可以继续处理阻塞队列中已保存的任务。在线程池处于 RUNNING 状态时，调用 shutdown()方法会使线程池进入到该状态。（finalize() 方法在执行过程中也会调用shutdown()方法进入该状态）</p>\n</li>\n<li><p>STOP，不能接受新任务，也不处理队列中的任务，会中断正在处理任务的线程。在线程池处于 RUNNING 或 SHUTDOWN 状态时，调用 shutdownNow() 方法会使线程池进入到该状态；</p>\n</li>\n<li><p>TIDYING，如果所有的任务都已终止了，workerCount (有效线程数) 为0，线程池进入该状态后会调用 terminated() 方法进入TERMINATED 状态。</p>\n</li>\n<li><p>TERMINATED，在terminated() 方法执行完后进入该状态，默认terminated()方法中什么也没有做。</p>\n</li>\n</ul>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210523080302512.png\" alt=\"image-20210523080302512\" loading=\"lazy\"></p>\n<h3 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">                          <span class=\"type\">int</span> maximumPoolSize,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">                          <span class=\"type\">long</span> keepAliveTime,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">                          TimeUnit unit,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">                          BlockingQueue&lt;Runnable&gt; workQueue)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class=\"line\"></span><br><span class=\"line\">         Executors.defaultThreadFactory(), defaultHandler);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><p><strong>corePoolSize</strong>：核心线程数量，当有新任务在execute()方法提交时，会执行以下判断：</p>\n<ol>\n<li><p>如果运行的线程少于 corePoolSize，则创建新线程来处理任务，即使线程池中的其他线程是空闲的；</p>\n</li>\n<li><p>如果线程池中的线程数量大于等于 corePoolSize 且小于 maximumPoolSize，则只有当workQueue满时才创建新的线程去处理任务；</p>\n</li>\n<li><p>如果设置的corePoolSize 和 maximumPoolSize相同，则创建的线程池的大小是固定的，这时如果有新任务提交，若workQueue未满，则将请求放入workQueue中，等待有空闲的线程去从workQueue中取任务并处理；</p>\n</li>\n<li><p>如果运行的线程数量大于等于maximumPoolSize，这时如果workQueue已经满了，则通过handler所指定的策略来处理任务；</p>\n</li>\n</ol>\n<p>所以，任务提交时，判断的顺序为 corePoolSize –&gt; workQueue –&gt; maximumPoolSize。</p>\n</li>\n<li><p><strong>maximumPoolSize</strong>：最大线程数量；</p>\n</li>\n<li><p><strong>workQueue</strong>：等待队列，当任务提交时，如果线程池中的线程数量大于等于corePoolSize的时候，把该任务封装成一个Worker对象放入等待队列；</p>\n</li>\n<li><p>workQueue</p>\n<p>：保存等待执行的任务的阻塞队列，当提交一个新的任务到线程池以后, 线程池会根据当前线程池中正在运行着的线程的数量来决定对该任务的处理方式，主要有以下几种处理方式:</p>\n<ol>\n<li><p><strong>直接切换</strong>：这种方式常用的队列是SynchronousQueue，但现在还没有研究过该队列，这里暂时还没法介绍；</p>\n</li>\n<li><p><strong>使用无界队列</strong>：一般使用基于链表的阻塞队列LinkedBlockingQueue。如果使用这种方式，那么线程池中能够创建的最大线程数就是corePoolSize，而maximumPoolSize就不会起作用了（后面也会说到）。当线程池中所有的核心线程都是RUNNING状态时，这时一个新的任务提交就会放入等待队列中。</p>\n</li>\n<li><p>使用有界队列</p>\n<p>：一般使用ArrayBlockingQueue。使用该方式可以将线程池的最大线程数量限制为maximumPoolSize，这样能够降低资源的消耗，但同时这种方式也使得线程池对线程的调度变得更困难，因为线程池和队列的容量都是有限的值，所以要想使线程池处理任务的吞吐率达到一个相对合理的范围，又想使线程调度相对简单，并且还要尽可能的降低线程池对资源的消耗，就需要合理的设置这两个数量。</p>\n<ul>\n<li><p>如果要想降低系统资源的消耗（包括CPU的使用率，操作系统资源的消耗，上下文环境切换的开销等）, 可以设置较大的队列容量和较小的线程池容量, 但这样也会降低线程处理任务的吞吐量。</p>\n</li>\n<li><p>如果提交的任务经常发生阻塞，那么可以考虑通过调用 setMaximumPoolSize() 方法来重新设定线程池的容量。</p>\n</li>\n<li><p>如果队列的容量设置的较小，通常需要将线程池的容量设置大一点，这样CPU的使用率会相对的高一些。但如果线程池的容量设置的过大，则在提交的任务数量太多的情况下，并发量会增加，那么线程之间的调度就是一个要考虑的问题，因为这样反而有可能降低处理任务的吞吐量。</p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p><strong>keepAliveTime</strong>：线程池维护线程所允许的空闲时间。当线程池中的线程数量大于corePoolSize的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了keepAliveTime；</p>\n</li>\n<li><p><strong>threadFactory</strong>：它是ThreadFactory类型的变量，用来创建新线程。默认使用Executors.defaultThreadFactory() 来创建线程。使用默认的ThreadFactory来创建线程时，会使新创建的线程具有相同的NORM_PRIORITY优先级并且是非守护线程，同时也设置了线程的名称。</p>\n</li>\n<li><p>handler</p>\n<p>：它是RejectedExecutionHandler类型的变量，表示线程池的饱和策略。如果阻塞队列满了并且没有空闲的线程，这时如果继续提交任务，就需要采取一种策略处理该任务。线程池提供了4种策略：</p>\n<ol>\n<li><p>AbortPolicy：直接抛出异常，这是默认策略；</p>\n</li>\n<li><p>CallerRunsPolicy：用调用者所在的线程来执行任务；</p>\n</li>\n<li><p>DiscardOldestPolicy：丢弃阻塞队列中靠最前的任务，并执行当前任务；</p>\n</li>\n<li><p>DiscardPolicy：直接丢弃任务；</p>\n</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上面的this调用的就是这个方法，这个方法中会进行一些异常情况的判断</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">                          <span class=\"type\">int</span> maximumPoolSize,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">                          <span class=\"type\">long</span> keepAliveTime,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">                          TimeUnit unit,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">                          ThreadFactory threadFactory,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">                          RejectedExecutionHandler handler)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (corePoolSize &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\"></span><br><span class=\"line\">        maximumPoolSize &lt;= <span class=\"number\">0</span> ||</span><br><span class=\"line\"></span><br><span class=\"line\">        maximumPoolSize &lt; corePoolSize ||</span><br><span class=\"line\"></span><br><span class=\"line\">        keepAliveTime &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workQueue == <span class=\"literal\">null</span> || threadFactory == <span class=\"literal\">null</span> || handler == <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.acc = System.getSecurityManager() == <span class=\"literal\">null</span> ?</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"literal\">null</span> :</span><br><span class=\"line\"></span><br><span class=\"line\">            AccessController.getContext();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.corePoolSize = corePoolSize;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.workQueue = workQueue;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.threadFactory = threadFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.handler = handler;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"execute方法\"><a href=\"#execute方法\" class=\"headerlink\" title=\"execute方法\"></a>execute方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Runnable command)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (command == <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//ctl的低29位表示线程数，高三位表示线程的状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> ctl.get();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果正在工作的线程数小于核心线程数，就需要增加一个线程</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (addWorker(command, <span class=\"literal\">true</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果增加线程失败，就会重新获取ctl</span></span><br><span class=\"line\"></span><br><span class=\"line\">        c = ctl.get();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">recheck</span> <span class=\"operator\">=</span> ctl.get();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class=\"line\"></span><br><span class=\"line\">            reject(command);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (workerCountOf(recheck) == <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            addWorker(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!addWorker(command, <span class=\"literal\">false</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        reject(command);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMDQvMDIvamF2YS1wb29saW5nLXByYXRpY2UtaW4tbWVpdHVhbi5odG1s\">https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5pZGVhYnVmZmVyLmNuLzIwMTcvMDQvMDQvJUU2JUI3JUIxJUU1JTg1JUE1JUU3JTkwJTg2JUU4JUE3JUEzSmF2YSVFNyVCQSVCRiVFNyVBOCU4QiVFNiVCMSVBMCVFRiVCQyU5QVRocmVhZFBvb2xFeGVjdXRvci8=\">http://www.ideabuffer.cn/2017/04/04/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%9AThreadPoolExecutor/<i class=\"fa fa-external-link-alt\"></i></span>****</p>\n</li>\n</ul>"},{"title":"Virtualbox虚拟机网络模型","description":"","abbrlink":"2f718fcc","date":"2022-10-01T16:00:00.000Z","_content":"\n\n# VirrtualBox和VMware简单对比\n\n两者都是优秀的虚拟机平台，我们可以通过它们创建虚拟机来安装不同环境的操作系统\n\n\n\n主要区别对比：\n\n\n\nVirtualBox是开源免费软件，下载和安装比较方便，VMware功能更加强大，但是需要注册码\n\n\n\nVirtualBox相对于VMware安装和配置更加简单，运行内存占用也比较小\n\n\n\nVirtualBox由于是开源免费，社区相对更加活跃，但总体两者出现问题都能找到解决方案\n\n\n\n# 常见的网络模型\n\n主要有下面四种网络模型\n\n\n\n- 桥接（Bridge Adapter）\n\n- NAT\n\n- 主机网络（Host-only Adapter）\n\n- 内部网络（Internal）\n\n> VirtualBox包含了以上的四种网络模型，VMware只有前三种\n\n\n\n四种模型之间的差别\n\n![image-1664718964443](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-1664718964443.png)\n\n## 桥接\n\n桥接网络模型依赖虚拟交换机（Linux bridge）将虚拟机和物理机连接起来，它们之间处在同一个二层网络\n\n\n\n虚拟机和物理机的ip处在相同网段之下，举例，比如都处在192.168.100.x的网段之下，物理机ip为192.168.100.10，虚拟机ip为192.168.100.20\n\n\n\n桥接网络的网络连通总结：\n\n\n\n虚拟机之间彼此互通\n\n\n\n虚拟机和物理机彼此互通\n\n\n\n只要物理机能上外网，虚拟机也能上外网\n\n\n\n3.2 网络原理图\n\n# 参考\n\n- [【计算机网络】：一次性理清Virtualbox虚拟机网络模型](https://joyohub.com/2021/03/13/network/virtoolbox-network/)\n","source":"_posts/Virtualbox虚拟机网络模型.md","raw":"---\ntitle: Virtualbox虚拟机网络模型\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 2f718fcc\ndate: 2022-10-02 00:00:00\n---\n\n\n# VirrtualBox和VMware简单对比\n\n两者都是优秀的虚拟机平台，我们可以通过它们创建虚拟机来安装不同环境的操作系统\n\n\n\n主要区别对比：\n\n\n\nVirtualBox是开源免费软件，下载和安装比较方便，VMware功能更加强大，但是需要注册码\n\n\n\nVirtualBox相对于VMware安装和配置更加简单，运行内存占用也比较小\n\n\n\nVirtualBox由于是开源免费，社区相对更加活跃，但总体两者出现问题都能找到解决方案\n\n\n\n# 常见的网络模型\n\n主要有下面四种网络模型\n\n\n\n- 桥接（Bridge Adapter）\n\n- NAT\n\n- 主机网络（Host-only Adapter）\n\n- 内部网络（Internal）\n\n> VirtualBox包含了以上的四种网络模型，VMware只有前三种\n\n\n\n四种模型之间的差别\n\n![image-1664718964443](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-1664718964443.png)\n\n## 桥接\n\n桥接网络模型依赖虚拟交换机（Linux bridge）将虚拟机和物理机连接起来，它们之间处在同一个二层网络\n\n\n\n虚拟机和物理机的ip处在相同网段之下，举例，比如都处在192.168.100.x的网段之下，物理机ip为192.168.100.10，虚拟机ip为192.168.100.20\n\n\n\n桥接网络的网络连通总结：\n\n\n\n虚拟机之间彼此互通\n\n\n\n虚拟机和物理机彼此互通\n\n\n\n只要物理机能上外网，虚拟机也能上外网\n\n\n\n3.2 网络原理图\n\n# 参考\n\n- [【计算机网络】：一次性理清Virtualbox虚拟机网络模型](https://joyohub.com/2021/03/13/network/virtoolbox-network/)\n","slug":"Virtualbox虚拟机网络模型","published":1,"updated":"2025-03-02T03:37:34.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4h001dn0uk8zggcmao","content":"<h1 id=\"VirrtualBox和VMware简单对比\"><a href=\"#VirrtualBox和VMware简单对比\" class=\"headerlink\" title=\"VirrtualBox和VMware简单对比\"></a>VirrtualBox和VMware简单对比</h1><p>两者都是优秀的虚拟机平台，我们可以通过它们创建虚拟机来安装不同环境的操作系统</p>\n<p>主要区别对比：</p>\n<p>VirtualBox是开源免费软件，下载和安装比较方便，VMware功能更加强大，但是需要注册码</p>\n<p>VirtualBox相对于VMware安装和配置更加简单，运行内存占用也比较小</p>\n<p>VirtualBox由于是开源免费，社区相对更加活跃，但总体两者出现问题都能找到解决方案</p>\n<h1 id=\"常见的网络模型\"><a href=\"#常见的网络模型\" class=\"headerlink\" title=\"常见的网络模型\"></a>常见的网络模型</h1><p>主要有下面四种网络模型</p>\n<ul>\n<li><p>桥接（Bridge Adapter）</p>\n</li>\n<li><p>NAT</p>\n</li>\n<li><p>主机网络（Host-only Adapter）</p>\n</li>\n<li><p>内部网络（Internal）</p>\n</li>\n</ul>\n<blockquote>\n<p>VirtualBox包含了以上的四种网络模型，VMware只有前三种</p>\n</blockquote>\n<p>四种模型之间的差别</p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-1664718964443.png\" alt=\"image-1664718964443\" loading=\"lazy\"></p>\n<h2 id=\"桥接\"><a href=\"#桥接\" class=\"headerlink\" title=\"桥接\"></a>桥接</h2><p>桥接网络模型依赖虚拟交换机（Linux bridge）将虚拟机和物理机连接起来，它们之间处在同一个二层网络</p>\n<p>虚拟机和物理机的ip处在相同网段之下，举例，比如都处在192.168.100.x的网段之下，物理机ip为192.168.100.10，虚拟机ip为192.168.100.20</p>\n<p>桥接网络的网络连通总结：</p>\n<p>虚拟机之间彼此互通</p>\n<p>虚拟机和物理机彼此互通</p>\n<p>只要物理机能上外网，虚拟机也能上外网</p>\n<p>3.2 网络原理图</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qb3lvaHViLmNvbS8yMDIxLzAzLzEzL25ldHdvcmsvdmlydG9vbGJveC1uZXR3b3JrLw==\">【计算机网络】：一次性理清Virtualbox虚拟机网络模型<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"VirrtualBox和VMware简单对比\n两者都是优秀的虚拟机平台，我们可以通过它们创建虚拟机来安装不同环境的操作系统\n\n主要区别对比：\n\nVirtualBox是开源免费软件，下载和安装比较方便，VMware功能更加强大，但是需要注册码\n\nVirtualBox相对于VMware安装和配置更加简单，运行内存占用也比较小\n\nVirtualBox由于是开源免费，社区相对更加活跃，但总体两者出现问题都能找到解决方案\n\n常见的网络模型\n主要有下面四种网络模型\n\n * 桥接（Bridge Adapter）\n   \n   \n * NAT\n   \n   \n * 主机网络（Host-only Adapter","more":"<h1 id=\"VirrtualBox和VMware简单对比\"><a href=\"#VirrtualBox和VMware简单对比\" class=\"headerlink\" title=\"VirrtualBox和VMware简单对比\"></a>VirrtualBox和VMware简单对比</h1><p>两者都是优秀的虚拟机平台，我们可以通过它们创建虚拟机来安装不同环境的操作系统</p>\n<p>主要区别对比：</p>\n<p>VirtualBox是开源免费软件，下载和安装比较方便，VMware功能更加强大，但是需要注册码</p>\n<p>VirtualBox相对于VMware安装和配置更加简单，运行内存占用也比较小</p>\n<p>VirtualBox由于是开源免费，社区相对更加活跃，但总体两者出现问题都能找到解决方案</p>\n<h1 id=\"常见的网络模型\"><a href=\"#常见的网络模型\" class=\"headerlink\" title=\"常见的网络模型\"></a>常见的网络模型</h1><p>主要有下面四种网络模型</p>\n<ul>\n<li><p>桥接（Bridge Adapter）</p>\n</li>\n<li><p>NAT</p>\n</li>\n<li><p>主机网络（Host-only Adapter）</p>\n</li>\n<li><p>内部网络（Internal）</p>\n</li>\n</ul>\n<blockquote>\n<p>VirtualBox包含了以上的四种网络模型，VMware只有前三种</p>\n</blockquote>\n<p>四种模型之间的差别</p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-1664718964443.png\" alt=\"image-1664718964443\" loading=\"lazy\"></p>\n<h2 id=\"桥接\"><a href=\"#桥接\" class=\"headerlink\" title=\"桥接\"></a>桥接</h2><p>桥接网络模型依赖虚拟交换机（Linux bridge）将虚拟机和物理机连接起来，它们之间处在同一个二层网络</p>\n<p>虚拟机和物理机的ip处在相同网段之下，举例，比如都处在192.168.100.x的网段之下，物理机ip为192.168.100.10，虚拟机ip为192.168.100.20</p>\n<p>桥接网络的网络连通总结：</p>\n<p>虚拟机之间彼此互通</p>\n<p>虚拟机和物理机彼此互通</p>\n<p>只要物理机能上外网，虚拟机也能上外网</p>\n<p>3.2 网络原理图</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qb3lvaHViLmNvbS8yMDIxLzAzLzEzL25ldHdvcmsvdmlydG9vbGJveC1uZXR3b3JrLw==\">【计算机网络】：一次性理清Virtualbox虚拟机网络模型<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n"},{"title":"astro添加谷歌分析","description":"","abbrlink":"b28c9ebf","date":"2024-07-03T16:00:00.000Z","_content":"## 安装partytown\n\n```shell\n\npnpm install @astrojs/partytown\n\n```\n\n## 启用partytown,在astro.config.ts文件下添加下列文件\n\n```ts\n\nimport partytown from '@astrojs/partytown'\n\n\n\nexport default defineConfig({\n\n  integrations: [\n\n      partytown({\n\n\t\t\tconfig: {\n\n\t\t\t  forward: [\"dataLayer.push\"],\n\n\t\t\t},\n\n\t\t}),\n\n  ]\n\n});\n\n```\n\n## header.astro文件添加谷歌分析代码\n\n```javascript\n\n<!-- Google tag (gtag.js) -->\n\n<script type=\"text/partytown\" async src=\"https://www.googletagmanager.com/gtag/js?id=G-MZXCQSZ8FT\"></script>\n\n<script type=\"text/partytown\">\n\n  window.dataLayer = window.dataLayer || [];\n\n  function gtag(){dataLayer.push(arguments);}\n\n  gtag('js', new Date());\n\n\n\n  gtag('config', '你的谷歌代码');\n\n</script>\n\n```\n\n## 测试是否成功\n\n在谷歌分析中这个页面可以进行测试的\n\n![](https://shyblog.oss-cn-beijing.aliyuncs.com/img/PixPin_2024-07-04_12-05-28.png)\n","source":"_posts/astro添加谷歌分析.md","raw":"---\ntitle: astro添加谷歌分析\ndescription: ''\ntags:\n  - 无标签\nabbrlink: b28c9ebf\ndate: 2024-07-04 00:00:00\n---\n## 安装partytown\n\n```shell\n\npnpm install @astrojs/partytown\n\n```\n\n## 启用partytown,在astro.config.ts文件下添加下列文件\n\n```ts\n\nimport partytown from '@astrojs/partytown'\n\n\n\nexport default defineConfig({\n\n  integrations: [\n\n      partytown({\n\n\t\t\tconfig: {\n\n\t\t\t  forward: [\"dataLayer.push\"],\n\n\t\t\t},\n\n\t\t}),\n\n  ]\n\n});\n\n```\n\n## header.astro文件添加谷歌分析代码\n\n```javascript\n\n<!-- Google tag (gtag.js) -->\n\n<script type=\"text/partytown\" async src=\"https://www.googletagmanager.com/gtag/js?id=G-MZXCQSZ8FT\"></script>\n\n<script type=\"text/partytown\">\n\n  window.dataLayer = window.dataLayer || [];\n\n  function gtag(){dataLayer.push(arguments);}\n\n  gtag('js', new Date());\n\n\n\n  gtag('config', '你的谷歌代码');\n\n</script>\n\n```\n\n## 测试是否成功\n\n在谷歌分析中这个页面可以进行测试的\n\n![](https://shyblog.oss-cn-beijing.aliyuncs.com/img/PixPin_2024-07-04_12-05-28.png)\n","slug":"astro添加谷歌分析","published":1,"updated":"2025-03-02T03:37:34.376Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4i001fn0ukbjzv17el","content":"<h2 id=\"安装partytown\"><a href=\"#安装partytown\" class=\"headerlink\" title=\"安装partytown\"></a>安装partytown</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pnpm install @astrojs/partytown</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启用partytown-在astro-config-ts文件下添加下列文件\"><a href=\"#启用partytown-在astro-config-ts文件下添加下列文件\" class=\"headerlink\" title=\"启用partytown,在astro.config.ts文件下添加下列文件\"></a>启用partytown,在astro.config.ts文件下添加下列文件</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> partytown <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@astrojs/partytown&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">integrations</span>: [</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"title function_\">partytown</span>(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"attr\">config</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t  <span class=\"attr\">forward</span>: [<span class=\"string\">&quot;dataLayer.push&quot;</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">  ]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"header-astro文件添加谷歌分析代码\"><a href=\"#header-astro文件添加谷歌分析代码\" class=\"headerlink\" title=\"header.astro文件添加谷歌分析代码\"></a>header.astro文件添加谷歌分析代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;!-- <span class=\"title class_\">Google</span> <span class=\"title function_\">tag</span> (gtag.<span class=\"property\">js</span>) --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/partytown&quot;</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://www.googletagmanager.com/gtag/js?id=G-MZXCQSZ8FT&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/partytown&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"variable language_\">window</span>.<span class=\"property\">dataLayer</span> = <span class=\"variable language_\">window</span>.<span class=\"property\">dataLayer</span> || [];</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"keyword\">function</span> <span class=\"title function_\">gtag</span>(<span class=\"params\"></span>)&#123;dataLayer.<span class=\"title function_\">push</span>(<span class=\"variable language_\">arguments</span>);&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"title function_\">gtag</span>(<span class=\"string\">&#x27;js&#x27;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"title function_\">gtag</span>(<span class=\"string\">&#x27;config&#x27;</span>, <span class=\"string\">&#x27;你的谷歌代码&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试是否成功\"><a href=\"#测试是否成功\" class=\"headerlink\" title=\"测试是否成功\"></a>测试是否成功</h2><p>在谷歌分析中这个页面可以进行测试的</p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/PixPin_2024-07-04_12-05-28.png\" loading=\"lazy\"></p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"安装partytown\n1\n2\n3\n\n\n\npnpm install @astrojs/partytown\n\n\n\n启用partytown,在astro.config.ts文件下添加下列文件\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\nimport partytown from '@astrojs/partytown'\n\n\n\nexport default defineConfig({\n\n  integrations: [\n\n      partytown({\n\n\t\t\tconfig: {\n\n\t\t\t  forward: ","more":"<h2 id=\"安装partytown\"><a href=\"#安装partytown\" class=\"headerlink\" title=\"安装partytown\"></a>安装partytown</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pnpm install @astrojs/partytown</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启用partytown-在astro-config-ts文件下添加下列文件\"><a href=\"#启用partytown-在astro-config-ts文件下添加下列文件\" class=\"headerlink\" title=\"启用partytown,在astro.config.ts文件下添加下列文件\"></a>启用partytown,在astro.config.ts文件下添加下列文件</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> partytown <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@astrojs/partytown&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">integrations</span>: [</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"title function_\">partytown</span>(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"attr\">config</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t  <span class=\"attr\">forward</span>: [<span class=\"string\">&quot;dataLayer.push&quot;</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">  ]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"header-astro文件添加谷歌分析代码\"><a href=\"#header-astro文件添加谷歌分析代码\" class=\"headerlink\" title=\"header.astro文件添加谷歌分析代码\"></a>header.astro文件添加谷歌分析代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;!-- <span class=\"title class_\">Google</span> <span class=\"title function_\">tag</span> (gtag.<span class=\"property\">js</span>) --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/partytown&quot;</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://www.googletagmanager.com/gtag/js?id=G-MZXCQSZ8FT&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/partytown&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"variable language_\">window</span>.<span class=\"property\">dataLayer</span> = <span class=\"variable language_\">window</span>.<span class=\"property\">dataLayer</span> || [];</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"keyword\">function</span> <span class=\"title function_\">gtag</span>(<span class=\"params\"></span>)&#123;dataLayer.<span class=\"title function_\">push</span>(<span class=\"variable language_\">arguments</span>);&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"title function_\">gtag</span>(<span class=\"string\">&#x27;js&#x27;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"title function_\">gtag</span>(<span class=\"string\">&#x27;config&#x27;</span>, <span class=\"string\">&#x27;你的谷歌代码&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试是否成功\"><a href=\"#测试是否成功\" class=\"headerlink\" title=\"测试是否成功\"></a>测试是否成功</h2><p>在谷歌分析中这个页面可以进行测试的</p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/PixPin_2024-07-04_12-05-28.png\" loading=\"lazy\"></p>\n"},{"title":"bytemd使用（vue版本）","description":"","abbrlink":"81d1513f","date":"2021-07-15T16:00:00.000Z","_content":"\n\nbytemd使用\n\n\n\n<!-- more -->\n\n\n\n# 初步使用\n\n\n\n首先是根据[bytemd](https://github.com/bytedance/bytemd)中md的教程来进行操作。我这里使用的是vue版本的。\n\n> 首先你要创建或者有一个vue项目（我是新创建的vue项目）\n\n## 结构了解\n\n主要是分为编辑和查看两个页面        \n\n- 编辑是Editor\n\n- 查看是View\n\n## 安装bytemd\n\n```npm\n\nnpm install @bytemd/vue\n\n```\n\n## 新建一个test页面\n\n```vue\n\n<template>\n\n  <Editor :value=\"value\" :plugins=\"plugins\" @change=\"handleChange\" />\n\n</template>\n\n\n\n<script>\n\n//这里就是引入所有的扩展的插件\n\nimport 'bytemd/dist/index.min.css'\n\nimport { Editor} from '@bytemd/vue'\n\nimport gfm from '@bytemd/plugin-gfm'\n\nimport highlight from \"@bytemd/plugin-highlight-ssr\";\n\n\n\nconst plugins = [\n\n//将所有的扩展功能放入插件数组中，然后就可以生效了    \n\ngfm(),\n\nhighlight(),\n\n]\n\n\n\nexport default {\n\n  name: \"test\",\n\ncomponents: { Editor },\n\ndata() {\n\nreturn { value: '', plugins }\n\n},\n\nmethods: {\n\nhandleChange(v) {\n\nthis.value = v\n\n},\n\n},\n\n}\n\n</script>\n\n<style scoped>\n\n\n\n</style>\n\n```\n\n## 修改APP页面\n\n\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b1ddb524e434d7794afdcf0d5dfda91~tplv-k3u1fbpfcp-watermark.image)\n\n## 启动项目\n\n最后就是启动这个项目了\n\n\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5f1e3c1af5ed43b78ea76c319b1b799f~tplv-k3u1fbpfcp-watermark.image)\n\n这只是简单的运行起来了，需要自己慢慢来摸索优化","source":"_posts/bytemd使用（vue版本）.md","raw":"---\ntitle: bytemd使用（vue版本）\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 81d1513f\ndate: 2021-07-16 00:00:00\n---\n\n\nbytemd使用\n\n\n\n<!-- more -->\n\n\n\n# 初步使用\n\n\n\n首先是根据[bytemd](https://github.com/bytedance/bytemd)中md的教程来进行操作。我这里使用的是vue版本的。\n\n> 首先你要创建或者有一个vue项目（我是新创建的vue项目）\n\n## 结构了解\n\n主要是分为编辑和查看两个页面        \n\n- 编辑是Editor\n\n- 查看是View\n\n## 安装bytemd\n\n```npm\n\nnpm install @bytemd/vue\n\n```\n\n## 新建一个test页面\n\n```vue\n\n<template>\n\n  <Editor :value=\"value\" :plugins=\"plugins\" @change=\"handleChange\" />\n\n</template>\n\n\n\n<script>\n\n//这里就是引入所有的扩展的插件\n\nimport 'bytemd/dist/index.min.css'\n\nimport { Editor} from '@bytemd/vue'\n\nimport gfm from '@bytemd/plugin-gfm'\n\nimport highlight from \"@bytemd/plugin-highlight-ssr\";\n\n\n\nconst plugins = [\n\n//将所有的扩展功能放入插件数组中，然后就可以生效了    \n\ngfm(),\n\nhighlight(),\n\n]\n\n\n\nexport default {\n\n  name: \"test\",\n\ncomponents: { Editor },\n\ndata() {\n\nreturn { value: '', plugins }\n\n},\n\nmethods: {\n\nhandleChange(v) {\n\nthis.value = v\n\n},\n\n},\n\n}\n\n</script>\n\n<style scoped>\n\n\n\n</style>\n\n```\n\n## 修改APP页面\n\n\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b1ddb524e434d7794afdcf0d5dfda91~tplv-k3u1fbpfcp-watermark.image)\n\n## 启动项目\n\n最后就是启动这个项目了\n\n\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5f1e3c1af5ed43b78ea76c319b1b799f~tplv-k3u1fbpfcp-watermark.image)\n\n这只是简单的运行起来了，需要自己慢慢来摸索优化","slug":"bytemd使用（vue版本）","published":1,"updated":"2025-03-02T03:37:34.377Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4i001hn0uk5e3abds0","content":"<p>bytemd使用</p>\n<span id=\"more\"></span>\n\n\n\n<h1 id=\"初步使用\"><a href=\"#初步使用\" class=\"headerlink\" title=\"初步使用\"></a>初步使用</h1><p>首先是根据<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2J5dGVkYW5jZS9ieXRlbWQ=\">bytemd<i class=\"fa fa-external-link-alt\"></i></span>中md的教程来进行操作。我这里使用的是vue版本的。</p>\n<blockquote>\n<p>首先你要创建或者有一个vue项目（我是新创建的vue项目）</p>\n</blockquote>\n<h2 id=\"结构了解\"><a href=\"#结构了解\" class=\"headerlink\" title=\"结构了解\"></a>结构了解</h2><p>主要是分为编辑和查看两个页面        </p>\n<ul>\n<li><p>编辑是Editor</p>\n</li>\n<li><p>查看是View</p>\n</li>\n</ul>\n<h2 id=\"安装bytemd\"><a href=\"#安装bytemd\" class=\"headerlink\" title=\"安装bytemd\"></a>安装bytemd</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">npm install @bytemd/vue</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"新建一个test页面\"><a href=\"#新建一个test页面\" class=\"headerlink\" title=\"新建一个test页面\"></a>新建一个test页面</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;Editor :value=&quot;value&quot; :plugins=&quot;plugins&quot; @change=&quot;handleChange&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//这里就是引入所有的扩展的插件</span><br><span class=\"line\"></span><br><span class=\"line\">import &#x27;bytemd/dist/index.min.css&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123; Editor&#125; from &#x27;@bytemd/vue&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">import gfm from &#x27;@bytemd/plugin-gfm&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">import highlight from &quot;@bytemd/plugin-highlight-ssr&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">const plugins = [</span><br><span class=\"line\"></span><br><span class=\"line\">//将所有的扩展功能放入插件数组中，然后就可以生效了    </span><br><span class=\"line\"></span><br><span class=\"line\">gfm(),</span><br><span class=\"line\"></span><br><span class=\"line\">highlight(),</span><br><span class=\"line\"></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  name: &quot;test&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">components: &#123; Editor &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">data() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">return &#123; value: &#x27;&#x27;, plugins &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">handleChange(v) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">this.value = v</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改APP页面\"><a href=\"#修改APP页面\" class=\"headerlink\" title=\"修改APP页面\"></a>修改APP页面</h2><p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b1ddb524e434d7794afdcf0d5dfda91~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\"></p>\n<h2 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h2><p>最后就是启动这个项目了</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5f1e3c1af5ed43b78ea76c319b1b799f~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\"></p>\n<p>这只是简单的运行起来了，需要自己慢慢来摸索优化</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"bytemd使用\n\n初步使用\n首先是根据bytemd中md的教程来进行操作。我这里使用的是vue版本的。\n\n首先你要创建或者有一个vue项目（我是新创建的vue项目）\n\n结构了解\n主要是分为编辑和查看两个页面 \n\n * 编辑是Editor\n   \n   \n * 查看是View\n   \n   \n\n安装bytemd\n1\n2\n3\n\n\n\nnpm install @bytemd/vue\n\n\n\n新建一个test页面\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n","more":"<h1 id=\"初步使用\"><a href=\"#初步使用\" class=\"headerlink\" title=\"初步使用\"></a>初步使用</h1><p>首先是根据<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2J5dGVkYW5jZS9ieXRlbWQ=\">bytemd<i class=\"fa fa-external-link-alt\"></i></span>中md的教程来进行操作。我这里使用的是vue版本的。</p>\n<blockquote>\n<p>首先你要创建或者有一个vue项目（我是新创建的vue项目）</p>\n</blockquote>\n<h2 id=\"结构了解\"><a href=\"#结构了解\" class=\"headerlink\" title=\"结构了解\"></a>结构了解</h2><p>主要是分为编辑和查看两个页面        </p>\n<ul>\n<li><p>编辑是Editor</p>\n</li>\n<li><p>查看是View</p>\n</li>\n</ul>\n<h2 id=\"安装bytemd\"><a href=\"#安装bytemd\" class=\"headerlink\" title=\"安装bytemd\"></a>安装bytemd</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">npm install @bytemd/vue</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"新建一个test页面\"><a href=\"#新建一个test页面\" class=\"headerlink\" title=\"新建一个test页面\"></a>新建一个test页面</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;Editor :value=&quot;value&quot; :plugins=&quot;plugins&quot; @change=&quot;handleChange&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//这里就是引入所有的扩展的插件</span><br><span class=\"line\"></span><br><span class=\"line\">import &#x27;bytemd/dist/index.min.css&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123; Editor&#125; from &#x27;@bytemd/vue&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">import gfm from &#x27;@bytemd/plugin-gfm&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">import highlight from &quot;@bytemd/plugin-highlight-ssr&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">const plugins = [</span><br><span class=\"line\"></span><br><span class=\"line\">//将所有的扩展功能放入插件数组中，然后就可以生效了    </span><br><span class=\"line\"></span><br><span class=\"line\">gfm(),</span><br><span class=\"line\"></span><br><span class=\"line\">highlight(),</span><br><span class=\"line\"></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  name: &quot;test&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">components: &#123; Editor &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">data() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">return &#123; value: &#x27;&#x27;, plugins &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">handleChange(v) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">this.value = v</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改APP页面\"><a href=\"#修改APP页面\" class=\"headerlink\" title=\"修改APP页面\"></a>修改APP页面</h2><p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b1ddb524e434d7794afdcf0d5dfda91~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\"></p>\n<h2 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h2><p>最后就是启动这个项目了</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5f1e3c1af5ed43b78ea76c319b1b799f~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\"></p>\n<p>这只是简单的运行起来了，需要自己慢慢来摸索优化</p>"},{"title":"b树和b+树的区别","description":"","abbrlink":"5e2e35b0","date":"2021-05-05T16:00:00.000Z","_content":"\n\nB树是为了提高磁盘或外部存储设备查找效率而产生的一种多路平衡查找树。\n\n\n\nB+树为B树的变形结构，用于大多数[数据库](http://lib.csdn.net/base/mysql)或文件系统的存储而设计。\n\n\n\n<!-- more -->\n\n\n\n>B树其实又被称为B-树\n\n\n\n### B树相对于红黑树的区别\n\n\n\n在大规模数据存储的时候，红黑树往往出现由于树的深度过大而造成磁盘IO读写过于频繁，进而导致效率低下的情况。为什么会出现这样的情况，我们知道要获取磁盘上数据，必须先通过磁盘移动臂移动到数据所在的柱面，然后找到指定盘面，接着旋转盘面找到数据所在的磁道，最后对数据进行读写。磁盘IO代价主要花费在查找所需的柱面上，树的深度过大会造成磁盘IO频繁读写。根据磁盘查找存取的次数往往由树的高度所决定，所以，只要我们通过某种较好的树结构减少树的结构尽量减少树的高度，B树可以有多个子女，从几十到上千，可以降低树的高度。\n\n\n\n### B树和B+树的区别\n\n\n\n1. B树则所有节点都带有带有指向记录（数据）的指针（ROWID），B+树中只有叶子节点会带有指向记录(数据)的指针（ROWID）。因为B+树它把所有的卫星数据(或指向数据的指针)都存储在叶节点中，内部节点只存放关键字和孩子指针，不会带上指向记录的指针（ROWID），这样，一个块中可以容纳更多的索引项，一是可以降低树的高度。二是一个内部节点可以定位更多的叶子节点(优点1)。\n\n\n\n2. B+树中每个叶子节点都包含指向下一个叶子节点的指针。所有叶子节点都是通过指针连接在一起，而B树不会。 叶子节点之间通过指针来连接，范围扫描将十分简单(优点2)，而对于B树来说，则需要在叶子节点和内部节点不停的往返移动。\n\n\n\n　　 B+树还有一个最大的好处，遍历更加高效，方便扫库（优点2），B树必须用中序遍历的方法按序扫库，而B+树直接从叶子结点挨个扫一遍就完了，B+树支持range-query非常方便，而B树不支持。这是数据库选用B+树的最主要原因。（B+树的遍历更加高效，B树需要以中序的方式遍历节点，而B+树只需把所有叶子节点串成链表就可以从头到尾遍历）。\n\n\n\n3. B+树每个节点的指针和key一样多，B树每个节点指针比key多1。\n\n\n\n为什么说**B+比**B树更适合实际应用中[操作系统](http://lib.csdn.net/base/operatingsystem)的文件索引和数据库索引？\n\n\n\n1) B+的磁盘读写代价更低\n\n\n\n**B+的**内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了。\n\n\n\n2) B+tree的查询效率更加稳定\n\n\n\n由于非叶子结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。\n\n\n\n数据库索引采用B+树的主要原因是 B树在提高了磁盘IO性能的同时并没有解决元素遍历的效率低下的问题。正是为了解决这个问题，B+树应运而生。B+树只要遍历叶子节点就可以实现整棵树的遍历。而且在数据库中基于范围的查询是非常频繁的，而B树不支持这样的操作（或者说效率太低）\n\n\n\n### B+树的优点\n\n\n\n1. 非叶子节点不会带上指向记录的指针（ROWID），这样，一个块中可以容纳更多的索引项，一是可以降低树的高度。二是一个内部节点可以定位更多的叶子节点。\n\n\n\n2. 叶子节点之间通过指针来连接，范围扫描将十分简单，而对于B树来说，则需要在叶子节点和内部节点不停的往返移动。\n\n\n\n### B树的优点：\n\n\n\n对于在内部节点的数据，可直接得到，不必根据叶子节点来定位。\n\n\n\n### 应用\n\n\n\nmysql采用B+树来作为索引的数据结构\n\n\n\nMongoDB采用的是B树","source":"_posts/b树和b-树的区别.md","raw":"---\ntitle: b树和b+树的区别\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 5e2e35b0\ndate: 2021-05-06 00:00:00\n---\n\n\nB树是为了提高磁盘或外部存储设备查找效率而产生的一种多路平衡查找树。\n\n\n\nB+树为B树的变形结构，用于大多数[数据库](http://lib.csdn.net/base/mysql)或文件系统的存储而设计。\n\n\n\n<!-- more -->\n\n\n\n>B树其实又被称为B-树\n\n\n\n### B树相对于红黑树的区别\n\n\n\n在大规模数据存储的时候，红黑树往往出现由于树的深度过大而造成磁盘IO读写过于频繁，进而导致效率低下的情况。为什么会出现这样的情况，我们知道要获取磁盘上数据，必须先通过磁盘移动臂移动到数据所在的柱面，然后找到指定盘面，接着旋转盘面找到数据所在的磁道，最后对数据进行读写。磁盘IO代价主要花费在查找所需的柱面上，树的深度过大会造成磁盘IO频繁读写。根据磁盘查找存取的次数往往由树的高度所决定，所以，只要我们通过某种较好的树结构减少树的结构尽量减少树的高度，B树可以有多个子女，从几十到上千，可以降低树的高度。\n\n\n\n### B树和B+树的区别\n\n\n\n1. B树则所有节点都带有带有指向记录（数据）的指针（ROWID），B+树中只有叶子节点会带有指向记录(数据)的指针（ROWID）。因为B+树它把所有的卫星数据(或指向数据的指针)都存储在叶节点中，内部节点只存放关键字和孩子指针，不会带上指向记录的指针（ROWID），这样，一个块中可以容纳更多的索引项，一是可以降低树的高度。二是一个内部节点可以定位更多的叶子节点(优点1)。\n\n\n\n2. B+树中每个叶子节点都包含指向下一个叶子节点的指针。所有叶子节点都是通过指针连接在一起，而B树不会。 叶子节点之间通过指针来连接，范围扫描将十分简单(优点2)，而对于B树来说，则需要在叶子节点和内部节点不停的往返移动。\n\n\n\n　　 B+树还有一个最大的好处，遍历更加高效，方便扫库（优点2），B树必须用中序遍历的方法按序扫库，而B+树直接从叶子结点挨个扫一遍就完了，B+树支持range-query非常方便，而B树不支持。这是数据库选用B+树的最主要原因。（B+树的遍历更加高效，B树需要以中序的方式遍历节点，而B+树只需把所有叶子节点串成链表就可以从头到尾遍历）。\n\n\n\n3. B+树每个节点的指针和key一样多，B树每个节点指针比key多1。\n\n\n\n为什么说**B+比**B树更适合实际应用中[操作系统](http://lib.csdn.net/base/operatingsystem)的文件索引和数据库索引？\n\n\n\n1) B+的磁盘读写代价更低\n\n\n\n**B+的**内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了。\n\n\n\n2) B+tree的查询效率更加稳定\n\n\n\n由于非叶子结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。\n\n\n\n数据库索引采用B+树的主要原因是 B树在提高了磁盘IO性能的同时并没有解决元素遍历的效率低下的问题。正是为了解决这个问题，B+树应运而生。B+树只要遍历叶子节点就可以实现整棵树的遍历。而且在数据库中基于范围的查询是非常频繁的，而B树不支持这样的操作（或者说效率太低）\n\n\n\n### B+树的优点\n\n\n\n1. 非叶子节点不会带上指向记录的指针（ROWID），这样，一个块中可以容纳更多的索引项，一是可以降低树的高度。二是一个内部节点可以定位更多的叶子节点。\n\n\n\n2. 叶子节点之间通过指针来连接，范围扫描将十分简单，而对于B树来说，则需要在叶子节点和内部节点不停的往返移动。\n\n\n\n### B树的优点：\n\n\n\n对于在内部节点的数据，可直接得到，不必根据叶子节点来定位。\n\n\n\n### 应用\n\n\n\nmysql采用B+树来作为索引的数据结构\n\n\n\nMongoDB采用的是B树","slug":"b树和b-树的区别","published":1,"updated":"2025-03-02T03:37:34.379Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4i001jn0uk3bzj5pfb","content":"<p>B树是为了提高磁盘或外部存储设备查找效率而产生的一种多路平衡查找树。</p>\n<p>B+树为B树的变形结构，用于大多数<span class=\"exturl\" data-url=\"aHR0cDovL2xpYi5jc2RuLm5ldC9iYXNlL215c3Fs\">数据库<i class=\"fa fa-external-link-alt\"></i></span>或文件系统的存储而设计。</p>\n<span id=\"more\"></span>\n\n\n\n<blockquote>\n<p>B树其实又被称为B-树</p>\n</blockquote>\n<h3 id=\"B树相对于红黑树的区别\"><a href=\"#B树相对于红黑树的区别\" class=\"headerlink\" title=\"B树相对于红黑树的区别\"></a>B树相对于红黑树的区别</h3><p>在大规模数据存储的时候，红黑树往往出现由于树的深度过大而造成磁盘IO读写过于频繁，进而导致效率低下的情况。为什么会出现这样的情况，我们知道要获取磁盘上数据，必须先通过磁盘移动臂移动到数据所在的柱面，然后找到指定盘面，接着旋转盘面找到数据所在的磁道，最后对数据进行读写。磁盘IO代价主要花费在查找所需的柱面上，树的深度过大会造成磁盘IO频繁读写。根据磁盘查找存取的次数往往由树的高度所决定，所以，只要我们通过某种较好的树结构减少树的结构尽量减少树的高度，B树可以有多个子女，从几十到上千，可以降低树的高度。</p>\n<h3 id=\"B树和B-树的区别\"><a href=\"#B树和B-树的区别\" class=\"headerlink\" title=\"B树和B+树的区别\"></a>B树和B+树的区别</h3><ol>\n<li><p>B树则所有节点都带有带有指向记录（数据）的指针（ROWID），B+树中只有叶子节点会带有指向记录(数据)的指针（ROWID）。因为B+树它把所有的卫星数据(或指向数据的指针)都存储在叶节点中，内部节点只存放关键字和孩子指针，不会带上指向记录的指针（ROWID），这样，一个块中可以容纳更多的索引项，一是可以降低树的高度。二是一个内部节点可以定位更多的叶子节点(优点1)。</p>\n</li>\n<li><p>B+树中每个叶子节点都包含指向下一个叶子节点的指针。所有叶子节点都是通过指针连接在一起，而B树不会。 叶子节点之间通过指针来连接，范围扫描将十分简单(优点2)，而对于B树来说，则需要在叶子节点和内部节点不停的往返移动。</p>\n</li>\n</ol>\n<p>　　 B+树还有一个最大的好处，遍历更加高效，方便扫库（优点2），B树必须用中序遍历的方法按序扫库，而B+树直接从叶子结点挨个扫一遍就完了，B+树支持range-query非常方便，而B树不支持。这是数据库选用B+树的最主要原因。（B+树的遍历更加高效，B树需要以中序的方式遍历节点，而B+树只需把所有叶子节点串成链表就可以从头到尾遍历）。</p>\n<ol start=\"3\">\n<li>B+树每个节点的指针和key一样多，B树每个节点指针比key多1。</li>\n</ol>\n<p>为什么说<strong>B+比</strong>B树更适合实际应用中<span class=\"exturl\" data-url=\"aHR0cDovL2xpYi5jc2RuLm5ldC9iYXNlL29wZXJhdGluZ3N5c3RlbQ==\">操作系统<i class=\"fa fa-external-link-alt\"></i></span>的文件索引和数据库索引？</p>\n<ol>\n<li>B+的磁盘读写代价更低</li>\n</ol>\n<p><strong>B+的</strong>内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了。</p>\n<ol start=\"2\">\n<li>B+tree的查询效率更加稳定</li>\n</ol>\n<p>由于非叶子结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。</p>\n<p>数据库索引采用B+树的主要原因是 B树在提高了磁盘IO性能的同时并没有解决元素遍历的效率低下的问题。正是为了解决这个问题，B+树应运而生。B+树只要遍历叶子节点就可以实现整棵树的遍历。而且在数据库中基于范围的查询是非常频繁的，而B树不支持这样的操作（或者说效率太低）</p>\n<h3 id=\"B-树的优点\"><a href=\"#B-树的优点\" class=\"headerlink\" title=\"B+树的优点\"></a>B+树的优点</h3><ol>\n<li><p>非叶子节点不会带上指向记录的指针（ROWID），这样，一个块中可以容纳更多的索引项，一是可以降低树的高度。二是一个内部节点可以定位更多的叶子节点。</p>\n</li>\n<li><p>叶子节点之间通过指针来连接，范围扫描将十分简单，而对于B树来说，则需要在叶子节点和内部节点不停的往返移动。</p>\n</li>\n</ol>\n<h3 id=\"B树的优点：\"><a href=\"#B树的优点：\" class=\"headerlink\" title=\"B树的优点：\"></a>B树的优点：</h3><p>对于在内部节点的数据，可直接得到，不必根据叶子节点来定位。</p>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><p>mysql采用B+树来作为索引的数据结构</p>\n<p>MongoDB采用的是B树</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"B树是为了提高磁盘或外部存储设备查找效率而产生的一种多路平衡查找树。\n\nB+树为B树的变形结构，用于大多数数据库或文件系统的存储而设计。\n\nB树其实又被称为B-树\n\nB树相对于红黑树的区别\n在大规模数据存储的时候，红黑树往往出现由于树的深度过大而造成磁盘IO读写过于频繁，进而导致效率低下的情况。为什么会出现这样的情况，我们知道要获取磁盘上数据，必须先通过磁盘移动臂移动到数据所在的柱面，然后找到指定盘面，接着旋转盘面找到数据所在的磁道，最后对数据进行读写。磁盘IO代价主要花费在查找所需的柱面上，树的深度过大会造成磁盘IO频繁读写。根据磁盘查找存取的次数往往由树的高度所决定，所以，只要我们通过某种","more":"<blockquote>\n<p>B树其实又被称为B-树</p>\n</blockquote>\n<h3 id=\"B树相对于红黑树的区别\"><a href=\"#B树相对于红黑树的区别\" class=\"headerlink\" title=\"B树相对于红黑树的区别\"></a>B树相对于红黑树的区别</h3><p>在大规模数据存储的时候，红黑树往往出现由于树的深度过大而造成磁盘IO读写过于频繁，进而导致效率低下的情况。为什么会出现这样的情况，我们知道要获取磁盘上数据，必须先通过磁盘移动臂移动到数据所在的柱面，然后找到指定盘面，接着旋转盘面找到数据所在的磁道，最后对数据进行读写。磁盘IO代价主要花费在查找所需的柱面上，树的深度过大会造成磁盘IO频繁读写。根据磁盘查找存取的次数往往由树的高度所决定，所以，只要我们通过某种较好的树结构减少树的结构尽量减少树的高度，B树可以有多个子女，从几十到上千，可以降低树的高度。</p>\n<h3 id=\"B树和B-树的区别\"><a href=\"#B树和B-树的区别\" class=\"headerlink\" title=\"B树和B+树的区别\"></a>B树和B+树的区别</h3><ol>\n<li><p>B树则所有节点都带有带有指向记录（数据）的指针（ROWID），B+树中只有叶子节点会带有指向记录(数据)的指针（ROWID）。因为B+树它把所有的卫星数据(或指向数据的指针)都存储在叶节点中，内部节点只存放关键字和孩子指针，不会带上指向记录的指针（ROWID），这样，一个块中可以容纳更多的索引项，一是可以降低树的高度。二是一个内部节点可以定位更多的叶子节点(优点1)。</p>\n</li>\n<li><p>B+树中每个叶子节点都包含指向下一个叶子节点的指针。所有叶子节点都是通过指针连接在一起，而B树不会。 叶子节点之间通过指针来连接，范围扫描将十分简单(优点2)，而对于B树来说，则需要在叶子节点和内部节点不停的往返移动。</p>\n</li>\n</ol>\n<p>　　 B+树还有一个最大的好处，遍历更加高效，方便扫库（优点2），B树必须用中序遍历的方法按序扫库，而B+树直接从叶子结点挨个扫一遍就完了，B+树支持range-query非常方便，而B树不支持。这是数据库选用B+树的最主要原因。（B+树的遍历更加高效，B树需要以中序的方式遍历节点，而B+树只需把所有叶子节点串成链表就可以从头到尾遍历）。</p>\n<ol start=\"3\">\n<li>B+树每个节点的指针和key一样多，B树每个节点指针比key多1。</li>\n</ol>\n<p>为什么说<strong>B+比</strong>B树更适合实际应用中<span class=\"exturl\" data-url=\"aHR0cDovL2xpYi5jc2RuLm5ldC9iYXNlL29wZXJhdGluZ3N5c3RlbQ==\">操作系统<i class=\"fa fa-external-link-alt\"></i></span>的文件索引和数据库索引？</p>\n<ol>\n<li>B+的磁盘读写代价更低</li>\n</ol>\n<p><strong>B+的</strong>内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了。</p>\n<ol start=\"2\">\n<li>B+tree的查询效率更加稳定</li>\n</ol>\n<p>由于非叶子结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。</p>\n<p>数据库索引采用B+树的主要原因是 B树在提高了磁盘IO性能的同时并没有解决元素遍历的效率低下的问题。正是为了解决这个问题，B+树应运而生。B+树只要遍历叶子节点就可以实现整棵树的遍历。而且在数据库中基于范围的查询是非常频繁的，而B树不支持这样的操作（或者说效率太低）</p>\n<h3 id=\"B-树的优点\"><a href=\"#B-树的优点\" class=\"headerlink\" title=\"B+树的优点\"></a>B+树的优点</h3><ol>\n<li><p>非叶子节点不会带上指向记录的指针（ROWID），这样，一个块中可以容纳更多的索引项，一是可以降低树的高度。二是一个内部节点可以定位更多的叶子节点。</p>\n</li>\n<li><p>叶子节点之间通过指针来连接，范围扫描将十分简单，而对于B树来说，则需要在叶子节点和内部节点不停的往返移动。</p>\n</li>\n</ol>\n<h3 id=\"B树的优点：\"><a href=\"#B树的优点：\" class=\"headerlink\" title=\"B树的优点：\"></a>B树的优点：</h3><p>对于在内部节点的数据，可直接得到，不必根据叶子节点来定位。</p>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><p>mysql采用B+树来作为索引的数据结构</p>\n<p>MongoDB采用的是B树</p>"},{"title":"git","description":"","abbrlink":"518e617c","date":"2021-04-17T16:00:00.000Z","_content":"\n\n[学习链接](https://juejin.cn/post/6844904054477291533#heading-11)\n\n\n\n[链接2](https://shidongxu0312.github.io/2019/11/28/Git-原理详解及实用指南/#比对工作目录和暂存区) [官方地址](https://git-scm.com/)\n\n\n\n[git在线练习网站](https://learngitbranching.js.org/?demo=&locale=zh_CN)\n\n\n\n<!-- more -->\n\n\n\n# 原理\n\n\n\n![image-20210418091116305](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210418091116305.png)\n\n\n\n# 常用命令\n\n\n\n## 特殊符号\n\n\n\n### ^\n\n\n\n一个^代表往前一个commit\n\n\n\n比如git rebase HEAD^  ，就是当前的commit往前一个commit\n\n\n\ngit rebase HEAD^^  ，就是当前的commit往前两个commit\n\n\n\n### ~\n\n\n\n~5  就是当前的commit往前五个\n\n\n\n## HEAD\n\n\n\nhead就是指向当前的commit\n\n\n\n## pull\n\n\n\ngit pull  将数据从远程仓库拉取到本地仓库\n\n\n\npull的实质是先把代码从远程仓库拉取下来，然后merge\n\n\n\n## push\n\n\n\ngit push 将本地仓库的数据推送到远程仓库中\n\n\n\n## branch\n\n\n\n```Git\n\n#branch 就是分支的意思\n\n\n\n#当前分支切换到a分支\n\ngit branch a \n\n#f是强制的意思，强制将master强制指向head的父节点\n\ngit branch -f master HEAD~1 \n\n```\n\n\n\n## commit\n\n\n\n### git commit —amend\n\n\n\n会在分支上真的提交，是一个新的commit，而不是将刚才的commit替换掉，不会操作原commit\n\n\n\n> 只有最新的commit出错才可以amend，其他的要用rebase\n\n\n\n## checkout\n\n\n\n作用：切换分支\n\n\n\n```Git\n\ngit checkout -b newBranchName\n\n```\n\n\n\n## add\n\n\n\nadd的不是整个文件，是改动的内容\n\n\n\n## log\n\n\n\n### git log 查看日志\n\n\n\n### git log -p 查看详细日志\n\n\n\n详细地查看每一行都修改了什么\n\n\n\n### git log –stat 查看简要统计\n\n\n\n查看的是大概的修改内容\n\n\n\n## show\n\n\n\n### git show 查看当前的commit\n\n\n\n## merge\n\n\n\nmerge其实就是合并的意思，比如a和b都从远端仓库拉取代码下来，然后修改不同的文件或者同一文件的不同内容，那么就会将不同的地方直接合并，但是如果修改的是同一个文件的相同内容，那么当b或者a当对方先提交的时候，就会发生冲突conflict ，冲突的原因是，你现在的代码和远端仓库的代码不一样，需要保持一样才可以进行合并\n\n\n\n```Git\n\n#当前分支和branchName分支合并\n\ngit merge branchName  \n\n```\n\n\n\n## diff\n\n\n\n使用 git diff （不加选项参数）可以显示工作目录和暂存区之间的不同。换句话说，这条指令可以让你看到「如果你现在把所有文件都 add，你会向暂存区中增加哪些内容」\n\n\n\n### git diff --staged 比对暂存区和上一条的提交\n\n\n\n换句话说，这条指令可以让你看到「如果你立即输入 git commit，你将会提交什么」：\n\n\n\n--cached 和--staged一模一样，可以直接替换使用\n\n\n\n### git diff head\n\n\n\n## rebase\n\n\n\n### git rebase -i HEAD^\n\n\n\n## reset\n\n\n\n### 本质\n\n\n\n移动head以及它所指向的branch\n\n\n\n### git reset\n\n\n\n不加参数，默认是—mixed\n\n\n\n工作目录保留，清空暂存区\n\n\n\n```Git\n\n#回退三个版本  包括当前版本\n\ngit rebase -i HEAD~3  \n\n```\n\n\n\n![image-20210418091157558](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210418091157558.png)\n\n\n\n上图执行的命令是git reset -i HEAD^3\n\n\n\n当前分支为main，结点为c5  向上回退三个版本就是c3，所以c3到c5整体移动，然后通过可视化界面来调整c5和c4的顺序，最后就呈现出来的效果如上图所示\n\n\n\n### git reset —hard HEAD^\n\n\n\n刚才提交的commit觉得太烂了，不想修改了，直接放弃，就可以使用这个，退回到上一个commit就可以了\n\n\n\nhard的意思是重置工作目录，意思就是直接将head新指向的commit的内容全部放置到当前目录，就是你之前没有提交的代码都被覆盖掉了\n\n\n\n### git reset —soft HEAD^\n\n\n\n切换到上一级的commit，将当前工作目录的改动保存到暂存区中，这也是与har的最大的区别\n\n\n\n## revert\n\n\n\n作用：撤销上一步的提交，并且将其推动到远程仓库\n\n\n\n## cherry-pick\n\n\n\n作用：将其他分支节点直接复制到当前分支的当前节点\n\n\n\n## reflog\n\n\n\n查看 Git 仓库中的引用的移动记录。如果不指定引用，它会显示 HEAD 的移动记录\n\n\n\n当你误删一个branch的时候，看下branch所对应的\n\n\n\ngit reflog master 显示master的移动记录","source":"_posts/git.md","raw":"---\ntitle: git\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 518e617c\ndate: 2021-04-18 00:00:00\n---\n\n\n[学习链接](https://juejin.cn/post/6844904054477291533#heading-11)\n\n\n\n[链接2](https://shidongxu0312.github.io/2019/11/28/Git-原理详解及实用指南/#比对工作目录和暂存区) [官方地址](https://git-scm.com/)\n\n\n\n[git在线练习网站](https://learngitbranching.js.org/?demo=&locale=zh_CN)\n\n\n\n<!-- more -->\n\n\n\n# 原理\n\n\n\n![image-20210418091116305](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210418091116305.png)\n\n\n\n# 常用命令\n\n\n\n## 特殊符号\n\n\n\n### ^\n\n\n\n一个^代表往前一个commit\n\n\n\n比如git rebase HEAD^  ，就是当前的commit往前一个commit\n\n\n\ngit rebase HEAD^^  ，就是当前的commit往前两个commit\n\n\n\n### ~\n\n\n\n~5  就是当前的commit往前五个\n\n\n\n## HEAD\n\n\n\nhead就是指向当前的commit\n\n\n\n## pull\n\n\n\ngit pull  将数据从远程仓库拉取到本地仓库\n\n\n\npull的实质是先把代码从远程仓库拉取下来，然后merge\n\n\n\n## push\n\n\n\ngit push 将本地仓库的数据推送到远程仓库中\n\n\n\n## branch\n\n\n\n```Git\n\n#branch 就是分支的意思\n\n\n\n#当前分支切换到a分支\n\ngit branch a \n\n#f是强制的意思，强制将master强制指向head的父节点\n\ngit branch -f master HEAD~1 \n\n```\n\n\n\n## commit\n\n\n\n### git commit —amend\n\n\n\n会在分支上真的提交，是一个新的commit，而不是将刚才的commit替换掉，不会操作原commit\n\n\n\n> 只有最新的commit出错才可以amend，其他的要用rebase\n\n\n\n## checkout\n\n\n\n作用：切换分支\n\n\n\n```Git\n\ngit checkout -b newBranchName\n\n```\n\n\n\n## add\n\n\n\nadd的不是整个文件，是改动的内容\n\n\n\n## log\n\n\n\n### git log 查看日志\n\n\n\n### git log -p 查看详细日志\n\n\n\n详细地查看每一行都修改了什么\n\n\n\n### git log –stat 查看简要统计\n\n\n\n查看的是大概的修改内容\n\n\n\n## show\n\n\n\n### git show 查看当前的commit\n\n\n\n## merge\n\n\n\nmerge其实就是合并的意思，比如a和b都从远端仓库拉取代码下来，然后修改不同的文件或者同一文件的不同内容，那么就会将不同的地方直接合并，但是如果修改的是同一个文件的相同内容，那么当b或者a当对方先提交的时候，就会发生冲突conflict ，冲突的原因是，你现在的代码和远端仓库的代码不一样，需要保持一样才可以进行合并\n\n\n\n```Git\n\n#当前分支和branchName分支合并\n\ngit merge branchName  \n\n```\n\n\n\n## diff\n\n\n\n使用 git diff （不加选项参数）可以显示工作目录和暂存区之间的不同。换句话说，这条指令可以让你看到「如果你现在把所有文件都 add，你会向暂存区中增加哪些内容」\n\n\n\n### git diff --staged 比对暂存区和上一条的提交\n\n\n\n换句话说，这条指令可以让你看到「如果你立即输入 git commit，你将会提交什么」：\n\n\n\n--cached 和--staged一模一样，可以直接替换使用\n\n\n\n### git diff head\n\n\n\n## rebase\n\n\n\n### git rebase -i HEAD^\n\n\n\n## reset\n\n\n\n### 本质\n\n\n\n移动head以及它所指向的branch\n\n\n\n### git reset\n\n\n\n不加参数，默认是—mixed\n\n\n\n工作目录保留，清空暂存区\n\n\n\n```Git\n\n#回退三个版本  包括当前版本\n\ngit rebase -i HEAD~3  \n\n```\n\n\n\n![image-20210418091157558](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210418091157558.png)\n\n\n\n上图执行的命令是git reset -i HEAD^3\n\n\n\n当前分支为main，结点为c5  向上回退三个版本就是c3，所以c3到c5整体移动，然后通过可视化界面来调整c5和c4的顺序，最后就呈现出来的效果如上图所示\n\n\n\n### git reset —hard HEAD^\n\n\n\n刚才提交的commit觉得太烂了，不想修改了，直接放弃，就可以使用这个，退回到上一个commit就可以了\n\n\n\nhard的意思是重置工作目录，意思就是直接将head新指向的commit的内容全部放置到当前目录，就是你之前没有提交的代码都被覆盖掉了\n\n\n\n### git reset —soft HEAD^\n\n\n\n切换到上一级的commit，将当前工作目录的改动保存到暂存区中，这也是与har的最大的区别\n\n\n\n## revert\n\n\n\n作用：撤销上一步的提交，并且将其推动到远程仓库\n\n\n\n## cherry-pick\n\n\n\n作用：将其他分支节点直接复制到当前分支的当前节点\n\n\n\n## reflog\n\n\n\n查看 Git 仓库中的引用的移动记录。如果不指定引用，它会显示 HEAD 的移动记录\n\n\n\n当你误删一个branch的时候，看下branch所对应的\n\n\n\ngit reflog master 显示master的移动记录","slug":"git","published":1,"updated":"2025-03-02T03:37:34.377Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4j001ln0uk7vu12lyh","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTA0MDU0NDc3MjkxNTMzI2hlYWRpbmctMTE=\">学习链接<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaGlkb25neHUwMzEyLmdpdGh1Yi5pby8yMDE5LzExLzI4L0dpdC0lRTUlOEUlOUYlRTclOTAlODYlRTglQUYlQTYlRTglQTclQTMlRTUlOEYlOEElRTUlQUUlOUUlRTclOTQlQTglRTYlOEMlODclRTUlOEQlOTcvIyVFNiVBRiU5NCVFNSVBRiVCOSVFNSVCNyVBNSVFNCVCRCU5QyVFNyU5QiVBRSVFNSVCRCU5NSVFNSU5MiU4QyVFNiU5QSU4MiVFNSVBRCU5OCVFNSU4QyVCQQ==\">链接2<i class=\"fa fa-external-link-alt\"></i></span> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS8=\">官方地址<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFybmdpdGJyYW5jaGluZy5qcy5vcmcvP2RlbW89JmxvY2FsZT16aF9DTg==\">git在线练习网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n<span id=\"more\"></span>\n\n\n\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210418091116305.png\" alt=\"image-20210418091116305\" loading=\"lazy\"></p>\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><h2 id=\"特殊符号\"><a href=\"#特殊符号\" class=\"headerlink\" title=\"特殊符号\"></a>特殊符号</h2><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"^\"></a>^</h3><p>一个^代表往前一个commit</p>\n<p>比如git rebase HEAD^  ，就是当前的commit往前一个commit</p>\n<p>git rebase HEAD^^  ，就是当前的commit往前两个commit</p>\n<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"~\"></a>~</h3><p>~5  就是当前的commit往前五个</p>\n<h2 id=\"HEAD\"><a href=\"#HEAD\" class=\"headerlink\" title=\"HEAD\"></a>HEAD</h2><p>head就是指向当前的commit</p>\n<h2 id=\"pull\"><a href=\"#pull\" class=\"headerlink\" title=\"pull\"></a>pull</h2><p>git pull  将数据从远程仓库拉取到本地仓库</p>\n<p>pull的实质是先把代码从远程仓库拉取下来，然后merge</p>\n<h2 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push\"></a>push</h2><p>git push 将本地仓库的数据推送到远程仓库中</p>\n<h2 id=\"branch\"><a href=\"#branch\" class=\"headerlink\" title=\"branch\"></a>branch</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#branch 就是分支的意思</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#当前分支切换到a分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch a </span><br><span class=\"line\"></span><br><span class=\"line\">#f是强制的意思，强制将master强制指向head的父节点</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -f master HEAD~1 </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"commit\"><a href=\"#commit\" class=\"headerlink\" title=\"commit\"></a>commit</h2><h3 id=\"git-commit-—amend\"><a href=\"#git-commit-—amend\" class=\"headerlink\" title=\"git commit —amend\"></a>git commit —amend</h3><p>会在分支上真的提交，是一个新的commit，而不是将刚才的commit替换掉，不会操作原commit</p>\n<blockquote>\n<p>只有最新的commit出错才可以amend，其他的要用rebase</p>\n</blockquote>\n<h2 id=\"checkout\"><a href=\"#checkout\" class=\"headerlink\" title=\"checkout\"></a>checkout</h2><p>作用：切换分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git checkout -b newBranchName</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"add\"><a href=\"#add\" class=\"headerlink\" title=\"add\"></a>add</h2><p>add的不是整个文件，是改动的内容</p>\n<h2 id=\"log\"><a href=\"#log\" class=\"headerlink\" title=\"log\"></a>log</h2><h3 id=\"git-log-查看日志\"><a href=\"#git-log-查看日志\" class=\"headerlink\" title=\"git log 查看日志\"></a>git log 查看日志</h3><h3 id=\"git-log-p-查看详细日志\"><a href=\"#git-log-p-查看详细日志\" class=\"headerlink\" title=\"git log -p 查看详细日志\"></a>git log -p 查看详细日志</h3><p>详细地查看每一行都修改了什么</p>\n<h3 id=\"git-log-–stat-查看简要统计\"><a href=\"#git-log-–stat-查看简要统计\" class=\"headerlink\" title=\"git log –stat 查看简要统计\"></a>git log –stat 查看简要统计</h3><p>查看的是大概的修改内容</p>\n<h2 id=\"show\"><a href=\"#show\" class=\"headerlink\" title=\"show\"></a>show</h2><h3 id=\"git-show-查看当前的commit\"><a href=\"#git-show-查看当前的commit\" class=\"headerlink\" title=\"git show 查看当前的commit\"></a>git show 查看当前的commit</h3><h2 id=\"merge\"><a href=\"#merge\" class=\"headerlink\" title=\"merge\"></a>merge</h2><p>merge其实就是合并的意思，比如a和b都从远端仓库拉取代码下来，然后修改不同的文件或者同一文件的不同内容，那么就会将不同的地方直接合并，但是如果修改的是同一个文件的相同内容，那么当b或者a当对方先提交的时候，就会发生冲突conflict ，冲突的原因是，你现在的代码和远端仓库的代码不一样，需要保持一样才可以进行合并</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#当前分支和branchName分支合并</span><br><span class=\"line\"></span><br><span class=\"line\">git merge branchName  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"diff\"><a href=\"#diff\" class=\"headerlink\" title=\"diff\"></a>diff</h2><p>使用 git diff （不加选项参数）可以显示工作目录和暂存区之间的不同。换句话说，这条指令可以让你看到「如果你现在把所有文件都 add，你会向暂存区中增加哪些内容」</p>\n<h3 id=\"git-diff-staged-比对暂存区和上一条的提交\"><a href=\"#git-diff-staged-比对暂存区和上一条的提交\" class=\"headerlink\" title=\"git diff --staged 比对暂存区和上一条的提交\"></a>git diff --staged 比对暂存区和上一条的提交</h3><p>换句话说，这条指令可以让你看到「如果你立即输入 git commit，你将会提交什么」：</p>\n<p>--cached 和--staged一模一样，可以直接替换使用</p>\n<h3 id=\"git-diff-head\"><a href=\"#git-diff-head\" class=\"headerlink\" title=\"git diff head\"></a>git diff head</h3><h2 id=\"rebase\"><a href=\"#rebase\" class=\"headerlink\" title=\"rebase\"></a>rebase</h2><h3 id=\"git-rebase-i-HEAD\"><a href=\"#git-rebase-i-HEAD\" class=\"headerlink\" title=\"git rebase -i HEAD^\"></a>git rebase -i HEAD^</h3><h2 id=\"reset\"><a href=\"#reset\" class=\"headerlink\" title=\"reset\"></a>reset</h2><h3 id=\"本质\"><a href=\"#本质\" class=\"headerlink\" title=\"本质\"></a>本质</h3><p>移动head以及它所指向的branch</p>\n<h3 id=\"git-reset\"><a href=\"#git-reset\" class=\"headerlink\" title=\"git reset\"></a>git reset</h3><p>不加参数，默认是—mixed</p>\n<p>工作目录保留，清空暂存区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#回退三个版本  包括当前版本</span><br><span class=\"line\"></span><br><span class=\"line\">git rebase -i HEAD~3  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210418091157558.png\" alt=\"image-20210418091157558\" loading=\"lazy\"></p>\n<p>上图执行的命令是git reset -i HEAD^3</p>\n<p>当前分支为main，结点为c5  向上回退三个版本就是c3，所以c3到c5整体移动，然后通过可视化界面来调整c5和c4的顺序，最后就呈现出来的效果如上图所示</p>\n<h3 id=\"git-reset-—hard-HEAD\"><a href=\"#git-reset-—hard-HEAD\" class=\"headerlink\" title=\"git reset —hard HEAD^\"></a>git reset —hard HEAD^</h3><p>刚才提交的commit觉得太烂了，不想修改了，直接放弃，就可以使用这个，退回到上一个commit就可以了</p>\n<p>hard的意思是重置工作目录，意思就是直接将head新指向的commit的内容全部放置到当前目录，就是你之前没有提交的代码都被覆盖掉了</p>\n<h3 id=\"git-reset-—soft-HEAD\"><a href=\"#git-reset-—soft-HEAD\" class=\"headerlink\" title=\"git reset —soft HEAD^\"></a>git reset —soft HEAD^</h3><p>切换到上一级的commit，将当前工作目录的改动保存到暂存区中，这也是与har的最大的区别</p>\n<h2 id=\"revert\"><a href=\"#revert\" class=\"headerlink\" title=\"revert\"></a>revert</h2><p>作用：撤销上一步的提交，并且将其推动到远程仓库</p>\n<h2 id=\"cherry-pick\"><a href=\"#cherry-pick\" class=\"headerlink\" title=\"cherry-pick\"></a>cherry-pick</h2><p>作用：将其他分支节点直接复制到当前分支的当前节点</p>\n<h2 id=\"reflog\"><a href=\"#reflog\" class=\"headerlink\" title=\"reflog\"></a>reflog</h2><p>查看 Git 仓库中的引用的移动记录。如果不指定引用，它会显示 HEAD 的移动记录</p>\n<p>当你误删一个branch的时候，看下branch所对应的</p>\n<p>git reflog master 显示master的移动记录</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"学习链接\n\n链接2 官方地址\n\ngit在线练习网站\n\n原理\n\n\n常用命令\n特殊符号\n^\n一个^代表往前一个commit\n\n比如git rebase HEAD^ ，就是当前的commit往前一个commit\n\ngit rebase HEAD^^ ，就是当前的commit往前两个commit\n\n~\n~5 就是当前的commit往前五个\n\nHEAD\nhead就是指向当前的commit\n\npull\ngit pull 将数据从远程仓库拉取到本地仓库\n\npull的实质是先把代码从远程仓库拉取下来，然后merge\n\npush\ngit push 将本地仓库的数据推送到远程仓库中\n\nbranch\n1\n2\n3\n4","more":"<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210418091116305.png\" alt=\"image-20210418091116305\" loading=\"lazy\"></p>\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><h2 id=\"特殊符号\"><a href=\"#特殊符号\" class=\"headerlink\" title=\"特殊符号\"></a>特殊符号</h2><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"^\"></a>^</h3><p>一个^代表往前一个commit</p>\n<p>比如git rebase HEAD^  ，就是当前的commit往前一个commit</p>\n<p>git rebase HEAD^^  ，就是当前的commit往前两个commit</p>\n<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"~\"></a>~</h3><p>~5  就是当前的commit往前五个</p>\n<h2 id=\"HEAD\"><a href=\"#HEAD\" class=\"headerlink\" title=\"HEAD\"></a>HEAD</h2><p>head就是指向当前的commit</p>\n<h2 id=\"pull\"><a href=\"#pull\" class=\"headerlink\" title=\"pull\"></a>pull</h2><p>git pull  将数据从远程仓库拉取到本地仓库</p>\n<p>pull的实质是先把代码从远程仓库拉取下来，然后merge</p>\n<h2 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push\"></a>push</h2><p>git push 将本地仓库的数据推送到远程仓库中</p>\n<h2 id=\"branch\"><a href=\"#branch\" class=\"headerlink\" title=\"branch\"></a>branch</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#branch 就是分支的意思</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#当前分支切换到a分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch a </span><br><span class=\"line\"></span><br><span class=\"line\">#f是强制的意思，强制将master强制指向head的父节点</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -f master HEAD~1 </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"commit\"><a href=\"#commit\" class=\"headerlink\" title=\"commit\"></a>commit</h2><h3 id=\"git-commit-—amend\"><a href=\"#git-commit-—amend\" class=\"headerlink\" title=\"git commit —amend\"></a>git commit —amend</h3><p>会在分支上真的提交，是一个新的commit，而不是将刚才的commit替换掉，不会操作原commit</p>\n<blockquote>\n<p>只有最新的commit出错才可以amend，其他的要用rebase</p>\n</blockquote>\n<h2 id=\"checkout\"><a href=\"#checkout\" class=\"headerlink\" title=\"checkout\"></a>checkout</h2><p>作用：切换分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git checkout -b newBranchName</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"add\"><a href=\"#add\" class=\"headerlink\" title=\"add\"></a>add</h2><p>add的不是整个文件，是改动的内容</p>\n<h2 id=\"log\"><a href=\"#log\" class=\"headerlink\" title=\"log\"></a>log</h2><h3 id=\"git-log-查看日志\"><a href=\"#git-log-查看日志\" class=\"headerlink\" title=\"git log 查看日志\"></a>git log 查看日志</h3><h3 id=\"git-log-p-查看详细日志\"><a href=\"#git-log-p-查看详细日志\" class=\"headerlink\" title=\"git log -p 查看详细日志\"></a>git log -p 查看详细日志</h3><p>详细地查看每一行都修改了什么</p>\n<h3 id=\"git-log-–stat-查看简要统计\"><a href=\"#git-log-–stat-查看简要统计\" class=\"headerlink\" title=\"git log –stat 查看简要统计\"></a>git log –stat 查看简要统计</h3><p>查看的是大概的修改内容</p>\n<h2 id=\"show\"><a href=\"#show\" class=\"headerlink\" title=\"show\"></a>show</h2><h3 id=\"git-show-查看当前的commit\"><a href=\"#git-show-查看当前的commit\" class=\"headerlink\" title=\"git show 查看当前的commit\"></a>git show 查看当前的commit</h3><h2 id=\"merge\"><a href=\"#merge\" class=\"headerlink\" title=\"merge\"></a>merge</h2><p>merge其实就是合并的意思，比如a和b都从远端仓库拉取代码下来，然后修改不同的文件或者同一文件的不同内容，那么就会将不同的地方直接合并，但是如果修改的是同一个文件的相同内容，那么当b或者a当对方先提交的时候，就会发生冲突conflict ，冲突的原因是，你现在的代码和远端仓库的代码不一样，需要保持一样才可以进行合并</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#当前分支和branchName分支合并</span><br><span class=\"line\"></span><br><span class=\"line\">git merge branchName  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"diff\"><a href=\"#diff\" class=\"headerlink\" title=\"diff\"></a>diff</h2><p>使用 git diff （不加选项参数）可以显示工作目录和暂存区之间的不同。换句话说，这条指令可以让你看到「如果你现在把所有文件都 add，你会向暂存区中增加哪些内容」</p>\n<h3 id=\"git-diff-staged-比对暂存区和上一条的提交\"><a href=\"#git-diff-staged-比对暂存区和上一条的提交\" class=\"headerlink\" title=\"git diff --staged 比对暂存区和上一条的提交\"></a>git diff --staged 比对暂存区和上一条的提交</h3><p>换句话说，这条指令可以让你看到「如果你立即输入 git commit，你将会提交什么」：</p>\n<p>--cached 和--staged一模一样，可以直接替换使用</p>\n<h3 id=\"git-diff-head\"><a href=\"#git-diff-head\" class=\"headerlink\" title=\"git diff head\"></a>git diff head</h3><h2 id=\"rebase\"><a href=\"#rebase\" class=\"headerlink\" title=\"rebase\"></a>rebase</h2><h3 id=\"git-rebase-i-HEAD\"><a href=\"#git-rebase-i-HEAD\" class=\"headerlink\" title=\"git rebase -i HEAD^\"></a>git rebase -i HEAD^</h3><h2 id=\"reset\"><a href=\"#reset\" class=\"headerlink\" title=\"reset\"></a>reset</h2><h3 id=\"本质\"><a href=\"#本质\" class=\"headerlink\" title=\"本质\"></a>本质</h3><p>移动head以及它所指向的branch</p>\n<h3 id=\"git-reset\"><a href=\"#git-reset\" class=\"headerlink\" title=\"git reset\"></a>git reset</h3><p>不加参数，默认是—mixed</p>\n<p>工作目录保留，清空暂存区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#回退三个版本  包括当前版本</span><br><span class=\"line\"></span><br><span class=\"line\">git rebase -i HEAD~3  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210418091157558.png\" alt=\"image-20210418091157558\" loading=\"lazy\"></p>\n<p>上图执行的命令是git reset -i HEAD^3</p>\n<p>当前分支为main，结点为c5  向上回退三个版本就是c3，所以c3到c5整体移动，然后通过可视化界面来调整c5和c4的顺序，最后就呈现出来的效果如上图所示</p>\n<h3 id=\"git-reset-—hard-HEAD\"><a href=\"#git-reset-—hard-HEAD\" class=\"headerlink\" title=\"git reset —hard HEAD^\"></a>git reset —hard HEAD^</h3><p>刚才提交的commit觉得太烂了，不想修改了，直接放弃，就可以使用这个，退回到上一个commit就可以了</p>\n<p>hard的意思是重置工作目录，意思就是直接将head新指向的commit的内容全部放置到当前目录，就是你之前没有提交的代码都被覆盖掉了</p>\n<h3 id=\"git-reset-—soft-HEAD\"><a href=\"#git-reset-—soft-HEAD\" class=\"headerlink\" title=\"git reset —soft HEAD^\"></a>git reset —soft HEAD^</h3><p>切换到上一级的commit，将当前工作目录的改动保存到暂存区中，这也是与har的最大的区别</p>\n<h2 id=\"revert\"><a href=\"#revert\" class=\"headerlink\" title=\"revert\"></a>revert</h2><p>作用：撤销上一步的提交，并且将其推动到远程仓库</p>\n<h2 id=\"cherry-pick\"><a href=\"#cherry-pick\" class=\"headerlink\" title=\"cherry-pick\"></a>cherry-pick</h2><p>作用：将其他分支节点直接复制到当前分支的当前节点</p>\n<h2 id=\"reflog\"><a href=\"#reflog\" class=\"headerlink\" title=\"reflog\"></a>reflog</h2><p>查看 Git 仓库中的引用的移动记录。如果不指定引用，它会显示 HEAD 的移动记录</p>\n<p>当你误删一个branch的时候，看下branch所对应的</p>\n<p>git reflog master 显示master的移动记录</p>"},{"title":"github 引用其他仓库的issue","description":"","abbrlink":"b77c3e8c","date":"2023-05-22T16:00:00.000Z","_content":"\n\n简单记录一下\n\n\n\n<!-- more -->\n\n\n\n# 显示效果\n\n\n\n# ![Snipaste_2023-05-23_17-25-32.png](http://shyblog.world/upload/Snipaste_2023-05-23_17-25-32.png)实际操作\n\n\n\nThis PR fixes https://github.com/apache/pulsar/pull/20345\n\n\n\n> 虽然看起来很简单，但是我还是搜不到，于是就记录一下\n","source":"_posts/github-引用其他仓库的issue.md","raw":"---\ntitle: github 引用其他仓库的issue\ndescription: ''\ntags:\n  - 无标签\nabbrlink: b77c3e8c\ndate: 2023-05-23 00:00:00\n---\n\n\n简单记录一下\n\n\n\n<!-- more -->\n\n\n\n# 显示效果\n\n\n\n# ![Snipaste_2023-05-23_17-25-32.png](http://shyblog.world/upload/Snipaste_2023-05-23_17-25-32.png)实际操作\n\n\n\nThis PR fixes https://github.com/apache/pulsar/pull/20345\n\n\n\n> 虽然看起来很简单，但是我还是搜不到，于是就记录一下\n","slug":"github-引用其他仓库的issue","published":1,"updated":"2025-03-02T03:37:34.379Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4j001nn0ukchi76qwe","content":"<p>简单记录一下</p>\n<span id=\"more\"></span>\n\n\n\n<h1 id=\"显示效果\"><a href=\"#显示效果\" class=\"headerlink\" title=\"显示效果\"></a>显示效果</h1><h1 id=\"实际操作\"><a href=\"#实际操作\" class=\"headerlink\" title=\"实际操作\"></a><img src=\"http://shyblog.world/upload/Snipaste_2023-05-23_17-25-32.png\" alt=\"Snipaste_2023-05-23_17-25-32.png\" loading=\"lazy\">实际操作</h1><p>This PR fixes <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9wdWxzYXIvcHVsbC8yMDM0NQ==\">https://github.com/apache/pulsar/pull/20345<i class=\"fa fa-external-link-alt\"></i></span></p>\n<blockquote>\n<p>虽然看起来很简单，但是我还是搜不到，于是就记录一下</p>\n</blockquote>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"简单记录一下\n\n显示效果\n实际操作\nThis PR fixes https://github.com/apache/pulsar/pull/20345\n\n虽然看起来很简单，但是我还是搜不到，于是就记录一下","more":"<h1 id=\"显示效果\"><a href=\"#显示效果\" class=\"headerlink\" title=\"显示效果\"></a>显示效果</h1><h1 id=\"实际操作\"><a href=\"#实际操作\" class=\"headerlink\" title=\"实际操作\"></a><img src=\"http://shyblog.world/upload/Snipaste_2023-05-23_17-25-32.png\" alt=\"Snipaste_2023-05-23_17-25-32.png\" loading=\"lazy\">实际操作</h1><p>This PR fixes <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9wdWxzYXIvcHVsbC8yMDM0NQ==\">https://github.com/apache/pulsar/pull/20345<i class=\"fa fa-external-link-alt\"></i></span></p>\n<blockquote>\n<p>虽然看起来很简单，但是我还是搜不到，于是就记录一下</p>\n</blockquote>"},{"title":"git常用命令","description":"","abbrlink":"423abe9e","date":"2022-01-27T16:00:00.000Z","_content":"\n\n## 用户名密码\n\n\n\n```git\n\n# 查看git 用户名\n\ngit config --global user.name\n\n# 查看git email\n\ngit config --global user.email\n\n```\n\n\n\n## 配置\n\n\n\n```git\n\n# 查看全局的配置\n\ngit config --global -l\n\n# 查看https的代理 直接在后面跟上代理地址就可以设置代理\n\ngit config --global  https.proxy\n\n# 查看http的代理 直接在后面跟上代理地址就可以设置代理\n\ngit config --global  http.proxy\n\n# 取消http代理\n\ngit config --global --unset http.proxy\n\n# 取消https代理\n\ngit config --global --unset https.proxy\n\n# 当连接github的时候使用的ssh的方式\n\ngit config --global socket.proxy 127.0.0.1:9981\n\n```\n\n\n\n## 强制覆盖\n\n\n\n```git\n\ngit fetch --all &&  git reset --hard origin/master && git pull\n\n```\n\n\n\n## 远程分支\n\n\n\n- 查看本地分支\n\n\n\n```git\n\ngit branch\n\n```\n\n\n\n- 查看远程分支\n\n\n\n```git\n\ngit brach -r\n\n```\n\n\n\n- 查看所有分支\n\n\n\n```git\n\ngit branch -a\n\n```\n\n\n\n- 将本地新建的分支与远程分支相关联（在当前分支下输入以下命令）\n\n- 两种方式\n\n\n\n```git\n\ngit branch -u origin/分支名   其中origin/分支名 中分支名 为远程分支名\n\n git branch –-set-upstream-to=origin/分支名 本地分支名\n\n```\n\n\n\n- 撤销本地分支与远程分支的关系\n\n\n\n```git\n\ngit branch --unset-upstream\n\n```\n\n\n\n## 改变远程分支名字\n\n\n\n本地分支是可以直接修改名字，但是远程不行，步骤：\n\n\n\n1. 改变本地分支名字\n\n2. 删除远程分支（当然在此之前要将本地分支和远程分支同步）\n\n3. 将本地分支推送到 远程分支\n\n4. 将本地分支和远程分支关联起来\n\n\n\n```git\n\ngit branch -m oldBranch newBranch\n\ngit push --delete origin oldBranch\n\ngit push origin newBranch\n\ngit branch --set-upstream-to origin/newBranch\n\n```\n\n\n\n## 回退版本\n\n\n\n### reset\n\n\n\n- git reset: 回滚到某次提交。\n\n- git reset --soft: 此次提交之后的修改会被退回到暂存区。\n\n- git reset --hard 此次提交之后的修改不做任何保留，git status 查看工作区是没有记录的。\n\n\n\n### revert\n\n\n\n- git revert : 之前的提交仍会保留在 git log 中，而此次撤销会做为一次新的提交。\n\n- git revert -m :用于对 merge 节点的操作，-m 指定具体某个提交点。\n\n\n\n## ssh生成\n\n\n\n```bash\n\nssh-keygen -t ed25519 -C \"your_email@example.com\"\n\n```\n\n\n\n> 如果是比较老的系统不支持，可以使用\n\n>\n\n> ```bash\n\n> ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n\n> ```\n","source":"_posts/git常用命令.md","raw":"---\ntitle: git常用命令\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 423abe9e\ndate: 2022-01-28 00:00:00\n---\n\n\n## 用户名密码\n\n\n\n```git\n\n# 查看git 用户名\n\ngit config --global user.name\n\n# 查看git email\n\ngit config --global user.email\n\n```\n\n\n\n## 配置\n\n\n\n```git\n\n# 查看全局的配置\n\ngit config --global -l\n\n# 查看https的代理 直接在后面跟上代理地址就可以设置代理\n\ngit config --global  https.proxy\n\n# 查看http的代理 直接在后面跟上代理地址就可以设置代理\n\ngit config --global  http.proxy\n\n# 取消http代理\n\ngit config --global --unset http.proxy\n\n# 取消https代理\n\ngit config --global --unset https.proxy\n\n# 当连接github的时候使用的ssh的方式\n\ngit config --global socket.proxy 127.0.0.1:9981\n\n```\n\n\n\n## 强制覆盖\n\n\n\n```git\n\ngit fetch --all &&  git reset --hard origin/master && git pull\n\n```\n\n\n\n## 远程分支\n\n\n\n- 查看本地分支\n\n\n\n```git\n\ngit branch\n\n```\n\n\n\n- 查看远程分支\n\n\n\n```git\n\ngit brach -r\n\n```\n\n\n\n- 查看所有分支\n\n\n\n```git\n\ngit branch -a\n\n```\n\n\n\n- 将本地新建的分支与远程分支相关联（在当前分支下输入以下命令）\n\n- 两种方式\n\n\n\n```git\n\ngit branch -u origin/分支名   其中origin/分支名 中分支名 为远程分支名\n\n git branch –-set-upstream-to=origin/分支名 本地分支名\n\n```\n\n\n\n- 撤销本地分支与远程分支的关系\n\n\n\n```git\n\ngit branch --unset-upstream\n\n```\n\n\n\n## 改变远程分支名字\n\n\n\n本地分支是可以直接修改名字，但是远程不行，步骤：\n\n\n\n1. 改变本地分支名字\n\n2. 删除远程分支（当然在此之前要将本地分支和远程分支同步）\n\n3. 将本地分支推送到 远程分支\n\n4. 将本地分支和远程分支关联起来\n\n\n\n```git\n\ngit branch -m oldBranch newBranch\n\ngit push --delete origin oldBranch\n\ngit push origin newBranch\n\ngit branch --set-upstream-to origin/newBranch\n\n```\n\n\n\n## 回退版本\n\n\n\n### reset\n\n\n\n- git reset: 回滚到某次提交。\n\n- git reset --soft: 此次提交之后的修改会被退回到暂存区。\n\n- git reset --hard 此次提交之后的修改不做任何保留，git status 查看工作区是没有记录的。\n\n\n\n### revert\n\n\n\n- git revert : 之前的提交仍会保留在 git log 中，而此次撤销会做为一次新的提交。\n\n- git revert -m :用于对 merge 节点的操作，-m 指定具体某个提交点。\n\n\n\n## ssh生成\n\n\n\n```bash\n\nssh-keygen -t ed25519 -C \"your_email@example.com\"\n\n```\n\n\n\n> 如果是比较老的系统不支持，可以使用\n\n>\n\n> ```bash\n\n> ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n\n> ```\n","slug":"git常用命令","published":1,"updated":"2025-03-02T03:37:34.380Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4k001pn0ukd7uqgmt8","content":"<h2 id=\"用户名密码\"><a href=\"#用户名密码\" class=\"headerlink\" title=\"用户名密码\"></a>用户名密码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 查看git 用户名</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global user.name</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看git email</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global user.email</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 查看全局的配置</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global -l</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看https的代理 直接在后面跟上代理地址就可以设置代理</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global  https.proxy</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看http的代理 直接在后面跟上代理地址就可以设置代理</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global  http.proxy</span><br><span class=\"line\"></span><br><span class=\"line\"># 取消http代理</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\"></span><br><span class=\"line\"># 取消https代理</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global --unset https.proxy</span><br><span class=\"line\"></span><br><span class=\"line\"># 当连接github的时候使用的ssh的方式</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global socket.proxy 127.0.0.1:9981</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"强制覆盖\"><a href=\"#强制覆盖\" class=\"headerlink\" title=\"强制覆盖\"></a>强制覆盖</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git fetch --all &amp;&amp;  git reset --hard origin/master &amp;&amp; git pull</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"远程分支\"><a href=\"#远程分支\" class=\"headerlink\" title=\"远程分支\"></a>远程分支</h2><ul>\n<li>查看本地分支</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git branch</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>查看远程分支</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git brach -r</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>查看所有分支</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git branch -a</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><p>将本地新建的分支与远程分支相关联（在当前分支下输入以下命令）</p>\n</li>\n<li><p>两种方式</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git branch -u origin/分支名   其中origin/分支名 中分支名 为远程分支名</span><br><span class=\"line\"></span><br><span class=\"line\"> git branch –-set-upstream-to=origin/分支名 本地分支名</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>撤销本地分支与远程分支的关系</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git branch --unset-upstream</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"改变远程分支名字\"><a href=\"#改变远程分支名字\" class=\"headerlink\" title=\"改变远程分支名字\"></a>改变远程分支名字</h2><p>本地分支是可以直接修改名字，但是远程不行，步骤：</p>\n<ol>\n<li><p>改变本地分支名字</p>\n</li>\n<li><p>删除远程分支（当然在此之前要将本地分支和远程分支同步）</p>\n</li>\n<li><p>将本地分支推送到 远程分支</p>\n</li>\n<li><p>将本地分支和远程分支关联起来</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git branch -m oldBranch newBranch</span><br><span class=\"line\"></span><br><span class=\"line\">git push --delete origin oldBranch</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin newBranch</span><br><span class=\"line\"></span><br><span class=\"line\">git branch --set-upstream-to origin/newBranch</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"回退版本\"><a href=\"#回退版本\" class=\"headerlink\" title=\"回退版本\"></a>回退版本</h2><h3 id=\"reset\"><a href=\"#reset\" class=\"headerlink\" title=\"reset\"></a>reset</h3><ul>\n<li><p>git reset: 回滚到某次提交。</p>\n</li>\n<li><p>git reset --soft: 此次提交之后的修改会被退回到暂存区。</p>\n</li>\n<li><p>git reset --hard 此次提交之后的修改不做任何保留，git status 查看工作区是没有记录的。</p>\n</li>\n</ul>\n<h3 id=\"revert\"><a href=\"#revert\" class=\"headerlink\" title=\"revert\"></a>revert</h3><ul>\n<li><p>git revert : 之前的提交仍会保留在 git log 中，而此次撤销会做为一次新的提交。</p>\n</li>\n<li><p>git revert -m :用于对 merge 节点的操作，-m 指定具体某个提交点。</p>\n</li>\n</ul>\n<h2 id=\"ssh生成\"><a href=\"#ssh生成\" class=\"headerlink\" title=\"ssh生成\"></a>ssh生成</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ssh-keygen -t ed25519 -C <span class=\"string\">&quot;your_email@example.com&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>如果是比较老的系统不支持，可以使用</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ssh-keygen -t rsa -b 4096 -C <span class=\"string\">&quot;your_email@example.com&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</blockquote>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"用户名密码\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 查看git 用户名\n\ngit config --global user.name\n\n# 查看git email\n\ngit config --global user.email\n\n\n\n配置\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# 查看全局的配置\n\ngit config --global -l\n\n# 查看https的代理 直接在后面跟上代理地址就可以设置代理\n\ngit config --global  https.proxy\n\n# 查看ht","more":"<h2 id=\"用户名密码\"><a href=\"#用户名密码\" class=\"headerlink\" title=\"用户名密码\"></a>用户名密码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 查看git 用户名</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global user.name</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看git email</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global user.email</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 查看全局的配置</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global -l</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看https的代理 直接在后面跟上代理地址就可以设置代理</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global  https.proxy</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看http的代理 直接在后面跟上代理地址就可以设置代理</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global  http.proxy</span><br><span class=\"line\"></span><br><span class=\"line\"># 取消http代理</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\"></span><br><span class=\"line\"># 取消https代理</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global --unset https.proxy</span><br><span class=\"line\"></span><br><span class=\"line\"># 当连接github的时候使用的ssh的方式</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global socket.proxy 127.0.0.1:9981</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"强制覆盖\"><a href=\"#强制覆盖\" class=\"headerlink\" title=\"强制覆盖\"></a>强制覆盖</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git fetch --all &amp;&amp;  git reset --hard origin/master &amp;&amp; git pull</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"远程分支\"><a href=\"#远程分支\" class=\"headerlink\" title=\"远程分支\"></a>远程分支</h2><ul>\n<li>查看本地分支</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git branch</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>查看远程分支</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git brach -r</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>查看所有分支</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git branch -a</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><p>将本地新建的分支与远程分支相关联（在当前分支下输入以下命令）</p>\n</li>\n<li><p>两种方式</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git branch -u origin/分支名   其中origin/分支名 中分支名 为远程分支名</span><br><span class=\"line\"></span><br><span class=\"line\"> git branch –-set-upstream-to=origin/分支名 本地分支名</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>撤销本地分支与远程分支的关系</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git branch --unset-upstream</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"改变远程分支名字\"><a href=\"#改变远程分支名字\" class=\"headerlink\" title=\"改变远程分支名字\"></a>改变远程分支名字</h2><p>本地分支是可以直接修改名字，但是远程不行，步骤：</p>\n<ol>\n<li><p>改变本地分支名字</p>\n</li>\n<li><p>删除远程分支（当然在此之前要将本地分支和远程分支同步）</p>\n</li>\n<li><p>将本地分支推送到 远程分支</p>\n</li>\n<li><p>将本地分支和远程分支关联起来</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git branch -m oldBranch newBranch</span><br><span class=\"line\"></span><br><span class=\"line\">git push --delete origin oldBranch</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin newBranch</span><br><span class=\"line\"></span><br><span class=\"line\">git branch --set-upstream-to origin/newBranch</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"回退版本\"><a href=\"#回退版本\" class=\"headerlink\" title=\"回退版本\"></a>回退版本</h2><h3 id=\"reset\"><a href=\"#reset\" class=\"headerlink\" title=\"reset\"></a>reset</h3><ul>\n<li><p>git reset: 回滚到某次提交。</p>\n</li>\n<li><p>git reset --soft: 此次提交之后的修改会被退回到暂存区。</p>\n</li>\n<li><p>git reset --hard 此次提交之后的修改不做任何保留，git status 查看工作区是没有记录的。</p>\n</li>\n</ul>\n<h3 id=\"revert\"><a href=\"#revert\" class=\"headerlink\" title=\"revert\"></a>revert</h3><ul>\n<li><p>git revert : 之前的提交仍会保留在 git log 中，而此次撤销会做为一次新的提交。</p>\n</li>\n<li><p>git revert -m :用于对 merge 节点的操作，-m 指定具体某个提交点。</p>\n</li>\n</ul>\n<h2 id=\"ssh生成\"><a href=\"#ssh生成\" class=\"headerlink\" title=\"ssh生成\"></a>ssh生成</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ssh-keygen -t ed25519 -C <span class=\"string\">&quot;your_email@example.com&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>如果是比较老的系统不支持，可以使用</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ssh-keygen -t rsa -b 4096 -C <span class=\"string\">&quot;your_email@example.com&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</blockquote>\n"},{"title":"halo主题wsl2docker模式开发指南","description":"","abbrlink":"5ea16806","date":"2024-06-30T16:00:00.000Z","_content":"\n\n```cmd\n\ndocker run -it spring_thymeleaf_cache=false -d --name halo -p 8090:8090 -v ~/.halo2:/root/.halo2 registry.fit2cloud.com/halo/halo:2.16\n\n```\n","source":"_posts/halo主题wsl2docker模式开发指南.md","raw":"---\ntitle: halo主题wsl2docker模式开发指南\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 5ea16806\ndate: 2024-07-01 00:00:00\n---\n\n\n```cmd\n\ndocker run -it spring_thymeleaf_cache=false -d --name halo -p 8090:8090 -v ~/.halo2:/root/.halo2 registry.fit2cloud.com/halo/halo:2.16\n\n```\n","slug":"halo主题wsl2docker模式开发指南","published":1,"updated":"2025-03-02T03:37:34.381Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4k001rn0ukan1g2ra0","content":"<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">docker run -it spring_thymeleaf_cache=false -d --name halo -p <span class=\"number\">8090</span>:<span class=\"number\">8090</span> -v ~/.halo2:/root/.halo2 registry.fit2cloud.com/halo/halo:<span class=\"number\">2</span>.<span class=\"number\">16</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"1\n2\n3\n\n\n\ndocker run -it spring_thymeleaf_cache=false -d --name halo -p 8090:8090 -v ~/.halo2:/root/.halo2 registry.fit2cloud.com/halo/halo:2.16","more":"<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">docker run -it spring_thymeleaf_cache=false -d --name halo -p <span class=\"number\">8090</span>:<span class=\"number\">8090</span> -v ~/.halo2:/root/.halo2 registry.fit2cloud.com/halo/halo:<span class=\"number\">2</span>.<span class=\"number\">16</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"hashCode和equals关系","description":"","abbrlink":"fdc2e8dd","date":"2021-05-09T16:00:00.000Z","_content":"\n\n 详细对比hashCode和equals\n\n\n\n<!-- more -->\n\n\n\n## **hashCode()和equals()是什么？**\n\n\n\nhashCode()方法和equals()方法的作用其实一样，在Java里都是用来对比两个对象是否相等一致。\n\n\n\n## hashCode()和equals()区别是什么？\n\n\n\n### 性能\n\n\n\n就性能来说，肯定是hashcode更快一下，毕竟只需要比较hashcode值就好\n\n\n\nequals的话，比如String类型，如果是字符串比较大的话，比较起来就比较慢，如果字符串比较小的话，就比较快\n\n\n\n### 可靠性\n\n\n\n- equals()相等的两个对象他们的hashCode()肯定相等，也就是用equals()对比是绝对可靠的。\n\n- hashCode()相等的两个对象他们的equals()不一定相等，也就是hashCode()不是绝对可靠的。\n\n\n\n## 为何重写equals也要重写hashcode\n\n\n\n如果你重写了equals，比如说是基于对象的内容实现的，而保留hashCode的实现不变，那么很可能某两个对象明明是“相等”，而hashCode却不一样。\n\n\n\n这样，当你用其中的一个作为键保存到hashMap、hasoTable或hashSet中，再以“相等的”找另一个作为键值去查找他们的时候，则根本找不到。\n\n\n\n## **为什么equals()相等，hashCode就一定要相等，而hashCode相等，却不要求equals相等?**\n\n\n\n- 因为是按照hashCode来访问小内存块，所以hashCode必须相等。\n\n- HashMap获取一个对象是比较key的hashCode相等和equals为true。\n\n\n\n之所以hashCode相等，却可以equal不等，就比如ObjectA和ObjectB他们都有属性name，那么hashCode都以name计算，所以hashCode一样，但是两个对象属于不同类型，所以equals为false。\n\n\n\n## 阿里相关约束\n\n\n\n- 只要重写 equals，就必须重写 hashCode；\n\n- 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的对象必须重写这两个方法；\n\n- 如果自定义对象做为 Map 的键，那么必须重写 hashCode 和 equals；\n\n- String 重写了 hashCode 和 equals 方法，所以我们可以非常愉快地使用 String 对象作为 key 来使用；\n\n\n\n> 参考链接：\n\n>\n\n> https://zhuanlan.zhihu.com/p/58337357","source":"_posts/hashCode和equals关系.md","raw":"---\ntitle: hashCode和equals关系\ndescription: ''\ntags:\n  - 无标签\nabbrlink: fdc2e8dd\ndate: 2021-05-10 00:00:00\n---\n\n\n 详细对比hashCode和equals\n\n\n\n<!-- more -->\n\n\n\n## **hashCode()和equals()是什么？**\n\n\n\nhashCode()方法和equals()方法的作用其实一样，在Java里都是用来对比两个对象是否相等一致。\n\n\n\n## hashCode()和equals()区别是什么？\n\n\n\n### 性能\n\n\n\n就性能来说，肯定是hashcode更快一下，毕竟只需要比较hashcode值就好\n\n\n\nequals的话，比如String类型，如果是字符串比较大的话，比较起来就比较慢，如果字符串比较小的话，就比较快\n\n\n\n### 可靠性\n\n\n\n- equals()相等的两个对象他们的hashCode()肯定相等，也就是用equals()对比是绝对可靠的。\n\n- hashCode()相等的两个对象他们的equals()不一定相等，也就是hashCode()不是绝对可靠的。\n\n\n\n## 为何重写equals也要重写hashcode\n\n\n\n如果你重写了equals，比如说是基于对象的内容实现的，而保留hashCode的实现不变，那么很可能某两个对象明明是“相等”，而hashCode却不一样。\n\n\n\n这样，当你用其中的一个作为键保存到hashMap、hasoTable或hashSet中，再以“相等的”找另一个作为键值去查找他们的时候，则根本找不到。\n\n\n\n## **为什么equals()相等，hashCode就一定要相等，而hashCode相等，却不要求equals相等?**\n\n\n\n- 因为是按照hashCode来访问小内存块，所以hashCode必须相等。\n\n- HashMap获取一个对象是比较key的hashCode相等和equals为true。\n\n\n\n之所以hashCode相等，却可以equal不等，就比如ObjectA和ObjectB他们都有属性name，那么hashCode都以name计算，所以hashCode一样，但是两个对象属于不同类型，所以equals为false。\n\n\n\n## 阿里相关约束\n\n\n\n- 只要重写 equals，就必须重写 hashCode；\n\n- 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的对象必须重写这两个方法；\n\n- 如果自定义对象做为 Map 的键，那么必须重写 hashCode 和 equals；\n\n- String 重写了 hashCode 和 equals 方法，所以我们可以非常愉快地使用 String 对象作为 key 来使用；\n\n\n\n> 参考链接：\n\n>\n\n> https://zhuanlan.zhihu.com/p/58337357","slug":"hashCode和equals关系","published":1,"updated":"2025-03-02T03:37:34.381Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4k001tn0ukglak8an9","content":"<p> 详细对比hashCode和equals</p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"hashCode-和equals-是什么？\"><a href=\"#hashCode-和equals-是什么？\" class=\"headerlink\" title=\"hashCode()和equals()是什么？\"></a><strong>hashCode()和equals()是什么？</strong></h2><p>hashCode()方法和equals()方法的作用其实一样，在Java里都是用来对比两个对象是否相等一致。</p>\n<h2 id=\"hashCode-和equals-区别是什么？\"><a href=\"#hashCode-和equals-区别是什么？\" class=\"headerlink\" title=\"hashCode()和equals()区别是什么？\"></a>hashCode()和equals()区别是什么？</h2><h3 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h3><p>就性能来说，肯定是hashcode更快一下，毕竟只需要比较hashcode值就好</p>\n<p>equals的话，比如String类型，如果是字符串比较大的话，比较起来就比较慢，如果字符串比较小的话，就比较快</p>\n<h3 id=\"可靠性\"><a href=\"#可靠性\" class=\"headerlink\" title=\"可靠性\"></a>可靠性</h3><ul>\n<li><p>equals()相等的两个对象他们的hashCode()肯定相等，也就是用equals()对比是绝对可靠的。</p>\n</li>\n<li><p>hashCode()相等的两个对象他们的equals()不一定相等，也就是hashCode()不是绝对可靠的。</p>\n</li>\n</ul>\n<h2 id=\"为何重写equals也要重写hashcode\"><a href=\"#为何重写equals也要重写hashcode\" class=\"headerlink\" title=\"为何重写equals也要重写hashcode\"></a>为何重写equals也要重写hashcode</h2><p>如果你重写了equals，比如说是基于对象的内容实现的，而保留hashCode的实现不变，那么很可能某两个对象明明是“相等”，而hashCode却不一样。</p>\n<p>这样，当你用其中的一个作为键保存到hashMap、hasoTable或hashSet中，再以“相等的”找另一个作为键值去查找他们的时候，则根本找不到。</p>\n<h2 id=\"为什么equals-相等，hashCode就一定要相等，而hashCode相等，却不要求equals相等\"><a href=\"#为什么equals-相等，hashCode就一定要相等，而hashCode相等，却不要求equals相等\" class=\"headerlink\" title=\"为什么equals()相等，hashCode就一定要相等，而hashCode相等，却不要求equals相等?\"></a><strong>为什么equals()相等，hashCode就一定要相等，而hashCode相等，却不要求equals相等?</strong></h2><ul>\n<li><p>因为是按照hashCode来访问小内存块，所以hashCode必须相等。</p>\n</li>\n<li><p>HashMap获取一个对象是比较key的hashCode相等和equals为true。</p>\n</li>\n</ul>\n<p>之所以hashCode相等，却可以equal不等，就比如ObjectA和ObjectB他们都有属性name，那么hashCode都以name计算，所以hashCode一样，但是两个对象属于不同类型，所以equals为false。</p>\n<h2 id=\"阿里相关约束\"><a href=\"#阿里相关约束\" class=\"headerlink\" title=\"阿里相关约束\"></a>阿里相关约束</h2><ul>\n<li><p>只要重写 equals，就必须重写 hashCode；</p>\n</li>\n<li><p>因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的对象必须重写这两个方法；</p>\n</li>\n<li><p>如果自定义对象做为 Map 的键，那么必须重写 hashCode 和 equals；</p>\n</li>\n<li><p>String 重写了 hashCode 和 equals 方法，所以我们可以非常愉快地使用 String 对象作为 key 来使用；</p>\n</li>\n</ul>\n<blockquote>\n<p>参考链接：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81ODMzNzM1Nw==\">https://zhuanlan.zhihu.com/p/58337357<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"详细对比hashCode和equals\n\nhashCode()和equals()是什么？\nhashCode()方法和equals()方法的作用其实一样，在Java里都是用来对比两个对象是否相等一致。\n\nhashCode()和equals()区别是什么？\n性能\n就性能来说，肯定是hashcode更快一下，毕竟只需要比较hashcode值就好\n\nequals的话，比如String类型，如果是字符串比较大的话，比较起来就比较慢，如果字符串比较小的话，就比较快\n\n可靠性\n * equals()相等的两个对象他们的hashCode()肯定相等，也就是用equals()对比是绝对可靠的。\n   \n   \n","more":"<h2 id=\"hashCode-和equals-是什么？\"><a href=\"#hashCode-和equals-是什么？\" class=\"headerlink\" title=\"hashCode()和equals()是什么？\"></a><strong>hashCode()和equals()是什么？</strong></h2><p>hashCode()方法和equals()方法的作用其实一样，在Java里都是用来对比两个对象是否相等一致。</p>\n<h2 id=\"hashCode-和equals-区别是什么？\"><a href=\"#hashCode-和equals-区别是什么？\" class=\"headerlink\" title=\"hashCode()和equals()区别是什么？\"></a>hashCode()和equals()区别是什么？</h2><h3 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h3><p>就性能来说，肯定是hashcode更快一下，毕竟只需要比较hashcode值就好</p>\n<p>equals的话，比如String类型，如果是字符串比较大的话，比较起来就比较慢，如果字符串比较小的话，就比较快</p>\n<h3 id=\"可靠性\"><a href=\"#可靠性\" class=\"headerlink\" title=\"可靠性\"></a>可靠性</h3><ul>\n<li><p>equals()相等的两个对象他们的hashCode()肯定相等，也就是用equals()对比是绝对可靠的。</p>\n</li>\n<li><p>hashCode()相等的两个对象他们的equals()不一定相等，也就是hashCode()不是绝对可靠的。</p>\n</li>\n</ul>\n<h2 id=\"为何重写equals也要重写hashcode\"><a href=\"#为何重写equals也要重写hashcode\" class=\"headerlink\" title=\"为何重写equals也要重写hashcode\"></a>为何重写equals也要重写hashcode</h2><p>如果你重写了equals，比如说是基于对象的内容实现的，而保留hashCode的实现不变，那么很可能某两个对象明明是“相等”，而hashCode却不一样。</p>\n<p>这样，当你用其中的一个作为键保存到hashMap、hasoTable或hashSet中，再以“相等的”找另一个作为键值去查找他们的时候，则根本找不到。</p>\n<h2 id=\"为什么equals-相等，hashCode就一定要相等，而hashCode相等，却不要求equals相等\"><a href=\"#为什么equals-相等，hashCode就一定要相等，而hashCode相等，却不要求equals相等\" class=\"headerlink\" title=\"为什么equals()相等，hashCode就一定要相等，而hashCode相等，却不要求equals相等?\"></a><strong>为什么equals()相等，hashCode就一定要相等，而hashCode相等，却不要求equals相等?</strong></h2><ul>\n<li><p>因为是按照hashCode来访问小内存块，所以hashCode必须相等。</p>\n</li>\n<li><p>HashMap获取一个对象是比较key的hashCode相等和equals为true。</p>\n</li>\n</ul>\n<p>之所以hashCode相等，却可以equal不等，就比如ObjectA和ObjectB他们都有属性name，那么hashCode都以name计算，所以hashCode一样，但是两个对象属于不同类型，所以equals为false。</p>\n<h2 id=\"阿里相关约束\"><a href=\"#阿里相关约束\" class=\"headerlink\" title=\"阿里相关约束\"></a>阿里相关约束</h2><ul>\n<li><p>只要重写 equals，就必须重写 hashCode；</p>\n</li>\n<li><p>因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的对象必须重写这两个方法；</p>\n</li>\n<li><p>如果自定义对象做为 Map 的键，那么必须重写 hashCode 和 equals；</p>\n</li>\n<li><p>String 重写了 hashCode 和 equals 方法，所以我们可以非常愉快地使用 String 对象作为 key 来使用；</p>\n</li>\n</ul>\n<blockquote>\n<p>参考链接：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81ODMzNzM1Nw==\">https://zhuanlan.zhihu.com/p/58337357<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>"},{"title":"hashmap","description":"","abbrlink":"ca913759","date":"2021-04-28T16:00:00.000Z","_content":"\n\njava八股文之hashmap\n\n\n\n<!-- more -->\n\n\n\n### 基本认识\n\n\n\n```java\n\n//默认初始容量 - 必须是2的幂次方\n\nstatic final int DEFAULT_INITIAL_CAPACITY = 1 << 4; \n\n//hashmap的最大容量 2的30次方\n\nstatic final int MAXIMUM_CAPACITY = 1 << 30;\n\n//负载因数\n\nstatic final float DEFAULT_LOAD_FACTOR = 0.75f;\n\n//链表数量达到八开始向红黑树转换\n\nstatic final int TREEIFY_THRESHOLD = 8;\n\n//当红黑树的节点少于6时，则转换为单链表存储\n\nstatic final int UNTREEIFY_THRESHOLD = 6;\n\n//虽然在hash冲突发生的时候，默认使用单链表存储，当单链表节点个数大于8时，会转换为红黑树存储\n\n//但是有一个前提（很多文章都没说）：要求数组长度大于64，否则不会进行转换，而是进行扩容。\n\nstatic final int MIN_TREEIFY_CAPACITY = 64;\n\n```\n\n\n\n#### **最大容量为什么是不超过1<<30？**\n\n\n\nint类型的数据所占空间大小为32位，所以如果超过这个范围之后，会**出现溢出**。所以，**1<<30是在int类型取值范围中2次幂的最大值**，即为HashMap的容量最大值。\n\n\n\n####  **为什么要将链表中转红黑树的阈值设为8？**\n\n\n\nHashMap不直接使用红黑树，**是因为树节点所占空间是普通节点的两倍**，所以只有当节点足够的时候，才会使用树节点。也就是说，尽管时间复杂度上，红黑树比链表好一点，但是红黑树所占的空间比较大，所以综合考虑之下，只有在链表节点数太多的时候，红黑树占空间大这一劣势不太明显的时候，才会舍弃链表，使用红黑树。\n\n\n\n所以说阈值设置为8是一个将内存和性能折中的一个方案\n\n\n\n#### 1.8和1.7的区别\n\n\n\n1. hashmap1.8之后，结构为 数组+链表+红黑树，而1.7只是数据+链表\n\n\n\n![](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210429120122736.png)\n\n\n\n2. 1.7扩容时需要重新计算哈希值和索引位置，1.8并不重新计算哈希值，巧妙地采用和扩容后容量进行&操作来计算新的索引位置。\n\n3. 1.7插入元素到单链表中采用头插入法，1.8采用的是尾插入法。\n\n\n\n> 解决hash冲突的方法：\n\n>\n\n> 1. 开发定址法：所谓开放定址法，即是由关键码得到的哈希地址一旦产生了冲突，也就是说，该地址已经存放了数据元素，就去寻找下一个空的哈希地址，只要哈希表足够大，空的哈希地址总能找到，并将数据元素存入。\n\n> 2. 链地址法：hash值一样的key，会在这个数据后面新建一个链表，每次增加就直接在链表后面加节点即可\n\n\n\n#### 链表为什么用尾插法\n\n\n\n为了安全，因为头插法多线程情况下会导致链表成环\n\n\n\n> [链表成环视频讲解](https://www.bilibili.com/video/BV1n541177Ea?from=search&seid=3398389594020314132)\n\n\n\n那么为什么到了1.8版本才进行修改那？\n\n\n\n其实是因为多线程下的hashmap本就不安全，在多线程场景下如果要使用map，也不会使用hashmap，因此等开发人员想到了，才进行修改\n\n\n\n#### 为什么扩容时两倍扩容\n\n\n\n[文章](https://blog.csdn.net/Apeopl/article/details/88935422)\n\n\n\n主要是与扩容时候的额resize方法有关，resize方法中(n - 1) & hash的计算方法有关\n\n\n\n其中n是集合的容量，hash是添加的元素进过hash函数计算出来的hash值。\n\n\n\n容量是2的n次幂，主要原因是可以使得添加的元素均匀分布在HashMap中的数组上，减少hash碰撞，避免形成链表的结构，使得查询效率降低！\n\n\n\n### 方法\n\n\n\n#### hash\n\n\n\n##### hashcode\n\n\n\nhashcode就是通过hash函数得来的，通俗的说，就是通过某一种算法得到的，hashcode就是在**hash表中有对应的位置**。\n\n\n\n通过对象的内部地址(也就是物理地址)转换成一个整数，然后该整数通过hash函数的算法就得到了hashcode(不同jvm的实现不同, hotspot的实现贴在了最后)，所以，hashcode是什么呢？就是在hash表中对应的位置。这里如果还不是很清楚的话，举个例子，hash表中有 hashcode为1、hashcode为2、(...)3、4、5、6、7、8这样八个位置，有一个对象A，A的物理地址转换为一个整数17(这是假如)，就通过直接取余算法，17%8=1，那么A的hashcode就为1，且A就在hash表中1的位置。\n\n\n\n###### 为什么使用hashcode\n\n\n\n很简单，因为hashcode快啊。\n\n\n\n**HashCode是用来在散列存储结构中确定对象的存储地址的**\n\n\n\nHashMap 之所以速度快，因为他使用的是散列表，**根据 key 的 hashcode 值生成数组下标**（通过内存地址直接查找，不需要判断, 但是需要多出很多内存，相当于**以空间换时间**）\n\n\n\n##### 代码实现\n\n\n\n```java\n\nstatic final int hash(Object key) {\n\n    int h;\n\n    return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n\n}\n\n```\n\n\n\n```java\n\npublic native int hashCode();\n\n```\n\n\n\nh是调用c写的hashcode的方法获取到的哈希值\n\n\n\nh与h向右移动16位进行异或\n\n\n\n> 异或的规则是： 相同为0，不同为1\n\n\n\n#### hashmap\n\n\n\n```java\n\npublic HashMap(int initialCapacity, float loadFactor) {\n\n    if (initialCapacity < 0)\n\n        throw new IllegalArgumentException(\"Illegal initial capacity: \" +\n\n                                           initialCapacity);\n\n    if (initialCapacity > MAXIMUM_CAPACITY)\n\n        initialCapacity = MAXIMUM_CAPACITY;\n\n    if (loadFactor <= 0 || Float.isNaN(loadFactor))\n\n        throw new IllegalArgumentException(\"Illegal load factor: \" +\n\n                                           loadFactor);\n\n    this.loadFactor = loadFactor;\n\n    this.threshold = tableSizeFor(initialCapacity);\n\n}\n\n\n\n/**\n\n * Constructs an empty <tt>HashMap</tt> with the specified initial\n\n * capacity and the default load factor (0.75).\n\n *\n\n * @param  initialCapacity the initial capacity.\n\n * @throws IllegalArgumentException if the initial capacity is negative.\n\n */\n\npublic HashMap(int initialCapacity) {\n\n    this(initialCapacity, DEFAULT_LOAD_FACTOR);\n\n}\n\n\n\n/**\n\n * Constructs an empty <tt>HashMap</tt> with the default initial capacity\n\n * (16) and the default load factor (0.75).\n\n */\n\npublic HashMap() {\n\n    this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted\n\n}\n\n```\n\n\n\nhashmap的构造方法，三种初始化hashmap的形式\n\n\n\n#### resize\n\n\n\n```java\n\n    /**\n\n     * The next size value at which to resize (capacity * load factor).\n\n     *下一个要调整大小的大小值（容量负载因子）\n\n     * @serial\n\n     */\n\n    int threshold;\n\nfinal Node<K,V>[] resize() {\n\n    Node<K,V>[] oldTab = table;\n\n    int oldCap = (oldTab == null) ? 0 : oldTab.length;\n\n    int oldThr = threshold;\n\n    int newCap, newThr = 0;\n\n    //如果超过最大的容量则不允许扩容，直接返回原数组\n\n    if (oldCap > 0) {\n\n        if (oldCap >= MAXIMUM_CAPACITY) {\n\n            threshold = Integer.MAX_VALUE;\n\n            return oldTab;\n\n        }\n\n        //如果hashmap数量的两倍小于2的32次方并且 大于等于16\n\n        //那么新的hashmap的大小就是原来的两倍\n\n        else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n\n                 oldCap >= DEFAULT_INITIAL_CAPACITY)\n\n            newThr = oldThr << 1; // double threshold\n\n    }\n\n    else if (oldThr > 0) // initial capacity was placed in threshold\n\n        newCap = oldThr;\n\n    else {               // zero initial threshold signifies using defaults\n\n        newCap = DEFAULT_INITIAL_CAPACITY;\n\n        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n\n    }\n\n    if (newThr == 0) {\n\n        float ft = (float)newCap * loadFactor;\n\n        newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n\n                  (int)ft : Integer.MAX_VALUE);\n\n    }\n\n    threshold = newThr;\n\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n\n    Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n\n    table = newTab;\n\n    if (oldTab != null) {\n\n        for (int j = 0; j < oldCap; ++j) {\n\n            Node<K,V> e;\n\n            if ((e = oldTab[j]) != null) {\n\n                oldTab[j] = null;\n\n                //判断e是不是最后一个节点\n\n                if (e.next == null)\n\n                    //重新hash之后放入对应的位置\n\n                    newTab[e.hash & (newCap - 1)] = e;\n\n                //判断这个节点是不是在红黑树中\n\n                else if (e instanceof TreeNode)\n\n                    ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n\n                else { \n\n                    Node<K,V> loHead = null, loTail = null;\n\n                    Node<K,V> hiHead = null, hiTail = null;\n\n                    Node<K,V> next;\n\n                    do {\n\n                        next = e.next;\n\n                        if ((e.hash & oldCap) == 0) {\n\n                            if (loTail == null)\n\n                                loHead = e;\n\n                            else\n\n                                loTail.next = e;\n\n                            loTail = e;\n\n                        }\n\n                        else {\n\n                            if (hiTail == null)\n\n                                hiHead = e;\n\n                            else\n\n                                hiTail.next = e;\n\n                            hiTail = e;\n\n                        }\n\n                    } while ((e = next) != null);\n\n                    if (loTail != null) {\n\n                        loTail.next = null;\n\n                        newTab[j] = loHead;\n\n                    }\n\n                    if (hiTail != null) {\n\n                        hiTail.next = null;\n\n                        newTab[j + oldCap] = hiHead;\n\n                    }\n\n                }\n\n            }\n\n        }\n\n    }\n\n    return newTab;\n\n}\n\n```\n\n\n\n> - hashmap的key只能有一个为null，value可以有多个null\n\n>- HashTable中，无论是key还是value，都不能为null\n\n\n\n#### put\n\n\n\n```java\n\npublic V put(K key, V value) {\n\n    return putVal(hash(key), key, value, false, true);\n\n}\n\n```\n\n\n\n#### putVal\n\n\n\n```java\n\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n\n               boolean evict) {\n\n    Node<K,V>[] tab; Node<K,V> p; int n, i;\n\n    //如果table数组中没有值，就要初始化一个长度\n\n    if ((tab = table) == null || (n = tab.length) == 0)\n\n        n = (tab = resize()).length;\n\n    //如果数组的这个下标位置没有数据，就将这个数据插入进去\n\n    if ((p = tab[i = (n - 1) & hash]) == null)\n\n        tab[i] = newNode(hash, key, value, null);\n\n    else {\n\n        Node<K,V> e; K k;\n\n        if (p.hash == hash &&\n\n            ((k = p.key) == key || (key != null && key.equals(k))))\n\n            e = p;\n\n        //如果检测到是树节点，就要使用下面这个方法来进行插入元素\n\n        else if (p instanceof TreeNode)\n\n            e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n\n        else {\n\n            for (int binCount = 0; ; ++binCount) {\n\n                if ((e = p.next) == null) {\n\n                    p.next = newNode(hash, key, value, null);\n\n                    //如果链表的数量大于8，就转换为红黑树\n\n                    if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n\n                        treeifyBin(tab, hash);\n\n                    break;\n\n                }\n\n                if (e.hash == hash &&\n\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n\n                    break;\n\n                p = e;\n\n            }\n\n        }\n\n        if (e != null) { // existing mapping for key\n\n            V oldValue = e.value;\n\n            if (!onlyIfAbsent || oldValue == null)\n\n                e.value = value;\n\n            afterNodeAccess(e);\n\n            return oldValue;\n\n        }\n\n    }\n\n    //记录修改的次数\n\n    ++modCount;\n\n    if (++size > threshold)\n\n        resize();\n\n    afterNodeInsertion(evict);\n\n    return null;\n\n}\n\n```\n\n\n\n#### treeifyBin\n\n\n\n```java\n\nfinal void treeifyBin(Node<K,V>[] tab, int hash) {\n\n    int n, index; Node<K,V> e;\n\n    //虽然上面判断链表长度大于8,到了操作树的环节，但是还是判断数据长度大于64才可以将\n\n    //链表转换为红黑树\n\n    if (tab == null || (n = tab.length) < MIN_TREEIFY_CAPACITY)\n\n        resize();\n\n    else if ((e = tab[index = (n - 1) & hash]) != null) {\n\n        TreeNode<K,V> hd = null, tl = null;\n\n        do {\n\n            TreeNode<K,V> p = replacementTreeNode(e, null);\n\n            if (tl == null)\n\n                hd = p;\n\n            else {\n\n                p.prev = tl;\n\n                tl.next = p;\n\n            }\n\n            tl = p;\n\n        } while ((e = e.next) != null);\n\n        if ((tab[index] = hd) != null)\n\n            hd.treeify(tab);\n\n    }\n\n}\n\n```\n\n\n\n### 遍历\n\n\n\n#### 方式\n\n\n\n##### lambda\n\n\n\n```java\n\nMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\nmap.put(2, 10);\n\nmap.put(1, 20);\n\nmap.put(4,40);\n\nmap.put(3,30);\n\nmap.forEach((k, v) -> System.out.println(\"key: \" + k + \" value:\" + v));\n\n```\n\n\n\n##### for each\n\n\n\n```java\n\nfor (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n\n\t\t\tSystem.out.println(\"Key = \" + entry.getKey() + \", Value = \" + entry.getValue());\n\n\t\t}\n\n```\n\n\n\n##### 迭代键值对\n\n\n\n```java\n\n// 迭代键\n\n\t\tfor (Integer key : map.keySet()) {\n\n\t\t\tSystem.out.println(\"Key = \" + key);\n\n\t\t}\n\n \n\n\t\t// 迭代值\n\n\t\tfor (Integer value : map.values()) {\n\n\t\t\tSystem.out.println(\"Value = \" + value);\n\n\t\t}\n\n```\n\n\n\n#####  Iterator\n\n\n\n```java\n\nIterator<Map.Entry<Integer, Integer>> entries = map.entrySet().iterator();\n\n\t\twhile (entries.hasNext()) {\n\n\t\t\tMap.Entry<Integer, Integer> entry = entries.next();\n\n\t\t\tSystem.out.println(\"Key = \" + entry.getKey() + \", Value = \" + entry.getValue());\n\n\t\t}\n\n```\n\n\n\n#### 原理\n\n\n\n虽然hashmap的插入数据是无序的，但是它遍历出来的结果都是有序的,并且每次遍历的结果都一样\n\n\n\n> 原因就是因为hashmap的数组下标是 hashcode和hashmap的容量大小  按位与出来的结果\n\n\n\n### 线程安全\n\n\n\nhashmap是线程不安全的，如果需要保证线程安全，推荐使用ConcurrentHashMap\n\n\n\n### 参考文章\n\n\n\n[美团技术文章](https://tech.meituan.com/2016/06/24/java-hashmap.html)\n\n\n\n[知乎文章](https://zhuanlan.zhihu.com/p/130209918)","source":"_posts/hashmap.md","raw":"---\ntitle: hashmap\ndescription: ''\ntags:\n  - 无标签\nabbrlink: ca913759\ndate: 2021-04-29 00:00:00\n---\n\n\njava八股文之hashmap\n\n\n\n<!-- more -->\n\n\n\n### 基本认识\n\n\n\n```java\n\n//默认初始容量 - 必须是2的幂次方\n\nstatic final int DEFAULT_INITIAL_CAPACITY = 1 << 4; \n\n//hashmap的最大容量 2的30次方\n\nstatic final int MAXIMUM_CAPACITY = 1 << 30;\n\n//负载因数\n\nstatic final float DEFAULT_LOAD_FACTOR = 0.75f;\n\n//链表数量达到八开始向红黑树转换\n\nstatic final int TREEIFY_THRESHOLD = 8;\n\n//当红黑树的节点少于6时，则转换为单链表存储\n\nstatic final int UNTREEIFY_THRESHOLD = 6;\n\n//虽然在hash冲突发生的时候，默认使用单链表存储，当单链表节点个数大于8时，会转换为红黑树存储\n\n//但是有一个前提（很多文章都没说）：要求数组长度大于64，否则不会进行转换，而是进行扩容。\n\nstatic final int MIN_TREEIFY_CAPACITY = 64;\n\n```\n\n\n\n#### **最大容量为什么是不超过1<<30？**\n\n\n\nint类型的数据所占空间大小为32位，所以如果超过这个范围之后，会**出现溢出**。所以，**1<<30是在int类型取值范围中2次幂的最大值**，即为HashMap的容量最大值。\n\n\n\n####  **为什么要将链表中转红黑树的阈值设为8？**\n\n\n\nHashMap不直接使用红黑树，**是因为树节点所占空间是普通节点的两倍**，所以只有当节点足够的时候，才会使用树节点。也就是说，尽管时间复杂度上，红黑树比链表好一点，但是红黑树所占的空间比较大，所以综合考虑之下，只有在链表节点数太多的时候，红黑树占空间大这一劣势不太明显的时候，才会舍弃链表，使用红黑树。\n\n\n\n所以说阈值设置为8是一个将内存和性能折中的一个方案\n\n\n\n#### 1.8和1.7的区别\n\n\n\n1. hashmap1.8之后，结构为 数组+链表+红黑树，而1.7只是数据+链表\n\n\n\n![](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210429120122736.png)\n\n\n\n2. 1.7扩容时需要重新计算哈希值和索引位置，1.8并不重新计算哈希值，巧妙地采用和扩容后容量进行&操作来计算新的索引位置。\n\n3. 1.7插入元素到单链表中采用头插入法，1.8采用的是尾插入法。\n\n\n\n> 解决hash冲突的方法：\n\n>\n\n> 1. 开发定址法：所谓开放定址法，即是由关键码得到的哈希地址一旦产生了冲突，也就是说，该地址已经存放了数据元素，就去寻找下一个空的哈希地址，只要哈希表足够大，空的哈希地址总能找到，并将数据元素存入。\n\n> 2. 链地址法：hash值一样的key，会在这个数据后面新建一个链表，每次增加就直接在链表后面加节点即可\n\n\n\n#### 链表为什么用尾插法\n\n\n\n为了安全，因为头插法多线程情况下会导致链表成环\n\n\n\n> [链表成环视频讲解](https://www.bilibili.com/video/BV1n541177Ea?from=search&seid=3398389594020314132)\n\n\n\n那么为什么到了1.8版本才进行修改那？\n\n\n\n其实是因为多线程下的hashmap本就不安全，在多线程场景下如果要使用map，也不会使用hashmap，因此等开发人员想到了，才进行修改\n\n\n\n#### 为什么扩容时两倍扩容\n\n\n\n[文章](https://blog.csdn.net/Apeopl/article/details/88935422)\n\n\n\n主要是与扩容时候的额resize方法有关，resize方法中(n - 1) & hash的计算方法有关\n\n\n\n其中n是集合的容量，hash是添加的元素进过hash函数计算出来的hash值。\n\n\n\n容量是2的n次幂，主要原因是可以使得添加的元素均匀分布在HashMap中的数组上，减少hash碰撞，避免形成链表的结构，使得查询效率降低！\n\n\n\n### 方法\n\n\n\n#### hash\n\n\n\n##### hashcode\n\n\n\nhashcode就是通过hash函数得来的，通俗的说，就是通过某一种算法得到的，hashcode就是在**hash表中有对应的位置**。\n\n\n\n通过对象的内部地址(也就是物理地址)转换成一个整数，然后该整数通过hash函数的算法就得到了hashcode(不同jvm的实现不同, hotspot的实现贴在了最后)，所以，hashcode是什么呢？就是在hash表中对应的位置。这里如果还不是很清楚的话，举个例子，hash表中有 hashcode为1、hashcode为2、(...)3、4、5、6、7、8这样八个位置，有一个对象A，A的物理地址转换为一个整数17(这是假如)，就通过直接取余算法，17%8=1，那么A的hashcode就为1，且A就在hash表中1的位置。\n\n\n\n###### 为什么使用hashcode\n\n\n\n很简单，因为hashcode快啊。\n\n\n\n**HashCode是用来在散列存储结构中确定对象的存储地址的**\n\n\n\nHashMap 之所以速度快，因为他使用的是散列表，**根据 key 的 hashcode 值生成数组下标**（通过内存地址直接查找，不需要判断, 但是需要多出很多内存，相当于**以空间换时间**）\n\n\n\n##### 代码实现\n\n\n\n```java\n\nstatic final int hash(Object key) {\n\n    int h;\n\n    return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n\n}\n\n```\n\n\n\n```java\n\npublic native int hashCode();\n\n```\n\n\n\nh是调用c写的hashcode的方法获取到的哈希值\n\n\n\nh与h向右移动16位进行异或\n\n\n\n> 异或的规则是： 相同为0，不同为1\n\n\n\n#### hashmap\n\n\n\n```java\n\npublic HashMap(int initialCapacity, float loadFactor) {\n\n    if (initialCapacity < 0)\n\n        throw new IllegalArgumentException(\"Illegal initial capacity: \" +\n\n                                           initialCapacity);\n\n    if (initialCapacity > MAXIMUM_CAPACITY)\n\n        initialCapacity = MAXIMUM_CAPACITY;\n\n    if (loadFactor <= 0 || Float.isNaN(loadFactor))\n\n        throw new IllegalArgumentException(\"Illegal load factor: \" +\n\n                                           loadFactor);\n\n    this.loadFactor = loadFactor;\n\n    this.threshold = tableSizeFor(initialCapacity);\n\n}\n\n\n\n/**\n\n * Constructs an empty <tt>HashMap</tt> with the specified initial\n\n * capacity and the default load factor (0.75).\n\n *\n\n * @param  initialCapacity the initial capacity.\n\n * @throws IllegalArgumentException if the initial capacity is negative.\n\n */\n\npublic HashMap(int initialCapacity) {\n\n    this(initialCapacity, DEFAULT_LOAD_FACTOR);\n\n}\n\n\n\n/**\n\n * Constructs an empty <tt>HashMap</tt> with the default initial capacity\n\n * (16) and the default load factor (0.75).\n\n */\n\npublic HashMap() {\n\n    this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted\n\n}\n\n```\n\n\n\nhashmap的构造方法，三种初始化hashmap的形式\n\n\n\n#### resize\n\n\n\n```java\n\n    /**\n\n     * The next size value at which to resize (capacity * load factor).\n\n     *下一个要调整大小的大小值（容量负载因子）\n\n     * @serial\n\n     */\n\n    int threshold;\n\nfinal Node<K,V>[] resize() {\n\n    Node<K,V>[] oldTab = table;\n\n    int oldCap = (oldTab == null) ? 0 : oldTab.length;\n\n    int oldThr = threshold;\n\n    int newCap, newThr = 0;\n\n    //如果超过最大的容量则不允许扩容，直接返回原数组\n\n    if (oldCap > 0) {\n\n        if (oldCap >= MAXIMUM_CAPACITY) {\n\n            threshold = Integer.MAX_VALUE;\n\n            return oldTab;\n\n        }\n\n        //如果hashmap数量的两倍小于2的32次方并且 大于等于16\n\n        //那么新的hashmap的大小就是原来的两倍\n\n        else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n\n                 oldCap >= DEFAULT_INITIAL_CAPACITY)\n\n            newThr = oldThr << 1; // double threshold\n\n    }\n\n    else if (oldThr > 0) // initial capacity was placed in threshold\n\n        newCap = oldThr;\n\n    else {               // zero initial threshold signifies using defaults\n\n        newCap = DEFAULT_INITIAL_CAPACITY;\n\n        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n\n    }\n\n    if (newThr == 0) {\n\n        float ft = (float)newCap * loadFactor;\n\n        newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n\n                  (int)ft : Integer.MAX_VALUE);\n\n    }\n\n    threshold = newThr;\n\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n\n    Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n\n    table = newTab;\n\n    if (oldTab != null) {\n\n        for (int j = 0; j < oldCap; ++j) {\n\n            Node<K,V> e;\n\n            if ((e = oldTab[j]) != null) {\n\n                oldTab[j] = null;\n\n                //判断e是不是最后一个节点\n\n                if (e.next == null)\n\n                    //重新hash之后放入对应的位置\n\n                    newTab[e.hash & (newCap - 1)] = e;\n\n                //判断这个节点是不是在红黑树中\n\n                else if (e instanceof TreeNode)\n\n                    ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n\n                else { \n\n                    Node<K,V> loHead = null, loTail = null;\n\n                    Node<K,V> hiHead = null, hiTail = null;\n\n                    Node<K,V> next;\n\n                    do {\n\n                        next = e.next;\n\n                        if ((e.hash & oldCap) == 0) {\n\n                            if (loTail == null)\n\n                                loHead = e;\n\n                            else\n\n                                loTail.next = e;\n\n                            loTail = e;\n\n                        }\n\n                        else {\n\n                            if (hiTail == null)\n\n                                hiHead = e;\n\n                            else\n\n                                hiTail.next = e;\n\n                            hiTail = e;\n\n                        }\n\n                    } while ((e = next) != null);\n\n                    if (loTail != null) {\n\n                        loTail.next = null;\n\n                        newTab[j] = loHead;\n\n                    }\n\n                    if (hiTail != null) {\n\n                        hiTail.next = null;\n\n                        newTab[j + oldCap] = hiHead;\n\n                    }\n\n                }\n\n            }\n\n        }\n\n    }\n\n    return newTab;\n\n}\n\n```\n\n\n\n> - hashmap的key只能有一个为null，value可以有多个null\n\n>- HashTable中，无论是key还是value，都不能为null\n\n\n\n#### put\n\n\n\n```java\n\npublic V put(K key, V value) {\n\n    return putVal(hash(key), key, value, false, true);\n\n}\n\n```\n\n\n\n#### putVal\n\n\n\n```java\n\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n\n               boolean evict) {\n\n    Node<K,V>[] tab; Node<K,V> p; int n, i;\n\n    //如果table数组中没有值，就要初始化一个长度\n\n    if ((tab = table) == null || (n = tab.length) == 0)\n\n        n = (tab = resize()).length;\n\n    //如果数组的这个下标位置没有数据，就将这个数据插入进去\n\n    if ((p = tab[i = (n - 1) & hash]) == null)\n\n        tab[i] = newNode(hash, key, value, null);\n\n    else {\n\n        Node<K,V> e; K k;\n\n        if (p.hash == hash &&\n\n            ((k = p.key) == key || (key != null && key.equals(k))))\n\n            e = p;\n\n        //如果检测到是树节点，就要使用下面这个方法来进行插入元素\n\n        else if (p instanceof TreeNode)\n\n            e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n\n        else {\n\n            for (int binCount = 0; ; ++binCount) {\n\n                if ((e = p.next) == null) {\n\n                    p.next = newNode(hash, key, value, null);\n\n                    //如果链表的数量大于8，就转换为红黑树\n\n                    if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n\n                        treeifyBin(tab, hash);\n\n                    break;\n\n                }\n\n                if (e.hash == hash &&\n\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n\n                    break;\n\n                p = e;\n\n            }\n\n        }\n\n        if (e != null) { // existing mapping for key\n\n            V oldValue = e.value;\n\n            if (!onlyIfAbsent || oldValue == null)\n\n                e.value = value;\n\n            afterNodeAccess(e);\n\n            return oldValue;\n\n        }\n\n    }\n\n    //记录修改的次数\n\n    ++modCount;\n\n    if (++size > threshold)\n\n        resize();\n\n    afterNodeInsertion(evict);\n\n    return null;\n\n}\n\n```\n\n\n\n#### treeifyBin\n\n\n\n```java\n\nfinal void treeifyBin(Node<K,V>[] tab, int hash) {\n\n    int n, index; Node<K,V> e;\n\n    //虽然上面判断链表长度大于8,到了操作树的环节，但是还是判断数据长度大于64才可以将\n\n    //链表转换为红黑树\n\n    if (tab == null || (n = tab.length) < MIN_TREEIFY_CAPACITY)\n\n        resize();\n\n    else if ((e = tab[index = (n - 1) & hash]) != null) {\n\n        TreeNode<K,V> hd = null, tl = null;\n\n        do {\n\n            TreeNode<K,V> p = replacementTreeNode(e, null);\n\n            if (tl == null)\n\n                hd = p;\n\n            else {\n\n                p.prev = tl;\n\n                tl.next = p;\n\n            }\n\n            tl = p;\n\n        } while ((e = e.next) != null);\n\n        if ((tab[index] = hd) != null)\n\n            hd.treeify(tab);\n\n    }\n\n}\n\n```\n\n\n\n### 遍历\n\n\n\n#### 方式\n\n\n\n##### lambda\n\n\n\n```java\n\nMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\nmap.put(2, 10);\n\nmap.put(1, 20);\n\nmap.put(4,40);\n\nmap.put(3,30);\n\nmap.forEach((k, v) -> System.out.println(\"key: \" + k + \" value:\" + v));\n\n```\n\n\n\n##### for each\n\n\n\n```java\n\nfor (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n\n\t\t\tSystem.out.println(\"Key = \" + entry.getKey() + \", Value = \" + entry.getValue());\n\n\t\t}\n\n```\n\n\n\n##### 迭代键值对\n\n\n\n```java\n\n// 迭代键\n\n\t\tfor (Integer key : map.keySet()) {\n\n\t\t\tSystem.out.println(\"Key = \" + key);\n\n\t\t}\n\n \n\n\t\t// 迭代值\n\n\t\tfor (Integer value : map.values()) {\n\n\t\t\tSystem.out.println(\"Value = \" + value);\n\n\t\t}\n\n```\n\n\n\n#####  Iterator\n\n\n\n```java\n\nIterator<Map.Entry<Integer, Integer>> entries = map.entrySet().iterator();\n\n\t\twhile (entries.hasNext()) {\n\n\t\t\tMap.Entry<Integer, Integer> entry = entries.next();\n\n\t\t\tSystem.out.println(\"Key = \" + entry.getKey() + \", Value = \" + entry.getValue());\n\n\t\t}\n\n```\n\n\n\n#### 原理\n\n\n\n虽然hashmap的插入数据是无序的，但是它遍历出来的结果都是有序的,并且每次遍历的结果都一样\n\n\n\n> 原因就是因为hashmap的数组下标是 hashcode和hashmap的容量大小  按位与出来的结果\n\n\n\n### 线程安全\n\n\n\nhashmap是线程不安全的，如果需要保证线程安全，推荐使用ConcurrentHashMap\n\n\n\n### 参考文章\n\n\n\n[美团技术文章](https://tech.meituan.com/2016/06/24/java-hashmap.html)\n\n\n\n[知乎文章](https://zhuanlan.zhihu.com/p/130209918)","slug":"hashmap","published":1,"updated":"2025-03-02T03:37:34.382Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4l001vn0uk9jwx3bnw","content":"<p>java八股文之hashmap</p>\n<span id=\"more\"></span>\n\n\n\n<h3 id=\"基本认识\"><a href=\"#基本认识\" class=\"headerlink\" title=\"基本认识\"></a>基本认识</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//默认初始容量 - 必须是2的幂次方</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">DEFAULT_INITIAL_CAPACITY</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">4</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//hashmap的最大容量 2的30次方</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">MAXIMUM_CAPACITY</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//负载因数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">float</span> <span class=\"variable\">DEFAULT_LOAD_FACTOR</span> <span class=\"operator\">=</span> <span class=\"number\">0.75f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//链表数量达到八开始向红黑树转换</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">TREEIFY_THRESHOLD</span> <span class=\"operator\">=</span> <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当红黑树的节点少于6时，则转换为单链表存储</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">UNTREEIFY_THRESHOLD</span> <span class=\"operator\">=</span> <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//虽然在hash冲突发生的时候，默认使用单链表存储，当单链表节点个数大于8时，会转换为红黑树存储</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//但是有一个前提（很多文章都没说）：要求数组长度大于64，否则不会进行转换，而是进行扩容。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">MIN_TREEIFY_CAPACITY</span> <span class=\"operator\">=</span> <span class=\"number\">64</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"最大容量为什么是不超过1\"><a href=\"#最大容量为什么是不超过1\" class=\"headerlink\" title=\"最大容量为什么是不超过1&lt;&lt;30？\"></a><strong>最大容量为什么是不超过1&lt;&lt;30？</strong></h4><p>int类型的数据所占空间大小为32位，所以如果超过这个范围之后，会<strong>出现溢出</strong>。所以，<strong>1&lt;&lt;30是在int类型取值范围中2次幂的最大值</strong>，即为HashMap的容量最大值。</p>\n<h4 id=\"为什么要将链表中转红黑树的阈值设为8？\"><a href=\"#为什么要将链表中转红黑树的阈值设为8？\" class=\"headerlink\" title=\"为什么要将链表中转红黑树的阈值设为8？\"></a><strong>为什么要将链表中转红黑树的阈值设为8？</strong></h4><p>HashMap不直接使用红黑树，<strong>是因为树节点所占空间是普通节点的两倍</strong>，所以只有当节点足够的时候，才会使用树节点。也就是说，尽管时间复杂度上，红黑树比链表好一点，但是红黑树所占的空间比较大，所以综合考虑之下，只有在链表节点数太多的时候，红黑树占空间大这一劣势不太明显的时候，才会舍弃链表，使用红黑树。</p>\n<p>所以说阈值设置为8是一个将内存和性能折中的一个方案</p>\n<h4 id=\"1-8和1-7的区别\"><a href=\"#1-8和1-7的区别\" class=\"headerlink\" title=\"1.8和1.7的区别\"></a>1.8和1.7的区别</h4><ol>\n<li>hashmap1.8之后，结构为 数组+链表+红黑树，而1.7只是数据+链表</li>\n</ol>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210429120122736.png\" loading=\"lazy\"></p>\n<ol start=\"2\">\n<li><p>1.7扩容时需要重新计算哈希值和索引位置，1.8并不重新计算哈希值，巧妙地采用和扩容后容量进行&amp;操作来计算新的索引位置。</p>\n</li>\n<li><p>1.7插入元素到单链表中采用头插入法，1.8采用的是尾插入法。</p>\n</li>\n</ol>\n<blockquote>\n<p>解决hash冲突的方法：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ol>\n<li>开发定址法：所谓开放定址法，即是由关键码得到的哈希地址一旦产生了冲突，也就是说，该地址已经存放了数据元素，就去寻找下一个空的哈希地址，只要哈希表足够大，空的哈希地址总能找到，并将数据元素存入。</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>链地址法：hash值一样的key，会在这个数据后面新建一个链表，每次增加就直接在链表后面加节点即可</li>\n</ol>\n</blockquote>\n<h4 id=\"链表为什么用尾插法\"><a href=\"#链表为什么用尾插法\" class=\"headerlink\" title=\"链表为什么用尾插法\"></a>链表为什么用尾插法</h4><p>为了安全，因为头插法多线程情况下会导致链表成环</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMW41NDExNzdFYT9mcm9tPXNlYXJjaCZzZWlkPTMzOTgzODk1OTQwMjAzMTQxMzI=\">链表成环视频讲解<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<p>那么为什么到了1.8版本才进行修改那？</p>\n<p>其实是因为多线程下的hashmap本就不安全，在多线程场景下如果要使用map，也不会使用hashmap，因此等开发人员想到了，才进行修改</p>\n<h4 id=\"为什么扩容时两倍扩容\"><a href=\"#为什么扩容时两倍扩容\" class=\"headerlink\" title=\"为什么扩容时两倍扩容\"></a>为什么扩容时两倍扩容</h4><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FwZW9wbC9hcnRpY2xlL2RldGFpbHMvODg5MzU0MjI=\">文章<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>主要是与扩容时候的额resize方法有关，resize方法中(n - 1) &amp; hash的计算方法有关</p>\n<p>其中n是集合的容量，hash是添加的元素进过hash函数计算出来的hash值。</p>\n<p>容量是2的n次幂，主要原因是可以使得添加的元素均匀分布在HashMap中的数组上，减少hash碰撞，避免形成链表的结构，使得查询效率降低！</p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><h4 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h4><h5 id=\"hashcode\"><a href=\"#hashcode\" class=\"headerlink\" title=\"hashcode\"></a>hashcode</h5><p>hashcode就是通过hash函数得来的，通俗的说，就是通过某一种算法得到的，hashcode就是在<strong>hash表中有对应的位置</strong>。</p>\n<p>通过对象的内部地址(也就是物理地址)转换成一个整数，然后该整数通过hash函数的算法就得到了hashcode(不同jvm的实现不同, hotspot的实现贴在了最后)，所以，hashcode是什么呢？就是在hash表中对应的位置。这里如果还不是很清楚的话，举个例子，hash表中有 hashcode为1、hashcode为2、(...)3、4、5、6、7、8这样八个位置，有一个对象A，A的物理地址转换为一个整数17(这是假如)，就通过直接取余算法，17%8&#x3D;1，那么A的hashcode就为1，且A就在hash表中1的位置。</p>\n<h6 id=\"为什么使用hashcode\"><a href=\"#为什么使用hashcode\" class=\"headerlink\" title=\"为什么使用hashcode\"></a>为什么使用hashcode</h6><p>很简单，因为hashcode快啊。</p>\n<p><strong>HashCode是用来在散列存储结构中确定对象的存储地址的</strong></p>\n<p>HashMap 之所以速度快，因为他使用的是散列表，<strong>根据 key 的 hashcode 值生成数组下标</strong>（通过内存地址直接查找，不需要判断, 但是需要多出很多内存，相当于<strong>以空间换时间</strong>）</p>\n<h5 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">hash</span><span class=\"params\">(Object key)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> h;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (key == <span class=\"literal\">null</span>) ? <span class=\"number\">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"type\">int</span> <span class=\"title function_\">hashCode</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>h是调用c写的hashcode的方法获取到的哈希值</p>\n<p>h与h向右移动16位进行异或</p>\n<blockquote>\n<p>异或的规则是： 相同为0，不同为1</p>\n</blockquote>\n<h4 id=\"hashmap\"><a href=\"#hashmap\" class=\"headerlink\" title=\"hashmap\"></a>hashmap</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">HashMap</span><span class=\"params\">(<span class=\"type\">int</span> initialCapacity, <span class=\"type\">float</span> loadFactor)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initialCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class=\"line\"></span><br><span class=\"line\">                                           initialCapacity);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class=\"line\"></span><br><span class=\"line\">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loadFactor &lt;= <span class=\"number\">0</span> || Float.isNaN(loadFactor))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Illegal load factor: &quot;</span> +</span><br><span class=\"line\"></span><br><span class=\"line\">                                           loadFactor);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.loadFactor = loadFactor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the specified initial</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> * capacity and the default load factor (0.75).</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  initialCapacity the initial capacity.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> IllegalArgumentException if the initial capacity is negative.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">HashMap</span><span class=\"params\">(<span class=\"type\">int</span> initialCapacity)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the default initial capacity</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> * (16) and the default load factor (0.75).</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">HashMap</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class=\"comment\">// all other fields defaulted</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>hashmap的构造方法，三种初始化hashmap的形式</p>\n<h4 id=\"resize\"><a href=\"#resize\" class=\"headerlink\" title=\"resize\"></a>resize</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * The next size value at which to resize (capacity * load factor).</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     *下一个要调整大小的大小值（容量负载因子）</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@serial</span></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> threshold;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">oldCap</span> <span class=\"operator\">=</span> (oldTab == <span class=\"literal\">null</span>) ? <span class=\"number\">0</span> : oldTab.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">oldThr</span> <span class=\"operator\">=</span> threshold;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> newCap, newThr = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果超过最大的容量则不允许扩容，直接返回原数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldCap &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            threshold = Integer.MAX_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldTab;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果hashmap数量的两倍小于2的32次方并且 大于等于16</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//那么新的hashmap的大小就是原来的两倍</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((newCap = oldCap &lt;&lt; <span class=\"number\">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class=\"line\"></span><br><span class=\"line\">            newThr = oldThr &lt;&lt; <span class=\"number\">1</span>; <span class=\"comment\">// double threshold</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldThr &gt; <span class=\"number\">0</span>) <span class=\"comment\">// initial capacity was placed in threshold</span></span><br><span class=\"line\"></span><br><span class=\"line\">        newCap = oldThr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;               <span class=\"comment\">// zero initial threshold signifies using defaults</span></span><br><span class=\"line\"></span><br><span class=\"line\">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class=\"line\"></span><br><span class=\"line\">        newThr = (<span class=\"type\">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newThr == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">float</span> <span class=\"variable\">ft</span> <span class=\"operator\">=</span> (<span class=\"type\">float</span>)newCap * loadFactor;</span><br><span class=\"line\"></span><br><span class=\"line\">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class=\"type\">float</span>)MAXIMUM_CAPACITY ?</span><br><span class=\"line\"></span><br><span class=\"line\">                  (<span class=\"type\">int</span>)ft : Integer.MAX_VALUE);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    threshold = newThr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>[newCap];</span><br><span class=\"line\"></span><br><span class=\"line\">    table = newTab;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldTab != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            Node&lt;K,V&gt; e;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((e = oldTab[j]) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                oldTab[j] = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//判断e是不是最后一个节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.next == <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">//重新hash之后放入对应的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    newTab[e.hash &amp; (newCap - <span class=\"number\">1</span>)] = e;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//判断这个节点是不是在红黑树中</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\"></span><br><span class=\"line\">                    ((TreeNode&lt;K,V&gt;)e).split(<span class=\"built_in\">this</span>, newTab, j, oldCap);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">                    Node&lt;K,V&gt; loHead = <span class=\"literal\">null</span>, loTail = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    Node&lt;K,V&gt; hiHead = <span class=\"literal\">null</span>, hiTail = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    Node&lt;K,V&gt; next;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        next = e.next;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((e.hash &amp; oldCap) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (loTail == <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                                loHead = e;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\"></span><br><span class=\"line\">                                loTail.next = e;</span><br><span class=\"line\"></span><br><span class=\"line\">                            loTail = e;</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (hiTail == <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                                hiHead = e;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\"></span><br><span class=\"line\">                                hiTail.next = e;</span><br><span class=\"line\"></span><br><span class=\"line\">                            hiTail = e;</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125; <span class=\"keyword\">while</span> ((e = next) != <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (loTail != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        loTail.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                        newTab[j] = loHead;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (hiTail != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        hiTail.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                        newTab[j + oldCap] = hiHead;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> newTab;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<ul>\n<li>hashmap的key只能有一个为null，value可以有多个null</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>HashTable中，无论是key还是value，都不能为null</li>\n</ul>\n</blockquote>\n<h4 id=\"put\"><a href=\"#put\" class=\"headerlink\" title=\"put\"></a>put</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> V <span class=\"title function_\">put</span><span class=\"params\">(K key, V value)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> putVal(hash(key), key, value, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"putVal\"><a href=\"#putVal\" class=\"headerlink\" title=\"putVal\"></a>putVal</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> V <span class=\"title function_\">putVal</span><span class=\"params\">(<span class=\"type\">int</span> hash, K key, V value, <span class=\"type\">boolean</span> onlyIfAbsent,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">               <span class=\"type\">boolean</span> evict)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class=\"type\">int</span> n, i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果table数组中没有值，就要初始化一个长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) == <span class=\"literal\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        n = (tab = resize()).length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果数组的这个下标位置没有数据，就将这个数据插入进去</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((p = tab[i = (n - <span class=\"number\">1</span>) &amp; hash]) == <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        tab[i] = newNode(hash, key, value, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Node&lt;K,V&gt; e; K k;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.hash == hash &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">            ((k = p.key) == key || (key != <span class=\"literal\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\"></span><br><span class=\"line\">            e = p;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果检测到是树节点，就要使用下面这个方法来进行插入元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\"></span><br><span class=\"line\">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class=\"built_in\">this</span>, tab, hash, key, value);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">binCount</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; ; ++binCount) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((e = p.next) == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    p.next = newNode(hash, key, value, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">//如果链表的数量大于8，就转换为红黑树</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"number\">1</span>) <span class=\"comment\">// -1 for 1st</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        treeifyBin(tab, hash);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">                    ((k = e.key) == key || (key != <span class=\"literal\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                p = e;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"literal\">null</span>) &#123; <span class=\"comment\">// existing mapping for key</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">V</span> <span class=\"variable\">oldValue</span> <span class=\"operator\">=</span> e.value;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!onlyIfAbsent || oldValue == <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                e.value = value;</span><br><span class=\"line\"></span><br><span class=\"line\">            afterNodeAccess(e);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//记录修改的次数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ++modCount;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (++size &gt; threshold)</span><br><span class=\"line\"></span><br><span class=\"line\">        resize();</span><br><span class=\"line\"></span><br><span class=\"line\">    afterNodeInsertion(evict);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"treeifyBin\"><a href=\"#treeifyBin\" class=\"headerlink\" title=\"treeifyBin\"></a>treeifyBin</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">treeifyBin</span><span class=\"params\">(Node&lt;K,V&gt;[] tab, <span class=\"type\">int</span> hash)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//虽然上面判断链表长度大于8,到了操作树的环节，但是还是判断数据长度大于64才可以将</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//链表转换为红黑树</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tab == <span class=\"literal\">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class=\"line\"></span><br><span class=\"line\">        resize();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((e = tab[index = (n - <span class=\"number\">1</span>) &amp; hash]) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        TreeNode&lt;K,V&gt; hd = <span class=\"literal\">null</span>, tl = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tl == <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                hd = p;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                p.prev = tl;</span><br><span class=\"line\"></span><br><span class=\"line\">                tl.next = p;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            tl = p;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> ((e = e.next) != <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((tab[index] = hd) != <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            hd.treeify(tab);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h3><h4 id=\"方式\"><a href=\"#方式\" class=\"headerlink\" title=\"方式\"></a>方式</h4><h5 id=\"lambda\"><a href=\"#lambda\" class=\"headerlink\" title=\"lambda\"></a>lambda</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Map&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;Integer, Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">map.put(<span class=\"number\">2</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">map.put(<span class=\"number\">1</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">map.put(<span class=\"number\">4</span>,<span class=\"number\">40</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">map.put(<span class=\"number\">3</span>,<span class=\"number\">30</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">map.forEach((k, v) -&gt; System.out.println(<span class=\"string\">&quot;key: &quot;</span> + k + <span class=\"string\">&quot; value:&quot;</span> + v));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"for-each\"><a href=\"#for-each\" class=\"headerlink\" title=\"for each\"></a>for each</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;Key = &quot;</span> + entry.getKey() + <span class=\"string\">&quot;, Value = &quot;</span> + entry.getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"迭代键值对\"><a href=\"#迭代键值对\" class=\"headerlink\" title=\"迭代键值对\"></a>迭代键值对</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 迭代键</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Integer key : map.keySet()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;Key = &quot;</span> + key);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 迭代值</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Integer value : map.values()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;Value = &quot;</span> + value);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"Iterator\"><a href=\"#Iterator\" class=\"headerlink\" title=\"Iterator\"></a>Iterator</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Iterator&lt;Map.Entry&lt;Integer, Integer&gt;&gt; entries = map.entrySet().iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (entries.hasNext()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tMap.Entry&lt;Integer, Integer&gt; entry = entries.next();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;Key = &quot;</span> + entry.getKey() + <span class=\"string\">&quot;, Value = &quot;</span> + entry.getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>虽然hashmap的插入数据是无序的，但是它遍历出来的结果都是有序的,并且每次遍历的结果都一样</p>\n<blockquote>\n<p>原因就是因为hashmap的数组下标是 hashcode和hashmap的容量大小  按位与出来的结果</p>\n</blockquote>\n<h3 id=\"线程安全\"><a href=\"#线程安全\" class=\"headerlink\" title=\"线程安全\"></a>线程安全</h3><p>hashmap是线程不安全的，如果需要保证线程安全，推荐使用ConcurrentHashMap</p>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMTYvMDYvMjQvamF2YS1oYXNobWFwLmh0bWw=\">美团技术文章<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMzAyMDk5MTg=\">知乎文章<i class=\"fa fa-external-link-alt\"></i></span></p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"java八股文之hashmap\n\n基本认识\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n//默认初始容量 - 必须是2的幂次方\n\nstatic final int DEFAULT_INITIAL_CAPACITY = 1 << 4; \n\n//hashmap的最大容量 2的30次方\n\nstatic final int MAXIMUM_CAPACITY = 1 << 30;\n\n//负载因数\n\nstatic final float DEFAULT_LOAD_FACTOR = 0.75f;\n\n//","more":"<h3 id=\"基本认识\"><a href=\"#基本认识\" class=\"headerlink\" title=\"基本认识\"></a>基本认识</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//默认初始容量 - 必须是2的幂次方</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">DEFAULT_INITIAL_CAPACITY</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">4</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//hashmap的最大容量 2的30次方</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">MAXIMUM_CAPACITY</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//负载因数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">float</span> <span class=\"variable\">DEFAULT_LOAD_FACTOR</span> <span class=\"operator\">=</span> <span class=\"number\">0.75f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//链表数量达到八开始向红黑树转换</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">TREEIFY_THRESHOLD</span> <span class=\"operator\">=</span> <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当红黑树的节点少于6时，则转换为单链表存储</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">UNTREEIFY_THRESHOLD</span> <span class=\"operator\">=</span> <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//虽然在hash冲突发生的时候，默认使用单链表存储，当单链表节点个数大于8时，会转换为红黑树存储</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//但是有一个前提（很多文章都没说）：要求数组长度大于64，否则不会进行转换，而是进行扩容。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">MIN_TREEIFY_CAPACITY</span> <span class=\"operator\">=</span> <span class=\"number\">64</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"最大容量为什么是不超过1\"><a href=\"#最大容量为什么是不超过1\" class=\"headerlink\" title=\"最大容量为什么是不超过1&lt;&lt;30？\"></a><strong>最大容量为什么是不超过1&lt;&lt;30？</strong></h4><p>int类型的数据所占空间大小为32位，所以如果超过这个范围之后，会<strong>出现溢出</strong>。所以，<strong>1&lt;&lt;30是在int类型取值范围中2次幂的最大值</strong>，即为HashMap的容量最大值。</p>\n<h4 id=\"为什么要将链表中转红黑树的阈值设为8？\"><a href=\"#为什么要将链表中转红黑树的阈值设为8？\" class=\"headerlink\" title=\"为什么要将链表中转红黑树的阈值设为8？\"></a><strong>为什么要将链表中转红黑树的阈值设为8？</strong></h4><p>HashMap不直接使用红黑树，<strong>是因为树节点所占空间是普通节点的两倍</strong>，所以只有当节点足够的时候，才会使用树节点。也就是说，尽管时间复杂度上，红黑树比链表好一点，但是红黑树所占的空间比较大，所以综合考虑之下，只有在链表节点数太多的时候，红黑树占空间大这一劣势不太明显的时候，才会舍弃链表，使用红黑树。</p>\n<p>所以说阈值设置为8是一个将内存和性能折中的一个方案</p>\n<h4 id=\"1-8和1-7的区别\"><a href=\"#1-8和1-7的区别\" class=\"headerlink\" title=\"1.8和1.7的区别\"></a>1.8和1.7的区别</h4><ol>\n<li>hashmap1.8之后，结构为 数组+链表+红黑树，而1.7只是数据+链表</li>\n</ol>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210429120122736.png\" loading=\"lazy\"></p>\n<ol start=\"2\">\n<li><p>1.7扩容时需要重新计算哈希值和索引位置，1.8并不重新计算哈希值，巧妙地采用和扩容后容量进行&amp;操作来计算新的索引位置。</p>\n</li>\n<li><p>1.7插入元素到单链表中采用头插入法，1.8采用的是尾插入法。</p>\n</li>\n</ol>\n<blockquote>\n<p>解决hash冲突的方法：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ol>\n<li>开发定址法：所谓开放定址法，即是由关键码得到的哈希地址一旦产生了冲突，也就是说，该地址已经存放了数据元素，就去寻找下一个空的哈希地址，只要哈希表足够大，空的哈希地址总能找到，并将数据元素存入。</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>链地址法：hash值一样的key，会在这个数据后面新建一个链表，每次增加就直接在链表后面加节点即可</li>\n</ol>\n</blockquote>\n<h4 id=\"链表为什么用尾插法\"><a href=\"#链表为什么用尾插法\" class=\"headerlink\" title=\"链表为什么用尾插法\"></a>链表为什么用尾插法</h4><p>为了安全，因为头插法多线程情况下会导致链表成环</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMW41NDExNzdFYT9mcm9tPXNlYXJjaCZzZWlkPTMzOTgzODk1OTQwMjAzMTQxMzI=\">链表成环视频讲解<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<p>那么为什么到了1.8版本才进行修改那？</p>\n<p>其实是因为多线程下的hashmap本就不安全，在多线程场景下如果要使用map，也不会使用hashmap，因此等开发人员想到了，才进行修改</p>\n<h4 id=\"为什么扩容时两倍扩容\"><a href=\"#为什么扩容时两倍扩容\" class=\"headerlink\" title=\"为什么扩容时两倍扩容\"></a>为什么扩容时两倍扩容</h4><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FwZW9wbC9hcnRpY2xlL2RldGFpbHMvODg5MzU0MjI=\">文章<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>主要是与扩容时候的额resize方法有关，resize方法中(n - 1) &amp; hash的计算方法有关</p>\n<p>其中n是集合的容量，hash是添加的元素进过hash函数计算出来的hash值。</p>\n<p>容量是2的n次幂，主要原因是可以使得添加的元素均匀分布在HashMap中的数组上，减少hash碰撞，避免形成链表的结构，使得查询效率降低！</p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><h4 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h4><h5 id=\"hashcode\"><a href=\"#hashcode\" class=\"headerlink\" title=\"hashcode\"></a>hashcode</h5><p>hashcode就是通过hash函数得来的，通俗的说，就是通过某一种算法得到的，hashcode就是在<strong>hash表中有对应的位置</strong>。</p>\n<p>通过对象的内部地址(也就是物理地址)转换成一个整数，然后该整数通过hash函数的算法就得到了hashcode(不同jvm的实现不同, hotspot的实现贴在了最后)，所以，hashcode是什么呢？就是在hash表中对应的位置。这里如果还不是很清楚的话，举个例子，hash表中有 hashcode为1、hashcode为2、(...)3、4、5、6、7、8这样八个位置，有一个对象A，A的物理地址转换为一个整数17(这是假如)，就通过直接取余算法，17%8&#x3D;1，那么A的hashcode就为1，且A就在hash表中1的位置。</p>\n<h6 id=\"为什么使用hashcode\"><a href=\"#为什么使用hashcode\" class=\"headerlink\" title=\"为什么使用hashcode\"></a>为什么使用hashcode</h6><p>很简单，因为hashcode快啊。</p>\n<p><strong>HashCode是用来在散列存储结构中确定对象的存储地址的</strong></p>\n<p>HashMap 之所以速度快，因为他使用的是散列表，<strong>根据 key 的 hashcode 值生成数组下标</strong>（通过内存地址直接查找，不需要判断, 但是需要多出很多内存，相当于<strong>以空间换时间</strong>）</p>\n<h5 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">hash</span><span class=\"params\">(Object key)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> h;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (key == <span class=\"literal\">null</span>) ? <span class=\"number\">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"type\">int</span> <span class=\"title function_\">hashCode</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>h是调用c写的hashcode的方法获取到的哈希值</p>\n<p>h与h向右移动16位进行异或</p>\n<blockquote>\n<p>异或的规则是： 相同为0，不同为1</p>\n</blockquote>\n<h4 id=\"hashmap\"><a href=\"#hashmap\" class=\"headerlink\" title=\"hashmap\"></a>hashmap</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">HashMap</span><span class=\"params\">(<span class=\"type\">int</span> initialCapacity, <span class=\"type\">float</span> loadFactor)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initialCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class=\"line\"></span><br><span class=\"line\">                                           initialCapacity);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class=\"line\"></span><br><span class=\"line\">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loadFactor &lt;= <span class=\"number\">0</span> || Float.isNaN(loadFactor))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Illegal load factor: &quot;</span> +</span><br><span class=\"line\"></span><br><span class=\"line\">                                           loadFactor);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.loadFactor = loadFactor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the specified initial</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> * capacity and the default load factor (0.75).</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  initialCapacity the initial capacity.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> IllegalArgumentException if the initial capacity is negative.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">HashMap</span><span class=\"params\">(<span class=\"type\">int</span> initialCapacity)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the default initial capacity</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> * (16) and the default load factor (0.75).</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">HashMap</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class=\"comment\">// all other fields defaulted</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>hashmap的构造方法，三种初始化hashmap的形式</p>\n<h4 id=\"resize\"><a href=\"#resize\" class=\"headerlink\" title=\"resize\"></a>resize</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * The next size value at which to resize (capacity * load factor).</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     *下一个要调整大小的大小值（容量负载因子）</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@serial</span></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> threshold;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">oldCap</span> <span class=\"operator\">=</span> (oldTab == <span class=\"literal\">null</span>) ? <span class=\"number\">0</span> : oldTab.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">oldThr</span> <span class=\"operator\">=</span> threshold;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> newCap, newThr = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果超过最大的容量则不允许扩容，直接返回原数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldCap &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            threshold = Integer.MAX_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldTab;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果hashmap数量的两倍小于2的32次方并且 大于等于16</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//那么新的hashmap的大小就是原来的两倍</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((newCap = oldCap &lt;&lt; <span class=\"number\">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class=\"line\"></span><br><span class=\"line\">            newThr = oldThr &lt;&lt; <span class=\"number\">1</span>; <span class=\"comment\">// double threshold</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldThr &gt; <span class=\"number\">0</span>) <span class=\"comment\">// initial capacity was placed in threshold</span></span><br><span class=\"line\"></span><br><span class=\"line\">        newCap = oldThr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;               <span class=\"comment\">// zero initial threshold signifies using defaults</span></span><br><span class=\"line\"></span><br><span class=\"line\">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class=\"line\"></span><br><span class=\"line\">        newThr = (<span class=\"type\">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newThr == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">float</span> <span class=\"variable\">ft</span> <span class=\"operator\">=</span> (<span class=\"type\">float</span>)newCap * loadFactor;</span><br><span class=\"line\"></span><br><span class=\"line\">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class=\"type\">float</span>)MAXIMUM_CAPACITY ?</span><br><span class=\"line\"></span><br><span class=\"line\">                  (<span class=\"type\">int</span>)ft : Integer.MAX_VALUE);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    threshold = newThr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>[newCap];</span><br><span class=\"line\"></span><br><span class=\"line\">    table = newTab;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldTab != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            Node&lt;K,V&gt; e;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((e = oldTab[j]) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                oldTab[j] = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//判断e是不是最后一个节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.next == <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">//重新hash之后放入对应的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    newTab[e.hash &amp; (newCap - <span class=\"number\">1</span>)] = e;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//判断这个节点是不是在红黑树中</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\"></span><br><span class=\"line\">                    ((TreeNode&lt;K,V&gt;)e).split(<span class=\"built_in\">this</span>, newTab, j, oldCap);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">                    Node&lt;K,V&gt; loHead = <span class=\"literal\">null</span>, loTail = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    Node&lt;K,V&gt; hiHead = <span class=\"literal\">null</span>, hiTail = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    Node&lt;K,V&gt; next;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        next = e.next;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((e.hash &amp; oldCap) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (loTail == <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                                loHead = e;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\"></span><br><span class=\"line\">                                loTail.next = e;</span><br><span class=\"line\"></span><br><span class=\"line\">                            loTail = e;</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (hiTail == <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                                hiHead = e;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\"></span><br><span class=\"line\">                                hiTail.next = e;</span><br><span class=\"line\"></span><br><span class=\"line\">                            hiTail = e;</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125; <span class=\"keyword\">while</span> ((e = next) != <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (loTail != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        loTail.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                        newTab[j] = loHead;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (hiTail != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        hiTail.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                        newTab[j + oldCap] = hiHead;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> newTab;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<ul>\n<li>hashmap的key只能有一个为null，value可以有多个null</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>HashTable中，无论是key还是value，都不能为null</li>\n</ul>\n</blockquote>\n<h4 id=\"put\"><a href=\"#put\" class=\"headerlink\" title=\"put\"></a>put</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> V <span class=\"title function_\">put</span><span class=\"params\">(K key, V value)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> putVal(hash(key), key, value, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"putVal\"><a href=\"#putVal\" class=\"headerlink\" title=\"putVal\"></a>putVal</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> V <span class=\"title function_\">putVal</span><span class=\"params\">(<span class=\"type\">int</span> hash, K key, V value, <span class=\"type\">boolean</span> onlyIfAbsent,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">               <span class=\"type\">boolean</span> evict)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class=\"type\">int</span> n, i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果table数组中没有值，就要初始化一个长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) == <span class=\"literal\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        n = (tab = resize()).length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果数组的这个下标位置没有数据，就将这个数据插入进去</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((p = tab[i = (n - <span class=\"number\">1</span>) &amp; hash]) == <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        tab[i] = newNode(hash, key, value, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Node&lt;K,V&gt; e; K k;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.hash == hash &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">            ((k = p.key) == key || (key != <span class=\"literal\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\"></span><br><span class=\"line\">            e = p;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果检测到是树节点，就要使用下面这个方法来进行插入元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\"></span><br><span class=\"line\">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class=\"built_in\">this</span>, tab, hash, key, value);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">binCount</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; ; ++binCount) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((e = p.next) == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    p.next = newNode(hash, key, value, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">//如果链表的数量大于8，就转换为红黑树</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"number\">1</span>) <span class=\"comment\">// -1 for 1st</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        treeifyBin(tab, hash);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">                    ((k = e.key) == key || (key != <span class=\"literal\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                p = e;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"literal\">null</span>) &#123; <span class=\"comment\">// existing mapping for key</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">V</span> <span class=\"variable\">oldValue</span> <span class=\"operator\">=</span> e.value;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!onlyIfAbsent || oldValue == <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                e.value = value;</span><br><span class=\"line\"></span><br><span class=\"line\">            afterNodeAccess(e);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//记录修改的次数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ++modCount;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (++size &gt; threshold)</span><br><span class=\"line\"></span><br><span class=\"line\">        resize();</span><br><span class=\"line\"></span><br><span class=\"line\">    afterNodeInsertion(evict);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"treeifyBin\"><a href=\"#treeifyBin\" class=\"headerlink\" title=\"treeifyBin\"></a>treeifyBin</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">treeifyBin</span><span class=\"params\">(Node&lt;K,V&gt;[] tab, <span class=\"type\">int</span> hash)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//虽然上面判断链表长度大于8,到了操作树的环节，但是还是判断数据长度大于64才可以将</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//链表转换为红黑树</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tab == <span class=\"literal\">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class=\"line\"></span><br><span class=\"line\">        resize();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((e = tab[index = (n - <span class=\"number\">1</span>) &amp; hash]) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        TreeNode&lt;K,V&gt; hd = <span class=\"literal\">null</span>, tl = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tl == <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                hd = p;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                p.prev = tl;</span><br><span class=\"line\"></span><br><span class=\"line\">                tl.next = p;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            tl = p;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> ((e = e.next) != <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((tab[index] = hd) != <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            hd.treeify(tab);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h3><h4 id=\"方式\"><a href=\"#方式\" class=\"headerlink\" title=\"方式\"></a>方式</h4><h5 id=\"lambda\"><a href=\"#lambda\" class=\"headerlink\" title=\"lambda\"></a>lambda</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Map&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;Integer, Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">map.put(<span class=\"number\">2</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">map.put(<span class=\"number\">1</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">map.put(<span class=\"number\">4</span>,<span class=\"number\">40</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">map.put(<span class=\"number\">3</span>,<span class=\"number\">30</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">map.forEach((k, v) -&gt; System.out.println(<span class=\"string\">&quot;key: &quot;</span> + k + <span class=\"string\">&quot; value:&quot;</span> + v));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"for-each\"><a href=\"#for-each\" class=\"headerlink\" title=\"for each\"></a>for each</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;Key = &quot;</span> + entry.getKey() + <span class=\"string\">&quot;, Value = &quot;</span> + entry.getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"迭代键值对\"><a href=\"#迭代键值对\" class=\"headerlink\" title=\"迭代键值对\"></a>迭代键值对</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 迭代键</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Integer key : map.keySet()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;Key = &quot;</span> + key);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 迭代值</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Integer value : map.values()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;Value = &quot;</span> + value);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"Iterator\"><a href=\"#Iterator\" class=\"headerlink\" title=\"Iterator\"></a>Iterator</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Iterator&lt;Map.Entry&lt;Integer, Integer&gt;&gt; entries = map.entrySet().iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (entries.hasNext()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tMap.Entry&lt;Integer, Integer&gt; entry = entries.next();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;Key = &quot;</span> + entry.getKey() + <span class=\"string\">&quot;, Value = &quot;</span> + entry.getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>虽然hashmap的插入数据是无序的，但是它遍历出来的结果都是有序的,并且每次遍历的结果都一样</p>\n<blockquote>\n<p>原因就是因为hashmap的数组下标是 hashcode和hashmap的容量大小  按位与出来的结果</p>\n</blockquote>\n<h3 id=\"线程安全\"><a href=\"#线程安全\" class=\"headerlink\" title=\"线程安全\"></a>线程安全</h3><p>hashmap是线程不安全的，如果需要保证线程安全，推荐使用ConcurrentHashMap</p>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMTYvMDYvMjQvamF2YS1oYXNobWFwLmh0bWw=\">美团技术文章<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMzAyMDk5MTg=\">知乎文章<i class=\"fa fa-external-link-alt\"></i></span></p>"},{"title":"hexo next 主题优化","description":"","abbrlink":"193ed01b","date":"2023-05-28T16:00:00.000Z","_content":"\n\n记录一下我对于hexo的优化\n\n\n\n<!-- more -->\n\n\n\n## 标签页\n\n\n\n去除标签页下面显示的标签二字\n\n\n\n```html\n\ntitle: \n\n```\n\n\n\n标签页那个md title 为空就可以了\n\n\n\n> blogSource/source/tags/index.md\n\n>\n\n> blogSource是 博客根目录\n\n\n\n### 关闭评论\n\n\n\n添加comments: false即可\n\n\n\n```html\n\ncomments: false\n\n```\n\n\n\n\n\n\n","source":"_posts/hexo-next-主题优化‘.md","raw":"---\ntitle: hexo next 主题优化\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 193ed01b\ndate: 2023-05-29 00:00:00\n---\n\n\n记录一下我对于hexo的优化\n\n\n\n<!-- more -->\n\n\n\n## 标签页\n\n\n\n去除标签页下面显示的标签二字\n\n\n\n```html\n\ntitle: \n\n```\n\n\n\n标签页那个md title 为空就可以了\n\n\n\n> blogSource/source/tags/index.md\n\n>\n\n> blogSource是 博客根目录\n\n\n\n### 关闭评论\n\n\n\n添加comments: false即可\n\n\n\n```html\n\ncomments: false\n\n```\n\n\n\n\n\n\n","slug":"hexo-next-主题优化‘","published":1,"updated":"2025-03-02T03:37:34.383Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4l001xn0uk1xkxc0jx","content":"<p>记录一下我对于hexo的优化</p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"标签页\"><a href=\"#标签页\" class=\"headerlink\" title=\"标签页\"></a>标签页</h2><p>去除标签页下面显示的标签二字</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">title: </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>标签页那个md title 为空就可以了</p>\n<blockquote>\n<p>blogSource&#x2F;source&#x2F;tags&#x2F;index.md</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>blogSource是 博客根目录</p>\n</blockquote>\n<h3 id=\"关闭评论\"><a href=\"#关闭评论\" class=\"headerlink\" title=\"关闭评论\"></a>关闭评论</h3><p>添加comments: false即可</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">comments: false</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"记录一下我对于hexo的优化\n\n标签页\n去除标签页下面显示的标签二字\n\n1\n2\n3\n\n\n\ntitle: \n\n\n\n标签页那个md title 为空就可以了\n\nblogSource/source/tags/index.md\n\nblogSource是 博客根目录\n\n关闭评论\n添加comments: false即可\n\n1\n2\n3\n\n\n\ncomments: false","more":"<h2 id=\"标签页\"><a href=\"#标签页\" class=\"headerlink\" title=\"标签页\"></a>标签页</h2><p>去除标签页下面显示的标签二字</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">title: </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>标签页那个md title 为空就可以了</p>\n<blockquote>\n<p>blogSource&#x2F;source&#x2F;tags&#x2F;index.md</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>blogSource是 博客根目录</p>\n</blockquote>\n<h3 id=\"关闭评论\"><a href=\"#关闭评论\" class=\"headerlink\" title=\"关闭评论\"></a>关闭评论</h3><p>添加comments: false即可</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">comments: false</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"hexo next 圆角边框","description":"","abbrlink":"f86f8352","date":"2023-05-28T16:00:00.000Z","_content":"\n\n简单设置就可以了\n\n\n\n<!-- more -->\n\n\n\n> 以前的那种在source/_datavariables.styl文件中修改的不管用了 只能自己来了\n\n\n\n## 主题设置\n\n\n\n```yaml\n\ncustom_file_path:\n\n  style: source/_data/styles.styl\n\n```\n\n\n\n主要是styles这个文件启用就好了\n\n\n\n## styles.styl\n\n\n\n```yaml\n\n.fadeIn{\n\n      border-radius:20px;  /* 矩形有圆角 */\n\n}\n\n```\n\n\n\n> 其实很快就搞出来，直接f12 试试就行了\n","source":"_posts/hexo-next-圆角边框.md","raw":"---\ntitle: hexo next 圆角边框\ndescription: ''\ntags:\n  - 无标签\nabbrlink: f86f8352\ndate: 2023-05-29 00:00:00\n---\n\n\n简单设置就可以了\n\n\n\n<!-- more -->\n\n\n\n> 以前的那种在source/_datavariables.styl文件中修改的不管用了 只能自己来了\n\n\n\n## 主题设置\n\n\n\n```yaml\n\ncustom_file_path:\n\n  style: source/_data/styles.styl\n\n```\n\n\n\n主要是styles这个文件启用就好了\n\n\n\n## styles.styl\n\n\n\n```yaml\n\n.fadeIn{\n\n      border-radius:20px;  /* 矩形有圆角 */\n\n}\n\n```\n\n\n\n> 其实很快就搞出来，直接f12 试试就行了\n","slug":"hexo-next-圆角边框","published":1,"updated":"2025-03-02T03:37:34.384Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4m001zn0uk8f0t8ko6","content":"<p>简单设置就可以了</p>\n<span id=\"more\"></span>\n\n\n\n<blockquote>\n<p>以前的那种在source&#x2F;_datavariables.styl文件中修改的不管用了 只能自己来了</p>\n</blockquote>\n<h2 id=\"主题设置\"><a href=\"#主题设置\" class=\"headerlink\" title=\"主题设置\"></a>主题设置</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">custom_file_path:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">style:</span> <span class=\"string\">source/_data/styles.styl</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>主要是styles这个文件启用就好了</p>\n<h2 id=\"styles-styl\"><a href=\"#styles-styl\" class=\"headerlink\" title=\"styles.styl\"></a>styles.styl</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">.fadeIn&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"string\">border-radius:20px;</span>  <span class=\"string\">/*</span> <span class=\"string\">矩形有圆角</span> <span class=\"string\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>其实很快就搞出来，直接f12 试试就行了</p>\n</blockquote>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"简单设置就可以了\n\n以前的那种在source/_datavariables.styl文件中修改的不管用了 只能自己来了\n\n主题设置\n1\n2\n3\n4\n5\n\n\n\ncustom_file_path:\n\n  style: source/_data/styles.styl\n\n\n\n主要是styles这个文件启用就好了\n\nstyles.styl\n1\n2\n3\n4\n5\n6\n7\n\n\n\n.fadeIn{\n\n      border-radius:20px;  /* 矩形有圆角 */\n\n}\n\n\n\n其实很快就搞出来，直接f12 试试就行了","more":"<blockquote>\n<p>以前的那种在source&#x2F;_datavariables.styl文件中修改的不管用了 只能自己来了</p>\n</blockquote>\n<h2 id=\"主题设置\"><a href=\"#主题设置\" class=\"headerlink\" title=\"主题设置\"></a>主题设置</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">custom_file_path:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">style:</span> <span class=\"string\">source/_data/styles.styl</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>主要是styles这个文件启用就好了</p>\n<h2 id=\"styles-styl\"><a href=\"#styles-styl\" class=\"headerlink\" title=\"styles.styl\"></a>styles.styl</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">.fadeIn&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"string\">border-radius:20px;</span>  <span class=\"string\">/*</span> <span class=\"string\">矩形有圆角</span> <span class=\"string\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>其实很快就搞出来，直接f12 试试就行了</p>\n</blockquote>"},{"title":"hexo自动获取图片主色","description":"","abbrlink":"e458c4a8","date":"2023-12-06T16:00:00.000Z","_content":"\n\n## 缘由\n\n\n\n不知道为什么，我在使用阿里云图片的时候，识别文章主色总是很慢，于是就觉得能不能生成文章的时候就直接确定主色，于是就有这个文件\n\n\n\n## 代码\n\n\n\n我的hexo souce文件是位于:\n\n\n\nD:\\blog\\blogSourceCode\\\n\n\n\n这个新建文件是位于主题内这个目录下的:\n\n\n\nD:\\blog\\blogSourceCode\\themes\\anzhiyu\\scripts\n\n\n\n文件名为 getTopImageColor.js\n\n\n\n```js\n\n// 自动设置文章的 ogImage 和 main_color 两个字段\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nconst axios = require(\"axios\");\n\nconst yaml = require(\"js-yaml\");\n\nconst https = require(\"https\"); // Make sure to import this module\n\nconst { type } = require(\"os\");\n\n\n\nconst POSTS_DIR = process.cwd() + \"/source/_posts\";\n\nconst RANDOM_IMG = \"https://random-img.pupper.cn\";\n\n\n\n// Define httpsAgent right after your imports and before the function calls\n\nconst httpsAgent = new https.Agent({\n\n  rejectUnauthorized: false,\n\n});\n\n\n\nasync function getCoverImage() {\n\n  try {\n\n    const response = await axios.get(RANDOM_IMG, {\n\n      maxRedirects: 0,\n\n      validateStatus: (status) => status === 302,\n\n      httpsAgent, // Use the agent here\n\n    });\n\n    return response.headers.location;\n\n  } catch (error) {\n\n    console.error(\"Error fetching ogImage image:\", error);\n\n  }\n\n}\n\n\n\nasync function getMainColor(url) {\n\n  try {\n\n    const urlSuffix = \"?imageAve\";\n\n    const aliyun = \"aliyun\";\n\n//记得去添加自己常用文章图片的关键字，以及获取图片主色的方式\n\n      //我这个是由于我用的阿里云的，于是这样写的\n\n    if (url.includes(aliyun)) { \n\n      urlSuffix = \"?x-oss-process=image/average-hue\";\n\n      const response = await axios.get(`${url}` + urlSuffix);\n\n      return response.data.RGB;\n\n    }\n\n    const response = await axios.get(`${url}` + urlSuffix);\n\n    const mainColorData = response.data.RGB; // Access the RGB field\n\n    const mainColor = `#${mainColorData.slice(2)}`;\n\n    return mainColor;\n\n  } catch (error) {\n\n    console.error(\"Error fetching main color:\", error);\n\n  }\n\n}\n\n\n\nfunction processFiles(dir) {\n\n  const files = fs.readdirSync(dir);\n\n\n\n  for (const file of files) {\n\n    const fullPath = path.join(dir, file);\n\n\n\n    if (fs.statSync(fullPath).isDirectory()) {\n\n      processFiles(fullPath);\n\n    } else if (path.extname(fullPath) === \".md\") {\n\n      addCoverAndMainColor(fullPath);\n\n    }\n\n  }\n\n}\n\n\n\nfunction formatISO8601ToCustomFormat(isoDateString) {\n\n  // 检查输入是否已经是目标格式（\"yyyy-MM-dd HH:mm:ss\"）\n\n  if (/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/.test(isoDateString)) {\n\n    return -1; // 如果已经是目标格式，则直接返回\n\n  }\n\n  const pubDateTime = new pubDateTime(isoDateString);\n\n\n\n  const year = pubDateTime.getUTCFullYear();\n\n  const month = (pubDateTime.getUTCMonth() + 1).toString().padStart(2, \"0\");\n\n  const day = pubDateTime.getUTCDate().toString().padStart(2, \"0\");\n\n  const hours = pubDateTime.getUTCHours().toString().padStart(2, \"0\");\n\n  const minutes = pubDateTime.getUTCMinutes().toString().padStart(2, \"0\");\n\n  const seconds = pubDateTime.getUTCSeconds().toString().padStart(2, \"0\");\n\n\n\n  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n\n}\n\n\n\nasync function addCoverAndMainColor(filePath) {\n\n  const content = fs.readFileSync(filePath, \"utf8\");\n\n  const yamlSection = content.match(/---\\n([\\s\\S]*?)---/);\n\n\n\n  if (!yamlSection) return;\n\n\n\n  const data = yaml.load(yamlSection[1]);\n\n\n\n  let updated = false;\n\n\n\n  if (data.pubDateTime) {\n\n    const _date = formatISO8601ToCustomFormat(data.pubDateTime);\n\n    if (_date === -1) {\n\n      updated = false;\n\n    } else {\n\n      data.pubDateTime = _date;\n\n      updated = true;\n\n    }\n\n  }\n\n\n\n  if (data.update) {\n\n    const _update = formatISO8601ToCustomFormat(data.update);\n\n    if (_update === -1) {\n\n      updated = false;\n\n    } else {\n\n      data.update = _update;\n\n      updated = true;\n\n    }\n\n  }\n\n\n\n  if (!data.ogImage) {\n\n    data.ogImage = await getCoverImage();\n\n    updated = true;\n\n  }\n\n\n\n  if (!data.main_color) {\n\n    data.main_color = await getMainColor(data.ogImage);\n\n    updated = true;\n\n  }\n\n\n\n  if (updated) {\n\n    const updatedYaml = yaml.dump(data);\n\n    const updatedContent = content.replace(yamlSection[1], updatedYaml);\n\n    fs.writeFileSync(filePath, updatedContent, \"utf8\");\n\n    console.log(`Updated: ${filePath}`);\n\n  }\n\n}\n\n\n\nprocessFiles(POSTS_DIR);\n\n\n\nhexo.on(\"before_generate\", async () => {\n\n  console.log(\"Automatically updating ogImage and main color...\");\n\n  await processFiles(POSTS_DIR);\n\n  console.log(\"ogImage and main color updated successfully!\");\n\n});\n\n\n\n//在文件底部添加这段代码\n\nhexo.on(\"before_generate\", async () => {\n\n  console.log(\"Automatically updating ogImage and main color...\");\n\n  await processFiles(POSTS_DIR);\n\n  console.log(\"ogImage and main color updated successfully!\");\n\n});\n\n```\n\n\n","source":"_posts/hexo自动获取图片主色.md","raw":"---\ntitle: hexo自动获取图片主色\ndescription: ''\ntags:\n  - 无标签\nabbrlink: e458c4a8\ndate: 2023-12-07 00:00:00\n---\n\n\n## 缘由\n\n\n\n不知道为什么，我在使用阿里云图片的时候，识别文章主色总是很慢，于是就觉得能不能生成文章的时候就直接确定主色，于是就有这个文件\n\n\n\n## 代码\n\n\n\n我的hexo souce文件是位于:\n\n\n\nD:\\blog\\blogSourceCode\\\n\n\n\n这个新建文件是位于主题内这个目录下的:\n\n\n\nD:\\blog\\blogSourceCode\\themes\\anzhiyu\\scripts\n\n\n\n文件名为 getTopImageColor.js\n\n\n\n```js\n\n// 自动设置文章的 ogImage 和 main_color 两个字段\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nconst axios = require(\"axios\");\n\nconst yaml = require(\"js-yaml\");\n\nconst https = require(\"https\"); // Make sure to import this module\n\nconst { type } = require(\"os\");\n\n\n\nconst POSTS_DIR = process.cwd() + \"/source/_posts\";\n\nconst RANDOM_IMG = \"https://random-img.pupper.cn\";\n\n\n\n// Define httpsAgent right after your imports and before the function calls\n\nconst httpsAgent = new https.Agent({\n\n  rejectUnauthorized: false,\n\n});\n\n\n\nasync function getCoverImage() {\n\n  try {\n\n    const response = await axios.get(RANDOM_IMG, {\n\n      maxRedirects: 0,\n\n      validateStatus: (status) => status === 302,\n\n      httpsAgent, // Use the agent here\n\n    });\n\n    return response.headers.location;\n\n  } catch (error) {\n\n    console.error(\"Error fetching ogImage image:\", error);\n\n  }\n\n}\n\n\n\nasync function getMainColor(url) {\n\n  try {\n\n    const urlSuffix = \"?imageAve\";\n\n    const aliyun = \"aliyun\";\n\n//记得去添加自己常用文章图片的关键字，以及获取图片主色的方式\n\n      //我这个是由于我用的阿里云的，于是这样写的\n\n    if (url.includes(aliyun)) { \n\n      urlSuffix = \"?x-oss-process=image/average-hue\";\n\n      const response = await axios.get(`${url}` + urlSuffix);\n\n      return response.data.RGB;\n\n    }\n\n    const response = await axios.get(`${url}` + urlSuffix);\n\n    const mainColorData = response.data.RGB; // Access the RGB field\n\n    const mainColor = `#${mainColorData.slice(2)}`;\n\n    return mainColor;\n\n  } catch (error) {\n\n    console.error(\"Error fetching main color:\", error);\n\n  }\n\n}\n\n\n\nfunction processFiles(dir) {\n\n  const files = fs.readdirSync(dir);\n\n\n\n  for (const file of files) {\n\n    const fullPath = path.join(dir, file);\n\n\n\n    if (fs.statSync(fullPath).isDirectory()) {\n\n      processFiles(fullPath);\n\n    } else if (path.extname(fullPath) === \".md\") {\n\n      addCoverAndMainColor(fullPath);\n\n    }\n\n  }\n\n}\n\n\n\nfunction formatISO8601ToCustomFormat(isoDateString) {\n\n  // 检查输入是否已经是目标格式（\"yyyy-MM-dd HH:mm:ss\"）\n\n  if (/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/.test(isoDateString)) {\n\n    return -1; // 如果已经是目标格式，则直接返回\n\n  }\n\n  const pubDateTime = new pubDateTime(isoDateString);\n\n\n\n  const year = pubDateTime.getUTCFullYear();\n\n  const month = (pubDateTime.getUTCMonth() + 1).toString().padStart(2, \"0\");\n\n  const day = pubDateTime.getUTCDate().toString().padStart(2, \"0\");\n\n  const hours = pubDateTime.getUTCHours().toString().padStart(2, \"0\");\n\n  const minutes = pubDateTime.getUTCMinutes().toString().padStart(2, \"0\");\n\n  const seconds = pubDateTime.getUTCSeconds().toString().padStart(2, \"0\");\n\n\n\n  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n\n}\n\n\n\nasync function addCoverAndMainColor(filePath) {\n\n  const content = fs.readFileSync(filePath, \"utf8\");\n\n  const yamlSection = content.match(/---\\n([\\s\\S]*?)---/);\n\n\n\n  if (!yamlSection) return;\n\n\n\n  const data = yaml.load(yamlSection[1]);\n\n\n\n  let updated = false;\n\n\n\n  if (data.pubDateTime) {\n\n    const _date = formatISO8601ToCustomFormat(data.pubDateTime);\n\n    if (_date === -1) {\n\n      updated = false;\n\n    } else {\n\n      data.pubDateTime = _date;\n\n      updated = true;\n\n    }\n\n  }\n\n\n\n  if (data.update) {\n\n    const _update = formatISO8601ToCustomFormat(data.update);\n\n    if (_update === -1) {\n\n      updated = false;\n\n    } else {\n\n      data.update = _update;\n\n      updated = true;\n\n    }\n\n  }\n\n\n\n  if (!data.ogImage) {\n\n    data.ogImage = await getCoverImage();\n\n    updated = true;\n\n  }\n\n\n\n  if (!data.main_color) {\n\n    data.main_color = await getMainColor(data.ogImage);\n\n    updated = true;\n\n  }\n\n\n\n  if (updated) {\n\n    const updatedYaml = yaml.dump(data);\n\n    const updatedContent = content.replace(yamlSection[1], updatedYaml);\n\n    fs.writeFileSync(filePath, updatedContent, \"utf8\");\n\n    console.log(`Updated: ${filePath}`);\n\n  }\n\n}\n\n\n\nprocessFiles(POSTS_DIR);\n\n\n\nhexo.on(\"before_generate\", async () => {\n\n  console.log(\"Automatically updating ogImage and main color...\");\n\n  await processFiles(POSTS_DIR);\n\n  console.log(\"ogImage and main color updated successfully!\");\n\n});\n\n\n\n//在文件底部添加这段代码\n\nhexo.on(\"before_generate\", async () => {\n\n  console.log(\"Automatically updating ogImage and main color...\");\n\n  await processFiles(POSTS_DIR);\n\n  console.log(\"ogImage and main color updated successfully!\");\n\n});\n\n```\n\n\n","slug":"hexo自动获取图片主色","published":1,"updated":"2025-03-02T03:37:34.384Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4m0021n0ukdtxh2xbu","content":"<h2 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h2><p>不知道为什么，我在使用阿里云图片的时候，识别文章主色总是很慢，于是就觉得能不能生成文章的时候就直接确定主色，于是就有这个文件</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>我的hexo souce文件是位于:</p>\n<p>D:\\blog\\blogSourceCode\\</p>\n<p>这个新建文件是位于主题内这个目录下的:</p>\n<p>D:\\blog\\blogSourceCode\\themes\\anzhiyu\\scripts</p>\n<p>文件名为 getTopImageColor.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自动设置文章的 ogImage 和 main_color 两个字段</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;axios&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> yaml = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;js-yaml&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> https = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;https&quot;</span>); <span class=\"comment\">// Make sure to import this module</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; type &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;os&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">POSTS_DIR</span> = process.<span class=\"title function_\">cwd</span>() + <span class=\"string\">&quot;/source/_posts&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">RANDOM_IMG</span> = <span class=\"string\">&quot;https://random-img.pupper.cn&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Define httpsAgent right after your imports and before the function calls</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> httpsAgent = <span class=\"keyword\">new</span> https.<span class=\"title class_\">Agent</span>(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">rejectUnauthorized</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getCoverImage</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"variable constant_\">RANDOM_IMG</span>, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">maxRedirects</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">validateStatus</span>: <span class=\"function\">(<span class=\"params\">status</span>) =&gt;</span> status === <span class=\"number\">302</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">      httpsAgent, <span class=\"comment\">// Use the agent here</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.<span class=\"property\">headers</span>.<span class=\"property\">location</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;Error fetching ogImage image:&quot;</span>, error);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getMainColor</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> urlSuffix = <span class=\"string\">&quot;?imageAve&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> aliyun = <span class=\"string\">&quot;aliyun&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//记得去添加自己常用文章图片的关键字，以及获取图片主色的方式</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//我这个是由于我用的阿里云的，于是这样写的</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (url.<span class=\"title function_\">includes</span>(aliyun)) &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">      urlSuffix = <span class=\"string\">&quot;?x-oss-process=image/average-hue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">`<span class=\"subst\">$&#123;url&#125;</span>`</span> + urlSuffix);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> response.<span class=\"property\">data</span>.<span class=\"property\">RGB</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">`<span class=\"subst\">$&#123;url&#125;</span>`</span> + urlSuffix);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> mainColorData = response.<span class=\"property\">data</span>.<span class=\"property\">RGB</span>; <span class=\"comment\">// Access the RGB field</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> mainColor = <span class=\"string\">`#<span class=\"subst\">$&#123;mainColorData.slice(<span class=\"number\">2</span>)&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> mainColor;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;Error fetching main color:&quot;</span>, error);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">processFiles</span>(<span class=\"params\">dir</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> files = fs.<span class=\"title function_\">readdirSync</span>(dir);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> file <span class=\"keyword\">of</span> files) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> fullPath = path.<span class=\"title function_\">join</span>(dir, file);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fs.<span class=\"title function_\">statSync</span>(fullPath).<span class=\"title function_\">isDirectory</span>()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"title function_\">processFiles</span>(fullPath);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (path.<span class=\"title function_\">extname</span>(fullPath) === <span class=\"string\">&quot;.md&quot;</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"title function_\">addCoverAndMainColor</span>(fullPath);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">formatISO8601ToCustomFormat</span>(<span class=\"params\">isoDateString</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 检查输入是否已经是目标格式（&quot;yyyy-MM-dd HH:mm:ss&quot;）</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"regexp\">/^\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125; \\d&#123;2&#125;:\\d&#123;2&#125;:\\d&#123;2&#125;$/</span>.<span class=\"title function_\">test</span>(isoDateString)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>; <span class=\"comment\">// 如果已经是目标格式，则直接返回</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> pubDateTime = <span class=\"keyword\">new</span> <span class=\"title function_\">pubDateTime</span>(isoDateString);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> year = pubDateTime.<span class=\"title function_\">getUTCFullYear</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> month = (pubDateTime.<span class=\"title function_\">getUTCMonth</span>() + <span class=\"number\">1</span>).<span class=\"title function_\">toString</span>().<span class=\"title function_\">padStart</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> day = pubDateTime.<span class=\"title function_\">getUTCDate</span>().<span class=\"title function_\">toString</span>().<span class=\"title function_\">padStart</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> hours = pubDateTime.<span class=\"title function_\">getUTCHours</span>().<span class=\"title function_\">toString</span>().<span class=\"title function_\">padStart</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> minutes = pubDateTime.<span class=\"title function_\">getUTCMinutes</span>().<span class=\"title function_\">toString</span>().<span class=\"title function_\">padStart</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> seconds = pubDateTime.<span class=\"title function_\">getUTCSeconds</span>().<span class=\"title function_\">toString</span>().<span class=\"title function_\">padStart</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;year&#125;</span>-<span class=\"subst\">$&#123;month&#125;</span>-<span class=\"subst\">$&#123;day&#125;</span> <span class=\"subst\">$&#123;hours&#125;</span>:<span class=\"subst\">$&#123;minutes&#125;</span>:<span class=\"subst\">$&#123;seconds&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">addCoverAndMainColor</span>(<span class=\"params\">filePath</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> content = fs.<span class=\"title function_\">readFileSync</span>(filePath, <span class=\"string\">&quot;utf8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> yamlSection = content.<span class=\"title function_\">match</span>(<span class=\"regexp\">/---\\n([\\s\\S]*?)---/</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!yamlSection) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = yaml.<span class=\"title function_\">load</span>(yamlSection[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> updated = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (data.<span class=\"property\">pubDateTime</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> _date = <span class=\"title function_\">formatISO8601ToCustomFormat</span>(data.<span class=\"property\">pubDateTime</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_date === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      updated = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      data.<span class=\"property\">pubDateTime</span> = _date;</span><br><span class=\"line\"></span><br><span class=\"line\">      updated = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (data.<span class=\"property\">update</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> _update = <span class=\"title function_\">formatISO8601ToCustomFormat</span>(data.<span class=\"property\">update</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_update === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      updated = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      data.<span class=\"property\">update</span> = _update;</span><br><span class=\"line\"></span><br><span class=\"line\">      updated = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!data.<span class=\"property\">ogImage</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    data.<span class=\"property\">ogImage</span> = <span class=\"keyword\">await</span> <span class=\"title function_\">getCoverImage</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    updated = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!data.<span class=\"property\">main_color</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    data.<span class=\"property\">main_color</span> = <span class=\"keyword\">await</span> <span class=\"title function_\">getMainColor</span>(data.<span class=\"property\">ogImage</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    updated = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (updated) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> updatedYaml = yaml.<span class=\"title function_\">dump</span>(data);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> updatedContent = content.<span class=\"title function_\">replace</span>(yamlSection[<span class=\"number\">1</span>], updatedYaml);</span><br><span class=\"line\"></span><br><span class=\"line\">    fs.<span class=\"title function_\">writeFileSync</span>(filePath, updatedContent, <span class=\"string\">&quot;utf8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Updated: <span class=\"subst\">$&#123;filePath&#125;</span>`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">processFiles</span>(<span class=\"variable constant_\">POSTS_DIR</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hexo.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;before_generate&quot;</span>, <span class=\"title function_\">async</span> () =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Automatically updating ogImage and main color...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title function_\">processFiles</span>(<span class=\"variable constant_\">POSTS_DIR</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;ogImage and main color updated successfully!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在文件底部添加这段代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;before_generate&quot;</span>, <span class=\"title function_\">async</span> () =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Automatically updating ogImage and main color...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title function_\">processFiles</span>(<span class=\"variable constant_\">POSTS_DIR</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;ogImage and main color updated successfully!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"缘由\n不知道为什么，我在使用阿里云图片的时候，识别文章主色总是很慢，于是就觉得能不能生成文章的时候就直接确定主色，于是就有这个文件\n\n代码\n我的hexo souce文件是位于:\n\nD:\\blog\\blogSourceCode\\\n\n这个新建文件是位于主题内这个目录下的:\n\nD:\\blog\\blogSourceCode\\themes\\anzhiyu\\scripts\n\n文件名为 getTopImageColor.js\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n3","more":"<h2 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h2><p>不知道为什么，我在使用阿里云图片的时候，识别文章主色总是很慢，于是就觉得能不能生成文章的时候就直接确定主色，于是就有这个文件</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>我的hexo souce文件是位于:</p>\n<p>D:\\blog\\blogSourceCode\\</p>\n<p>这个新建文件是位于主题内这个目录下的:</p>\n<p>D:\\blog\\blogSourceCode\\themes\\anzhiyu\\scripts</p>\n<p>文件名为 getTopImageColor.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自动设置文章的 ogImage 和 main_color 两个字段</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;axios&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> yaml = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;js-yaml&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> https = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;https&quot;</span>); <span class=\"comment\">// Make sure to import this module</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; type &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;os&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">POSTS_DIR</span> = process.<span class=\"title function_\">cwd</span>() + <span class=\"string\">&quot;/source/_posts&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">RANDOM_IMG</span> = <span class=\"string\">&quot;https://random-img.pupper.cn&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Define httpsAgent right after your imports and before the function calls</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> httpsAgent = <span class=\"keyword\">new</span> https.<span class=\"title class_\">Agent</span>(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">rejectUnauthorized</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getCoverImage</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"variable constant_\">RANDOM_IMG</span>, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">maxRedirects</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">validateStatus</span>: <span class=\"function\">(<span class=\"params\">status</span>) =&gt;</span> status === <span class=\"number\">302</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">      httpsAgent, <span class=\"comment\">// Use the agent here</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.<span class=\"property\">headers</span>.<span class=\"property\">location</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;Error fetching ogImage image:&quot;</span>, error);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getMainColor</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> urlSuffix = <span class=\"string\">&quot;?imageAve&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> aliyun = <span class=\"string\">&quot;aliyun&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//记得去添加自己常用文章图片的关键字，以及获取图片主色的方式</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//我这个是由于我用的阿里云的，于是这样写的</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (url.<span class=\"title function_\">includes</span>(aliyun)) &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">      urlSuffix = <span class=\"string\">&quot;?x-oss-process=image/average-hue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">`<span class=\"subst\">$&#123;url&#125;</span>`</span> + urlSuffix);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> response.<span class=\"property\">data</span>.<span class=\"property\">RGB</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">`<span class=\"subst\">$&#123;url&#125;</span>`</span> + urlSuffix);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> mainColorData = response.<span class=\"property\">data</span>.<span class=\"property\">RGB</span>; <span class=\"comment\">// Access the RGB field</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> mainColor = <span class=\"string\">`#<span class=\"subst\">$&#123;mainColorData.slice(<span class=\"number\">2</span>)&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> mainColor;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;Error fetching main color:&quot;</span>, error);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">processFiles</span>(<span class=\"params\">dir</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> files = fs.<span class=\"title function_\">readdirSync</span>(dir);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> file <span class=\"keyword\">of</span> files) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> fullPath = path.<span class=\"title function_\">join</span>(dir, file);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fs.<span class=\"title function_\">statSync</span>(fullPath).<span class=\"title function_\">isDirectory</span>()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"title function_\">processFiles</span>(fullPath);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (path.<span class=\"title function_\">extname</span>(fullPath) === <span class=\"string\">&quot;.md&quot;</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"title function_\">addCoverAndMainColor</span>(fullPath);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">formatISO8601ToCustomFormat</span>(<span class=\"params\">isoDateString</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 检查输入是否已经是目标格式（&quot;yyyy-MM-dd HH:mm:ss&quot;）</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"regexp\">/^\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125; \\d&#123;2&#125;:\\d&#123;2&#125;:\\d&#123;2&#125;$/</span>.<span class=\"title function_\">test</span>(isoDateString)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>; <span class=\"comment\">// 如果已经是目标格式，则直接返回</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> pubDateTime = <span class=\"keyword\">new</span> <span class=\"title function_\">pubDateTime</span>(isoDateString);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> year = pubDateTime.<span class=\"title function_\">getUTCFullYear</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> month = (pubDateTime.<span class=\"title function_\">getUTCMonth</span>() + <span class=\"number\">1</span>).<span class=\"title function_\">toString</span>().<span class=\"title function_\">padStart</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> day = pubDateTime.<span class=\"title function_\">getUTCDate</span>().<span class=\"title function_\">toString</span>().<span class=\"title function_\">padStart</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> hours = pubDateTime.<span class=\"title function_\">getUTCHours</span>().<span class=\"title function_\">toString</span>().<span class=\"title function_\">padStart</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> minutes = pubDateTime.<span class=\"title function_\">getUTCMinutes</span>().<span class=\"title function_\">toString</span>().<span class=\"title function_\">padStart</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> seconds = pubDateTime.<span class=\"title function_\">getUTCSeconds</span>().<span class=\"title function_\">toString</span>().<span class=\"title function_\">padStart</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;year&#125;</span>-<span class=\"subst\">$&#123;month&#125;</span>-<span class=\"subst\">$&#123;day&#125;</span> <span class=\"subst\">$&#123;hours&#125;</span>:<span class=\"subst\">$&#123;minutes&#125;</span>:<span class=\"subst\">$&#123;seconds&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">addCoverAndMainColor</span>(<span class=\"params\">filePath</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> content = fs.<span class=\"title function_\">readFileSync</span>(filePath, <span class=\"string\">&quot;utf8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> yamlSection = content.<span class=\"title function_\">match</span>(<span class=\"regexp\">/---\\n([\\s\\S]*?)---/</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!yamlSection) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = yaml.<span class=\"title function_\">load</span>(yamlSection[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> updated = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (data.<span class=\"property\">pubDateTime</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> _date = <span class=\"title function_\">formatISO8601ToCustomFormat</span>(data.<span class=\"property\">pubDateTime</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_date === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      updated = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      data.<span class=\"property\">pubDateTime</span> = _date;</span><br><span class=\"line\"></span><br><span class=\"line\">      updated = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (data.<span class=\"property\">update</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> _update = <span class=\"title function_\">formatISO8601ToCustomFormat</span>(data.<span class=\"property\">update</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_update === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      updated = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      data.<span class=\"property\">update</span> = _update;</span><br><span class=\"line\"></span><br><span class=\"line\">      updated = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!data.<span class=\"property\">ogImage</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    data.<span class=\"property\">ogImage</span> = <span class=\"keyword\">await</span> <span class=\"title function_\">getCoverImage</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    updated = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!data.<span class=\"property\">main_color</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    data.<span class=\"property\">main_color</span> = <span class=\"keyword\">await</span> <span class=\"title function_\">getMainColor</span>(data.<span class=\"property\">ogImage</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    updated = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (updated) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> updatedYaml = yaml.<span class=\"title function_\">dump</span>(data);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> updatedContent = content.<span class=\"title function_\">replace</span>(yamlSection[<span class=\"number\">1</span>], updatedYaml);</span><br><span class=\"line\"></span><br><span class=\"line\">    fs.<span class=\"title function_\">writeFileSync</span>(filePath, updatedContent, <span class=\"string\">&quot;utf8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Updated: <span class=\"subst\">$&#123;filePath&#125;</span>`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">processFiles</span>(<span class=\"variable constant_\">POSTS_DIR</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hexo.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;before_generate&quot;</span>, <span class=\"title function_\">async</span> () =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Automatically updating ogImage and main color...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title function_\">processFiles</span>(<span class=\"variable constant_\">POSTS_DIR</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;ogImage and main color updated successfully!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在文件底部添加这段代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;before_generate&quot;</span>, <span class=\"title function_\">async</span> () =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Automatically updating ogImage and main color...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title function_\">processFiles</span>(<span class=\"variable constant_\">POSTS_DIR</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;ogImage and main color updated successfully!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"hexo部署到github两种方式对比","description":"","abbrlink":"2efb9f75","date":"2023-11-23T16:00:00.000Z","_content":"有两种方式，一种是使用私钥公钥的方式，另一种是使用token的方式来进行的\n\n\n\n## 对比\n\n\n\n私钥公钥的方式比较麻烦，就是你每更换一个电脑，都需要将自己 ssh 链接github的私钥保存在actions的那个 变量里面，而token的方式就是设置一次即可，下次换个电脑只要保证自己可以连接到github上就可以了\n\n\n\n> 下面只演示token的方式是如何进行的\n\n\n\n## token\n\n\n\n在hexo源代码仓库新建一个github action，内容如下\n\n\n\n```yaml\n\nname: 自动部署\n\n# 当有改动推送到master分支时，启动Action\n\non:\n\n  push:\n\n    branches:\n\n      - master\n\n      #2020年10月后github新建仓库默认分支改为main，注意更改\n\npermissions:\n\n  contents: write\n\njobs:\n\n  deploy:\n\n    runs-on: ubuntu-latest\n\n    steps:\n\n      - name: 检查分支\n\n        uses: actions/checkout@v2\n\n        with:\n\n          ref: master\n\n\n\n      - name: 安装 Node\n\n        uses: actions/setup-node@v1\n\n        with:\n\n          node-version: \"16.x\"\n\n\n\n      - name: 安装 Hexo\n\n        run: |\n\n          export TZ='Asia/Shanghai'\n\n          npm install hexo-cli -g\n\n\n\n      - name: 缓存 Hexo\n\n        id: cache-npm\n\n        uses: actions/cache@v3\n\n        env:\n\n          cache-name: cache-node-modules\n\n        with:\n\n          path: node_modules\n\n          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}\n\n          restore-keys: |\n\n            ${{ runner.os }}-build-${{ env.cache-name }}-\n\n            ${{ runner.os }}-build-\n\n            ${{ runner.os }}-\n\n\n\n      - name: 安装依赖\n\n        if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}\n\n        run: |\n\n          npm install --save\n\n      - name: Setup Git Infomation\n\n        run: | \n\n          git config --global user.name 'sunheyi' \n\n          git config --global user.email '1061867552@qq.com'\n\n      - name: 生成静态文件\n\n        run: |\n\n          hexo clean\n\n          hexo bangumi -u #bilibili番剧更新\n\n          hexo generate\n\n\n\n      - name: 部署到Github\n\n        uses: JamesIves/github-pages-deploy-action@v4\n\n        with:\n\n          token: 你的token 记得将这个仓库改为私有仓库，当然你也可以设置为仓库然后用sercret.token的方式来引用它\n\n          repository-name: sunheyi6/sunheyi6.github.io\n\n          branch: main\n\n          folder: public\n\n          commit-message: \"${{ github.event.head_commit.message }} Updated By Github Actions\"\n\n```\n\n\n\n> 这里需要注意的是，当你都完成了 代码也推送到github page的时候，你需要去vercel或者你选定的一个厂商中将github page这个仓库部署起来就可以了，否则这个页面一直显示都是空白页面！！！  部署之后需要改这个域名为你自己想要设置的域名，如下图\n\n>\n\n> ![image-20231127093602904](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20231127093602904.png)\n\n>\n\n> 我因为这个问题搞了一天，哎!","source":"_posts/hexo部署到github两种方式对比.md","raw":"---\ntitle: hexo部署到github两种方式对比\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 2efb9f75\ndate: 2023-11-24 00:00:00\n---\n有两种方式，一种是使用私钥公钥的方式，另一种是使用token的方式来进行的\n\n\n\n## 对比\n\n\n\n私钥公钥的方式比较麻烦，就是你每更换一个电脑，都需要将自己 ssh 链接github的私钥保存在actions的那个 变量里面，而token的方式就是设置一次即可，下次换个电脑只要保证自己可以连接到github上就可以了\n\n\n\n> 下面只演示token的方式是如何进行的\n\n\n\n## token\n\n\n\n在hexo源代码仓库新建一个github action，内容如下\n\n\n\n```yaml\n\nname: 自动部署\n\n# 当有改动推送到master分支时，启动Action\n\non:\n\n  push:\n\n    branches:\n\n      - master\n\n      #2020年10月后github新建仓库默认分支改为main，注意更改\n\npermissions:\n\n  contents: write\n\njobs:\n\n  deploy:\n\n    runs-on: ubuntu-latest\n\n    steps:\n\n      - name: 检查分支\n\n        uses: actions/checkout@v2\n\n        with:\n\n          ref: master\n\n\n\n      - name: 安装 Node\n\n        uses: actions/setup-node@v1\n\n        with:\n\n          node-version: \"16.x\"\n\n\n\n      - name: 安装 Hexo\n\n        run: |\n\n          export TZ='Asia/Shanghai'\n\n          npm install hexo-cli -g\n\n\n\n      - name: 缓存 Hexo\n\n        id: cache-npm\n\n        uses: actions/cache@v3\n\n        env:\n\n          cache-name: cache-node-modules\n\n        with:\n\n          path: node_modules\n\n          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}\n\n          restore-keys: |\n\n            ${{ runner.os }}-build-${{ env.cache-name }}-\n\n            ${{ runner.os }}-build-\n\n            ${{ runner.os }}-\n\n\n\n      - name: 安装依赖\n\n        if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}\n\n        run: |\n\n          npm install --save\n\n      - name: Setup Git Infomation\n\n        run: | \n\n          git config --global user.name 'sunheyi' \n\n          git config --global user.email '1061867552@qq.com'\n\n      - name: 生成静态文件\n\n        run: |\n\n          hexo clean\n\n          hexo bangumi -u #bilibili番剧更新\n\n          hexo generate\n\n\n\n      - name: 部署到Github\n\n        uses: JamesIves/github-pages-deploy-action@v4\n\n        with:\n\n          token: 你的token 记得将这个仓库改为私有仓库，当然你也可以设置为仓库然后用sercret.token的方式来引用它\n\n          repository-name: sunheyi6/sunheyi6.github.io\n\n          branch: main\n\n          folder: public\n\n          commit-message: \"${{ github.event.head_commit.message }} Updated By Github Actions\"\n\n```\n\n\n\n> 这里需要注意的是，当你都完成了 代码也推送到github page的时候，你需要去vercel或者你选定的一个厂商中将github page这个仓库部署起来就可以了，否则这个页面一直显示都是空白页面！！！  部署之后需要改这个域名为你自己想要设置的域名，如下图\n\n>\n\n> ![image-20231127093602904](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20231127093602904.png)\n\n>\n\n> 我因为这个问题搞了一天，哎!","slug":"hexo部署到github两种方式对比","published":1,"updated":"2025-03-02T03:37:34.386Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4n0023n0uk5nab8217","content":"<p>有两种方式，一种是使用私钥公钥的方式，另一种是使用token的方式来进行的</p>\n<h2 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h2><p>私钥公钥的方式比较麻烦，就是你每更换一个电脑，都需要将自己 ssh 链接github的私钥保存在actions的那个 变量里面，而token的方式就是设置一次即可，下次换个电脑只要保证自己可以连接到github上就可以了</p>\n<blockquote>\n<p>下面只演示token的方式是如何进行的</p>\n</blockquote>\n<h2 id=\"token\"><a href=\"#token\" class=\"headerlink\" title=\"token\"></a>token</h2><p>在hexo源代码仓库新建一个github action，内容如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">自动部署</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当有改动推送到master分支时，启动Action</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">branches:</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">#2020年10月后github新建仓库默认分支改为main，注意更改</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">permissions:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">contents:</span> <span class=\"string\">write</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">deploy:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查分支</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装</span> <span class=\"string\">Node</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">&quot;16.x&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装</span> <span class=\"string\">Hexo</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"string\">export</span> <span class=\"string\">TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-cli</span> <span class=\"string\">-g</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">缓存</span> <span class=\"string\">Hexo</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">id:</span> <span class=\"string\">cache-npm</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/cache@v3</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"attr\">cache-name:</span> <span class=\"string\">cache-node-modules</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">node_modules</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"attr\">key:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">runner.os</span> <span class=\"string\">&#125;&#125;-build-$&#123;&#123;</span> <span class=\"string\">env.cache-name</span> <span class=\"string\">&#125;&#125;-$&#123;&#123;</span> <span class=\"string\">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"attr\">restore-keys:</span> <span class=\"string\">|</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">runner.os</span> <span class=\"string\">&#125;&#125;-build-$&#123;&#123;</span> <span class=\"string\">env.cache-name</span> <span class=\"string\">&#125;&#125;-</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">runner.os</span> <span class=\"string\">&#125;&#125;-build-</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">runner.os</span> <span class=\"string\">&#125;&#125;-</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装依赖</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">if:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">steps.cache-npm.outputs.cache-hit</span> <span class=\"type\">!=</span> <span class=\"string\">&#x27;true&#x27;</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">--save</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Git</span> <span class=\"string\">Infomation</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span> </span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">&#x27;sunheyi&#x27;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">&#x27;1061867552@qq.com&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">生成静态文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"string\">hexo</span> <span class=\"string\">clean</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"string\">hexo</span> <span class=\"string\">bangumi</span> <span class=\"string\">-u</span> <span class=\"comment\">#bilibili番剧更新</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"string\">hexo</span> <span class=\"string\">generate</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">部署到Github</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">JamesIves/github-pages-deploy-action@v4</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"attr\">token:</span> <span class=\"string\">你的token</span> <span class=\"string\">记得将这个仓库改为私有仓库，当然你也可以设置为仓库然后用sercret.token的方式来引用它</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"attr\">repository-name:</span> <span class=\"string\">sunheyi6/sunheyi6.github.io</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"attr\">branch:</span> <span class=\"string\">main</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"attr\">folder:</span> <span class=\"string\">public</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"attr\">commit-message:</span> <span class=\"string\">&quot;$<span class=\"template-variable\">&#123;&#123; github.event.head_commit.message &#125;&#125;</span> Updated By Github Actions&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>这里需要注意的是，当你都完成了 代码也推送到github page的时候，你需要去vercel或者你选定的一个厂商中将github page这个仓库部署起来就可以了，否则这个页面一直显示都是空白页面！！！  部署之后需要改这个域名为你自己想要设置的域名，如下图</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20231127093602904.png\" alt=\"image-20231127093602904\" loading=\"lazy\"></p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>我因为这个问题搞了一天，哎!</p>\n</blockquote>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"有两种方式，一种是使用私钥公钥的方式，另一种是使用token的方式来进行的\n\n对比\n私钥公钥的方式比较麻烦，就是你每更换一个电脑，都需要将自己 ssh 链接github的私钥保存在actions的那个 变量里面，而token的方式就是设置一次即可，下次换个电脑只要保证自己可以连接到github上就可以了\n\n下面只演示token的方式是如何进行的\n\ntoken\n在hexo源代码仓库新建一个github action，内容如下\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n3","more":"<p>有两种方式，一种是使用私钥公钥的方式，另一种是使用token的方式来进行的</p>\n<h2 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h2><p>私钥公钥的方式比较麻烦，就是你每更换一个电脑，都需要将自己 ssh 链接github的私钥保存在actions的那个 变量里面，而token的方式就是设置一次即可，下次换个电脑只要保证自己可以连接到github上就可以了</p>\n<blockquote>\n<p>下面只演示token的方式是如何进行的</p>\n</blockquote>\n<h2 id=\"token\"><a href=\"#token\" class=\"headerlink\" title=\"token\"></a>token</h2><p>在hexo源代码仓库新建一个github action，内容如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">自动部署</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当有改动推送到master分支时，启动Action</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">branches:</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">#2020年10月后github新建仓库默认分支改为main，注意更改</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">permissions:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">contents:</span> <span class=\"string\">write</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">deploy:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查分支</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装</span> <span class=\"string\">Node</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">&quot;16.x&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装</span> <span class=\"string\">Hexo</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"string\">export</span> <span class=\"string\">TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-cli</span> <span class=\"string\">-g</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">缓存</span> <span class=\"string\">Hexo</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">id:</span> <span class=\"string\">cache-npm</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/cache@v3</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"attr\">cache-name:</span> <span class=\"string\">cache-node-modules</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">node_modules</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"attr\">key:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">runner.os</span> <span class=\"string\">&#125;&#125;-build-$&#123;&#123;</span> <span class=\"string\">env.cache-name</span> <span class=\"string\">&#125;&#125;-$&#123;&#123;</span> <span class=\"string\">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"attr\">restore-keys:</span> <span class=\"string\">|</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">runner.os</span> <span class=\"string\">&#125;&#125;-build-$&#123;&#123;</span> <span class=\"string\">env.cache-name</span> <span class=\"string\">&#125;&#125;-</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">runner.os</span> <span class=\"string\">&#125;&#125;-build-</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">runner.os</span> <span class=\"string\">&#125;&#125;-</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装依赖</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">if:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">steps.cache-npm.outputs.cache-hit</span> <span class=\"type\">!=</span> <span class=\"string\">&#x27;true&#x27;</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">--save</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Git</span> <span class=\"string\">Infomation</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span> </span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">&#x27;sunheyi&#x27;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">&#x27;1061867552@qq.com&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">生成静态文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"string\">hexo</span> <span class=\"string\">clean</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"string\">hexo</span> <span class=\"string\">bangumi</span> <span class=\"string\">-u</span> <span class=\"comment\">#bilibili番剧更新</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"string\">hexo</span> <span class=\"string\">generate</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">部署到Github</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">JamesIves/github-pages-deploy-action@v4</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"attr\">token:</span> <span class=\"string\">你的token</span> <span class=\"string\">记得将这个仓库改为私有仓库，当然你也可以设置为仓库然后用sercret.token的方式来引用它</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"attr\">repository-name:</span> <span class=\"string\">sunheyi6/sunheyi6.github.io</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"attr\">branch:</span> <span class=\"string\">main</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"attr\">folder:</span> <span class=\"string\">public</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"attr\">commit-message:</span> <span class=\"string\">&quot;$<span class=\"template-variable\">&#123;&#123; github.event.head_commit.message &#125;&#125;</span> Updated By Github Actions&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>这里需要注意的是，当你都完成了 代码也推送到github page的时候，你需要去vercel或者你选定的一个厂商中将github page这个仓库部署起来就可以了，否则这个页面一直显示都是空白页面！！！  部署之后需要改这个域名为你自己想要设置的域名，如下图</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20231127093602904.png\" alt=\"image-20231127093602904\" loading=\"lazy\"></p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>我因为这个问题搞了一天，哎!</p>\n</blockquote>\n"},{"title":"icarus Theme use","description":"","abbrlink":"df881728","date":"2021-04-21T16:00:00.000Z","_content":"\n\n### 文章摘要\n\n\n\n自己在md文件中随意一处加入\n\n\n\n```bash\n\n<!-- more -->\n\n```\n\n\n\n就可以将这个语句之上的作为摘要了\n\n\n\n<!-- more -->","source":"_posts/icarus-Theme-use.md","raw":"---\ntitle: icarus Theme use\ndescription: ''\ntags:\n  - 无标签\nabbrlink: df881728\ndate: 2021-04-22 00:00:00\n---\n\n\n### 文章摘要\n\n\n\n自己在md文件中随意一处加入\n\n\n\n```bash\n\n<!-- more -->\n\n```\n\n\n\n就可以将这个语句之上的作为摘要了\n\n\n\n<!-- more -->","slug":"icarus-Theme-use","published":1,"updated":"2025-03-02T03:37:34.385Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4n0025n0uk0pfm8w8e","content":"<h3 id=\"文章摘要\"><a href=\"#文章摘要\" class=\"headerlink\" title=\"文章摘要\"></a>文章摘要</h3><p>自己在md文件中随意一处加入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;!-- more --&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>就可以将这个语句之上的作为摘要了</p>\n<span id=\"more\"></span>","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"文章摘要\n自己在md文件中随意一处加入\n\n1\n2\n3\n\n\n\n<!-- more -->\n\n\n\n就可以将这个语句之上的作为摘要了","more":""},{"title":"idea使用技巧","description":"","abbrlink":"a07de07c","date":"2021-04-01T16:00:00.000Z","_content":"\n\n## 常用快捷键\n\n\n\n<!-- more -->\n\n\n\n| psvm          | 主函数                     |\n\n| ------------- | :------------------------- |\n\n| sout          | 输出                       |\n\n| f7            | 可以进入被嵌套方法的内部   |\n\n| f8            | 不可以进入被嵌套方法的内部 |\n\n| f9            | 可以直接跳到下一个断点     |\n\n| Alt+insert    | 出现问题的解决方案         |\n\n| ctrl+o        | 构造方法                   |\n\n| ent+shift     | 光标跳到新的一行           |\n\n| ctrf+f        | 搜索                       |\n\n| shift+f10     | run                        |\n\n| shift+f9      | debug run                  |\n\n| ctrl+alt+L    | 格式化代码                 |\n\n| shift + F6    | 批量修改对象               |\n\n| ctrl+alt+t    | 环绕方法（try）            |\n\n| alt+8         | 出现服务窗口               |\n\n| ctrl+alt+左键 | 返回上一个查看代码的位置   |\n\n| ctrl+g        | 跳到指定行数               |\n\n|               |                            |\n\n|               |                            |","source":"_posts/idea使用技巧.md","raw":"---\ntitle: idea使用技巧\ndescription: ''\ntags:\n  - 无标签\nabbrlink: a07de07c\ndate: 2021-04-02 00:00:00\n---\n\n\n## 常用快捷键\n\n\n\n<!-- more -->\n\n\n\n| psvm          | 主函数                     |\n\n| ------------- | :------------------------- |\n\n| sout          | 输出                       |\n\n| f7            | 可以进入被嵌套方法的内部   |\n\n| f8            | 不可以进入被嵌套方法的内部 |\n\n| f9            | 可以直接跳到下一个断点     |\n\n| Alt+insert    | 出现问题的解决方案         |\n\n| ctrl+o        | 构造方法                   |\n\n| ent+shift     | 光标跳到新的一行           |\n\n| ctrf+f        | 搜索                       |\n\n| shift+f10     | run                        |\n\n| shift+f9      | debug run                  |\n\n| ctrl+alt+L    | 格式化代码                 |\n\n| shift + F6    | 批量修改对象               |\n\n| ctrl+alt+t    | 环绕方法（try）            |\n\n| alt+8         | 出现服务窗口               |\n\n| ctrl+alt+左键 | 返回上一个查看代码的位置   |\n\n| ctrl+g        | 跳到指定行数               |\n\n|               |                            |\n\n|               |                            |","slug":"idea使用技巧","published":1,"updated":"2025-03-02T03:37:34.387Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4n0027n0ukgak3di0f","content":"<h2 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h2><span id=\"more\"></span>\n\n\n\n<p>| psvm          | 主函数                     |</p>\n<p>| ------------- | :------------------------- |</p>\n<p>| sout          | 输出                       |</p>\n<p>| f7            | 可以进入被嵌套方法的内部   |</p>\n<p>| f8            | 不可以进入被嵌套方法的内部 |</p>\n<p>| f9            | 可以直接跳到下一个断点     |</p>\n<p>| Alt+insert    | 出现问题的解决方案         |</p>\n<p>| ctrl+o        | 构造方法                   |</p>\n<p>| ent+shift     | 光标跳到新的一行           |</p>\n<p>| ctrf+f        | 搜索                       |</p>\n<p>| shift+f10     | run                        |</p>\n<p>| shift+f9      | debug run                  |</p>\n<p>| ctrl+alt+L    | 格式化代码                 |</p>\n<p>| shift + F6    | 批量修改对象               |</p>\n<p>| ctrl+alt+t    | 环绕方法（try）            |</p>\n<p>| alt+8         | 出现服务窗口               |</p>\n<p>| ctrl+alt+左键 | 返回上一个查看代码的位置   |</p>\n<p>| ctrl+g        | 跳到指定行数               |</p>\n<p>|               |                            |</p>\n<p>|               |                            |</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"常用快捷键\n| psvm | 主函数 |\n\n| ------------- | :------------------------- |\n\n| sout | 输出 |\n\n| f7 | 可以进入被嵌套方法的内部 |\n\n| f8 | 不可以进入被嵌套方法的内部 |\n\n| f9 | 可以直接跳到下一个断点 |\n\n| Alt+insert | 出现问题的解决方案 |\n\n| ctrl+o | 构造方法 |\n\n| ent+shift | 光标跳到新的一行 |\n\n| ctrf+f | 搜索 |\n\n| shift+f10 | run |\n\n| shift+f9 | debug run |\n\n| ctrl+al","more":"<p>| psvm          | 主函数                     |</p>\n<p>| ------------- | :------------------------- |</p>\n<p>| sout          | 输出                       |</p>\n<p>| f7            | 可以进入被嵌套方法的内部   |</p>\n<p>| f8            | 不可以进入被嵌套方法的内部 |</p>\n<p>| f9            | 可以直接跳到下一个断点     |</p>\n<p>| Alt+insert    | 出现问题的解决方案         |</p>\n<p>| ctrl+o        | 构造方法                   |</p>\n<p>| ent+shift     | 光标跳到新的一行           |</p>\n<p>| ctrf+f        | 搜索                       |</p>\n<p>| shift+f10     | run                        |</p>\n<p>| shift+f9      | debug run                  |</p>\n<p>| ctrl+alt+L    | 格式化代码                 |</p>\n<p>| shift + F6    | 批量修改对象               |</p>\n<p>| ctrl+alt+t    | 环绕方法（try）            |</p>\n<p>| alt+8         | 出现服务窗口               |</p>\n<p>| ctrl+alt+左键 | 返回上一个查看代码的位置   |</p>\n<p>| ctrl+g        | 跳到指定行数               |</p>\n<p>|               |                            |</p>\n<p>|               |                            |</p>"},{"title":"java_String","description":"","abbrlink":"856c8506","date":"2021-04-28T16:00:00.000Z","_content":"\n\nstring类型的介绍\n\n\n\n<!-- more -->\n\n\n\n# string\n\n\n\n## 不可变性\n\n\n\n```java\n\n//由于是final，所以string是不可继承的\n\npublic final class String\n\n//final修饰的char[]代表了被存储的数据不可更改性\n\n//是final和private\n\nprivate final char value[];\n\n//下面这个例子说明，是final和private一起来使得String的数据是不可改变的\n\nfinal  int[] array={1,2,3,4};\n\narray[2]=100;\n\nSystem.out.println(array[2]);\n\n```\n\n\n\n### 原因\n\n\n\n1. 只有String是不可改变的，字符串池才有可能实现\n\n2. 如果字符串是可变的，会引发线程安全的问题\n\n\n\n## 长度限制\n\n\n\n由于stirng其实就是一个char数组\n\n\n\nchar数组的下标是整型，integer\n\n\n\nhttps://segmentfault.com/a/1190000020381075\n\n\n\n## 三种常量池区分\n\n\n\n### 全局常量池\n\n\n\n全局字符串池里的内容是在类加载完成，经过验证，准备阶段之后在堆中生成字符串对象实例，然后将该字符串对象实例的引用值存到string pool中（**记住：string pool中存的是引用值而不是具体的实例对象，具体的实例对象是在堆中开辟的一块空间存放的。**）。 在HotSpot VM里实现的string pool功能的是一个StringTable类，它是一个哈希表，里面存的是驻留字符串(也就是我们常说的用双引号括起来的)的引用（而不是驻留字符串实例本身），也就是说在堆中的某些字符串实例被这个StringTable引用之后就等同被赋予了”驻留字符串”的身份。这个StringTable在每个HotSpot VM的实例只有一份，被所有的类共享。\n\n\n\n### class文件常量池\n\n\n\n我们都知道，class文件中除了包含类的版本、字段、方法、接口等描述信息外，还有一项信息就是常量池(constant pool table)，用于存放编译器生成的**各种字面量(Literal)和符号引用(Symbolic References)**。 字面量就是我们所说的常量概念，如文本字符串、被声明为final的常量值等。 符号引用是一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可（它与直接引用区分一下，直接引用一般是指向方法区的本地指针，相对偏移量或是一个能间接定位到目标的句柄）。一般包括下面三类常量：\n\n\n\n- 类和接口的全限定名\n\n- 字段的名称和描述符\n\n- 方法的名称和描述符\n\n\n\n### 运行时常量池\n\n\n\n当java文件被编译成class文件之后，也就是会生成我上面所说的class常量池，那么运行时常量池又是什么时候产生的呢？\n\n\n\njvm在执行某个类的时候，必须经过**加载、连接、初始化**，而连接又包括验证、准备、解析三个阶段。而当类加载到内存中后，jvm就会将class常量池中的内容存放到运行时常量池中，由此可知，运行时常量池也是每个类都有一个。在上面我也说了，class常量池中存的是字面量和符号引用，也就是说他们存的并不是对象的实例，而是对象的符号引用值。而经过解析（resolve）之后，也就是把符号引用替换为直接引用，解析的过程会去查询全局字符串池，也就是我们上面所说的StringTable，以保证运行时常量池所引用的字符串与全局字符串池中所引用的是一致的。\n\n\n\n### 总结\n\n\n\n1.全局常量池在每个VM中只有一份，存放的是字符串常量的引用值。\n\n\n\n2.class常量池是在编译的时候每个class都有的，在编译阶段，存放的是常量的符号引用。\n\n\n\n3.运行时常量池是在类加载完成之后，将每个class常量池中的符号引用值转存到运行时常量池中，也就是说，每个class都有一个运行时常量池，类在解析之后，将符号引用替换成直接引用，与全局常量池中的引用值保持一致。\n\n\n\n## substring\n\n\n\nhttps://www.hollischuang.com/archives/1232\n\n\n\njdk6和jdk7之后的差别\n\n\n\n### jdk6\n\n\n\njdk6的时候，当截取字符串的时候，会在堆中new 一个新的string对象，但是这个string对象使用的char数组还是之前的数组，如果你只是在很长的字符串中引用了很小的一块数据，但是由于这个char数组是有引用的，所以无法进行垃圾回收，但是由于你所使用的字符串只是很小的一部分，但是你却用了这么大的char数组，会导致好像那么一大空间不存在似的，这就产生了内存泄露的问题。\n\n\n\n内存泄露：在计算机科学中，内存泄漏指由于疏忽或错误造成程序未能释放已经不再使用的内存。 内存泄漏并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费。\n\n\n\n### jdk7\n\n\n\n既然已经知道了上述问题所在，那么只需要new一个新的string的时候，让这个string指向自己的包含的char数组即可\n\n\n\n```java\n\n        public String(char value[], int offset, int count) {\n\n        if (offset < 0) {\n\n            throw new StringIndexOutOfBoundsException(offset);\n\n        }\n\n        if (count <= 0) {\n\n            if (count < 0) {\n\n                throw new StringIndexOutOfBoundsException(count);\n\n            }\n\n            if (offset <= value.length) {\n\n                this.value = \"\".value;\n\n                return;\n\n            }\n\n        }\n\n        // Note: offset or count might be near -1>>>1.\n\n        if (offset > value.length - count) {\n\n            throw new StringIndexOutOfBoundsException(offset + count);\n\n        }\n\n        //就是在这里将char数组拷贝过来，截取的offset和截取字符串的值是一样的\n\n        this.value = Arrays.copyOfRange(value, offset, offset+count);\n\n    }\n\n```\n\n\n\n## replaceFirst、replaceAll、replace区别\n\n\n\n```java\n\n    public String replaceFirst(String regex, String replacement) {\n\n        return Pattern.compile(regex).matcher(this).replaceFirst(replacement);\n\n    }\n\n        public String replaceAll(String regex, String replacement) {\n\n        return Pattern.compile(regex).matcher(this).replaceAll(replacement);\n\n    } \n\n        public String replace(CharSequence target, CharSequence replacement) {\n\n        return Pattern.compile(target.toString(), Pattern.LITERAL).matcher(\n\n                this).replaceAll(Matcher.quoteReplacement(replacement.toString()));\n\n    } \n\n```\n\n\n\nreplaceFirst的作用是让regex去replacement替换原有string的第一个字符\n\n\n\nreplaceAll的作用是replacement替换regex\n\n\n\nreplace的作用是将原有字符串的所有target替换为repalcement\n\n\n\n## String、StringBuilder和StingBuffer之间的区别与联系\n\n\n\n### StringBuilder\n\n\n\n```java\n\n    public StringBuilder() {\n\n        super(16);\n\n    }\n\n\n\n    public StringBuilder(int capacity) {\n\n        super(capacity);\n\n    }\n\n     public StringBuilder(String str) {\n\n        super(str.length() + 16);\n\n        append(str);\n\n    }\n\n        @Override\n\n    public StringBuilder append(Object obj) {\n\n        return append(String.valueOf(obj));\n\n    }\n\n\n\n    @Override\n\n    public StringBuilder append(String str) {\n\n        super.append(str);\n\n        return this;\n\n    } \n\n```\n\n\n\n从源码可以看出，默认的stringbuilder是16个字节，如果指定了大小就用指定的大小，如果直接给了个参数就是字符串的长度加上16个字节\n\n\n\n方法中没有synchronized，所以这是线程不安全的\n\n\n\n### StingBuffer\n\n\n\n```java\n\n    @Override\n\n    public synchronized int length() {\n\n        return count;\n\n    }\n\n\n\n    @Override\n\n    public synchronized int capacity() {\n\n        return value.length;\n\n    }\n\n\n\n\n\n    @Override\n\n    public synchronized void ensureCapacity(int minimumCapacity) {\n\n        super.ensureCapacity(minimumCapacity);\n\n    }\n\n```\n\n\n\n方法都是synchronized修饰的，所以是线程安全的\n\n\n\n## String对“+”的重载\n\n\n\nhttps://juejin.im/post/6844903960608784392\n\n\n\n```java\n\npackage com.test;\n\n\n\npublic class demo {\n\n    public static void main(String[] args) {\n\n        String a = \"1\";\n\n        String b = \"2\";\n\n        System.out.println(a+b);\n\n    }\n\n}\n\n```\n\n\n\n![image-20210429215615889](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210429215615889.png)\n\n\n\n从反编译的过程可以看出，是调用了stringbuilder的append方法，\n\n\n\n## String.valueOf和Integer.toString的区别\n\n\n\nstirng\n\n\n\n```java\n\n        //stirng不能为null，为null会报NullPointerException\n\n        public String toString() {\n\n        return this;\n\n    }\n\n    //这个方法的功能就是如果形参是null，那么返回null字符串，而不是直接报NullPointerException异常\n\n    public static String valueOf(Object obj) {\n\n        return (obj == null) ? \"null\" : obj.toString();\n\n    }\n\n```\n\n\n\ninteger\n\n\n\n```java\n\n    public static String toString(int i, int radix) {\n\n        if (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX)\n\n            radix = 10;\n\n\n\n        /* Use the faster version */\n\n        if (radix == 10) {\n\n            return toString(i);\n\n        }\n\n\n\n        char buf[] = new char[33];\n\n        boolean negative = (i < 0);\n\n        int charPos = 32;\n\n\n\n        if (!negative) {\n\n            i = -i;\n\n        }\n\n\n\n        while (i <= -radix) {\n\n            buf[charPos--] = digits[-(i % radix)];\n\n            i = i / radix;\n\n        }\n\n        buf[charPos] = digits[-i];\n\n\n\n        if (negative) {\n\n            buf[--charPos] = '-';\n\n        }\n\n\n\n        return new String(buf, charPos, (33 - charPos));\n\n    }\n\n```\n\n\n\n## switch对String的支持\n\n\n\n```java\n\npackage com.test;\n\n\n\n\n\n\n\npublic class demo {\n\n    public static void main(String[] args) {\n\n        String str = \"world\";\n\n        switch (str) {\n\n            case \"hello\":\n\n                System.out.println(\"hello\");\n\n                break;\n\n            case \"world\":\n\n                System.out.println(\"world\");\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n\n\n    }\n\n}\n\n```\n\n\n\n反编译\n\n\n\n![image-20210429215539166](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210429215539166.png)\n\n\n\n由反编译的代码可以看出来，switch中的case是通过hashCode来进行匹配的，使用equals方法来进行值的比较\n\n\n\n## 字符串池\n\n\n\n## intern\n\n\n\n[美团对于这个关键字的分析](https://tech.meituan.com/2014/03/06/in-depth-understanding-string-intern.html)\n\n\n\n## **String比较特别的地方**\n\n\n\n1. 直接中双引号引起来的，是放在常量池中，如代码所示String s2=\"1\";\n\n2. 如果不是用双引号声明的String对象，可以使用String提供的intern方法。intern 方法会从字符串常量池中查询当前字符串是否存在，若不存在就会将当前字符串放入常量池中\n\n\n\n实际例子验证：\n\n\n\n```java\n\npackage com.test;\n\n\n\npublic class demo02 {\n\n    public static void main(String[] args) {\n\n        String s=\"1\";\n\n        String s1=new String(\"1\");\n\n        String s2=s.intern();\n\n        System.out.println(s==s1);\n\n        System.out.println(s1==s2);\n\n        System.out.println(s2==s);\n\n    }\n\n}\n\n```\n\n\n\n运行结果：false false true\n\n\n\njdk7之后，intern方法对 intern 操作和常量池都做了一定的修改。主要包括2点：\n\n\n\n1. 将String常量池 从 Perm 区移动到了 Java Heap区\n\n2. String#intern 方法时，如果存在堆中的对象，会直接保存对象的引用，而不会重新创建对象。\n\n\n\n由上图代码及运行结果可以看出，双引号的的String是直接在常量池中的，而new出来的对象是在堆中的，当s2调用intern的方法之后，会去常量池中查找是否有这变量，如果有的话会直接引用常量池中的对象\n\n\n\n## 转换为String的三种方式\n\n\n\n- (string)\n\n- toString\n\n- String.valueOf()\n\n\n\n[三种方式的区别](https://blog.csdn.net/itmyhome1990/article/details/77879653)\n\n\n\n推荐使用 String.valueOf()的方法，这个方法可以避免强转时候对象不能转换为String的错误，也可以避免toString的时候对象为null的情况\n","source":"_posts/java-String.md","raw":"---\ntitle: java_String\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 856c8506\ndate: 2021-04-29 00:00:00\n---\n\n\nstring类型的介绍\n\n\n\n<!-- more -->\n\n\n\n# string\n\n\n\n## 不可变性\n\n\n\n```java\n\n//由于是final，所以string是不可继承的\n\npublic final class String\n\n//final修饰的char[]代表了被存储的数据不可更改性\n\n//是final和private\n\nprivate final char value[];\n\n//下面这个例子说明，是final和private一起来使得String的数据是不可改变的\n\nfinal  int[] array={1,2,3,4};\n\narray[2]=100;\n\nSystem.out.println(array[2]);\n\n```\n\n\n\n### 原因\n\n\n\n1. 只有String是不可改变的，字符串池才有可能实现\n\n2. 如果字符串是可变的，会引发线程安全的问题\n\n\n\n## 长度限制\n\n\n\n由于stirng其实就是一个char数组\n\n\n\nchar数组的下标是整型，integer\n\n\n\nhttps://segmentfault.com/a/1190000020381075\n\n\n\n## 三种常量池区分\n\n\n\n### 全局常量池\n\n\n\n全局字符串池里的内容是在类加载完成，经过验证，准备阶段之后在堆中生成字符串对象实例，然后将该字符串对象实例的引用值存到string pool中（**记住：string pool中存的是引用值而不是具体的实例对象，具体的实例对象是在堆中开辟的一块空间存放的。**）。 在HotSpot VM里实现的string pool功能的是一个StringTable类，它是一个哈希表，里面存的是驻留字符串(也就是我们常说的用双引号括起来的)的引用（而不是驻留字符串实例本身），也就是说在堆中的某些字符串实例被这个StringTable引用之后就等同被赋予了”驻留字符串”的身份。这个StringTable在每个HotSpot VM的实例只有一份，被所有的类共享。\n\n\n\n### class文件常量池\n\n\n\n我们都知道，class文件中除了包含类的版本、字段、方法、接口等描述信息外，还有一项信息就是常量池(constant pool table)，用于存放编译器生成的**各种字面量(Literal)和符号引用(Symbolic References)**。 字面量就是我们所说的常量概念，如文本字符串、被声明为final的常量值等。 符号引用是一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可（它与直接引用区分一下，直接引用一般是指向方法区的本地指针，相对偏移量或是一个能间接定位到目标的句柄）。一般包括下面三类常量：\n\n\n\n- 类和接口的全限定名\n\n- 字段的名称和描述符\n\n- 方法的名称和描述符\n\n\n\n### 运行时常量池\n\n\n\n当java文件被编译成class文件之后，也就是会生成我上面所说的class常量池，那么运行时常量池又是什么时候产生的呢？\n\n\n\njvm在执行某个类的时候，必须经过**加载、连接、初始化**，而连接又包括验证、准备、解析三个阶段。而当类加载到内存中后，jvm就会将class常量池中的内容存放到运行时常量池中，由此可知，运行时常量池也是每个类都有一个。在上面我也说了，class常量池中存的是字面量和符号引用，也就是说他们存的并不是对象的实例，而是对象的符号引用值。而经过解析（resolve）之后，也就是把符号引用替换为直接引用，解析的过程会去查询全局字符串池，也就是我们上面所说的StringTable，以保证运行时常量池所引用的字符串与全局字符串池中所引用的是一致的。\n\n\n\n### 总结\n\n\n\n1.全局常量池在每个VM中只有一份，存放的是字符串常量的引用值。\n\n\n\n2.class常量池是在编译的时候每个class都有的，在编译阶段，存放的是常量的符号引用。\n\n\n\n3.运行时常量池是在类加载完成之后，将每个class常量池中的符号引用值转存到运行时常量池中，也就是说，每个class都有一个运行时常量池，类在解析之后，将符号引用替换成直接引用，与全局常量池中的引用值保持一致。\n\n\n\n## substring\n\n\n\nhttps://www.hollischuang.com/archives/1232\n\n\n\njdk6和jdk7之后的差别\n\n\n\n### jdk6\n\n\n\njdk6的时候，当截取字符串的时候，会在堆中new 一个新的string对象，但是这个string对象使用的char数组还是之前的数组，如果你只是在很长的字符串中引用了很小的一块数据，但是由于这个char数组是有引用的，所以无法进行垃圾回收，但是由于你所使用的字符串只是很小的一部分，但是你却用了这么大的char数组，会导致好像那么一大空间不存在似的，这就产生了内存泄露的问题。\n\n\n\n内存泄露：在计算机科学中，内存泄漏指由于疏忽或错误造成程序未能释放已经不再使用的内存。 内存泄漏并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费。\n\n\n\n### jdk7\n\n\n\n既然已经知道了上述问题所在，那么只需要new一个新的string的时候，让这个string指向自己的包含的char数组即可\n\n\n\n```java\n\n        public String(char value[], int offset, int count) {\n\n        if (offset < 0) {\n\n            throw new StringIndexOutOfBoundsException(offset);\n\n        }\n\n        if (count <= 0) {\n\n            if (count < 0) {\n\n                throw new StringIndexOutOfBoundsException(count);\n\n            }\n\n            if (offset <= value.length) {\n\n                this.value = \"\".value;\n\n                return;\n\n            }\n\n        }\n\n        // Note: offset or count might be near -1>>>1.\n\n        if (offset > value.length - count) {\n\n            throw new StringIndexOutOfBoundsException(offset + count);\n\n        }\n\n        //就是在这里将char数组拷贝过来，截取的offset和截取字符串的值是一样的\n\n        this.value = Arrays.copyOfRange(value, offset, offset+count);\n\n    }\n\n```\n\n\n\n## replaceFirst、replaceAll、replace区别\n\n\n\n```java\n\n    public String replaceFirst(String regex, String replacement) {\n\n        return Pattern.compile(regex).matcher(this).replaceFirst(replacement);\n\n    }\n\n        public String replaceAll(String regex, String replacement) {\n\n        return Pattern.compile(regex).matcher(this).replaceAll(replacement);\n\n    } \n\n        public String replace(CharSequence target, CharSequence replacement) {\n\n        return Pattern.compile(target.toString(), Pattern.LITERAL).matcher(\n\n                this).replaceAll(Matcher.quoteReplacement(replacement.toString()));\n\n    } \n\n```\n\n\n\nreplaceFirst的作用是让regex去replacement替换原有string的第一个字符\n\n\n\nreplaceAll的作用是replacement替换regex\n\n\n\nreplace的作用是将原有字符串的所有target替换为repalcement\n\n\n\n## String、StringBuilder和StingBuffer之间的区别与联系\n\n\n\n### StringBuilder\n\n\n\n```java\n\n    public StringBuilder() {\n\n        super(16);\n\n    }\n\n\n\n    public StringBuilder(int capacity) {\n\n        super(capacity);\n\n    }\n\n     public StringBuilder(String str) {\n\n        super(str.length() + 16);\n\n        append(str);\n\n    }\n\n        @Override\n\n    public StringBuilder append(Object obj) {\n\n        return append(String.valueOf(obj));\n\n    }\n\n\n\n    @Override\n\n    public StringBuilder append(String str) {\n\n        super.append(str);\n\n        return this;\n\n    } \n\n```\n\n\n\n从源码可以看出，默认的stringbuilder是16个字节，如果指定了大小就用指定的大小，如果直接给了个参数就是字符串的长度加上16个字节\n\n\n\n方法中没有synchronized，所以这是线程不安全的\n\n\n\n### StingBuffer\n\n\n\n```java\n\n    @Override\n\n    public synchronized int length() {\n\n        return count;\n\n    }\n\n\n\n    @Override\n\n    public synchronized int capacity() {\n\n        return value.length;\n\n    }\n\n\n\n\n\n    @Override\n\n    public synchronized void ensureCapacity(int minimumCapacity) {\n\n        super.ensureCapacity(minimumCapacity);\n\n    }\n\n```\n\n\n\n方法都是synchronized修饰的，所以是线程安全的\n\n\n\n## String对“+”的重载\n\n\n\nhttps://juejin.im/post/6844903960608784392\n\n\n\n```java\n\npackage com.test;\n\n\n\npublic class demo {\n\n    public static void main(String[] args) {\n\n        String a = \"1\";\n\n        String b = \"2\";\n\n        System.out.println(a+b);\n\n    }\n\n}\n\n```\n\n\n\n![image-20210429215615889](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210429215615889.png)\n\n\n\n从反编译的过程可以看出，是调用了stringbuilder的append方法，\n\n\n\n## String.valueOf和Integer.toString的区别\n\n\n\nstirng\n\n\n\n```java\n\n        //stirng不能为null，为null会报NullPointerException\n\n        public String toString() {\n\n        return this;\n\n    }\n\n    //这个方法的功能就是如果形参是null，那么返回null字符串，而不是直接报NullPointerException异常\n\n    public static String valueOf(Object obj) {\n\n        return (obj == null) ? \"null\" : obj.toString();\n\n    }\n\n```\n\n\n\ninteger\n\n\n\n```java\n\n    public static String toString(int i, int radix) {\n\n        if (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX)\n\n            radix = 10;\n\n\n\n        /* Use the faster version */\n\n        if (radix == 10) {\n\n            return toString(i);\n\n        }\n\n\n\n        char buf[] = new char[33];\n\n        boolean negative = (i < 0);\n\n        int charPos = 32;\n\n\n\n        if (!negative) {\n\n            i = -i;\n\n        }\n\n\n\n        while (i <= -radix) {\n\n            buf[charPos--] = digits[-(i % radix)];\n\n            i = i / radix;\n\n        }\n\n        buf[charPos] = digits[-i];\n\n\n\n        if (negative) {\n\n            buf[--charPos] = '-';\n\n        }\n\n\n\n        return new String(buf, charPos, (33 - charPos));\n\n    }\n\n```\n\n\n\n## switch对String的支持\n\n\n\n```java\n\npackage com.test;\n\n\n\n\n\n\n\npublic class demo {\n\n    public static void main(String[] args) {\n\n        String str = \"world\";\n\n        switch (str) {\n\n            case \"hello\":\n\n                System.out.println(\"hello\");\n\n                break;\n\n            case \"world\":\n\n                System.out.println(\"world\");\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n\n\n    }\n\n}\n\n```\n\n\n\n反编译\n\n\n\n![image-20210429215539166](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210429215539166.png)\n\n\n\n由反编译的代码可以看出来，switch中的case是通过hashCode来进行匹配的，使用equals方法来进行值的比较\n\n\n\n## 字符串池\n\n\n\n## intern\n\n\n\n[美团对于这个关键字的分析](https://tech.meituan.com/2014/03/06/in-depth-understanding-string-intern.html)\n\n\n\n## **String比较特别的地方**\n\n\n\n1. 直接中双引号引起来的，是放在常量池中，如代码所示String s2=\"1\";\n\n2. 如果不是用双引号声明的String对象，可以使用String提供的intern方法。intern 方法会从字符串常量池中查询当前字符串是否存在，若不存在就会将当前字符串放入常量池中\n\n\n\n实际例子验证：\n\n\n\n```java\n\npackage com.test;\n\n\n\npublic class demo02 {\n\n    public static void main(String[] args) {\n\n        String s=\"1\";\n\n        String s1=new String(\"1\");\n\n        String s2=s.intern();\n\n        System.out.println(s==s1);\n\n        System.out.println(s1==s2);\n\n        System.out.println(s2==s);\n\n    }\n\n}\n\n```\n\n\n\n运行结果：false false true\n\n\n\njdk7之后，intern方法对 intern 操作和常量池都做了一定的修改。主要包括2点：\n\n\n\n1. 将String常量池 从 Perm 区移动到了 Java Heap区\n\n2. String#intern 方法时，如果存在堆中的对象，会直接保存对象的引用，而不会重新创建对象。\n\n\n\n由上图代码及运行结果可以看出，双引号的的String是直接在常量池中的，而new出来的对象是在堆中的，当s2调用intern的方法之后，会去常量池中查找是否有这变量，如果有的话会直接引用常量池中的对象\n\n\n\n## 转换为String的三种方式\n\n\n\n- (string)\n\n- toString\n\n- String.valueOf()\n\n\n\n[三种方式的区别](https://blog.csdn.net/itmyhome1990/article/details/77879653)\n\n\n\n推荐使用 String.valueOf()的方法，这个方法可以避免强转时候对象不能转换为String的错误，也可以避免toString的时候对象为null的情况\n","slug":"java-String","published":1,"updated":"2025-03-02T03:37:34.387Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4o0029n0uk4uagekkb","content":"<p>string类型的介绍</p>\n<span id=\"more\"></span>\n\n\n\n<h1 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h1><h2 id=\"不可变性\"><a href=\"#不可变性\" class=\"headerlink\" title=\"不可变性\"></a>不可变性</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//由于是final，所以string是不可继承的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//final修饰的char[]代表了被存储的数据不可更改性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//是final和private</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">char</span> value[];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//下面这个例子说明，是final和private一起来使得String的数据是不可改变的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span>  <span class=\"type\">int</span>[] array=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">array[<span class=\"number\">2</span>]=<span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(array[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h3><ol>\n<li><p>只有String是不可改变的，字符串池才有可能实现</p>\n</li>\n<li><p>如果字符串是可变的，会引发线程安全的问题</p>\n</li>\n</ol>\n<h2 id=\"长度限制\"><a href=\"#长度限制\" class=\"headerlink\" title=\"长度限制\"></a>长度限制</h2><p>由于stirng其实就是一个char数组</p>\n<p>char数组的下标是整型，integer</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAyMDM4MTA3NQ==\">https://segmentfault.com/a/1190000020381075<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"三种常量池区分\"><a href=\"#三种常量池区分\" class=\"headerlink\" title=\"三种常量池区分\"></a>三种常量池区分</h2><h3 id=\"全局常量池\"><a href=\"#全局常量池\" class=\"headerlink\" title=\"全局常量池\"></a>全局常量池</h3><p>全局字符串池里的内容是在类加载完成，经过验证，准备阶段之后在堆中生成字符串对象实例，然后将该字符串对象实例的引用值存到string pool中（<strong>记住：string pool中存的是引用值而不是具体的实例对象，具体的实例对象是在堆中开辟的一块空间存放的。</strong>）。 在HotSpot VM里实现的string pool功能的是一个StringTable类，它是一个哈希表，里面存的是驻留字符串(也就是我们常说的用双引号括起来的)的引用（而不是驻留字符串实例本身），也就是说在堆中的某些字符串实例被这个StringTable引用之后就等同被赋予了”驻留字符串”的身份。这个StringTable在每个HotSpot VM的实例只有一份，被所有的类共享。</p>\n<h3 id=\"class文件常量池\"><a href=\"#class文件常量池\" class=\"headerlink\" title=\"class文件常量池\"></a>class文件常量池</h3><p>我们都知道，class文件中除了包含类的版本、字段、方法、接口等描述信息外，还有一项信息就是常量池(constant pool table)，用于存放编译器生成的**各种字面量(Literal)和符号引用(Symbolic References)**。 字面量就是我们所说的常量概念，如文本字符串、被声明为final的常量值等。 符号引用是一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可（它与直接引用区分一下，直接引用一般是指向方法区的本地指针，相对偏移量或是一个能间接定位到目标的句柄）。一般包括下面三类常量：</p>\n<ul>\n<li><p>类和接口的全限定名</p>\n</li>\n<li><p>字段的名称和描述符</p>\n</li>\n<li><p>方法的名称和描述符</p>\n</li>\n</ul>\n<h3 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h3><p>当java文件被编译成class文件之后，也就是会生成我上面所说的class常量池，那么运行时常量池又是什么时候产生的呢？</p>\n<p>jvm在执行某个类的时候，必须经过<strong>加载、连接、初始化</strong>，而连接又包括验证、准备、解析三个阶段。而当类加载到内存中后，jvm就会将class常量池中的内容存放到运行时常量池中，由此可知，运行时常量池也是每个类都有一个。在上面我也说了，class常量池中存的是字面量和符号引用，也就是说他们存的并不是对象的实例，而是对象的符号引用值。而经过解析（resolve）之后，也就是把符号引用替换为直接引用，解析的过程会去查询全局字符串池，也就是我们上面所说的StringTable，以保证运行时常量池所引用的字符串与全局字符串池中所引用的是一致的。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>1.全局常量池在每个VM中只有一份，存放的是字符串常量的引用值。</p>\n<p>2.class常量池是在编译的时候每个class都有的，在编译阶段，存放的是常量的符号引用。</p>\n<p>3.运行时常量池是在类加载完成之后，将每个class常量池中的符号引用值转存到运行时常量池中，也就是说，每个class都有一个运行时常量池，类在解析之后，将符号引用替换成直接引用，与全局常量池中的引用值保持一致。</p>\n<h2 id=\"substring\"><a href=\"#substring\" class=\"headerlink\" title=\"substring\"></a>substring</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaG9sbGlzY2h1YW5nLmNvbS9hcmNoaXZlcy8xMjMy\">https://www.hollischuang.com/archives/1232<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>jdk6和jdk7之后的差别</p>\n<h3 id=\"jdk6\"><a href=\"#jdk6\" class=\"headerlink\" title=\"jdk6\"></a>jdk6</h3><p>jdk6的时候，当截取字符串的时候，会在堆中new 一个新的string对象，但是这个string对象使用的char数组还是之前的数组，如果你只是在很长的字符串中引用了很小的一块数据，但是由于这个char数组是有引用的，所以无法进行垃圾回收，但是由于你所使用的字符串只是很小的一部分，但是你却用了这么大的char数组，会导致好像那么一大空间不存在似的，这就产生了内存泄露的问题。</p>\n<p>内存泄露：在计算机科学中，内存泄漏指由于疏忽或错误造成程序未能释放已经不再使用的内存。 内存泄漏并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费。</p>\n<h3 id=\"jdk7\"><a href=\"#jdk7\" class=\"headerlink\" title=\"jdk7\"></a>jdk7</h3><p>既然已经知道了上述问题所在，那么只需要new一个新的string的时候，让这个string指向自己的包含的char数组即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">String</span><span class=\"params\">(<span class=\"type\">char</span> value[], <span class=\"type\">int</span> offset, <span class=\"type\">int</span> count)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (offset &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringIndexOutOfBoundsException</span>(offset);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringIndexOutOfBoundsException</span>(count);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (offset &lt;= value.length) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.value = <span class=\"string\">&quot;&quot;</span>.value;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Note: offset or count might be near -1&gt;&gt;&gt;1.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (offset &gt; value.length - count) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringIndexOutOfBoundsException</span>(offset + count);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//就是在这里将char数组拷贝过来，截取的offset和截取字符串的值是一样的</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.value = Arrays.copyOfRange(value, offset, offset+count);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"replaceFirst、replaceAll、replace区别\"><a href=\"#replaceFirst、replaceAll、replace区别\" class=\"headerlink\" title=\"replaceFirst、replaceAll、replace区别\"></a>replaceFirst、replaceAll、replace区别</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">replaceFirst</span><span class=\"params\">(String regex, String replacement)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Pattern.compile(regex).matcher(<span class=\"built_in\">this</span>).replaceFirst(replacement);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">replaceAll</span><span class=\"params\">(String regex, String replacement)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Pattern.compile(regex).matcher(<span class=\"built_in\">this</span>).replaceAll(replacement);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">replace</span><span class=\"params\">(CharSequence target, CharSequence replacement)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Pattern.compile(target.toString(), Pattern.LITERAL).matcher(</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">this</span>).replaceAll(Matcher.quoteReplacement(replacement.toString()));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>replaceFirst的作用是让regex去replacement替换原有string的第一个字符</p>\n<p>replaceAll的作用是replacement替换regex</p>\n<p>replace的作用是将原有字符串的所有target替换为repalcement</p>\n<h2 id=\"String、StringBuilder和StingBuffer之间的区别与联系\"><a href=\"#String、StringBuilder和StingBuffer之间的区别与联系\" class=\"headerlink\" title=\"String、StringBuilder和StingBuffer之间的区别与联系\"></a>String、StringBuilder和StingBuffer之间的区别与联系</h2><h3 id=\"StringBuilder\"><a href=\"#StringBuilder\" class=\"headerlink\" title=\"StringBuilder\"></a>StringBuilder</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">StringBuilder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">super</span>(<span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">StringBuilder</span><span class=\"params\">(<span class=\"type\">int</span> capacity)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">super</span>(capacity);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"title function_\">StringBuilder</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">super</span>(str.length() + <span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    append(str);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> StringBuilder <span class=\"title function_\">append</span><span class=\"params\">(Object obj)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> append(String.valueOf(obj));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> StringBuilder <span class=\"title function_\">append</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">super</span>.append(str);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>从源码可以看出，默认的stringbuilder是16个字节，如果指定了大小就用指定的大小，如果直接给了个参数就是字符串的长度加上16个字节</p>\n<p>方法中没有synchronized，所以这是线程不安全的</p>\n<h3 id=\"StingBuffer\"><a href=\"#StingBuffer\" class=\"headerlink\" title=\"StingBuffer\"></a>StingBuffer</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"type\">int</span> <span class=\"title function_\">length</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"type\">int</span> <span class=\"title function_\">capacity</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value.length;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">ensureCapacity</span><span class=\"params\">(<span class=\"type\">int</span> minimumCapacity)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">super</span>.ensureCapacity(minimumCapacity);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>方法都是synchronized修饰的，所以是线程安全的</p>\n<h2 id=\"String对“-”的重载\"><a href=\"#String对“-”的重载\" class=\"headerlink\" title=\"String对“+”的重载\"></a>String对“+”的重载</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTAzOTYwNjA4Nzg0Mzky\">https://juejin.im/post/6844903960608784392<i class=\"fa fa-external-link-alt\"></i></span></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.test;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;1&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;2&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(a+b);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210429215615889.png\" alt=\"image-20210429215615889\" loading=\"lazy\"></p>\n<p>从反编译的过程可以看出，是调用了stringbuilder的append方法，</p>\n<h2 id=\"String-valueOf和Integer-toString的区别\"><a href=\"#String-valueOf和Integer-toString的区别\" class=\"headerlink\" title=\"String.valueOf和Integer.toString的区别\"></a>String.valueOf和Integer.toString的区别</h2><p>stirng</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//stirng不能为null，为null会报NullPointerException</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这个方法的功能就是如果形参是null，那么返回null字符串，而不是直接报NullPointerException异常</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">valueOf</span><span class=\"params\">(Object obj)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (obj == <span class=\"literal\">null</span>) ? <span class=\"string\">&quot;null&quot;</span> : obj.toString();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>integer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">toString</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> radix)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (radix &lt; Character.MIN_RADIX || radix &gt; Character.MAX_RADIX)</span><br><span class=\"line\"></span><br><span class=\"line\">        radix = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Use the faster version */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (radix == <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> toString(i);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> buf[] = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[<span class=\"number\">33</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">negative</span> <span class=\"operator\">=</span> (i &lt; <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">charPos</span> <span class=\"operator\">=</span> <span class=\"number\">32</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!negative) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        i = -i;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= -radix) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        buf[charPos--] = digits[-(i % radix)];</span><br><span class=\"line\"></span><br><span class=\"line\">        i = i / radix;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    buf[charPos] = digits[-i];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (negative) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        buf[--charPos] = <span class=\"string\">&#x27;-&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(buf, charPos, (<span class=\"number\">33</span> - charPos));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"switch对String的支持\"><a href=\"#switch对String的支持\" class=\"headerlink\" title=\"switch对String的支持\"></a>switch对String的支持</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.test;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;world&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (str) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;hello&quot;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;world&quot;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>反编译</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210429215539166.png\" alt=\"image-20210429215539166\" loading=\"lazy\"></p>\n<p>由反编译的代码可以看出来，switch中的case是通过hashCode来进行匹配的，使用equals方法来进行值的比较</p>\n<h2 id=\"字符串池\"><a href=\"#字符串池\" class=\"headerlink\" title=\"字符串池\"></a>字符串池</h2><h2 id=\"intern\"><a href=\"#intern\" class=\"headerlink\" title=\"intern\"></a>intern</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMTQvMDMvMDYvaW4tZGVwdGgtdW5kZXJzdGFuZGluZy1zdHJpbmctaW50ZXJuLmh0bWw=\">美团对于这个关键字的分析<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"String比较特别的地方\"><a href=\"#String比较特别的地方\" class=\"headerlink\" title=\"String比较特别的地方\"></a><strong>String比较特别的地方</strong></h2><ol>\n<li><p>直接中双引号引起来的，是放在常量池中，如代码所示String s2&#x3D;&quot;1&quot;;</p>\n</li>\n<li><p>如果不是用双引号声明的String对象，可以使用String提供的intern方法。intern 方法会从字符串常量池中查询当前字符串是否存在，若不存在就会将当前字符串放入常量池中</p>\n</li>\n</ol>\n<p>实际例子验证：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.test;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo02</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        String s=<span class=\"string\">&quot;1&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        String s1=<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        String s2=s.intern();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(s==s1);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(s1==s2);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(s2==s);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>运行结果：false false true</p>\n<p>jdk7之后，intern方法对 intern 操作和常量池都做了一定的修改。主要包括2点：</p>\n<ol>\n<li><p>将String常量池 从 Perm 区移动到了 Java Heap区</p>\n</li>\n<li><p>String#intern 方法时，如果存在堆中的对象，会直接保存对象的引用，而不会重新创建对象。</p>\n</li>\n</ol>\n<p>由上图代码及运行结果可以看出，双引号的的String是直接在常量池中的，而new出来的对象是在堆中的，当s2调用intern的方法之后，会去常量池中查找是否有这变量，如果有的话会直接引用常量池中的对象</p>\n<h2 id=\"转换为String的三种方式\"><a href=\"#转换为String的三种方式\" class=\"headerlink\" title=\"转换为String的三种方式\"></a>转换为String的三种方式</h2><ul>\n<li><p>(string)</p>\n</li>\n<li><p>toString</p>\n</li>\n<li><p>String.valueOf()</p>\n</li>\n</ul>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bXlob21lMTk5MC9hcnRpY2xlL2RldGFpbHMvNzc4Nzk2NTM=\">三种方式的区别<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>推荐使用 String.valueOf()的方法，这个方法可以避免强转时候对象不能转换为String的错误，也可以避免toString的时候对象为null的情况</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"string类型的介绍\n\nstring\n不可变性\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n//由于是final，所以string是不可继承的\n\npublic final class String\n\n//final修饰的char[]代表了被存储的数据不可更改性\n\n//是final和private\n\nprivate final char value[];\n\n//下面这个例子说明，是final和private一起来使得String的数据是不可改变的\n\nfinal  int[] array={1,2,3,4};\n\narray[2]=100;","more":"<h1 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h1><h2 id=\"不可变性\"><a href=\"#不可变性\" class=\"headerlink\" title=\"不可变性\"></a>不可变性</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//由于是final，所以string是不可继承的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//final修饰的char[]代表了被存储的数据不可更改性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//是final和private</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">char</span> value[];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//下面这个例子说明，是final和private一起来使得String的数据是不可改变的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span>  <span class=\"type\">int</span>[] array=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">array[<span class=\"number\">2</span>]=<span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(array[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h3><ol>\n<li><p>只有String是不可改变的，字符串池才有可能实现</p>\n</li>\n<li><p>如果字符串是可变的，会引发线程安全的问题</p>\n</li>\n</ol>\n<h2 id=\"长度限制\"><a href=\"#长度限制\" class=\"headerlink\" title=\"长度限制\"></a>长度限制</h2><p>由于stirng其实就是一个char数组</p>\n<p>char数组的下标是整型，integer</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAyMDM4MTA3NQ==\">https://segmentfault.com/a/1190000020381075<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"三种常量池区分\"><a href=\"#三种常量池区分\" class=\"headerlink\" title=\"三种常量池区分\"></a>三种常量池区分</h2><h3 id=\"全局常量池\"><a href=\"#全局常量池\" class=\"headerlink\" title=\"全局常量池\"></a>全局常量池</h3><p>全局字符串池里的内容是在类加载完成，经过验证，准备阶段之后在堆中生成字符串对象实例，然后将该字符串对象实例的引用值存到string pool中（<strong>记住：string pool中存的是引用值而不是具体的实例对象，具体的实例对象是在堆中开辟的一块空间存放的。</strong>）。 在HotSpot VM里实现的string pool功能的是一个StringTable类，它是一个哈希表，里面存的是驻留字符串(也就是我们常说的用双引号括起来的)的引用（而不是驻留字符串实例本身），也就是说在堆中的某些字符串实例被这个StringTable引用之后就等同被赋予了”驻留字符串”的身份。这个StringTable在每个HotSpot VM的实例只有一份，被所有的类共享。</p>\n<h3 id=\"class文件常量池\"><a href=\"#class文件常量池\" class=\"headerlink\" title=\"class文件常量池\"></a>class文件常量池</h3><p>我们都知道，class文件中除了包含类的版本、字段、方法、接口等描述信息外，还有一项信息就是常量池(constant pool table)，用于存放编译器生成的**各种字面量(Literal)和符号引用(Symbolic References)**。 字面量就是我们所说的常量概念，如文本字符串、被声明为final的常量值等。 符号引用是一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可（它与直接引用区分一下，直接引用一般是指向方法区的本地指针，相对偏移量或是一个能间接定位到目标的句柄）。一般包括下面三类常量：</p>\n<ul>\n<li><p>类和接口的全限定名</p>\n</li>\n<li><p>字段的名称和描述符</p>\n</li>\n<li><p>方法的名称和描述符</p>\n</li>\n</ul>\n<h3 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h3><p>当java文件被编译成class文件之后，也就是会生成我上面所说的class常量池，那么运行时常量池又是什么时候产生的呢？</p>\n<p>jvm在执行某个类的时候，必须经过<strong>加载、连接、初始化</strong>，而连接又包括验证、准备、解析三个阶段。而当类加载到内存中后，jvm就会将class常量池中的内容存放到运行时常量池中，由此可知，运行时常量池也是每个类都有一个。在上面我也说了，class常量池中存的是字面量和符号引用，也就是说他们存的并不是对象的实例，而是对象的符号引用值。而经过解析（resolve）之后，也就是把符号引用替换为直接引用，解析的过程会去查询全局字符串池，也就是我们上面所说的StringTable，以保证运行时常量池所引用的字符串与全局字符串池中所引用的是一致的。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>1.全局常量池在每个VM中只有一份，存放的是字符串常量的引用值。</p>\n<p>2.class常量池是在编译的时候每个class都有的，在编译阶段，存放的是常量的符号引用。</p>\n<p>3.运行时常量池是在类加载完成之后，将每个class常量池中的符号引用值转存到运行时常量池中，也就是说，每个class都有一个运行时常量池，类在解析之后，将符号引用替换成直接引用，与全局常量池中的引用值保持一致。</p>\n<h2 id=\"substring\"><a href=\"#substring\" class=\"headerlink\" title=\"substring\"></a>substring</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaG9sbGlzY2h1YW5nLmNvbS9hcmNoaXZlcy8xMjMy\">https://www.hollischuang.com/archives/1232<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>jdk6和jdk7之后的差别</p>\n<h3 id=\"jdk6\"><a href=\"#jdk6\" class=\"headerlink\" title=\"jdk6\"></a>jdk6</h3><p>jdk6的时候，当截取字符串的时候，会在堆中new 一个新的string对象，但是这个string对象使用的char数组还是之前的数组，如果你只是在很长的字符串中引用了很小的一块数据，但是由于这个char数组是有引用的，所以无法进行垃圾回收，但是由于你所使用的字符串只是很小的一部分，但是你却用了这么大的char数组，会导致好像那么一大空间不存在似的，这就产生了内存泄露的问题。</p>\n<p>内存泄露：在计算机科学中，内存泄漏指由于疏忽或错误造成程序未能释放已经不再使用的内存。 内存泄漏并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费。</p>\n<h3 id=\"jdk7\"><a href=\"#jdk7\" class=\"headerlink\" title=\"jdk7\"></a>jdk7</h3><p>既然已经知道了上述问题所在，那么只需要new一个新的string的时候，让这个string指向自己的包含的char数组即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">String</span><span class=\"params\">(<span class=\"type\">char</span> value[], <span class=\"type\">int</span> offset, <span class=\"type\">int</span> count)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (offset &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringIndexOutOfBoundsException</span>(offset);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringIndexOutOfBoundsException</span>(count);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (offset &lt;= value.length) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.value = <span class=\"string\">&quot;&quot;</span>.value;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Note: offset or count might be near -1&gt;&gt;&gt;1.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (offset &gt; value.length - count) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringIndexOutOfBoundsException</span>(offset + count);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//就是在这里将char数组拷贝过来，截取的offset和截取字符串的值是一样的</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.value = Arrays.copyOfRange(value, offset, offset+count);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"replaceFirst、replaceAll、replace区别\"><a href=\"#replaceFirst、replaceAll、replace区别\" class=\"headerlink\" title=\"replaceFirst、replaceAll、replace区别\"></a>replaceFirst、replaceAll、replace区别</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">replaceFirst</span><span class=\"params\">(String regex, String replacement)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Pattern.compile(regex).matcher(<span class=\"built_in\">this</span>).replaceFirst(replacement);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">replaceAll</span><span class=\"params\">(String regex, String replacement)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Pattern.compile(regex).matcher(<span class=\"built_in\">this</span>).replaceAll(replacement);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">replace</span><span class=\"params\">(CharSequence target, CharSequence replacement)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Pattern.compile(target.toString(), Pattern.LITERAL).matcher(</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">this</span>).replaceAll(Matcher.quoteReplacement(replacement.toString()));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>replaceFirst的作用是让regex去replacement替换原有string的第一个字符</p>\n<p>replaceAll的作用是replacement替换regex</p>\n<p>replace的作用是将原有字符串的所有target替换为repalcement</p>\n<h2 id=\"String、StringBuilder和StingBuffer之间的区别与联系\"><a href=\"#String、StringBuilder和StingBuffer之间的区别与联系\" class=\"headerlink\" title=\"String、StringBuilder和StingBuffer之间的区别与联系\"></a>String、StringBuilder和StingBuffer之间的区别与联系</h2><h3 id=\"StringBuilder\"><a href=\"#StringBuilder\" class=\"headerlink\" title=\"StringBuilder\"></a>StringBuilder</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">StringBuilder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">super</span>(<span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">StringBuilder</span><span class=\"params\">(<span class=\"type\">int</span> capacity)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">super</span>(capacity);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"title function_\">StringBuilder</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">super</span>(str.length() + <span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    append(str);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> StringBuilder <span class=\"title function_\">append</span><span class=\"params\">(Object obj)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> append(String.valueOf(obj));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> StringBuilder <span class=\"title function_\">append</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">super</span>.append(str);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>从源码可以看出，默认的stringbuilder是16个字节，如果指定了大小就用指定的大小，如果直接给了个参数就是字符串的长度加上16个字节</p>\n<p>方法中没有synchronized，所以这是线程不安全的</p>\n<h3 id=\"StingBuffer\"><a href=\"#StingBuffer\" class=\"headerlink\" title=\"StingBuffer\"></a>StingBuffer</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"type\">int</span> <span class=\"title function_\">length</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"type\">int</span> <span class=\"title function_\">capacity</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value.length;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">ensureCapacity</span><span class=\"params\">(<span class=\"type\">int</span> minimumCapacity)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">super</span>.ensureCapacity(minimumCapacity);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>方法都是synchronized修饰的，所以是线程安全的</p>\n<h2 id=\"String对“-”的重载\"><a href=\"#String对“-”的重载\" class=\"headerlink\" title=\"String对“+”的重载\"></a>String对“+”的重载</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTAzOTYwNjA4Nzg0Mzky\">https://juejin.im/post/6844903960608784392<i class=\"fa fa-external-link-alt\"></i></span></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.test;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;1&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;2&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(a+b);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210429215615889.png\" alt=\"image-20210429215615889\" loading=\"lazy\"></p>\n<p>从反编译的过程可以看出，是调用了stringbuilder的append方法，</p>\n<h2 id=\"String-valueOf和Integer-toString的区别\"><a href=\"#String-valueOf和Integer-toString的区别\" class=\"headerlink\" title=\"String.valueOf和Integer.toString的区别\"></a>String.valueOf和Integer.toString的区别</h2><p>stirng</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//stirng不能为null，为null会报NullPointerException</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这个方法的功能就是如果形参是null，那么返回null字符串，而不是直接报NullPointerException异常</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">valueOf</span><span class=\"params\">(Object obj)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (obj == <span class=\"literal\">null</span>) ? <span class=\"string\">&quot;null&quot;</span> : obj.toString();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>integer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">toString</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> radix)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (radix &lt; Character.MIN_RADIX || radix &gt; Character.MAX_RADIX)</span><br><span class=\"line\"></span><br><span class=\"line\">        radix = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Use the faster version */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (radix == <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> toString(i);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> buf[] = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[<span class=\"number\">33</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">negative</span> <span class=\"operator\">=</span> (i &lt; <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">charPos</span> <span class=\"operator\">=</span> <span class=\"number\">32</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!negative) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        i = -i;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= -radix) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        buf[charPos--] = digits[-(i % radix)];</span><br><span class=\"line\"></span><br><span class=\"line\">        i = i / radix;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    buf[charPos] = digits[-i];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (negative) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        buf[--charPos] = <span class=\"string\">&#x27;-&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(buf, charPos, (<span class=\"number\">33</span> - charPos));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"switch对String的支持\"><a href=\"#switch对String的支持\" class=\"headerlink\" title=\"switch对String的支持\"></a>switch对String的支持</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.test;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;world&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (str) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;hello&quot;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;world&quot;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>反编译</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210429215539166.png\" alt=\"image-20210429215539166\" loading=\"lazy\"></p>\n<p>由反编译的代码可以看出来，switch中的case是通过hashCode来进行匹配的，使用equals方法来进行值的比较</p>\n<h2 id=\"字符串池\"><a href=\"#字符串池\" class=\"headerlink\" title=\"字符串池\"></a>字符串池</h2><h2 id=\"intern\"><a href=\"#intern\" class=\"headerlink\" title=\"intern\"></a>intern</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMTQvMDMvMDYvaW4tZGVwdGgtdW5kZXJzdGFuZGluZy1zdHJpbmctaW50ZXJuLmh0bWw=\">美团对于这个关键字的分析<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"String比较特别的地方\"><a href=\"#String比较特别的地方\" class=\"headerlink\" title=\"String比较特别的地方\"></a><strong>String比较特别的地方</strong></h2><ol>\n<li><p>直接中双引号引起来的，是放在常量池中，如代码所示String s2&#x3D;&quot;1&quot;;</p>\n</li>\n<li><p>如果不是用双引号声明的String对象，可以使用String提供的intern方法。intern 方法会从字符串常量池中查询当前字符串是否存在，若不存在就会将当前字符串放入常量池中</p>\n</li>\n</ol>\n<p>实际例子验证：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.test;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo02</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        String s=<span class=\"string\">&quot;1&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        String s1=<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        String s2=s.intern();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(s==s1);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(s1==s2);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(s2==s);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>运行结果：false false true</p>\n<p>jdk7之后，intern方法对 intern 操作和常量池都做了一定的修改。主要包括2点：</p>\n<ol>\n<li><p>将String常量池 从 Perm 区移动到了 Java Heap区</p>\n</li>\n<li><p>String#intern 方法时，如果存在堆中的对象，会直接保存对象的引用，而不会重新创建对象。</p>\n</li>\n</ol>\n<p>由上图代码及运行结果可以看出，双引号的的String是直接在常量池中的，而new出来的对象是在堆中的，当s2调用intern的方法之后，会去常量池中查找是否有这变量，如果有的话会直接引用常量池中的对象</p>\n<h2 id=\"转换为String的三种方式\"><a href=\"#转换为String的三种方式\" class=\"headerlink\" title=\"转换为String的三种方式\"></a>转换为String的三种方式</h2><ul>\n<li><p>(string)</p>\n</li>\n<li><p>toString</p>\n</li>\n<li><p>String.valueOf()</p>\n</li>\n</ul>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bXlob21lMTk5MC9hcnRpY2xlL2RldGFpbHMvNzc4Nzk2NTM=\">三种方式的区别<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>推荐使用 String.valueOf()的方法，这个方法可以避免强转时候对象不能转换为String的错误，也可以避免toString的时候对象为null的情况</p>"},{"title":"java的构造函数","description":"","abbrlink":"d1710a3d","date":"2021-06-27T16:00:00.000Z","_content":"\n\n主要介绍java的构造函数\n\n\n\n<!-- more -->\n\n\n\n## 定义\n\n\n\n首先我们肯定要知道什么是构造函数？\n\n\n\n简单来说，就是与类名相同，无返回类型的方法，参数可以为空，一般称之为无参构造，也可以有参数，一般称之为有参构造。\n\n\n\n## 实例化\n\n\n\n比如说有个test类，你想要实例化它，一般都是new test（）；\n\n\n\n这种new 一个类的名称，后面加括号的就是调用的是这个类的无参构造，当然里面如果有参数，调用的就是有参构造了。\n\n\n\n## 注意\n\n\n\n### 编译报错\n\n\n\n在一个类中，当没有在子类里加super（），也没有在父类里构造无参函数\n\n\n\n> 编译器看到我们在父类里写了有参构造法方法，它就会认为，我们不想让子类在回溯的时候走默认的无参构造方法这条路【super(); 此路不通】，但是我们又没告诉给子类，它应该走哪条路（你给了有参就是告诉我不要走无参，但也没告诉我走有参，那走哪？），所以会报错。 所以，若父类没有提供无参构造方法，但是提供了有参构造方法，就要在子类的无参构造方法里，显示的加上调用父类的有参构造方法语句。 如：super（）；（这里就告诉了去走有参了）\n\n\n\n## 总结\n\n\n\n1. 无参构造运行是需要往上一级一级找无参，甚至找到object\n\n2. 如果其中一级只有有参，没有无参，会发生错误。但只有无参，没有有参一定不会出错。\n\n3. 在以后的Java开发中，若一个类要有带参构造方法，要记得先写无参构造方法。防止类追溯时找不到上级，报错。\n\n\n","source":"_posts/java的构造函数.md","raw":"---\ntitle: java的构造函数\ndescription: ''\ntags:\n  - 无标签\nabbrlink: d1710a3d\ndate: 2021-06-28 00:00:00\n---\n\n\n主要介绍java的构造函数\n\n\n\n<!-- more -->\n\n\n\n## 定义\n\n\n\n首先我们肯定要知道什么是构造函数？\n\n\n\n简单来说，就是与类名相同，无返回类型的方法，参数可以为空，一般称之为无参构造，也可以有参数，一般称之为有参构造。\n\n\n\n## 实例化\n\n\n\n比如说有个test类，你想要实例化它，一般都是new test（）；\n\n\n\n这种new 一个类的名称，后面加括号的就是调用的是这个类的无参构造，当然里面如果有参数，调用的就是有参构造了。\n\n\n\n## 注意\n\n\n\n### 编译报错\n\n\n\n在一个类中，当没有在子类里加super（），也没有在父类里构造无参函数\n\n\n\n> 编译器看到我们在父类里写了有参构造法方法，它就会认为，我们不想让子类在回溯的时候走默认的无参构造方法这条路【super(); 此路不通】，但是我们又没告诉给子类，它应该走哪条路（你给了有参就是告诉我不要走无参，但也没告诉我走有参，那走哪？），所以会报错。 所以，若父类没有提供无参构造方法，但是提供了有参构造方法，就要在子类的无参构造方法里，显示的加上调用父类的有参构造方法语句。 如：super（）；（这里就告诉了去走有参了）\n\n\n\n## 总结\n\n\n\n1. 无参构造运行是需要往上一级一级找无参，甚至找到object\n\n2. 如果其中一级只有有参，没有无参，会发生错误。但只有无参，没有有参一定不会出错。\n\n3. 在以后的Java开发中，若一个类要有带参构造方法，要记得先写无参构造方法。防止类追溯时找不到上级，报错。\n\n\n","slug":"java的构造函数","published":1,"updated":"2025-03-02T03:37:34.388Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4o002bn0ukdmaohc4q","content":"<p>主要介绍java的构造函数</p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>首先我们肯定要知道什么是构造函数？</p>\n<p>简单来说，就是与类名相同，无返回类型的方法，参数可以为空，一般称之为无参构造，也可以有参数，一般称之为有参构造。</p>\n<h2 id=\"实例化\"><a href=\"#实例化\" class=\"headerlink\" title=\"实例化\"></a>实例化</h2><p>比如说有个test类，你想要实例化它，一般都是new test（）；</p>\n<p>这种new 一个类的名称，后面加括号的就是调用的是这个类的无参构造，当然里面如果有参数，调用的就是有参构造了。</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><h3 id=\"编译报错\"><a href=\"#编译报错\" class=\"headerlink\" title=\"编译报错\"></a>编译报错</h3><p>在一个类中，当没有在子类里加super（），也没有在父类里构造无参函数</p>\n<blockquote>\n<p>编译器看到我们在父类里写了有参构造法方法，它就会认为，我们不想让子类在回溯的时候走默认的无参构造方法这条路【super(); 此路不通】，但是我们又没告诉给子类，它应该走哪条路（你给了有参就是告诉我不要走无参，但也没告诉我走有参，那走哪？），所以会报错。 所以，若父类没有提供无参构造方法，但是提供了有参构造方法，就要在子类的无参构造方法里，显示的加上调用父类的有参构造方法语句。 如：super（）；（这里就告诉了去走有参了）</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li><p>无参构造运行是需要往上一级一级找无参，甚至找到object</p>\n</li>\n<li><p>如果其中一级只有有参，没有无参，会发生错误。但只有无参，没有有参一定不会出错。</p>\n</li>\n<li><p>在以后的Java开发中，若一个类要有带参构造方法，要记得先写无参构造方法。防止类追溯时找不到上级，报错。</p>\n</li>\n</ol>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"主要介绍java的构造函数\n\n定义\n首先我们肯定要知道什么是构造函数？\n\n简单来说，就是与类名相同，无返回类型的方法，参数可以为空，一般称之为无参构造，也可以有参数，一般称之为有参构造。\n\n实例化\n比如说有个test类，你想要实例化它，一般都是new test（）；\n\n这种new 一个类的名称，后面加括号的就是调用的是这个类的无参构造，当然里面如果有参数，调用的就是有参构造了。\n\n注意\n编译报错\n在一个类中，当没有在子类里加super（），也没有在父类里构造无参函数\n\n编译器看到我们在父类里写了有参构造法方法，它就会认为，我们不想让子类在回溯的时候走默认的无参构造方法这条路【super(); ","more":"<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>首先我们肯定要知道什么是构造函数？</p>\n<p>简单来说，就是与类名相同，无返回类型的方法，参数可以为空，一般称之为无参构造，也可以有参数，一般称之为有参构造。</p>\n<h2 id=\"实例化\"><a href=\"#实例化\" class=\"headerlink\" title=\"实例化\"></a>实例化</h2><p>比如说有个test类，你想要实例化它，一般都是new test（）；</p>\n<p>这种new 一个类的名称，后面加括号的就是调用的是这个类的无参构造，当然里面如果有参数，调用的就是有参构造了。</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><h3 id=\"编译报错\"><a href=\"#编译报错\" class=\"headerlink\" title=\"编译报错\"></a>编译报错</h3><p>在一个类中，当没有在子类里加super（），也没有在父类里构造无参函数</p>\n<blockquote>\n<p>编译器看到我们在父类里写了有参构造法方法，它就会认为，我们不想让子类在回溯的时候走默认的无参构造方法这条路【super(); 此路不通】，但是我们又没告诉给子类，它应该走哪条路（你给了有参就是告诉我不要走无参，但也没告诉我走有参，那走哪？），所以会报错。 所以，若父类没有提供无参构造方法，但是提供了有参构造方法，就要在子类的无参构造方法里，显示的加上调用父类的有参构造方法语句。 如：super（）；（这里就告诉了去走有参了）</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li><p>无参构造运行是需要往上一级一级找无参，甚至找到object</p>\n</li>\n<li><p>如果其中一级只有有参，没有无参，会发生错误。但只有无参，没有有参一定不会出错。</p>\n</li>\n<li><p>在以后的Java开发中，若一个类要有带参构造方法，要记得先写无参构造方法。防止类追溯时找不到上级，报错。</p>\n</li>\n</ol>"},{"title":"java继承","description":"","abbrlink":"89b3a4e0","date":"2021-05-04T16:00:00.000Z","_content":"\n\n彻底搞懂java的父类与子类的关系\n\n\n\n<!-- more -->\n\n\n\n## 缘由\n\n\n\njava出现继承的原因其实很简单，就是为了代码复用，减少编写很多无用的代码\n\n\n\n## 单继承\n\n\n\n众所周知，java是单继承的，为什么那？\n\n\n\n主要是因为如果a继承了b和c的方法，但是b和c中有同名的方法，那就无法确定到底是调用的是哪个父类的方法\n\n\n\n## 注意事项\n\n\n\n>- 除了object类，一个类只有一个父类，并且在没有明确声明继承与哪个类的时候，默认继承object类\n\n>- 子类无法访问父类的`private`字段或者`private`方法\n\n>- 子类*不会继承*任何父类的构造方法。子类默认的构造方法是编译器自动生成的，不是继承的。\n\n>- 如果父类没有默认的构造方法，子类就必须显式调用`super()`并给出参数以便让编译器定位到父类的一个合适的构造方法，否则就会报错\n\n>- 正常情况下，只要某个class没有`final`修饰符，那么任何类都可以从该class继承。\n\n>- 推荐使用向上转型，使用向下转型的时候，可能会报错，推荐使用instanceof 判断之后再进行向下转型\n\n>- java中静态属性和静态方法可以被继承，但是没有被重写(overwrite)而是被隐藏。\n\n\n\n## 初始化顺序\n\n\n\n1. 父类静态成员和静态初始化快，按在代码中出现的顺序依次执行。\n\n2. 子类静态成员和静态初始化块，按在代码中出现的顺序依次执行。\n\n\n\n3. 父类的实例成员和实例初始化块，按在代码中出现的顺序依次执行。\n\n4. 执行父类的构造方法。\n\n5. 子类实例成员和实例初始化块，按在代码中出现的顺序依次执行。\n\n6. 执行子类的构造方法。\n\n\n\n## 测试\n\n\n\n```java\n\npackage test;\n\n\n\npublic class demo02 {\n\n    public static void main(String[] args) {\n\n        Father a = new Father();\n\n        Chilren b = new Chilren();\n\n        Father c = new Chilren();\n\n        a.getAge();\n\n        System.out.println(a.age);\n\n        b.getAge();\n\n        System.out.println(b.age);\n\n        c.getAge();\n\n        System.out.println(c.age);\n\n    }\n\n}\n\n\n\nclass Father {\n\n    int age = 40;\n\n\n\n    public void getAge() {\n\n        System.out.println(age);\n\n    }\n\n}\n\n\n\nclass Chilren extends Father {\n\n    int age = 18;\n\n\n\n    public void getAge() {\n\n        System.out.println(age);\n\n    }\n\n}\n\n```\n\n\n\n上面这段代码的输出结果是：\n\n\n\n40 40 18 18 18 40\n\n\n\n重点看倒数第二个结果，也就是 Father c = new Chilren();\n\n\n\n从上面程序的运行结果可以看出\n\n\n\n- **访问变量看声明，访问方法看实际对象类型（new出来的类型）**，也就是说如果你使用的声明是new出来的这个类的父类，那么这个实例对象的变量使用的是父类的变量，方法是使用的子类的方法，如果要是使用父类的方法需要使用super关键字\n\n- **在实例化一个子类的同时，系统会给子类所有实例变量分配内存，也会给他的父类的实例变量分配内存，及时父子类中存在重名的实例变量，也会两个都分配内存的，这个时候子类只是隐藏了父类的这个变量，但还是会给它分配内存，然后可以用super来访问属于父类的变量。**\n\n\n\n>   **this：是一个真真实实对象，代表的就是当前对象，可以用 return this;  去返回一个对象。**\n\n>\n\n>   **super：不能一个对象，不是指向父类对象的意思，super只是修饰了他后边的内容，告诉JVM，后面这部分内容不是当前对象所属类的内容而已，若用return super，JVM是不允许的，是一种错误的语法.**\n\n\n\n  ","source":"_posts/java继承.md","raw":"---\ntitle: java继承\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 89b3a4e0\ndate: 2021-05-05 00:00:00\n---\n\n\n彻底搞懂java的父类与子类的关系\n\n\n\n<!-- more -->\n\n\n\n## 缘由\n\n\n\njava出现继承的原因其实很简单，就是为了代码复用，减少编写很多无用的代码\n\n\n\n## 单继承\n\n\n\n众所周知，java是单继承的，为什么那？\n\n\n\n主要是因为如果a继承了b和c的方法，但是b和c中有同名的方法，那就无法确定到底是调用的是哪个父类的方法\n\n\n\n## 注意事项\n\n\n\n>- 除了object类，一个类只有一个父类，并且在没有明确声明继承与哪个类的时候，默认继承object类\n\n>- 子类无法访问父类的`private`字段或者`private`方法\n\n>- 子类*不会继承*任何父类的构造方法。子类默认的构造方法是编译器自动生成的，不是继承的。\n\n>- 如果父类没有默认的构造方法，子类就必须显式调用`super()`并给出参数以便让编译器定位到父类的一个合适的构造方法，否则就会报错\n\n>- 正常情况下，只要某个class没有`final`修饰符，那么任何类都可以从该class继承。\n\n>- 推荐使用向上转型，使用向下转型的时候，可能会报错，推荐使用instanceof 判断之后再进行向下转型\n\n>- java中静态属性和静态方法可以被继承，但是没有被重写(overwrite)而是被隐藏。\n\n\n\n## 初始化顺序\n\n\n\n1. 父类静态成员和静态初始化快，按在代码中出现的顺序依次执行。\n\n2. 子类静态成员和静态初始化块，按在代码中出现的顺序依次执行。\n\n\n\n3. 父类的实例成员和实例初始化块，按在代码中出现的顺序依次执行。\n\n4. 执行父类的构造方法。\n\n5. 子类实例成员和实例初始化块，按在代码中出现的顺序依次执行。\n\n6. 执行子类的构造方法。\n\n\n\n## 测试\n\n\n\n```java\n\npackage test;\n\n\n\npublic class demo02 {\n\n    public static void main(String[] args) {\n\n        Father a = new Father();\n\n        Chilren b = new Chilren();\n\n        Father c = new Chilren();\n\n        a.getAge();\n\n        System.out.println(a.age);\n\n        b.getAge();\n\n        System.out.println(b.age);\n\n        c.getAge();\n\n        System.out.println(c.age);\n\n    }\n\n}\n\n\n\nclass Father {\n\n    int age = 40;\n\n\n\n    public void getAge() {\n\n        System.out.println(age);\n\n    }\n\n}\n\n\n\nclass Chilren extends Father {\n\n    int age = 18;\n\n\n\n    public void getAge() {\n\n        System.out.println(age);\n\n    }\n\n}\n\n```\n\n\n\n上面这段代码的输出结果是：\n\n\n\n40 40 18 18 18 40\n\n\n\n重点看倒数第二个结果，也就是 Father c = new Chilren();\n\n\n\n从上面程序的运行结果可以看出\n\n\n\n- **访问变量看声明，访问方法看实际对象类型（new出来的类型）**，也就是说如果你使用的声明是new出来的这个类的父类，那么这个实例对象的变量使用的是父类的变量，方法是使用的子类的方法，如果要是使用父类的方法需要使用super关键字\n\n- **在实例化一个子类的同时，系统会给子类所有实例变量分配内存，也会给他的父类的实例变量分配内存，及时父子类中存在重名的实例变量，也会两个都分配内存的，这个时候子类只是隐藏了父类的这个变量，但还是会给它分配内存，然后可以用super来访问属于父类的变量。**\n\n\n\n>   **this：是一个真真实实对象，代表的就是当前对象，可以用 return this;  去返回一个对象。**\n\n>\n\n>   **super：不能一个对象，不是指向父类对象的意思，super只是修饰了他后边的内容，告诉JVM，后面这部分内容不是当前对象所属类的内容而已，若用return super，JVM是不允许的，是一种错误的语法.**\n\n\n\n  ","slug":"java继承","published":1,"updated":"2025-03-02T03:37:34.389Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4o002dn0ukcmcyg3x5","content":"<p>彻底搞懂java的父类与子类的关系</p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h2><p>java出现继承的原因其实很简单，就是为了代码复用，减少编写很多无用的代码</p>\n<h2 id=\"单继承\"><a href=\"#单继承\" class=\"headerlink\" title=\"单继承\"></a>单继承</h2><p>众所周知，java是单继承的，为什么那？</p>\n<p>主要是因为如果a继承了b和c的方法，但是b和c中有同名的方法，那就无法确定到底是调用的是哪个父类的方法</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><blockquote>\n<ul>\n<li>除了object类，一个类只有一个父类，并且在没有明确声明继承与哪个类的时候，默认继承object类</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>子类无法访问父类的<code>private</code>字段或者<code>private</code>方法</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>子类<em>不会继承</em>任何父类的构造方法。子类默认的构造方法是编译器自动生成的，不是继承的。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>如果父类没有默认的构造方法，子类就必须显式调用<code>super()</code>并给出参数以便让编译器定位到父类的一个合适的构造方法，否则就会报错</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>正常情况下，只要某个class没有<code>final</code>修饰符，那么任何类都可以从该class继承。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>推荐使用向上转型，使用向下转型的时候，可能会报错，推荐使用instanceof 判断之后再进行向下转型</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>java中静态属性和静态方法可以被继承，但是没有被重写(overwrite)而是被隐藏。</li>\n</ul>\n</blockquote>\n<h2 id=\"初始化顺序\"><a href=\"#初始化顺序\" class=\"headerlink\" title=\"初始化顺序\"></a>初始化顺序</h2><ol>\n<li><p>父类静态成员和静态初始化快，按在代码中出现的顺序依次执行。</p>\n</li>\n<li><p>子类静态成员和静态初始化块，按在代码中出现的顺序依次执行。</p>\n</li>\n<li><p>父类的实例成员和实例初始化块，按在代码中出现的顺序依次执行。</p>\n</li>\n<li><p>执行父类的构造方法。</p>\n</li>\n<li><p>子类实例成员和实例初始化块，按在代码中出现的顺序依次执行。</p>\n</li>\n<li><p>执行子类的构造方法。</p>\n</li>\n</ol>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> test;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo02</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Father</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Father</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Chilren</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Chilren</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Father</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Chilren</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        a.getAge();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(a.age);</span><br><span class=\"line\"></span><br><span class=\"line\">        b.getAge();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(b.age);</span><br><span class=\"line\"></span><br><span class=\"line\">        c.getAge();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(c.age);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Father</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">age</span> <span class=\"operator\">=</span> <span class=\"number\">40</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(age);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Chilren</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Father</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">age</span> <span class=\"operator\">=</span> <span class=\"number\">18</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(age);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>上面这段代码的输出结果是：</p>\n<p>40 40 18 18 18 40</p>\n<p>重点看倒数第二个结果，也就是 Father c &#x3D; new Chilren();</p>\n<p>从上面程序的运行结果可以看出</p>\n<ul>\n<li><p><strong>访问变量看声明，访问方法看实际对象类型（new出来的类型）</strong>，也就是说如果你使用的声明是new出来的这个类的父类，那么这个实例对象的变量使用的是父类的变量，方法是使用的子类的方法，如果要是使用父类的方法需要使用super关键字</p>\n</li>\n<li><p><strong>在实例化一个子类的同时，系统会给子类所有实例变量分配内存，也会给他的父类的实例变量分配内存，及时父子类中存在重名的实例变量，也会两个都分配内存的，这个时候子类只是隐藏了父类的这个变量，但还是会给它分配内存，然后可以用super来访问属于父类的变量。</strong></p>\n</li>\n</ul>\n<blockquote>\n<p>  <strong>this：是一个真真实实对象，代表的就是当前对象，可以用 return this;  去返回一个对象。</strong></p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>  <strong>super：不能一个对象，不是指向父类对象的意思，super只是修饰了他后边的内容，告诉JVM，后面这部分内容不是当前对象所属类的内容而已，若用return super，JVM是不允许的，是一种错误的语法.</strong></p>\n</blockquote>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"彻底搞懂java的父类与子类的关系\n\n缘由\njava出现继承的原因其实很简单，就是为了代码复用，减少编写很多无用的代码\n\n单继承\n众所周知，java是单继承的，为什么那？\n\n主要是因为如果a继承了b和c的方法，但是b和c中有同名的方法，那就无法确定到底是调用的是哪个父类的方法\n\n注意事项\n * 除了object类，一个类只有一个父类，并且在没有明确声明继承与哪个类的时候，默认继承object类\n\n * 子类无法访问父类的private字段或者private方法\n\n * 子类不会继承任何父类的构造方法。子类默认的构造方法是编译器自动生成的，不是继承的。\n\n * 如果父类没有默认的构造方法，子类就","more":"<h2 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h2><p>java出现继承的原因其实很简单，就是为了代码复用，减少编写很多无用的代码</p>\n<h2 id=\"单继承\"><a href=\"#单继承\" class=\"headerlink\" title=\"单继承\"></a>单继承</h2><p>众所周知，java是单继承的，为什么那？</p>\n<p>主要是因为如果a继承了b和c的方法，但是b和c中有同名的方法，那就无法确定到底是调用的是哪个父类的方法</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><blockquote>\n<ul>\n<li>除了object类，一个类只有一个父类，并且在没有明确声明继承与哪个类的时候，默认继承object类</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>子类无法访问父类的<code>private</code>字段或者<code>private</code>方法</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>子类<em>不会继承</em>任何父类的构造方法。子类默认的构造方法是编译器自动生成的，不是继承的。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>如果父类没有默认的构造方法，子类就必须显式调用<code>super()</code>并给出参数以便让编译器定位到父类的一个合适的构造方法，否则就会报错</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>正常情况下，只要某个class没有<code>final</code>修饰符，那么任何类都可以从该class继承。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>推荐使用向上转型，使用向下转型的时候，可能会报错，推荐使用instanceof 判断之后再进行向下转型</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>java中静态属性和静态方法可以被继承，但是没有被重写(overwrite)而是被隐藏。</li>\n</ul>\n</blockquote>\n<h2 id=\"初始化顺序\"><a href=\"#初始化顺序\" class=\"headerlink\" title=\"初始化顺序\"></a>初始化顺序</h2><ol>\n<li><p>父类静态成员和静态初始化快，按在代码中出现的顺序依次执行。</p>\n</li>\n<li><p>子类静态成员和静态初始化块，按在代码中出现的顺序依次执行。</p>\n</li>\n<li><p>父类的实例成员和实例初始化块，按在代码中出现的顺序依次执行。</p>\n</li>\n<li><p>执行父类的构造方法。</p>\n</li>\n<li><p>子类实例成员和实例初始化块，按在代码中出现的顺序依次执行。</p>\n</li>\n<li><p>执行子类的构造方法。</p>\n</li>\n</ol>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> test;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo02</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Father</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Father</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Chilren</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Chilren</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Father</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Chilren</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        a.getAge();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(a.age);</span><br><span class=\"line\"></span><br><span class=\"line\">        b.getAge();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(b.age);</span><br><span class=\"line\"></span><br><span class=\"line\">        c.getAge();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(c.age);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Father</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">age</span> <span class=\"operator\">=</span> <span class=\"number\">40</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(age);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Chilren</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Father</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">age</span> <span class=\"operator\">=</span> <span class=\"number\">18</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(age);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>上面这段代码的输出结果是：</p>\n<p>40 40 18 18 18 40</p>\n<p>重点看倒数第二个结果，也就是 Father c &#x3D; new Chilren();</p>\n<p>从上面程序的运行结果可以看出</p>\n<ul>\n<li><p><strong>访问变量看声明，访问方法看实际对象类型（new出来的类型）</strong>，也就是说如果你使用的声明是new出来的这个类的父类，那么这个实例对象的变量使用的是父类的变量，方法是使用的子类的方法，如果要是使用父类的方法需要使用super关键字</p>\n</li>\n<li><p><strong>在实例化一个子类的同时，系统会给子类所有实例变量分配内存，也会给他的父类的实例变量分配内存，及时父子类中存在重名的实例变量，也会两个都分配内存的，这个时候子类只是隐藏了父类的这个变量，但还是会给它分配内存，然后可以用super来访问属于父类的变量。</strong></p>\n</li>\n</ul>\n<blockquote>\n<p>  <strong>this：是一个真真实实对象，代表的就是当前对象，可以用 return this;  去返回一个对象。</strong></p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>  <strong>super：不能一个对象，不是指向父类对象的意思，super只是修饰了他后边的内容，告诉JVM，后面这部分内容不是当前对象所属类的内容而已，若用return super，JVM是不允许的，是一种错误的语法.</strong></p>\n</blockquote>"},{"title":"java面试题","description":"","abbrlink":"1491d7b8","date":"2021-04-28T16:00:00.000Z","_content":"\n\n常见的java面试题总结\n\n\n\n<!-- more -->\n\n\n\n### 八大基础类型\n\n\n\n整形： byte short int long\n\n\n\n浮点型： float double\n\n\n\n布尔型： boolen\n\n\n\n字符型： char\n\n\n\n### **访问修饰符**区别\n\n\n\n![image-20210429204220549](C:\\Users\\10618\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210429204220549.png)\n\n\n\n### 类型转换\n\n\n\n#### **float f=3.4;是否正确？**\n\n\n\n答:不正确。3.4是双精度数，将双精度型（double）赋值给浮点型（float）属于下转型（down-casting，也称为窄化）会造成精度损失，因此需要强制类型转换float f =(float)3.4; 或者写成float f =3.4F;。\n\n\n\n#### **short s1 = 1; s1 = s1 + 1;有错吗?short s1 = 1; s1 += 1;有错吗？**\n\n\n\n对于short s1 = 1; s1 = s1 + 1;由于1是int类型，因此s1+1运算结果也是int 型，需要强制转换类型才能赋值给short型。而short s1 = 1; s1 += 1;可以正确编译，因为s1+= 1;相当于s1 = (short)(s1 + 1);其中有隐含的强制类型转换。\n\n\n\n\n\n\n","source":"_posts/java面试题.md","raw":"---\ntitle: java面试题\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 1491d7b8\ndate: 2021-04-29 00:00:00\n---\n\n\n常见的java面试题总结\n\n\n\n<!-- more -->\n\n\n\n### 八大基础类型\n\n\n\n整形： byte short int long\n\n\n\n浮点型： float double\n\n\n\n布尔型： boolen\n\n\n\n字符型： char\n\n\n\n### **访问修饰符**区别\n\n\n\n![image-20210429204220549](C:\\Users\\10618\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210429204220549.png)\n\n\n\n### 类型转换\n\n\n\n#### **float f=3.4;是否正确？**\n\n\n\n答:不正确。3.4是双精度数，将双精度型（double）赋值给浮点型（float）属于下转型（down-casting，也称为窄化）会造成精度损失，因此需要强制类型转换float f =(float)3.4; 或者写成float f =3.4F;。\n\n\n\n#### **short s1 = 1; s1 = s1 + 1;有错吗?short s1 = 1; s1 += 1;有错吗？**\n\n\n\n对于short s1 = 1; s1 = s1 + 1;由于1是int类型，因此s1+1运算结果也是int 型，需要强制转换类型才能赋值给short型。而short s1 = 1; s1 += 1;可以正确编译，因为s1+= 1;相当于s1 = (short)(s1 + 1);其中有隐含的强制类型转换。\n\n\n\n\n\n\n","slug":"java面试题","published":1,"updated":"2025-03-02T03:37:34.390Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4p002fn0uk7nms6c8x","content":"<p>常见的java面试题总结</p>\n<span id=\"more\"></span>\n\n\n\n<h3 id=\"八大基础类型\"><a href=\"#八大基础类型\" class=\"headerlink\" title=\"八大基础类型\"></a>八大基础类型</h3><p>整形： byte short int long</p>\n<p>浮点型： float double</p>\n<p>布尔型： boolen</p>\n<p>字符型： char</p>\n<h3 id=\"访问修饰符区别\"><a href=\"#访问修饰符区别\" class=\"headerlink\" title=\"访问修饰符区别\"></a><strong>访问修饰符</strong>区别</h3><p><img src=\"C:\\Users\\10618\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210429204220549.png\" alt=\"image-20210429204220549\" loading=\"lazy\"></p>\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><h4 id=\"float-f-3-4-是否正确？\"><a href=\"#float-f-3-4-是否正确？\" class=\"headerlink\" title=\"float f&#x3D;3.4;是否正确？\"></a><strong>float f&#x3D;3.4;是否正确？</strong></h4><p>答:不正确。3.4是双精度数，将双精度型（double）赋值给浮点型（float）属于下转型（down-casting，也称为窄化）会造成精度损失，因此需要强制类型转换float f &#x3D;(float)3.4; 或者写成float f &#x3D;3.4F;。</p>\n<h4 id=\"short-s1-1-s1-s1-1-有错吗-short-s1-1-s1-1-有错吗？\"><a href=\"#short-s1-1-s1-s1-1-有错吗-short-s1-1-s1-1-有错吗？\" class=\"headerlink\" title=\"short s1 &#x3D; 1; s1 &#x3D; s1 + 1;有错吗?short s1 &#x3D; 1; s1 +&#x3D; 1;有错吗？\"></a><strong>short s1 &#x3D; 1; s1 &#x3D; s1 + 1;有错吗?short s1 &#x3D; 1; s1 +&#x3D; 1;有错吗？</strong></h4><p>对于short s1 &#x3D; 1; s1 &#x3D; s1 + 1;由于1是int类型，因此s1+1运算结果也是int 型，需要强制转换类型才能赋值给short型。而short s1 &#x3D; 1; s1 +&#x3D; 1;可以正确编译，因为s1+&#x3D; 1;相当于s1 &#x3D; (short)(s1 + 1);其中有隐含的强制类型转换。</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"常见的java面试题总结\n\n八大基础类型\n整形： byte short int long\n\n浮点型： float double\n\n布尔型： boolen\n\n字符型： char\n\n访问修饰符区别\n\n\n类型转换\nfloat f=3.4;是否正确？\n答:不正确。3.4是双精度数，将双精度型（double）赋值给浮点型（float）属于下转型（down-casting，也称为窄化）会造成精度损失，因此需要强制类型转换float f =(float)3.4; 或者写成float f =3.4F;。\n\nshort s1 = 1; s1 = s1 + 1;有错吗?short s1 = 1; s1 += 1;","more":"<h3 id=\"八大基础类型\"><a href=\"#八大基础类型\" class=\"headerlink\" title=\"八大基础类型\"></a>八大基础类型</h3><p>整形： byte short int long</p>\n<p>浮点型： float double</p>\n<p>布尔型： boolen</p>\n<p>字符型： char</p>\n<h3 id=\"访问修饰符区别\"><a href=\"#访问修饰符区别\" class=\"headerlink\" title=\"访问修饰符区别\"></a><strong>访问修饰符</strong>区别</h3><p><img src=\"C:\\Users\\10618\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210429204220549.png\" alt=\"image-20210429204220549\" loading=\"lazy\"></p>\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><h4 id=\"float-f-3-4-是否正确？\"><a href=\"#float-f-3-4-是否正确？\" class=\"headerlink\" title=\"float f&#x3D;3.4;是否正确？\"></a><strong>float f&#x3D;3.4;是否正确？</strong></h4><p>答:不正确。3.4是双精度数，将双精度型（double）赋值给浮点型（float）属于下转型（down-casting，也称为窄化）会造成精度损失，因此需要强制类型转换float f &#x3D;(float)3.4; 或者写成float f &#x3D;3.4F;。</p>\n<h4 id=\"short-s1-1-s1-s1-1-有错吗-short-s1-1-s1-1-有错吗？\"><a href=\"#short-s1-1-s1-s1-1-有错吗-short-s1-1-s1-1-有错吗？\" class=\"headerlink\" title=\"short s1 &#x3D; 1; s1 &#x3D; s1 + 1;有错吗?short s1 &#x3D; 1; s1 +&#x3D; 1;有错吗？\"></a><strong>short s1 &#x3D; 1; s1 &#x3D; s1 + 1;有错吗?short s1 &#x3D; 1; s1 +&#x3D; 1;有错吗？</strong></h4><p>对于short s1 &#x3D; 1; s1 &#x3D; s1 + 1;由于1是int类型，因此s1+1运算结果也是int 型，需要强制转换类型才能赋值给short型。而short s1 &#x3D; 1; s1 +&#x3D; 1;可以正确编译，因为s1+&#x3D; 1;相当于s1 &#x3D; (short)(s1 + 1);其中有隐含的强制类型转换。</p>"},{"title":"kafka-1","description":"","abbrlink":"15c112b3","date":"2021-04-27T16:00:00.000Z","_content":"\n\n主要介绍kafka的基本知识\n\n\n\n<!-- more -->\n\n\n\n### 架构\n\n\n\n![image-20210428070646238](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210428070646238.png)\n\n\n\n#### 组成\n\n\n\n- Producer：生产者，也就是发送消息的一方。生产者负责创建消息，然后将其发送到 Kafka。\n\n- Consumer：消费者，也就是接受消息的一方。消费者连接到 Kafka 上并接收消息，进而进行相应的业务逻辑处理。\n\n- Consumer Group：一个消费者组可以包含一个或多个消费者。使用多分区 + 多消费者方式可以极大提高数据下游的处理速度，同一消费组中的消费者不会重复消费消息，同样的，不同消费组中的消费者消息消息时互不影响。Kafka 就是通过消费组的方式来实现消息 P2P 模式和广播模式。\n\n- Broker：服务代理节点。Broker 是 Kafka 的服务节点，即 Kafka 的服务器。\n\n- Topic：Kafka 中的消息以 Topic 为单位进行划分，生产者将消息发送到特定的 Topic，而消费者负责订阅 Topic 的消息并进行消费。\n\n- Partition：Topic 是一个逻辑的概念，它可以细分为多个分区，每个分区只属于单个主题。同一个主题下不同分区包含的消息是不同的，分区在存储层面可以看作一个可追加的日志（Log）文件，消息在被追加到分区日志文件的时候都会分配一个特定的偏移量（offset）。\n\n- Offset：offset 是消息在分区中的唯一标识，Kafka 通过它来保证消息在分区内的顺序性，不过 offset 并不跨越分区，也就是说，Kafka 保证的是分区有序性而不是主题有序性。\n\n- Replication：副本，是 Kafka 保证数据高可用的方式，Kafka 同一 Partition 的数据可以在多 Broker 上存在多个副本，通常只有主副本对外提供读写服务，当主副本所在 broker 崩溃或发生网络一场，Kafka 会在 Controller 的管理下会重新选择新的 Leader 副本对外提供读写服务。\n\n- Record：实际写入 Kafka 中并可以被读取的消息记录。每个 record 包含了 key、value 和 timestamp。","source":"_posts/kafka-1.md","raw":"---\ntitle: kafka-1\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 15c112b3\ndate: 2021-04-28 00:00:00\n---\n\n\n主要介绍kafka的基本知识\n\n\n\n<!-- more -->\n\n\n\n### 架构\n\n\n\n![image-20210428070646238](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210428070646238.png)\n\n\n\n#### 组成\n\n\n\n- Producer：生产者，也就是发送消息的一方。生产者负责创建消息，然后将其发送到 Kafka。\n\n- Consumer：消费者，也就是接受消息的一方。消费者连接到 Kafka 上并接收消息，进而进行相应的业务逻辑处理。\n\n- Consumer Group：一个消费者组可以包含一个或多个消费者。使用多分区 + 多消费者方式可以极大提高数据下游的处理速度，同一消费组中的消费者不会重复消费消息，同样的，不同消费组中的消费者消息消息时互不影响。Kafka 就是通过消费组的方式来实现消息 P2P 模式和广播模式。\n\n- Broker：服务代理节点。Broker 是 Kafka 的服务节点，即 Kafka 的服务器。\n\n- Topic：Kafka 中的消息以 Topic 为单位进行划分，生产者将消息发送到特定的 Topic，而消费者负责订阅 Topic 的消息并进行消费。\n\n- Partition：Topic 是一个逻辑的概念，它可以细分为多个分区，每个分区只属于单个主题。同一个主题下不同分区包含的消息是不同的，分区在存储层面可以看作一个可追加的日志（Log）文件，消息在被追加到分区日志文件的时候都会分配一个特定的偏移量（offset）。\n\n- Offset：offset 是消息在分区中的唯一标识，Kafka 通过它来保证消息在分区内的顺序性，不过 offset 并不跨越分区，也就是说，Kafka 保证的是分区有序性而不是主题有序性。\n\n- Replication：副本，是 Kafka 保证数据高可用的方式，Kafka 同一 Partition 的数据可以在多 Broker 上存在多个副本，通常只有主副本对外提供读写服务，当主副本所在 broker 崩溃或发生网络一场，Kafka 会在 Controller 的管理下会重新选择新的 Leader 副本对外提供读写服务。\n\n- Record：实际写入 Kafka 中并可以被读取的消息记录。每个 record 包含了 key、value 和 timestamp。","slug":"kafka-1","published":1,"updated":"2025-03-02T03:37:34.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4p002hn0uke69td921","content":"<p>主要介绍kafka的基本知识</p>\n<span id=\"more\"></span>\n\n\n\n<h3 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h3><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210428070646238.png\" alt=\"image-20210428070646238\" loading=\"lazy\"></p>\n<h4 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h4><ul>\n<li><p>Producer：生产者，也就是发送消息的一方。生产者负责创建消息，然后将其发送到 Kafka。</p>\n</li>\n<li><p>Consumer：消费者，也就是接受消息的一方。消费者连接到 Kafka 上并接收消息，进而进行相应的业务逻辑处理。</p>\n</li>\n<li><p>Consumer Group：一个消费者组可以包含一个或多个消费者。使用多分区 + 多消费者方式可以极大提高数据下游的处理速度，同一消费组中的消费者不会重复消费消息，同样的，不同消费组中的消费者消息消息时互不影响。Kafka 就是通过消费组的方式来实现消息 P2P 模式和广播模式。</p>\n</li>\n<li><p>Broker：服务代理节点。Broker 是 Kafka 的服务节点，即 Kafka 的服务器。</p>\n</li>\n<li><p>Topic：Kafka 中的消息以 Topic 为单位进行划分，生产者将消息发送到特定的 Topic，而消费者负责订阅 Topic 的消息并进行消费。</p>\n</li>\n<li><p>Partition：Topic 是一个逻辑的概念，它可以细分为多个分区，每个分区只属于单个主题。同一个主题下不同分区包含的消息是不同的，分区在存储层面可以看作一个可追加的日志（Log）文件，消息在被追加到分区日志文件的时候都会分配一个特定的偏移量（offset）。</p>\n</li>\n<li><p>Offset：offset 是消息在分区中的唯一标识，Kafka 通过它来保证消息在分区内的顺序性，不过 offset 并不跨越分区，也就是说，Kafka 保证的是分区有序性而不是主题有序性。</p>\n</li>\n<li><p>Replication：副本，是 Kafka 保证数据高可用的方式，Kafka 同一 Partition 的数据可以在多 Broker 上存在多个副本，通常只有主副本对外提供读写服务，当主副本所在 broker 崩溃或发生网络一场，Kafka 会在 Controller 的管理下会重新选择新的 Leader 副本对外提供读写服务。</p>\n</li>\n<li><p>Record：实际写入 Kafka 中并可以被读取的消息记录。每个 record 包含了 key、value 和 timestamp。</p>\n</li>\n</ul>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"主要介绍kafka的基本知识\n\n架构\n\n\n组成\n * Producer：生产者，也就是发送消息的一方。生产者负责创建消息，然后将其发送到 Kafka。\n   \n   \n * Consumer：消费者，也就是接受消息的一方。消费者连接到 Kafka 上并接收消息，进而进行相应的业务逻辑处理。\n   \n   \n * Consumer Group：一个消费者组可以包含一个或多个消费者。使用多分区 + 多消费者方式可以极大提高数据下游的处理速度，同一消费组中的消费者不会重复消费消息，同样的，不同消费组中的消费者消息消息时互不影响。Kafka 就是通过消费组的方式来实现消息 P2P 模式和广播模式。\n ","more":"<h3 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h3><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210428070646238.png\" alt=\"image-20210428070646238\" loading=\"lazy\"></p>\n<h4 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h4><ul>\n<li><p>Producer：生产者，也就是发送消息的一方。生产者负责创建消息，然后将其发送到 Kafka。</p>\n</li>\n<li><p>Consumer：消费者，也就是接受消息的一方。消费者连接到 Kafka 上并接收消息，进而进行相应的业务逻辑处理。</p>\n</li>\n<li><p>Consumer Group：一个消费者组可以包含一个或多个消费者。使用多分区 + 多消费者方式可以极大提高数据下游的处理速度，同一消费组中的消费者不会重复消费消息，同样的，不同消费组中的消费者消息消息时互不影响。Kafka 就是通过消费组的方式来实现消息 P2P 模式和广播模式。</p>\n</li>\n<li><p>Broker：服务代理节点。Broker 是 Kafka 的服务节点，即 Kafka 的服务器。</p>\n</li>\n<li><p>Topic：Kafka 中的消息以 Topic 为单位进行划分，生产者将消息发送到特定的 Topic，而消费者负责订阅 Topic 的消息并进行消费。</p>\n</li>\n<li><p>Partition：Topic 是一个逻辑的概念，它可以细分为多个分区，每个分区只属于单个主题。同一个主题下不同分区包含的消息是不同的，分区在存储层面可以看作一个可追加的日志（Log）文件，消息在被追加到分区日志文件的时候都会分配一个特定的偏移量（offset）。</p>\n</li>\n<li><p>Offset：offset 是消息在分区中的唯一标识，Kafka 通过它来保证消息在分区内的顺序性，不过 offset 并不跨越分区，也就是说，Kafka 保证的是分区有序性而不是主题有序性。</p>\n</li>\n<li><p>Replication：副本，是 Kafka 保证数据高可用的方式，Kafka 同一 Partition 的数据可以在多 Broker 上存在多个副本，通常只有主副本对外提供读写服务，当主副本所在 broker 崩溃或发生网络一场，Kafka 会在 Controller 的管理下会重新选择新的 Leader 副本对外提供读写服务。</p>\n</li>\n<li><p>Record：实际写入 Kafka 中并可以被读取的消息记录。每个 record 包含了 key、value 和 timestamp。</p>\n</li>\n</ul>"},{"title":"linux结构","description":"","abbrlink":"d8f6d1ed","date":"2021-03-27T16:00:00.000Z","_content":"\n\n### 基本结构\n\n\n\n<!-- more -->\n\n\n\n![image-20210328133652101](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210328133652101.png)\n\n\n\n#### VFS层\n\n\n\n就是看你对哪个目录中的文件执行的磁盘io操作，把io请求交给具体的文件系统\n\n\n\n#### Page Cache\n\n\n\n在这个page cache 基于内存的缓存里找你要的数据在不在里面，如果有就基于内存缓存来执行读写，如果没有就继续往下一层走，此时这个请求会交给通用的block层，在这一层会把你对文件的io请求转换为Block IO请求\n\n\n\n#### IO调度层\n\n\n\n这一层里默认的是用CFQ公平调度算法，也就是说，可能有两个sql请求同时过来，一个比较简单，只是更新磁盘的一个block的数据就可以了，另外一个是读取一个表中的所有数据，如果基于这个默认的CFQ算法，就会让读全表的这个sql先执行，更新一个条数据的sql等到读全表的sql全部执行结束之后才能执行。这样会导致明明应该先执行简单地操作，结果复杂的反而先执行了，不符合我们的预期\n\n\n\n于是，在mysql的生产环境，建议采用deadline iO调用算法。它的一个核心思想就是，任何一个IO操作都能不能一直不停的等待，在指定范围内，都必须让他去执行\n\n\n\n#### Block 设备驱动层\n\n\n\nIo调度层决定了哪个io请求先执行，哪个io请求后执行，此时可以执行的io请求就会交给Block设备驱动层，经过驱动把iO请求发送给真正的存储硬件，也就是Block设备层\n\n\n\n### RAID\n\n\n\n第一种、项目的数据读写十分频繁，然后对可靠性要求很高，那这时候毫无疑问肯定选择RAID10了，但是付出的代价也就高了，不过一般这么选择的用户眼都不会眨一下，类似银行，你懂的。\n\n\n\n第二种、项目的数据读十分频繁，写则较少一些，然后可靠性有一定要求但不是很高，那么可以选择RAID5，这应该是一种存储性能、数据安全和存储成本兼顾的存储解决方案了，也可以理解为是RAID 0和RAID 1的折中方案。\n\n\n\n第三种、项目的读写都十分频繁，但是可靠性要求不高，主要用于内部这种，可以选择RAID0。\n\n\n\n#### 充放电\n\n\n\n服务器使用功能多快磁盘组成的RAID阵列的时候，一般会有一个RAID卡，这个RAID卡是带有一个缓存，这个缓存不是直接用我们的服务器的那种模式，他是一种跟内存类似的SDRAM，当然，你大致就认为它也是基于内存来存储的吧\n\n\n\n然后我们可以把RAID的缓存模式设置为write back，这样 的话，所有写入到磁盘阵列的数据，都先会缓存在RAID卡的缓存里，后续慢慢再写入到磁盘阵列里去，这种写缓冲机制，可以大幅度提升我们的数据库磁盘写的性能\n\n\n\n有了缓存我们很容易就会想到一个问题，就是比如数据写到了RAID卡的缓存中，机器突然宕机了，那么数据不就丢失了吗？其实正是因为如此，RAID卡一般都有配置自己独立的锂电池或者电容，如果服务器突然掉电了，无法接通电源了，RAID卡自己是基于锂电池供电运行的，然后它会赶紧把缓存里面的数据写入到阵列的磁盘上去\n\n\n\n但是锂电池是存在性能衰减的问题的，所以一般来说锂电池都是要配置定时充放电的，也就是说每隔30天-90天（不同的锂电池厂商是不一样的），就会自动对锂电池进行放电一次，这样可以延长锂电池的寿命和校验电池容量。\n\n\n\n如果不这样做，可能锂电池中存储的电量不够，在机器突然掉电的情况，锂电池中的电量不足以支撑将缓存中的数据全部刷新到磁盘上，就还是会造成数据丢失的现象\n\n\n\n所以在锂电池充放电的过程中，RAID的缓存界别会从wirte back变成 write through，我们通过RAID写数据的时候，IO就直接写磁盘了，如果写内存和写磁盘相比的话，写内存的效率会比写磁盘的效率高上数十倍\n\n\n\n> 生产建议：开启RAID卡的缓存，需要对锂电池的自动充放电的问题进行思考，防止由于锂电池定时的充放电造成系统的数据库每隔一段时间就会造成性能几十倍的抖动\n\n\n","source":"_posts/linux结构.md","raw":"---\ntitle: linux结构\ndescription: ''\ntags:\n  - 无标签\nabbrlink: d8f6d1ed\ndate: 2021-03-28 00:00:00\n---\n\n\n### 基本结构\n\n\n\n<!-- more -->\n\n\n\n![image-20210328133652101](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210328133652101.png)\n\n\n\n#### VFS层\n\n\n\n就是看你对哪个目录中的文件执行的磁盘io操作，把io请求交给具体的文件系统\n\n\n\n#### Page Cache\n\n\n\n在这个page cache 基于内存的缓存里找你要的数据在不在里面，如果有就基于内存缓存来执行读写，如果没有就继续往下一层走，此时这个请求会交给通用的block层，在这一层会把你对文件的io请求转换为Block IO请求\n\n\n\n#### IO调度层\n\n\n\n这一层里默认的是用CFQ公平调度算法，也就是说，可能有两个sql请求同时过来，一个比较简单，只是更新磁盘的一个block的数据就可以了，另外一个是读取一个表中的所有数据，如果基于这个默认的CFQ算法，就会让读全表的这个sql先执行，更新一个条数据的sql等到读全表的sql全部执行结束之后才能执行。这样会导致明明应该先执行简单地操作，结果复杂的反而先执行了，不符合我们的预期\n\n\n\n于是，在mysql的生产环境，建议采用deadline iO调用算法。它的一个核心思想就是，任何一个IO操作都能不能一直不停的等待，在指定范围内，都必须让他去执行\n\n\n\n#### Block 设备驱动层\n\n\n\nIo调度层决定了哪个io请求先执行，哪个io请求后执行，此时可以执行的io请求就会交给Block设备驱动层，经过驱动把iO请求发送给真正的存储硬件，也就是Block设备层\n\n\n\n### RAID\n\n\n\n第一种、项目的数据读写十分频繁，然后对可靠性要求很高，那这时候毫无疑问肯定选择RAID10了，但是付出的代价也就高了，不过一般这么选择的用户眼都不会眨一下，类似银行，你懂的。\n\n\n\n第二种、项目的数据读十分频繁，写则较少一些，然后可靠性有一定要求但不是很高，那么可以选择RAID5，这应该是一种存储性能、数据安全和存储成本兼顾的存储解决方案了，也可以理解为是RAID 0和RAID 1的折中方案。\n\n\n\n第三种、项目的读写都十分频繁，但是可靠性要求不高，主要用于内部这种，可以选择RAID0。\n\n\n\n#### 充放电\n\n\n\n服务器使用功能多快磁盘组成的RAID阵列的时候，一般会有一个RAID卡，这个RAID卡是带有一个缓存，这个缓存不是直接用我们的服务器的那种模式，他是一种跟内存类似的SDRAM，当然，你大致就认为它也是基于内存来存储的吧\n\n\n\n然后我们可以把RAID的缓存模式设置为write back，这样 的话，所有写入到磁盘阵列的数据，都先会缓存在RAID卡的缓存里，后续慢慢再写入到磁盘阵列里去，这种写缓冲机制，可以大幅度提升我们的数据库磁盘写的性能\n\n\n\n有了缓存我们很容易就会想到一个问题，就是比如数据写到了RAID卡的缓存中，机器突然宕机了，那么数据不就丢失了吗？其实正是因为如此，RAID卡一般都有配置自己独立的锂电池或者电容，如果服务器突然掉电了，无法接通电源了，RAID卡自己是基于锂电池供电运行的，然后它会赶紧把缓存里面的数据写入到阵列的磁盘上去\n\n\n\n但是锂电池是存在性能衰减的问题的，所以一般来说锂电池都是要配置定时充放电的，也就是说每隔30天-90天（不同的锂电池厂商是不一样的），就会自动对锂电池进行放电一次，这样可以延长锂电池的寿命和校验电池容量。\n\n\n\n如果不这样做，可能锂电池中存储的电量不够，在机器突然掉电的情况，锂电池中的电量不足以支撑将缓存中的数据全部刷新到磁盘上，就还是会造成数据丢失的现象\n\n\n\n所以在锂电池充放电的过程中，RAID的缓存界别会从wirte back变成 write through，我们通过RAID写数据的时候，IO就直接写磁盘了，如果写内存和写磁盘相比的话，写内存的效率会比写磁盘的效率高上数十倍\n\n\n\n> 生产建议：开启RAID卡的缓存，需要对锂电池的自动充放电的问题进行思考，防止由于锂电池定时的充放电造成系统的数据库每隔一段时间就会造成性能几十倍的抖动\n\n\n","slug":"linux结构","published":1,"updated":"2025-03-02T03:37:34.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4q002jn0ukfmvm5i6x","content":"<h3 id=\"基本结构\"><a href=\"#基本结构\" class=\"headerlink\" title=\"基本结构\"></a>基本结构</h3><span id=\"more\"></span>\n\n\n\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210328133652101.png\" alt=\"image-20210328133652101\" loading=\"lazy\"></p>\n<h4 id=\"VFS层\"><a href=\"#VFS层\" class=\"headerlink\" title=\"VFS层\"></a>VFS层</h4><p>就是看你对哪个目录中的文件执行的磁盘io操作，把io请求交给具体的文件系统</p>\n<h4 id=\"Page-Cache\"><a href=\"#Page-Cache\" class=\"headerlink\" title=\"Page Cache\"></a>Page Cache</h4><p>在这个page cache 基于内存的缓存里找你要的数据在不在里面，如果有就基于内存缓存来执行读写，如果没有就继续往下一层走，此时这个请求会交给通用的block层，在这一层会把你对文件的io请求转换为Block IO请求</p>\n<h4 id=\"IO调度层\"><a href=\"#IO调度层\" class=\"headerlink\" title=\"IO调度层\"></a>IO调度层</h4><p>这一层里默认的是用CFQ公平调度算法，也就是说，可能有两个sql请求同时过来，一个比较简单，只是更新磁盘的一个block的数据就可以了，另外一个是读取一个表中的所有数据，如果基于这个默认的CFQ算法，就会让读全表的这个sql先执行，更新一个条数据的sql等到读全表的sql全部执行结束之后才能执行。这样会导致明明应该先执行简单地操作，结果复杂的反而先执行了，不符合我们的预期</p>\n<p>于是，在mysql的生产环境，建议采用deadline iO调用算法。它的一个核心思想就是，任何一个IO操作都能不能一直不停的等待，在指定范围内，都必须让他去执行</p>\n<h4 id=\"Block-设备驱动层\"><a href=\"#Block-设备驱动层\" class=\"headerlink\" title=\"Block 设备驱动层\"></a>Block 设备驱动层</h4><p>Io调度层决定了哪个io请求先执行，哪个io请求后执行，此时可以执行的io请求就会交给Block设备驱动层，经过驱动把iO请求发送给真正的存储硬件，也就是Block设备层</p>\n<h3 id=\"RAID\"><a href=\"#RAID\" class=\"headerlink\" title=\"RAID\"></a>RAID</h3><p>第一种、项目的数据读写十分频繁，然后对可靠性要求很高，那这时候毫无疑问肯定选择RAID10了，但是付出的代价也就高了，不过一般这么选择的用户眼都不会眨一下，类似银行，你懂的。</p>\n<p>第二种、项目的数据读十分频繁，写则较少一些，然后可靠性有一定要求但不是很高，那么可以选择RAID5，这应该是一种存储性能、数据安全和存储成本兼顾的存储解决方案了，也可以理解为是RAID 0和RAID 1的折中方案。</p>\n<p>第三种、项目的读写都十分频繁，但是可靠性要求不高，主要用于内部这种，可以选择RAID0。</p>\n<h4 id=\"充放电\"><a href=\"#充放电\" class=\"headerlink\" title=\"充放电\"></a>充放电</h4><p>服务器使用功能多快磁盘组成的RAID阵列的时候，一般会有一个RAID卡，这个RAID卡是带有一个缓存，这个缓存不是直接用我们的服务器的那种模式，他是一种跟内存类似的SDRAM，当然，你大致就认为它也是基于内存来存储的吧</p>\n<p>然后我们可以把RAID的缓存模式设置为write back，这样 的话，所有写入到磁盘阵列的数据，都先会缓存在RAID卡的缓存里，后续慢慢再写入到磁盘阵列里去，这种写缓冲机制，可以大幅度提升我们的数据库磁盘写的性能</p>\n<p>有了缓存我们很容易就会想到一个问题，就是比如数据写到了RAID卡的缓存中，机器突然宕机了，那么数据不就丢失了吗？其实正是因为如此，RAID卡一般都有配置自己独立的锂电池或者电容，如果服务器突然掉电了，无法接通电源了，RAID卡自己是基于锂电池供电运行的，然后它会赶紧把缓存里面的数据写入到阵列的磁盘上去</p>\n<p>但是锂电池是存在性能衰减的问题的，所以一般来说锂电池都是要配置定时充放电的，也就是说每隔30天-90天（不同的锂电池厂商是不一样的），就会自动对锂电池进行放电一次，这样可以延长锂电池的寿命和校验电池容量。</p>\n<p>如果不这样做，可能锂电池中存储的电量不够，在机器突然掉电的情况，锂电池中的电量不足以支撑将缓存中的数据全部刷新到磁盘上，就还是会造成数据丢失的现象</p>\n<p>所以在锂电池充放电的过程中，RAID的缓存界别会从wirte back变成 write through，我们通过RAID写数据的时候，IO就直接写磁盘了，如果写内存和写磁盘相比的话，写内存的效率会比写磁盘的效率高上数十倍</p>\n<blockquote>\n<p>生产建议：开启RAID卡的缓存，需要对锂电池的自动充放电的问题进行思考，防止由于锂电池定时的充放电造成系统的数据库每隔一段时间就会造成性能几十倍的抖动</p>\n</blockquote>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"基本结构\n\n\nVFS层\n就是看你对哪个目录中的文件执行的磁盘io操作，把io请求交给具体的文件系统\n\nPage Cache\n在这个page cache 基于内存的缓存里找你要的数据在不在里面，如果有就基于内存缓存来执行读写，如果没有就继续往下一层走，此时这个请求会交给通用的block层，在这一层会把你对文件的io请求转换为Block IO请求\n\nIO调度层\n这一层里默认的是用CFQ公平调度算法，也就是说，可能有两个sql请求同时过来，一个比较简单，只是更新磁盘的一个block的数据就可以了，另外一个是读取一个表中的所有数据，如果基于这个默认的CFQ算法，就会让读全表的这个sql先执行，更新一个","more":"<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210328133652101.png\" alt=\"image-20210328133652101\" loading=\"lazy\"></p>\n<h4 id=\"VFS层\"><a href=\"#VFS层\" class=\"headerlink\" title=\"VFS层\"></a>VFS层</h4><p>就是看你对哪个目录中的文件执行的磁盘io操作，把io请求交给具体的文件系统</p>\n<h4 id=\"Page-Cache\"><a href=\"#Page-Cache\" class=\"headerlink\" title=\"Page Cache\"></a>Page Cache</h4><p>在这个page cache 基于内存的缓存里找你要的数据在不在里面，如果有就基于内存缓存来执行读写，如果没有就继续往下一层走，此时这个请求会交给通用的block层，在这一层会把你对文件的io请求转换为Block IO请求</p>\n<h4 id=\"IO调度层\"><a href=\"#IO调度层\" class=\"headerlink\" title=\"IO调度层\"></a>IO调度层</h4><p>这一层里默认的是用CFQ公平调度算法，也就是说，可能有两个sql请求同时过来，一个比较简单，只是更新磁盘的一个block的数据就可以了，另外一个是读取一个表中的所有数据，如果基于这个默认的CFQ算法，就会让读全表的这个sql先执行，更新一个条数据的sql等到读全表的sql全部执行结束之后才能执行。这样会导致明明应该先执行简单地操作，结果复杂的反而先执行了，不符合我们的预期</p>\n<p>于是，在mysql的生产环境，建议采用deadline iO调用算法。它的一个核心思想就是，任何一个IO操作都能不能一直不停的等待，在指定范围内，都必须让他去执行</p>\n<h4 id=\"Block-设备驱动层\"><a href=\"#Block-设备驱动层\" class=\"headerlink\" title=\"Block 设备驱动层\"></a>Block 设备驱动层</h4><p>Io调度层决定了哪个io请求先执行，哪个io请求后执行，此时可以执行的io请求就会交给Block设备驱动层，经过驱动把iO请求发送给真正的存储硬件，也就是Block设备层</p>\n<h3 id=\"RAID\"><a href=\"#RAID\" class=\"headerlink\" title=\"RAID\"></a>RAID</h3><p>第一种、项目的数据读写十分频繁，然后对可靠性要求很高，那这时候毫无疑问肯定选择RAID10了，但是付出的代价也就高了，不过一般这么选择的用户眼都不会眨一下，类似银行，你懂的。</p>\n<p>第二种、项目的数据读十分频繁，写则较少一些，然后可靠性有一定要求但不是很高，那么可以选择RAID5，这应该是一种存储性能、数据安全和存储成本兼顾的存储解决方案了，也可以理解为是RAID 0和RAID 1的折中方案。</p>\n<p>第三种、项目的读写都十分频繁，但是可靠性要求不高，主要用于内部这种，可以选择RAID0。</p>\n<h4 id=\"充放电\"><a href=\"#充放电\" class=\"headerlink\" title=\"充放电\"></a>充放电</h4><p>服务器使用功能多快磁盘组成的RAID阵列的时候，一般会有一个RAID卡，这个RAID卡是带有一个缓存，这个缓存不是直接用我们的服务器的那种模式，他是一种跟内存类似的SDRAM，当然，你大致就认为它也是基于内存来存储的吧</p>\n<p>然后我们可以把RAID的缓存模式设置为write back，这样 的话，所有写入到磁盘阵列的数据，都先会缓存在RAID卡的缓存里，后续慢慢再写入到磁盘阵列里去，这种写缓冲机制，可以大幅度提升我们的数据库磁盘写的性能</p>\n<p>有了缓存我们很容易就会想到一个问题，就是比如数据写到了RAID卡的缓存中，机器突然宕机了，那么数据不就丢失了吗？其实正是因为如此，RAID卡一般都有配置自己独立的锂电池或者电容，如果服务器突然掉电了，无法接通电源了，RAID卡自己是基于锂电池供电运行的，然后它会赶紧把缓存里面的数据写入到阵列的磁盘上去</p>\n<p>但是锂电池是存在性能衰减的问题的，所以一般来说锂电池都是要配置定时充放电的，也就是说每隔30天-90天（不同的锂电池厂商是不一样的），就会自动对锂电池进行放电一次，这样可以延长锂电池的寿命和校验电池容量。</p>\n<p>如果不这样做，可能锂电池中存储的电量不够，在机器突然掉电的情况，锂电池中的电量不足以支撑将缓存中的数据全部刷新到磁盘上，就还是会造成数据丢失的现象</p>\n<p>所以在锂电池充放电的过程中，RAID的缓存界别会从wirte back变成 write through，我们通过RAID写数据的时候，IO就直接写磁盘了，如果写内存和写磁盘相比的话，写内存的效率会比写磁盘的效率高上数十倍</p>\n<blockquote>\n<p>生产建议：开启RAID卡的缓存，需要对锂电池的自动充放电的问题进行思考，防止由于锂电池定时的充放电造成系统的数据库每隔一段时间就会造成性能几十倍的抖动</p>\n</blockquote>"},{"title":"mysql事务","description":"","abbrlink":"3d3705e1","date":"2021-03-28T16:00:00.000Z","_content":"\n\n# 事务\n\n\n\n<!-- more -->\n\n\n\n## 常见问题\n\n\n\n### 脏写\n\n\n\n现在有两个事务A和B，A和B同时在修改一个数据，A先更新，B再更新，但是B回滚了，那么A就是没有写进去，这个数据还是原来的值，这样的情况 称之为脏写\n\n\n\n### 脏读\n\n\n\n有两个事务A和B，A读取了B已经修改了，但是还没有提交事务的数据，之后B事务回滚了，就会造成A读取的数据和数据库中存储的数据不一样，这样的情况 称之为脏读\n\n\n\n### 不可重复读\n\n\n\n就是每次读取的数据，都和上次读取的数据不一样\n\n\n\n比如一个事务A已经开始事务，读取到了一个数据的值，然后同时一个事务B修改了这数据并且事务提交，那么事务A再次过来查询，就是发现刚才的数据值发生变化了，变成数据B了，如果此时，事务A还没有提交，又过来一个事务C修改了这个数据并且提交，那么事务A再次来查询这个数据就变成了数据C，这种 在一个事务多次查询同一个值，但是查询结果每次都有变化的现象被 称为 不可重复读。\n\n\n\n> 不可重复默认就避免了脏读的问题，因为只有在别的事务已经提交之后，当前在查询的事务才能看到新的值\n\n\n\n### 幻读\n\n\n\n当一个事务，用一个一样的sql进行多次查询之后，结果每次都会看到比上次多一些数据，这种现象被称为 幻读\n\n\n\n### 长事务\n\n\n\n#### 尽量不要使用长事务\n\n\n\n长事务意味着系统里面会存在很老的事务视图。由于这些事务随时可能访问数据库里面的任何数据，所以这个事务提交之前，数据库里面它可能用到的回滚记录都必须保留，这就会导致大量占用存储空间。\n\n\n\n在 MySQL 5.5 及以前的版本，回滚日志是跟数据字典一起放在 ibdata 文件里的，即使长事务最终提交，回滚段被清理，文件也不会变小。我见过数据只有 20GB，而回滚段有 200GB 的库。最终只好为了清理回滚段，重建整个库。\n\n\n\n#### 查询尝事务\n\n\n\n```sql\n\nselect * from information_schema.innodb_trx where TIME_TO_SEC(timediff(now(),trx_started))>60\n\n```\n\n\n\n\n\n\n\n## 级别\n\n\n\n### 未提交\n\n\n\nread uncommitted\n\n\n\n这个级别的事务，是不允许发生脏写的，也就是说不可能两个数据在没有提交的情况下去更新同一行数据的值，但是在这种隔离的级别下，可能发生脏读，不可重复读，幻读\n\n\n\n### 读提交（RC）\n\n\n\nread commited\n\n\n\n很明显，意思就是一个事务在没有提交的情况下，其他事务是读取不到这个事务的修改之后的值的。\n\n\n\n### 可重复读（RR）\n\n\n\n> mysql默认的事务级别\n\n\n\n这个级别下，不会发生脏写、脏读和不可重复读的问题，因为你一个事务多次查询一个数据的值，那么别的事务修改了这个值并且提交了，但是你还是不会读到其他事务修改过的值，你的事务一旦开始，多次查询一个值，会一直读到同一个值\n\n\n\n### 串行化\n\n\n\n这个级别的意思就是不会有事务并发执行了，一个一个执行\n\n\n\n> 一般生产不会选择这个级别，因为这样数据库的性能太差了\n\n\n\n## MVCC\n\n\n\n### undolog版本链\n\n\n\n![image-20210331111047071](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210331111047071.png)\n\n\n\n上图看起来很简单，无非就是一个新的事务来了，更新这个值，就在undolog版本链上增加一行数据，值更新，txr_id更新为书屋id，roll_pointer指向上一条数据的值\n\n\n\n### ReadView\n\n\n\n执行一个事务的时候，就会生成一个ReadView\n\n\n\n#### 四个参数\n\n\n\n- m_ids 这个就是说此时有那些事务在mysql里执行还没有提交\n\n- min_trx_id   就是m_ids里最小的值\n\n- max_trx_id   就是myslq下一个要生成的事务di，就是最大的事务id\n\n- creator_trx_id  就是当前事务的事务id\n\n\n\n#### 执行过程\n\n\n\n数据库里有一行数据\n\n\n\n![image-20210331123304477](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210331123304477.png)\n\n\n\n有两个并发的事务过来了，一个是A，事务id=45，一个B，事务id=59，B是去更新这行数据的，A是去查询这个行数据的\n\n\n\n1. A事务生成一个ReadView，\n\n   - m_ids  45,59\n\n   - min_id 45\n\n   - max_id 59 \n\n   - creator_trx_id 45\n\n   \n\n2. A开始查询数据，A要进行判断，判断当前这行的数据的txr_id是否小于ReadView中的min_trx_id,小于最min_trx_id说明你事务开始之前这个事务已经执行完成了，所以可以看到这个事务的结果，也就是这行数数据\n\n\n\n3. ![image-20210331195633044](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210331195633044.png)\n\n\n\n   B把这个数据更新了，于是就把B的事务id作为txr_id，B的值也放上去，然后roll_pointer指向原始值\n\n\n\n4. 此时A再过来查，还是先和当前txr_id比较，发现trx_id在m_ids之中，就知道这个事务是和自己的事务并发执行的，所以这个结果是读不到的， 于是就顺着链表往下查找，发现32是小于min_trx_id的，知道这行数据是在自己事务之前执行完成的，所以可以读到这行数据\n\n\n\n5. 最终读到的数据就是原始值\n\n\n\n#### RC\n\n\n\nRC的实现其实就是根据undolog版本链和ReadView来构成的，其实每次查询的时候都生成一个ReadView，这样就可以保证，虽然两个事务同时开启，其中一个写的数据先执行成功，另外一个读的事务可以读到修改后的值\n\n\n\n> 重点在于：m_ids中代表这还活跃的时候，当发现这个事务的id在min_trx_id和max_trx_id之间，但是不在m_ids中的时候，表示的意思是 两个事务虽然同时开始执行，但是其中一个先提交了，所以另外一个事务可以看到这个事务已经提交的值\n\n\n\n#### RR\n\n\n\nrr通过undolog版本链和ReadView解决了不可重复读和幻读的问题\n\n\n\n解决不可重复读和幻读问题，主要是靠 只 生成一次的ReadView来解决的\n\n\n\n还用上面的那个例子来说明\n\n\n\n刚开始是有一条原始数据 trx_id为32，然后事务A和事务B同时启动，事务A是查询，事务B是更新数据，在事务A第一次查询的时候，生成一次ReadView\n\n\n\n- m_ids  45,59\n\n- min_id 45\n\n- max_id 59 \n\n- creator_trx_id 45\n\n\n\n事务A第一次查询，在B事务还没有提交的时候，读取到的是原始值，因为32小于min_id\n\n\n\n事务A第二次查询，在B事务已经提交的时候，此时trx_id变为了59，59在 在min_ids中，也在min_id和max_id之间，表示事务A和事务B是同时启动的，所以即使事务B提交了，但是A还是读取不到B修改后的值，读取到的还是原始值\n\n\n\n>重点在于：事务id 在min_ids中，也在min_id和max_id之间，表示事务A和事务B是同时启动的，并发启动，无论你事务是否提交，都只能读取到之前已经提交的数据\n\n\n\n幻读，也是靠只 生成一次的ReadView来解决的，无论你修改多少回，事务A查询的这个ReadView永远不变，在B之后修改的时候id，肯定要大于B的事务id59，而大于max_id的意思是在之后才执行的事务，所以是读取不到的，所以就往前面找，往前找就到了上面不可重复读的情况，再往上就读取到了  原始数据\n\n\n\n## 启动方式\n\n\n\n两种\n\n\n\n- 显式启动事务语句， begin 或 start transaction。配套的提交语句是 commit，回滚语句是 rollback。\n\n- set autocommit=0，这个命令会将这个线程的自动提交关掉。意味着如果你只执行一个 select 语句，这个事务就启动了，而且并不会自动提交。这个事务持续存在直到你主动执行 commit 或 rollback 语句，或者断开连接。\n\n\n\n> begin/start transaction 命令并不是一个事务的起点，在执行到它们之后的第一个操作 InnoDB 表的语句，事务才真正启动。如果你想要马上启动一个事务，可以使用 start transaction with consistent snapshot 这个命令。\n\n\n\n## 事务传播\n\n\n\n事务传播 - Propagation\n\n\n\n#### REQUIRED\n\n\n\n使用当前的事务，如果当前没有事务，则自己新建一个事务，子方法是必须运行在一个事务中的；\n\n\n\n如果当前存在事务，则加入这个事务，成为一个整体。\n\n\n\n举例：领导没饭吃，我有钱，我会自己买了自己吃；领导有的吃，会分给你一起吃。\n\n\n\n#### SUPPORTS\n\n\n\n如果当前有事务，则使用事务；如果当前没有事务，则不使用事务。\n\n\n\n举例：领导没饭吃，我也没饭吃；领导有饭吃，我也有饭吃。\n\n\n\n#### MANDATORY\n\n\n\n该传播属性强制必须存在一个事务，如果不存在，则抛出异常\n\n\n\n举例：领导必须管饭，不管饭没饭吃，我就不乐意了，就不干了（抛出异常）\n\n\n\n#### REQUIRES_NEW\n\n\n\n如果当前有事务，则挂起该事务，并且自己创建一个新的事务给自己使用；\n\n\n\n如果当前没有事务，则同 REQUIRED\n\n\n\n举例：领导有饭吃，我偏不要，我自己买了自己吃\n\n\n\n#### NOT_SUPPORTED\n\n\n\n如果当前有事务，则把事务挂起，自己不适用事务去运行数据库操作\n\n\n\n举例：领导有饭吃，分一点给你，我太忙了，放一边，我不吃\n\n\n\n#### NEVER\n\n\n\n如果当前有事务存在，则抛出异常\n\n\n\n举例：领导有饭给你吃，我不想吃，我热爱工作，我抛出异常\n\n\n\n#### NESTED\n\n\n\n如果当前有事务，则开启子事务（嵌套事务），嵌套事务是独立提交或者回滚；\n\n\n\n如果当前没有事务，则同 REQUIRED。\n\n\n\n但是如果主事务提交，则会携带子事务一起提交。\n\n\n\n如果主事务回滚，则子事务会一起回滚。相反，子事务异常，则父事务可以回滚或不回滚。\n\n\n\n举例：领导决策不对，老板怪罪，领导带着小弟一同受罪。小弟出了差错，领导可以推卸责任。","source":"_posts/mysql事务.md","raw":"---\ntitle: mysql事务\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 3d3705e1\ndate: 2021-03-29 00:00:00\n---\n\n\n# 事务\n\n\n\n<!-- more -->\n\n\n\n## 常见问题\n\n\n\n### 脏写\n\n\n\n现在有两个事务A和B，A和B同时在修改一个数据，A先更新，B再更新，但是B回滚了，那么A就是没有写进去，这个数据还是原来的值，这样的情况 称之为脏写\n\n\n\n### 脏读\n\n\n\n有两个事务A和B，A读取了B已经修改了，但是还没有提交事务的数据，之后B事务回滚了，就会造成A读取的数据和数据库中存储的数据不一样，这样的情况 称之为脏读\n\n\n\n### 不可重复读\n\n\n\n就是每次读取的数据，都和上次读取的数据不一样\n\n\n\n比如一个事务A已经开始事务，读取到了一个数据的值，然后同时一个事务B修改了这数据并且事务提交，那么事务A再次过来查询，就是发现刚才的数据值发生变化了，变成数据B了，如果此时，事务A还没有提交，又过来一个事务C修改了这个数据并且提交，那么事务A再次来查询这个数据就变成了数据C，这种 在一个事务多次查询同一个值，但是查询结果每次都有变化的现象被 称为 不可重复读。\n\n\n\n> 不可重复默认就避免了脏读的问题，因为只有在别的事务已经提交之后，当前在查询的事务才能看到新的值\n\n\n\n### 幻读\n\n\n\n当一个事务，用一个一样的sql进行多次查询之后，结果每次都会看到比上次多一些数据，这种现象被称为 幻读\n\n\n\n### 长事务\n\n\n\n#### 尽量不要使用长事务\n\n\n\n长事务意味着系统里面会存在很老的事务视图。由于这些事务随时可能访问数据库里面的任何数据，所以这个事务提交之前，数据库里面它可能用到的回滚记录都必须保留，这就会导致大量占用存储空间。\n\n\n\n在 MySQL 5.5 及以前的版本，回滚日志是跟数据字典一起放在 ibdata 文件里的，即使长事务最终提交，回滚段被清理，文件也不会变小。我见过数据只有 20GB，而回滚段有 200GB 的库。最终只好为了清理回滚段，重建整个库。\n\n\n\n#### 查询尝事务\n\n\n\n```sql\n\nselect * from information_schema.innodb_trx where TIME_TO_SEC(timediff(now(),trx_started))>60\n\n```\n\n\n\n\n\n\n\n## 级别\n\n\n\n### 未提交\n\n\n\nread uncommitted\n\n\n\n这个级别的事务，是不允许发生脏写的，也就是说不可能两个数据在没有提交的情况下去更新同一行数据的值，但是在这种隔离的级别下，可能发生脏读，不可重复读，幻读\n\n\n\n### 读提交（RC）\n\n\n\nread commited\n\n\n\n很明显，意思就是一个事务在没有提交的情况下，其他事务是读取不到这个事务的修改之后的值的。\n\n\n\n### 可重复读（RR）\n\n\n\n> mysql默认的事务级别\n\n\n\n这个级别下，不会发生脏写、脏读和不可重复读的问题，因为你一个事务多次查询一个数据的值，那么别的事务修改了这个值并且提交了，但是你还是不会读到其他事务修改过的值，你的事务一旦开始，多次查询一个值，会一直读到同一个值\n\n\n\n### 串行化\n\n\n\n这个级别的意思就是不会有事务并发执行了，一个一个执行\n\n\n\n> 一般生产不会选择这个级别，因为这样数据库的性能太差了\n\n\n\n## MVCC\n\n\n\n### undolog版本链\n\n\n\n![image-20210331111047071](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210331111047071.png)\n\n\n\n上图看起来很简单，无非就是一个新的事务来了，更新这个值，就在undolog版本链上增加一行数据，值更新，txr_id更新为书屋id，roll_pointer指向上一条数据的值\n\n\n\n### ReadView\n\n\n\n执行一个事务的时候，就会生成一个ReadView\n\n\n\n#### 四个参数\n\n\n\n- m_ids 这个就是说此时有那些事务在mysql里执行还没有提交\n\n- min_trx_id   就是m_ids里最小的值\n\n- max_trx_id   就是myslq下一个要生成的事务di，就是最大的事务id\n\n- creator_trx_id  就是当前事务的事务id\n\n\n\n#### 执行过程\n\n\n\n数据库里有一行数据\n\n\n\n![image-20210331123304477](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210331123304477.png)\n\n\n\n有两个并发的事务过来了，一个是A，事务id=45，一个B，事务id=59，B是去更新这行数据的，A是去查询这个行数据的\n\n\n\n1. A事务生成一个ReadView，\n\n   - m_ids  45,59\n\n   - min_id 45\n\n   - max_id 59 \n\n   - creator_trx_id 45\n\n   \n\n2. A开始查询数据，A要进行判断，判断当前这行的数据的txr_id是否小于ReadView中的min_trx_id,小于最min_trx_id说明你事务开始之前这个事务已经执行完成了，所以可以看到这个事务的结果，也就是这行数数据\n\n\n\n3. ![image-20210331195633044](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210331195633044.png)\n\n\n\n   B把这个数据更新了，于是就把B的事务id作为txr_id，B的值也放上去，然后roll_pointer指向原始值\n\n\n\n4. 此时A再过来查，还是先和当前txr_id比较，发现trx_id在m_ids之中，就知道这个事务是和自己的事务并发执行的，所以这个结果是读不到的， 于是就顺着链表往下查找，发现32是小于min_trx_id的，知道这行数据是在自己事务之前执行完成的，所以可以读到这行数据\n\n\n\n5. 最终读到的数据就是原始值\n\n\n\n#### RC\n\n\n\nRC的实现其实就是根据undolog版本链和ReadView来构成的，其实每次查询的时候都生成一个ReadView，这样就可以保证，虽然两个事务同时开启，其中一个写的数据先执行成功，另外一个读的事务可以读到修改后的值\n\n\n\n> 重点在于：m_ids中代表这还活跃的时候，当发现这个事务的id在min_trx_id和max_trx_id之间，但是不在m_ids中的时候，表示的意思是 两个事务虽然同时开始执行，但是其中一个先提交了，所以另外一个事务可以看到这个事务已经提交的值\n\n\n\n#### RR\n\n\n\nrr通过undolog版本链和ReadView解决了不可重复读和幻读的问题\n\n\n\n解决不可重复读和幻读问题，主要是靠 只 生成一次的ReadView来解决的\n\n\n\n还用上面的那个例子来说明\n\n\n\n刚开始是有一条原始数据 trx_id为32，然后事务A和事务B同时启动，事务A是查询，事务B是更新数据，在事务A第一次查询的时候，生成一次ReadView\n\n\n\n- m_ids  45,59\n\n- min_id 45\n\n- max_id 59 \n\n- creator_trx_id 45\n\n\n\n事务A第一次查询，在B事务还没有提交的时候，读取到的是原始值，因为32小于min_id\n\n\n\n事务A第二次查询，在B事务已经提交的时候，此时trx_id变为了59，59在 在min_ids中，也在min_id和max_id之间，表示事务A和事务B是同时启动的，所以即使事务B提交了，但是A还是读取不到B修改后的值，读取到的还是原始值\n\n\n\n>重点在于：事务id 在min_ids中，也在min_id和max_id之间，表示事务A和事务B是同时启动的，并发启动，无论你事务是否提交，都只能读取到之前已经提交的数据\n\n\n\n幻读，也是靠只 生成一次的ReadView来解决的，无论你修改多少回，事务A查询的这个ReadView永远不变，在B之后修改的时候id，肯定要大于B的事务id59，而大于max_id的意思是在之后才执行的事务，所以是读取不到的，所以就往前面找，往前找就到了上面不可重复读的情况，再往上就读取到了  原始数据\n\n\n\n## 启动方式\n\n\n\n两种\n\n\n\n- 显式启动事务语句， begin 或 start transaction。配套的提交语句是 commit，回滚语句是 rollback。\n\n- set autocommit=0，这个命令会将这个线程的自动提交关掉。意味着如果你只执行一个 select 语句，这个事务就启动了，而且并不会自动提交。这个事务持续存在直到你主动执行 commit 或 rollback 语句，或者断开连接。\n\n\n\n> begin/start transaction 命令并不是一个事务的起点，在执行到它们之后的第一个操作 InnoDB 表的语句，事务才真正启动。如果你想要马上启动一个事务，可以使用 start transaction with consistent snapshot 这个命令。\n\n\n\n## 事务传播\n\n\n\n事务传播 - Propagation\n\n\n\n#### REQUIRED\n\n\n\n使用当前的事务，如果当前没有事务，则自己新建一个事务，子方法是必须运行在一个事务中的；\n\n\n\n如果当前存在事务，则加入这个事务，成为一个整体。\n\n\n\n举例：领导没饭吃，我有钱，我会自己买了自己吃；领导有的吃，会分给你一起吃。\n\n\n\n#### SUPPORTS\n\n\n\n如果当前有事务，则使用事务；如果当前没有事务，则不使用事务。\n\n\n\n举例：领导没饭吃，我也没饭吃；领导有饭吃，我也有饭吃。\n\n\n\n#### MANDATORY\n\n\n\n该传播属性强制必须存在一个事务，如果不存在，则抛出异常\n\n\n\n举例：领导必须管饭，不管饭没饭吃，我就不乐意了，就不干了（抛出异常）\n\n\n\n#### REQUIRES_NEW\n\n\n\n如果当前有事务，则挂起该事务，并且自己创建一个新的事务给自己使用；\n\n\n\n如果当前没有事务，则同 REQUIRED\n\n\n\n举例：领导有饭吃，我偏不要，我自己买了自己吃\n\n\n\n#### NOT_SUPPORTED\n\n\n\n如果当前有事务，则把事务挂起，自己不适用事务去运行数据库操作\n\n\n\n举例：领导有饭吃，分一点给你，我太忙了，放一边，我不吃\n\n\n\n#### NEVER\n\n\n\n如果当前有事务存在，则抛出异常\n\n\n\n举例：领导有饭给你吃，我不想吃，我热爱工作，我抛出异常\n\n\n\n#### NESTED\n\n\n\n如果当前有事务，则开启子事务（嵌套事务），嵌套事务是独立提交或者回滚；\n\n\n\n如果当前没有事务，则同 REQUIRED。\n\n\n\n但是如果主事务提交，则会携带子事务一起提交。\n\n\n\n如果主事务回滚，则子事务会一起回滚。相反，子事务异常，则父事务可以回滚或不回滚。\n\n\n\n举例：领导决策不对，老板怪罪，领导带着小弟一同受罪。小弟出了差错，领导可以推卸责任。","slug":"mysql事务","published":1,"updated":"2025-03-02T03:37:34.392Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4q002ln0ukeu320zt4","content":"<h1 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h1><span id=\"more\"></span>\n\n\n\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><h3 id=\"脏写\"><a href=\"#脏写\" class=\"headerlink\" title=\"脏写\"></a>脏写</h3><p>现在有两个事务A和B，A和B同时在修改一个数据，A先更新，B再更新，但是B回滚了，那么A就是没有写进去，这个数据还是原来的值，这样的情况 称之为脏写</p>\n<h3 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h3><p>有两个事务A和B，A读取了B已经修改了，但是还没有提交事务的数据，之后B事务回滚了，就会造成A读取的数据和数据库中存储的数据不一样，这样的情况 称之为脏读</p>\n<h3 id=\"不可重复读\"><a href=\"#不可重复读\" class=\"headerlink\" title=\"不可重复读\"></a>不可重复读</h3><p>就是每次读取的数据，都和上次读取的数据不一样</p>\n<p>比如一个事务A已经开始事务，读取到了一个数据的值，然后同时一个事务B修改了这数据并且事务提交，那么事务A再次过来查询，就是发现刚才的数据值发生变化了，变成数据B了，如果此时，事务A还没有提交，又过来一个事务C修改了这个数据并且提交，那么事务A再次来查询这个数据就变成了数据C，这种 在一个事务多次查询同一个值，但是查询结果每次都有变化的现象被 称为 不可重复读。</p>\n<blockquote>\n<p>不可重复默认就避免了脏读的问题，因为只有在别的事务已经提交之后，当前在查询的事务才能看到新的值</p>\n</blockquote>\n<h3 id=\"幻读\"><a href=\"#幻读\" class=\"headerlink\" title=\"幻读\"></a>幻读</h3><p>当一个事务，用一个一样的sql进行多次查询之后，结果每次都会看到比上次多一些数据，这种现象被称为 幻读</p>\n<h3 id=\"长事务\"><a href=\"#长事务\" class=\"headerlink\" title=\"长事务\"></a>长事务</h3><h4 id=\"尽量不要使用长事务\"><a href=\"#尽量不要使用长事务\" class=\"headerlink\" title=\"尽量不要使用长事务\"></a>尽量不要使用长事务</h4><p>长事务意味着系统里面会存在很老的事务视图。由于这些事务随时可能访问数据库里面的任何数据，所以这个事务提交之前，数据库里面它可能用到的回滚记录都必须保留，这就会导致大量占用存储空间。</p>\n<p>在 MySQL 5.5 及以前的版本，回滚日志是跟数据字典一起放在 ibdata 文件里的，即使长事务最终提交，回滚段被清理，文件也不会变小。我见过数据只有 20GB，而回滚段有 200GB 的库。最终只好为了清理回滚段，重建整个库。</p>\n<h4 id=\"查询尝事务\"><a href=\"#查询尝事务\" class=\"headerlink\" title=\"查询尝事务\"></a>查询尝事务</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> information_schema.innodb_trx <span class=\"keyword\">where</span> TIME_TO_SEC(timediff(now(),trx_started))<span class=\"operator\">&gt;</span><span class=\"number\">60</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"级别\"><a href=\"#级别\" class=\"headerlink\" title=\"级别\"></a>级别</h2><h3 id=\"未提交\"><a href=\"#未提交\" class=\"headerlink\" title=\"未提交\"></a>未提交</h3><p>read uncommitted</p>\n<p>这个级别的事务，是不允许发生脏写的，也就是说不可能两个数据在没有提交的情况下去更新同一行数据的值，但是在这种隔离的级别下，可能发生脏读，不可重复读，幻读</p>\n<h3 id=\"读提交（RC）\"><a href=\"#读提交（RC）\" class=\"headerlink\" title=\"读提交（RC）\"></a>读提交（RC）</h3><p>read commited</p>\n<p>很明显，意思就是一个事务在没有提交的情况下，其他事务是读取不到这个事务的修改之后的值的。</p>\n<h3 id=\"可重复读（RR）\"><a href=\"#可重复读（RR）\" class=\"headerlink\" title=\"可重复读（RR）\"></a>可重复读（RR）</h3><blockquote>\n<p>mysql默认的事务级别</p>\n</blockquote>\n<p>这个级别下，不会发生脏写、脏读和不可重复读的问题，因为你一个事务多次查询一个数据的值，那么别的事务修改了这个值并且提交了，但是你还是不会读到其他事务修改过的值，你的事务一旦开始，多次查询一个值，会一直读到同一个值</p>\n<h3 id=\"串行化\"><a href=\"#串行化\" class=\"headerlink\" title=\"串行化\"></a>串行化</h3><p>这个级别的意思就是不会有事务并发执行了，一个一个执行</p>\n<blockquote>\n<p>一般生产不会选择这个级别，因为这样数据库的性能太差了</p>\n</blockquote>\n<h2 id=\"MVCC\"><a href=\"#MVCC\" class=\"headerlink\" title=\"MVCC\"></a>MVCC</h2><h3 id=\"undolog版本链\"><a href=\"#undolog版本链\" class=\"headerlink\" title=\"undolog版本链\"></a>undolog版本链</h3><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210331111047071.png\" alt=\"image-20210331111047071\" loading=\"lazy\"></p>\n<p>上图看起来很简单，无非就是一个新的事务来了，更新这个值，就在undolog版本链上增加一行数据，值更新，txr_id更新为书屋id，roll_pointer指向上一条数据的值</p>\n<h3 id=\"ReadView\"><a href=\"#ReadView\" class=\"headerlink\" title=\"ReadView\"></a>ReadView</h3><p>执行一个事务的时候，就会生成一个ReadView</p>\n<h4 id=\"四个参数\"><a href=\"#四个参数\" class=\"headerlink\" title=\"四个参数\"></a>四个参数</h4><ul>\n<li><p>m_ids 这个就是说此时有那些事务在mysql里执行还没有提交</p>\n</li>\n<li><p>min_trx_id   就是m_ids里最小的值</p>\n</li>\n<li><p>max_trx_id   就是myslq下一个要生成的事务di，就是最大的事务id</p>\n</li>\n<li><p>creator_trx_id  就是当前事务的事务id</p>\n</li>\n</ul>\n<h4 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h4><p>数据库里有一行数据</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210331123304477.png\" alt=\"image-20210331123304477\" loading=\"lazy\"></p>\n<p>有两个并发的事务过来了，一个是A，事务id&#x3D;45，一个B，事务id&#x3D;59，B是去更新这行数据的，A是去查询这个行数据的</p>\n<ol>\n<li><p>A事务生成一个ReadView，</p>\n<ul>\n<li><p>m_ids  45,59</p>\n</li>\n<li><p>min_id 45</p>\n</li>\n<li><p>max_id 59 </p>\n</li>\n<li><p>creator_trx_id 45</p>\n</li>\n</ul>\n</li>\n<li><p>A开始查询数据，A要进行判断，判断当前这行的数据的txr_id是否小于ReadView中的min_trx_id,小于最min_trx_id说明你事务开始之前这个事务已经执行完成了，所以可以看到这个事务的结果，也就是这行数数据</p>\n</li>\n<li><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210331195633044.png\" alt=\"image-20210331195633044\" loading=\"lazy\"></p>\n<p>B把这个数据更新了，于是就把B的事务id作为txr_id，B的值也放上去，然后roll_pointer指向原始值</p>\n</li>\n<li><p>此时A再过来查，还是先和当前txr_id比较，发现trx_id在m_ids之中，就知道这个事务是和自己的事务并发执行的，所以这个结果是读不到的， 于是就顺着链表往下查找，发现32是小于min_trx_id的，知道这行数据是在自己事务之前执行完成的，所以可以读到这行数据</p>\n</li>\n<li><p>最终读到的数据就是原始值</p>\n</li>\n</ol>\n<h4 id=\"RC\"><a href=\"#RC\" class=\"headerlink\" title=\"RC\"></a>RC</h4><p>RC的实现其实就是根据undolog版本链和ReadView来构成的，其实每次查询的时候都生成一个ReadView，这样就可以保证，虽然两个事务同时开启，其中一个写的数据先执行成功，另外一个读的事务可以读到修改后的值</p>\n<blockquote>\n<p>重点在于：m_ids中代表这还活跃的时候，当发现这个事务的id在min_trx_id和max_trx_id之间，但是不在m_ids中的时候，表示的意思是 两个事务虽然同时开始执行，但是其中一个先提交了，所以另外一个事务可以看到这个事务已经提交的值</p>\n</blockquote>\n<h4 id=\"RR\"><a href=\"#RR\" class=\"headerlink\" title=\"RR\"></a>RR</h4><p>rr通过undolog版本链和ReadView解决了不可重复读和幻读的问题</p>\n<p>解决不可重复读和幻读问题，主要是靠 只 生成一次的ReadView来解决的</p>\n<p>还用上面的那个例子来说明</p>\n<p>刚开始是有一条原始数据 trx_id为32，然后事务A和事务B同时启动，事务A是查询，事务B是更新数据，在事务A第一次查询的时候，生成一次ReadView</p>\n<ul>\n<li><p>m_ids  45,59</p>\n</li>\n<li><p>min_id 45</p>\n</li>\n<li><p>max_id 59 </p>\n</li>\n<li><p>creator_trx_id 45</p>\n</li>\n</ul>\n<p>事务A第一次查询，在B事务还没有提交的时候，读取到的是原始值，因为32小于min_id</p>\n<p>事务A第二次查询，在B事务已经提交的时候，此时trx_id变为了59，59在 在min_ids中，也在min_id和max_id之间，表示事务A和事务B是同时启动的，所以即使事务B提交了，但是A还是读取不到B修改后的值，读取到的还是原始值</p>\n<blockquote>\n<p>重点在于：事务id 在min_ids中，也在min_id和max_id之间，表示事务A和事务B是同时启动的，并发启动，无论你事务是否提交，都只能读取到之前已经提交的数据</p>\n</blockquote>\n<p>幻读，也是靠只 生成一次的ReadView来解决的，无论你修改多少回，事务A查询的这个ReadView永远不变，在B之后修改的时候id，肯定要大于B的事务id59，而大于max_id的意思是在之后才执行的事务，所以是读取不到的，所以就往前面找，往前找就到了上面不可重复读的情况，再往上就读取到了  原始数据</p>\n<h2 id=\"启动方式\"><a href=\"#启动方式\" class=\"headerlink\" title=\"启动方式\"></a>启动方式</h2><p>两种</p>\n<ul>\n<li><p>显式启动事务语句， begin 或 start transaction。配套的提交语句是 commit，回滚语句是 rollback。</p>\n</li>\n<li><p>set autocommit&#x3D;0，这个命令会将这个线程的自动提交关掉。意味着如果你只执行一个 select 语句，这个事务就启动了，而且并不会自动提交。这个事务持续存在直到你主动执行 commit 或 rollback 语句，或者断开连接。</p>\n</li>\n</ul>\n<blockquote>\n<p>begin&#x2F;start transaction 命令并不是一个事务的起点，在执行到它们之后的第一个操作 InnoDB 表的语句，事务才真正启动。如果你想要马上启动一个事务，可以使用 start transaction with consistent snapshot 这个命令。</p>\n</blockquote>\n<h2 id=\"事务传播\"><a href=\"#事务传播\" class=\"headerlink\" title=\"事务传播\"></a>事务传播</h2><p>事务传播 - Propagation</p>\n<h4 id=\"REQUIRED\"><a href=\"#REQUIRED\" class=\"headerlink\" title=\"REQUIRED\"></a>REQUIRED</h4><p>使用当前的事务，如果当前没有事务，则自己新建一个事务，子方法是必须运行在一个事务中的；</p>\n<p>如果当前存在事务，则加入这个事务，成为一个整体。</p>\n<p>举例：领导没饭吃，我有钱，我会自己买了自己吃；领导有的吃，会分给你一起吃。</p>\n<h4 id=\"SUPPORTS\"><a href=\"#SUPPORTS\" class=\"headerlink\" title=\"SUPPORTS\"></a>SUPPORTS</h4><p>如果当前有事务，则使用事务；如果当前没有事务，则不使用事务。</p>\n<p>举例：领导没饭吃，我也没饭吃；领导有饭吃，我也有饭吃。</p>\n<h4 id=\"MANDATORY\"><a href=\"#MANDATORY\" class=\"headerlink\" title=\"MANDATORY\"></a>MANDATORY</h4><p>该传播属性强制必须存在一个事务，如果不存在，则抛出异常</p>\n<p>举例：领导必须管饭，不管饭没饭吃，我就不乐意了，就不干了（抛出异常）</p>\n<h4 id=\"REQUIRES-NEW\"><a href=\"#REQUIRES-NEW\" class=\"headerlink\" title=\"REQUIRES_NEW\"></a>REQUIRES_NEW</h4><p>如果当前有事务，则挂起该事务，并且自己创建一个新的事务给自己使用；</p>\n<p>如果当前没有事务，则同 REQUIRED</p>\n<p>举例：领导有饭吃，我偏不要，我自己买了自己吃</p>\n<h4 id=\"NOT-SUPPORTED\"><a href=\"#NOT-SUPPORTED\" class=\"headerlink\" title=\"NOT_SUPPORTED\"></a>NOT_SUPPORTED</h4><p>如果当前有事务，则把事务挂起，自己不适用事务去运行数据库操作</p>\n<p>举例：领导有饭吃，分一点给你，我太忙了，放一边，我不吃</p>\n<h4 id=\"NEVER\"><a href=\"#NEVER\" class=\"headerlink\" title=\"NEVER\"></a>NEVER</h4><p>如果当前有事务存在，则抛出异常</p>\n<p>举例：领导有饭给你吃，我不想吃，我热爱工作，我抛出异常</p>\n<h4 id=\"NESTED\"><a href=\"#NESTED\" class=\"headerlink\" title=\"NESTED\"></a>NESTED</h4><p>如果当前有事务，则开启子事务（嵌套事务），嵌套事务是独立提交或者回滚；</p>\n<p>如果当前没有事务，则同 REQUIRED。</p>\n<p>但是如果主事务提交，则会携带子事务一起提交。</p>\n<p>如果主事务回滚，则子事务会一起回滚。相反，子事务异常，则父事务可以回滚或不回滚。</p>\n<p>举例：领导决策不对，老板怪罪，领导带着小弟一同受罪。小弟出了差错，领导可以推卸责任。</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"事务\n常见问题\n脏写\n现在有两个事务A和B，A和B同时在修改一个数据，A先更新，B再更新，但是B回滚了，那么A就是没有写进去，这个数据还是原来的值，这样的情况 称之为脏写\n\n脏读\n有两个事务A和B，A读取了B已经修改了，但是还没有提交事务的数据，之后B事务回滚了，就会造成A读取的数据和数据库中存储的数据不一样，这样的情况 称之为脏读\n\n不可重复读\n就是每次读取的数据，都和上次读取的数据不一样\n\n比如一个事务A已经开始事务，读取到了一个数据的值，然后同时一个事务B修改了这数据并且事务提交，那么事务A再次过来查询，就是发现刚才的数据值发生变化了，变成数据B了，如果此时，事务A还没有提交，又过来一个","more":"<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><h3 id=\"脏写\"><a href=\"#脏写\" class=\"headerlink\" title=\"脏写\"></a>脏写</h3><p>现在有两个事务A和B，A和B同时在修改一个数据，A先更新，B再更新，但是B回滚了，那么A就是没有写进去，这个数据还是原来的值，这样的情况 称之为脏写</p>\n<h3 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h3><p>有两个事务A和B，A读取了B已经修改了，但是还没有提交事务的数据，之后B事务回滚了，就会造成A读取的数据和数据库中存储的数据不一样，这样的情况 称之为脏读</p>\n<h3 id=\"不可重复读\"><a href=\"#不可重复读\" class=\"headerlink\" title=\"不可重复读\"></a>不可重复读</h3><p>就是每次读取的数据，都和上次读取的数据不一样</p>\n<p>比如一个事务A已经开始事务，读取到了一个数据的值，然后同时一个事务B修改了这数据并且事务提交，那么事务A再次过来查询，就是发现刚才的数据值发生变化了，变成数据B了，如果此时，事务A还没有提交，又过来一个事务C修改了这个数据并且提交，那么事务A再次来查询这个数据就变成了数据C，这种 在一个事务多次查询同一个值，但是查询结果每次都有变化的现象被 称为 不可重复读。</p>\n<blockquote>\n<p>不可重复默认就避免了脏读的问题，因为只有在别的事务已经提交之后，当前在查询的事务才能看到新的值</p>\n</blockquote>\n<h3 id=\"幻读\"><a href=\"#幻读\" class=\"headerlink\" title=\"幻读\"></a>幻读</h3><p>当一个事务，用一个一样的sql进行多次查询之后，结果每次都会看到比上次多一些数据，这种现象被称为 幻读</p>\n<h3 id=\"长事务\"><a href=\"#长事务\" class=\"headerlink\" title=\"长事务\"></a>长事务</h3><h4 id=\"尽量不要使用长事务\"><a href=\"#尽量不要使用长事务\" class=\"headerlink\" title=\"尽量不要使用长事务\"></a>尽量不要使用长事务</h4><p>长事务意味着系统里面会存在很老的事务视图。由于这些事务随时可能访问数据库里面的任何数据，所以这个事务提交之前，数据库里面它可能用到的回滚记录都必须保留，这就会导致大量占用存储空间。</p>\n<p>在 MySQL 5.5 及以前的版本，回滚日志是跟数据字典一起放在 ibdata 文件里的，即使长事务最终提交，回滚段被清理，文件也不会变小。我见过数据只有 20GB，而回滚段有 200GB 的库。最终只好为了清理回滚段，重建整个库。</p>\n<h4 id=\"查询尝事务\"><a href=\"#查询尝事务\" class=\"headerlink\" title=\"查询尝事务\"></a>查询尝事务</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> information_schema.innodb_trx <span class=\"keyword\">where</span> TIME_TO_SEC(timediff(now(),trx_started))<span class=\"operator\">&gt;</span><span class=\"number\">60</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"级别\"><a href=\"#级别\" class=\"headerlink\" title=\"级别\"></a>级别</h2><h3 id=\"未提交\"><a href=\"#未提交\" class=\"headerlink\" title=\"未提交\"></a>未提交</h3><p>read uncommitted</p>\n<p>这个级别的事务，是不允许发生脏写的，也就是说不可能两个数据在没有提交的情况下去更新同一行数据的值，但是在这种隔离的级别下，可能发生脏读，不可重复读，幻读</p>\n<h3 id=\"读提交（RC）\"><a href=\"#读提交（RC）\" class=\"headerlink\" title=\"读提交（RC）\"></a>读提交（RC）</h3><p>read commited</p>\n<p>很明显，意思就是一个事务在没有提交的情况下，其他事务是读取不到这个事务的修改之后的值的。</p>\n<h3 id=\"可重复读（RR）\"><a href=\"#可重复读（RR）\" class=\"headerlink\" title=\"可重复读（RR）\"></a>可重复读（RR）</h3><blockquote>\n<p>mysql默认的事务级别</p>\n</blockquote>\n<p>这个级别下，不会发生脏写、脏读和不可重复读的问题，因为你一个事务多次查询一个数据的值，那么别的事务修改了这个值并且提交了，但是你还是不会读到其他事务修改过的值，你的事务一旦开始，多次查询一个值，会一直读到同一个值</p>\n<h3 id=\"串行化\"><a href=\"#串行化\" class=\"headerlink\" title=\"串行化\"></a>串行化</h3><p>这个级别的意思就是不会有事务并发执行了，一个一个执行</p>\n<blockquote>\n<p>一般生产不会选择这个级别，因为这样数据库的性能太差了</p>\n</blockquote>\n<h2 id=\"MVCC\"><a href=\"#MVCC\" class=\"headerlink\" title=\"MVCC\"></a>MVCC</h2><h3 id=\"undolog版本链\"><a href=\"#undolog版本链\" class=\"headerlink\" title=\"undolog版本链\"></a>undolog版本链</h3><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210331111047071.png\" alt=\"image-20210331111047071\" loading=\"lazy\"></p>\n<p>上图看起来很简单，无非就是一个新的事务来了，更新这个值，就在undolog版本链上增加一行数据，值更新，txr_id更新为书屋id，roll_pointer指向上一条数据的值</p>\n<h3 id=\"ReadView\"><a href=\"#ReadView\" class=\"headerlink\" title=\"ReadView\"></a>ReadView</h3><p>执行一个事务的时候，就会生成一个ReadView</p>\n<h4 id=\"四个参数\"><a href=\"#四个参数\" class=\"headerlink\" title=\"四个参数\"></a>四个参数</h4><ul>\n<li><p>m_ids 这个就是说此时有那些事务在mysql里执行还没有提交</p>\n</li>\n<li><p>min_trx_id   就是m_ids里最小的值</p>\n</li>\n<li><p>max_trx_id   就是myslq下一个要生成的事务di，就是最大的事务id</p>\n</li>\n<li><p>creator_trx_id  就是当前事务的事务id</p>\n</li>\n</ul>\n<h4 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h4><p>数据库里有一行数据</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210331123304477.png\" alt=\"image-20210331123304477\" loading=\"lazy\"></p>\n<p>有两个并发的事务过来了，一个是A，事务id&#x3D;45，一个B，事务id&#x3D;59，B是去更新这行数据的，A是去查询这个行数据的</p>\n<ol>\n<li><p>A事务生成一个ReadView，</p>\n<ul>\n<li><p>m_ids  45,59</p>\n</li>\n<li><p>min_id 45</p>\n</li>\n<li><p>max_id 59 </p>\n</li>\n<li><p>creator_trx_id 45</p>\n</li>\n</ul>\n</li>\n<li><p>A开始查询数据，A要进行判断，判断当前这行的数据的txr_id是否小于ReadView中的min_trx_id,小于最min_trx_id说明你事务开始之前这个事务已经执行完成了，所以可以看到这个事务的结果，也就是这行数数据</p>\n</li>\n<li><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210331195633044.png\" alt=\"image-20210331195633044\" loading=\"lazy\"></p>\n<p>B把这个数据更新了，于是就把B的事务id作为txr_id，B的值也放上去，然后roll_pointer指向原始值</p>\n</li>\n<li><p>此时A再过来查，还是先和当前txr_id比较，发现trx_id在m_ids之中，就知道这个事务是和自己的事务并发执行的，所以这个结果是读不到的， 于是就顺着链表往下查找，发现32是小于min_trx_id的，知道这行数据是在自己事务之前执行完成的，所以可以读到这行数据</p>\n</li>\n<li><p>最终读到的数据就是原始值</p>\n</li>\n</ol>\n<h4 id=\"RC\"><a href=\"#RC\" class=\"headerlink\" title=\"RC\"></a>RC</h4><p>RC的实现其实就是根据undolog版本链和ReadView来构成的，其实每次查询的时候都生成一个ReadView，这样就可以保证，虽然两个事务同时开启，其中一个写的数据先执行成功，另外一个读的事务可以读到修改后的值</p>\n<blockquote>\n<p>重点在于：m_ids中代表这还活跃的时候，当发现这个事务的id在min_trx_id和max_trx_id之间，但是不在m_ids中的时候，表示的意思是 两个事务虽然同时开始执行，但是其中一个先提交了，所以另外一个事务可以看到这个事务已经提交的值</p>\n</blockquote>\n<h4 id=\"RR\"><a href=\"#RR\" class=\"headerlink\" title=\"RR\"></a>RR</h4><p>rr通过undolog版本链和ReadView解决了不可重复读和幻读的问题</p>\n<p>解决不可重复读和幻读问题，主要是靠 只 生成一次的ReadView来解决的</p>\n<p>还用上面的那个例子来说明</p>\n<p>刚开始是有一条原始数据 trx_id为32，然后事务A和事务B同时启动，事务A是查询，事务B是更新数据，在事务A第一次查询的时候，生成一次ReadView</p>\n<ul>\n<li><p>m_ids  45,59</p>\n</li>\n<li><p>min_id 45</p>\n</li>\n<li><p>max_id 59 </p>\n</li>\n<li><p>creator_trx_id 45</p>\n</li>\n</ul>\n<p>事务A第一次查询，在B事务还没有提交的时候，读取到的是原始值，因为32小于min_id</p>\n<p>事务A第二次查询，在B事务已经提交的时候，此时trx_id变为了59，59在 在min_ids中，也在min_id和max_id之间，表示事务A和事务B是同时启动的，所以即使事务B提交了，但是A还是读取不到B修改后的值，读取到的还是原始值</p>\n<blockquote>\n<p>重点在于：事务id 在min_ids中，也在min_id和max_id之间，表示事务A和事务B是同时启动的，并发启动，无论你事务是否提交，都只能读取到之前已经提交的数据</p>\n</blockquote>\n<p>幻读，也是靠只 生成一次的ReadView来解决的，无论你修改多少回，事务A查询的这个ReadView永远不变，在B之后修改的时候id，肯定要大于B的事务id59，而大于max_id的意思是在之后才执行的事务，所以是读取不到的，所以就往前面找，往前找就到了上面不可重复读的情况，再往上就读取到了  原始数据</p>\n<h2 id=\"启动方式\"><a href=\"#启动方式\" class=\"headerlink\" title=\"启动方式\"></a>启动方式</h2><p>两种</p>\n<ul>\n<li><p>显式启动事务语句， begin 或 start transaction。配套的提交语句是 commit，回滚语句是 rollback。</p>\n</li>\n<li><p>set autocommit&#x3D;0，这个命令会将这个线程的自动提交关掉。意味着如果你只执行一个 select 语句，这个事务就启动了，而且并不会自动提交。这个事务持续存在直到你主动执行 commit 或 rollback 语句，或者断开连接。</p>\n</li>\n</ul>\n<blockquote>\n<p>begin&#x2F;start transaction 命令并不是一个事务的起点，在执行到它们之后的第一个操作 InnoDB 表的语句，事务才真正启动。如果你想要马上启动一个事务，可以使用 start transaction with consistent snapshot 这个命令。</p>\n</blockquote>\n<h2 id=\"事务传播\"><a href=\"#事务传播\" class=\"headerlink\" title=\"事务传播\"></a>事务传播</h2><p>事务传播 - Propagation</p>\n<h4 id=\"REQUIRED\"><a href=\"#REQUIRED\" class=\"headerlink\" title=\"REQUIRED\"></a>REQUIRED</h4><p>使用当前的事务，如果当前没有事务，则自己新建一个事务，子方法是必须运行在一个事务中的；</p>\n<p>如果当前存在事务，则加入这个事务，成为一个整体。</p>\n<p>举例：领导没饭吃，我有钱，我会自己买了自己吃；领导有的吃，会分给你一起吃。</p>\n<h4 id=\"SUPPORTS\"><a href=\"#SUPPORTS\" class=\"headerlink\" title=\"SUPPORTS\"></a>SUPPORTS</h4><p>如果当前有事务，则使用事务；如果当前没有事务，则不使用事务。</p>\n<p>举例：领导没饭吃，我也没饭吃；领导有饭吃，我也有饭吃。</p>\n<h4 id=\"MANDATORY\"><a href=\"#MANDATORY\" class=\"headerlink\" title=\"MANDATORY\"></a>MANDATORY</h4><p>该传播属性强制必须存在一个事务，如果不存在，则抛出异常</p>\n<p>举例：领导必须管饭，不管饭没饭吃，我就不乐意了，就不干了（抛出异常）</p>\n<h4 id=\"REQUIRES-NEW\"><a href=\"#REQUIRES-NEW\" class=\"headerlink\" title=\"REQUIRES_NEW\"></a>REQUIRES_NEW</h4><p>如果当前有事务，则挂起该事务，并且自己创建一个新的事务给自己使用；</p>\n<p>如果当前没有事务，则同 REQUIRED</p>\n<p>举例：领导有饭吃，我偏不要，我自己买了自己吃</p>\n<h4 id=\"NOT-SUPPORTED\"><a href=\"#NOT-SUPPORTED\" class=\"headerlink\" title=\"NOT_SUPPORTED\"></a>NOT_SUPPORTED</h4><p>如果当前有事务，则把事务挂起，自己不适用事务去运行数据库操作</p>\n<p>举例：领导有饭吃，分一点给你，我太忙了，放一边，我不吃</p>\n<h4 id=\"NEVER\"><a href=\"#NEVER\" class=\"headerlink\" title=\"NEVER\"></a>NEVER</h4><p>如果当前有事务存在，则抛出异常</p>\n<p>举例：领导有饭给你吃，我不想吃，我热爱工作，我抛出异常</p>\n<h4 id=\"NESTED\"><a href=\"#NESTED\" class=\"headerlink\" title=\"NESTED\"></a>NESTED</h4><p>如果当前有事务，则开启子事务（嵌套事务），嵌套事务是独立提交或者回滚；</p>\n<p>如果当前没有事务，则同 REQUIRED。</p>\n<p>但是如果主事务提交，则会携带子事务一起提交。</p>\n<p>如果主事务回滚，则子事务会一起回滚。相反，子事务异常，则父事务可以回滚或不回滚。</p>\n<p>举例：领导决策不对，老板怪罪，领导带着小弟一同受罪。小弟出了差错，领导可以推卸责任。</p>"},{"title":"mysql命令","description":"","abbrlink":"22cff626","date":"2021-04-17T16:00:00.000Z","_content":"\n\n# sql语句\n\n\n\n<!-- more -->\n\n\n\n## database\n\n\n\n```SQL\n\n#显示所有数据库\n\nshow databases;\n\n#切换数据库\n\nuse 数据库名;\n\n#DDL 数据定义语言，DDL语言是隐性提交的，不能rollback\n\ncreate\n\n#DML 数据操纵语言\n\ninsert update delete\n\n```\n\n\n\n## select\n\n\n\n```SQL\n\nselect 字段 from 表名\n\nselect * from 表名    #查询所有\n\ndocker exec -it mysql bash     #进入到docker的mysql中\n\n```\n\n\n\n## delete\n\n\n\n```SQL\n\nDELETE FROM 表名称 WHERE 列名称 = 值\n\n```\n\n\n\n## 删除\n\n\n\n### delete\n\n\n\n```SQL\n\nupdate tableName set key1=value1,key2=value2 where \n\n```\n\n\n\n> delete不建议在生产上删除大规模数据，因为这会导致数据库性能下降。\n\n>\n\n> 原因是 使用delete删除数据会形成一个大事务，非常影响数据库的服务\n\n>\n\n> 如果使用delete误删除数据了，可以通过Flashback工具来进行恢复\n\n>\n\n> Flashback 恢复数据的原理，是修改 binlog 的内容，拿回原库重放。而能够使用这个方案的前提是，需要确保 binlog_format=row 和 binlog_row_image=FULL。\n\n>\n\n> 事前保证：\n\n>\n\n> 1. 把 sql_safe_updates 参数设置为 on。这样一来，如果我们忘记在 delete 或者 update 语句中写 where 条件，或者 where 条件里面没有包含索引字段的话，这条语句的执行就会报错\n\n> 2. 代码上线前，必须经过 SQL 审计。\n\n\n\n## add\n\n\n\n## drop\n\n\n\n```sql\n\ndrop table 表名字\n\n```\n\n\n\n\n\n\n\n## index\n\n\n\n```text\n\n#显示一个表的所有索引\n\nshow index from 表名;\n\n```\n\n\n\n## order by\n\n\n\n排序，默认是升序排列，想要降序的话使用desc\n\n\n\nwhere order by limit执行顺序：先where 然后order by 最后limit\n\n\n\n## show\n\n\n\n```SQL\n\n#可以列出MySQL服务器运行各种状态值，另外，查询MySQL服务器配置信息语句：\n\nshow global status;\n\n#\n\nshow variables like ‘%slow%‘；\n\nshow global status like ‘%slow%‘;\n\n#查看当前正在执行的语句\n\nshow processlist;\n\n#查看表的统计信息\n\n#rows是个估计值，data_length是表的聚簇索引的字节大小\n\nshow table status like “表名”; \n\n #查看从库状态\n\n show slave status；\n\n 里面有个seconds_behind_master 意思是从库和主库的延迟是多少秒\n\n```\n\n\n\n## join\n\n\n\n### inner join\n\n\n\n普通的联表查询就是内连接，就是两个表的交集\n\n\n\n### outer join\n\n\n\n一般连接条件放在on里面\n\n\n\n```SQL\n\nselect \n\ne.name,e.department,ps.product_name,ps.saled_amount\n\nfrom employee e left out join product_saled pa\n\non e.id=pa.employee_id \n\n```\n\n\n\n#### nest-loop join\n\n\n\n嵌套循环关联\n\n\n\n#### 左外连接\n\n\n\n如果左表的数据在右表里没有任何匹配的也要全部返回\n\n\n\n#### 右外连接\n\n\n\n如果右表的数据在左表里没有任何匹配的也要全部返回\n\n\n\n## limit\n\n\n\n主要作用就是限制回表到聚簇索引的次数，比如你select * from student ，会进行全表扫描，加个limit就会减少从联合索引查询的数据，然后再从主键索引中查找，性能会好一些\n\n\n\n```SQL\n\n#查询的是从6-15行\n\nlimit 5,10\n\n```","source":"_posts/mysql命令.md","raw":"---\ntitle: mysql命令\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 22cff626\ndate: 2021-04-18 00:00:00\n---\n\n\n# sql语句\n\n\n\n<!-- more -->\n\n\n\n## database\n\n\n\n```SQL\n\n#显示所有数据库\n\nshow databases;\n\n#切换数据库\n\nuse 数据库名;\n\n#DDL 数据定义语言，DDL语言是隐性提交的，不能rollback\n\ncreate\n\n#DML 数据操纵语言\n\ninsert update delete\n\n```\n\n\n\n## select\n\n\n\n```SQL\n\nselect 字段 from 表名\n\nselect * from 表名    #查询所有\n\ndocker exec -it mysql bash     #进入到docker的mysql中\n\n```\n\n\n\n## delete\n\n\n\n```SQL\n\nDELETE FROM 表名称 WHERE 列名称 = 值\n\n```\n\n\n\n## 删除\n\n\n\n### delete\n\n\n\n```SQL\n\nupdate tableName set key1=value1,key2=value2 where \n\n```\n\n\n\n> delete不建议在生产上删除大规模数据，因为这会导致数据库性能下降。\n\n>\n\n> 原因是 使用delete删除数据会形成一个大事务，非常影响数据库的服务\n\n>\n\n> 如果使用delete误删除数据了，可以通过Flashback工具来进行恢复\n\n>\n\n> Flashback 恢复数据的原理，是修改 binlog 的内容，拿回原库重放。而能够使用这个方案的前提是，需要确保 binlog_format=row 和 binlog_row_image=FULL。\n\n>\n\n> 事前保证：\n\n>\n\n> 1. 把 sql_safe_updates 参数设置为 on。这样一来，如果我们忘记在 delete 或者 update 语句中写 where 条件，或者 where 条件里面没有包含索引字段的话，这条语句的执行就会报错\n\n> 2. 代码上线前，必须经过 SQL 审计。\n\n\n\n## add\n\n\n\n## drop\n\n\n\n```sql\n\ndrop table 表名字\n\n```\n\n\n\n\n\n\n\n## index\n\n\n\n```text\n\n#显示一个表的所有索引\n\nshow index from 表名;\n\n```\n\n\n\n## order by\n\n\n\n排序，默认是升序排列，想要降序的话使用desc\n\n\n\nwhere order by limit执行顺序：先where 然后order by 最后limit\n\n\n\n## show\n\n\n\n```SQL\n\n#可以列出MySQL服务器运行各种状态值，另外，查询MySQL服务器配置信息语句：\n\nshow global status;\n\n#\n\nshow variables like ‘%slow%‘；\n\nshow global status like ‘%slow%‘;\n\n#查看当前正在执行的语句\n\nshow processlist;\n\n#查看表的统计信息\n\n#rows是个估计值，data_length是表的聚簇索引的字节大小\n\nshow table status like “表名”; \n\n #查看从库状态\n\n show slave status；\n\n 里面有个seconds_behind_master 意思是从库和主库的延迟是多少秒\n\n```\n\n\n\n## join\n\n\n\n### inner join\n\n\n\n普通的联表查询就是内连接，就是两个表的交集\n\n\n\n### outer join\n\n\n\n一般连接条件放在on里面\n\n\n\n```SQL\n\nselect \n\ne.name,e.department,ps.product_name,ps.saled_amount\n\nfrom employee e left out join product_saled pa\n\non e.id=pa.employee_id \n\n```\n\n\n\n#### nest-loop join\n\n\n\n嵌套循环关联\n\n\n\n#### 左外连接\n\n\n\n如果左表的数据在右表里没有任何匹配的也要全部返回\n\n\n\n#### 右外连接\n\n\n\n如果右表的数据在左表里没有任何匹配的也要全部返回\n\n\n\n## limit\n\n\n\n主要作用就是限制回表到聚簇索引的次数，比如你select * from student ，会进行全表扫描，加个limit就会减少从联合索引查询的数据，然后再从主键索引中查找，性能会好一些\n\n\n\n```SQL\n\n#查询的是从6-15行\n\nlimit 5,10\n\n```","slug":"mysql命令","published":1,"updated":"2025-03-02T03:37:34.393Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4q002nn0ukc50s9cl3","content":"<h1 id=\"sql语句\"><a href=\"#sql语句\" class=\"headerlink\" title=\"sql语句\"></a>sql语句</h1><span id=\"more\"></span>\n\n\n\n<h2 id=\"database\"><a href=\"#database\" class=\"headerlink\" title=\"database\"></a>database</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#显示所有数据库</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">show</span> databases;</span><br><span class=\"line\"></span><br><span class=\"line\">#切换数据库</span><br><span class=\"line\"></span><br><span class=\"line\">use 数据库名;</span><br><span class=\"line\"></span><br><span class=\"line\">#DDL 数据定义语言，DDL语言是隐性提交的，不能<span class=\"keyword\">rollback</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span></span><br><span class=\"line\"></span><br><span class=\"line\">#DML 数据操纵语言</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">update</span> <span class=\"keyword\">delete</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"select\"><a href=\"#select\" class=\"headerlink\" title=\"select\"></a>select</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> 字段 <span class=\"keyword\">from</span> 表名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> 表名    #查询所有</span><br><span class=\"line\"></span><br><span class=\"line\">docker <span class=\"keyword\">exec</span> <span class=\"operator\">-</span>it mysql bash     #进入到docker的mysql中</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> 表名称 <span class=\"keyword\">WHERE</span> 列名称 <span class=\"operator\">=</span> 值</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><h3 id=\"delete-1\"><a href=\"#delete-1\" class=\"headerlink\" title=\"delete\"></a>delete</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">update</span> tableName <span class=\"keyword\">set</span> key1<span class=\"operator\">=</span>value1,key2<span class=\"operator\">=</span>value2 <span class=\"keyword\">where</span> </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>delete不建议在生产上删除大规模数据，因为这会导致数据库性能下降。</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>原因是 使用delete删除数据会形成一个大事务，非常影响数据库的服务</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>如果使用delete误删除数据了，可以通过Flashback工具来进行恢复</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>Flashback 恢复数据的原理，是修改 binlog 的内容，拿回原库重放。而能够使用这个方案的前提是，需要确保 binlog_format&#x3D;row 和 binlog_row_image&#x3D;FULL。</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>事前保证：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ol>\n<li>把 sql_safe_updates 参数设置为 on。这样一来，如果我们忘记在 delete 或者 update 语句中写 where 条件，或者 where 条件里面没有包含索引字段的话，这条语句的执行就会报错</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>代码上线前，必须经过 SQL 审计。</li>\n</ol>\n</blockquote>\n<h2 id=\"add\"><a href=\"#add\" class=\"headerlink\" title=\"add\"></a>add</h2><h2 id=\"drop\"><a href=\"#drop\" class=\"headerlink\" title=\"drop\"></a>drop</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> 表名字</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"index\"><a href=\"#index\" class=\"headerlink\" title=\"index\"></a>index</h2><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#显示一个表的所有索引</span><br><span class=\"line\"></span><br><span class=\"line\">show index from 表名;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"order-by\"><a href=\"#order-by\" class=\"headerlink\" title=\"order by\"></a>order by</h2><p>排序，默认是升序排列，想要降序的话使用desc</p>\n<p>where order by limit执行顺序：先where 然后order by 最后limit</p>\n<h2 id=\"show\"><a href=\"#show\" class=\"headerlink\" title=\"show\"></a>show</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#可以列出MySQL服务器运行各种状态值，另外，查询MySQL服务器配置信息语句：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">global</span> status;</span><br><span class=\"line\"></span><br><span class=\"line\">#</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">like</span> ‘<span class=\"operator\">%</span>slow<span class=\"operator\">%</span>‘；</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">global</span> status <span class=\"keyword\">like</span> ‘<span class=\"operator\">%</span>slow<span class=\"operator\">%</span>‘;</span><br><span class=\"line\"></span><br><span class=\"line\">#查看当前正在执行的语句</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">show</span> processlist;</span><br><span class=\"line\"></span><br><span class=\"line\">#查看表的统计信息</span><br><span class=\"line\"></span><br><span class=\"line\">#<span class=\"keyword\">rows</span>是个估计值，data_length是表的聚簇索引的字节大小</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">table</span> status <span class=\"keyword\">like</span> “表名”; </span><br><span class=\"line\"></span><br><span class=\"line\"> #查看从库状态</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">show</span> slave status；</span><br><span class=\"line\"></span><br><span class=\"line\"> 里面有个seconds_behind_master 意思是从库和主库的延迟是多少秒</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join\"></a>join</h2><h3 id=\"inner-join\"><a href=\"#inner-join\" class=\"headerlink\" title=\"inner join\"></a>inner join</h3><p>普通的联表查询就是内连接，就是两个表的交集</p>\n<h3 id=\"outer-join\"><a href=\"#outer-join\" class=\"headerlink\" title=\"outer join\"></a>outer join</h3><p>一般连接条件放在on里面</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\"></span><br><span class=\"line\">e.name,e.department,ps.product_name,ps.saled_amount</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> employee e <span class=\"keyword\">left</span> <span class=\"keyword\">out</span> <span class=\"keyword\">join</span> product_saled pa</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span> e.id<span class=\"operator\">=</span>pa.employee_id </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"nest-loop-join\"><a href=\"#nest-loop-join\" class=\"headerlink\" title=\"nest-loop join\"></a>nest-loop join</h4><p>嵌套循环关联</p>\n<h4 id=\"左外连接\"><a href=\"#左外连接\" class=\"headerlink\" title=\"左外连接\"></a>左外连接</h4><p>如果左表的数据在右表里没有任何匹配的也要全部返回</p>\n<h4 id=\"右外连接\"><a href=\"#右外连接\" class=\"headerlink\" title=\"右外连接\"></a>右外连接</h4><p>如果右表的数据在左表里没有任何匹配的也要全部返回</p>\n<h2 id=\"limit\"><a href=\"#limit\" class=\"headerlink\" title=\"limit\"></a>limit</h2><p>主要作用就是限制回表到聚簇索引的次数，比如你select * from student ，会进行全表扫描，加个limit就会减少从联合索引查询的数据，然后再从主键索引中查找，性能会好一些</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#查询的是从<span class=\"number\">6</span><span class=\"number\">-15</span>行</span><br><span class=\"line\"></span><br><span class=\"line\">limit <span class=\"number\">5</span>,<span class=\"number\">10</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"sql语句\ndatabase\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n#显示所有数据库\n\nshow databases;\n\n#切换数据库\n\nuse 数据库名;\n\n#DDL 数据定义语言，DDL语言是隐性提交的，不能rollback\n\ncreate\n\n#DML 数据操纵语言\n\ninsert update delete\n\n\n\nselect\n1\n2\n3\n4\n5\n6\n7\n\n\n\nselect 字段 from 表名\n\nselect * from 表名    #查询所有\n\ndocker exec -it mysql bash     #进入到docker的m","more":"<h2 id=\"database\"><a href=\"#database\" class=\"headerlink\" title=\"database\"></a>database</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#显示所有数据库</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">show</span> databases;</span><br><span class=\"line\"></span><br><span class=\"line\">#切换数据库</span><br><span class=\"line\"></span><br><span class=\"line\">use 数据库名;</span><br><span class=\"line\"></span><br><span class=\"line\">#DDL 数据定义语言，DDL语言是隐性提交的，不能<span class=\"keyword\">rollback</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span></span><br><span class=\"line\"></span><br><span class=\"line\">#DML 数据操纵语言</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">update</span> <span class=\"keyword\">delete</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"select\"><a href=\"#select\" class=\"headerlink\" title=\"select\"></a>select</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> 字段 <span class=\"keyword\">from</span> 表名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> 表名    #查询所有</span><br><span class=\"line\"></span><br><span class=\"line\">docker <span class=\"keyword\">exec</span> <span class=\"operator\">-</span>it mysql bash     #进入到docker的mysql中</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> 表名称 <span class=\"keyword\">WHERE</span> 列名称 <span class=\"operator\">=</span> 值</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><h3 id=\"delete-1\"><a href=\"#delete-1\" class=\"headerlink\" title=\"delete\"></a>delete</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">update</span> tableName <span class=\"keyword\">set</span> key1<span class=\"operator\">=</span>value1,key2<span class=\"operator\">=</span>value2 <span class=\"keyword\">where</span> </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>delete不建议在生产上删除大规模数据，因为这会导致数据库性能下降。</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>原因是 使用delete删除数据会形成一个大事务，非常影响数据库的服务</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>如果使用delete误删除数据了，可以通过Flashback工具来进行恢复</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>Flashback 恢复数据的原理，是修改 binlog 的内容，拿回原库重放。而能够使用这个方案的前提是，需要确保 binlog_format&#x3D;row 和 binlog_row_image&#x3D;FULL。</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>事前保证：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ol>\n<li>把 sql_safe_updates 参数设置为 on。这样一来，如果我们忘记在 delete 或者 update 语句中写 where 条件，或者 where 条件里面没有包含索引字段的话，这条语句的执行就会报错</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>代码上线前，必须经过 SQL 审计。</li>\n</ol>\n</blockquote>\n<h2 id=\"add\"><a href=\"#add\" class=\"headerlink\" title=\"add\"></a>add</h2><h2 id=\"drop\"><a href=\"#drop\" class=\"headerlink\" title=\"drop\"></a>drop</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> 表名字</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"index\"><a href=\"#index\" class=\"headerlink\" title=\"index\"></a>index</h2><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#显示一个表的所有索引</span><br><span class=\"line\"></span><br><span class=\"line\">show index from 表名;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"order-by\"><a href=\"#order-by\" class=\"headerlink\" title=\"order by\"></a>order by</h2><p>排序，默认是升序排列，想要降序的话使用desc</p>\n<p>where order by limit执行顺序：先where 然后order by 最后limit</p>\n<h2 id=\"show\"><a href=\"#show\" class=\"headerlink\" title=\"show\"></a>show</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#可以列出MySQL服务器运行各种状态值，另外，查询MySQL服务器配置信息语句：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">global</span> status;</span><br><span class=\"line\"></span><br><span class=\"line\">#</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">like</span> ‘<span class=\"operator\">%</span>slow<span class=\"operator\">%</span>‘；</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">global</span> status <span class=\"keyword\">like</span> ‘<span class=\"operator\">%</span>slow<span class=\"operator\">%</span>‘;</span><br><span class=\"line\"></span><br><span class=\"line\">#查看当前正在执行的语句</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">show</span> processlist;</span><br><span class=\"line\"></span><br><span class=\"line\">#查看表的统计信息</span><br><span class=\"line\"></span><br><span class=\"line\">#<span class=\"keyword\">rows</span>是个估计值，data_length是表的聚簇索引的字节大小</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">table</span> status <span class=\"keyword\">like</span> “表名”; </span><br><span class=\"line\"></span><br><span class=\"line\"> #查看从库状态</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">show</span> slave status；</span><br><span class=\"line\"></span><br><span class=\"line\"> 里面有个seconds_behind_master 意思是从库和主库的延迟是多少秒</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join\"></a>join</h2><h3 id=\"inner-join\"><a href=\"#inner-join\" class=\"headerlink\" title=\"inner join\"></a>inner join</h3><p>普通的联表查询就是内连接，就是两个表的交集</p>\n<h3 id=\"outer-join\"><a href=\"#outer-join\" class=\"headerlink\" title=\"outer join\"></a>outer join</h3><p>一般连接条件放在on里面</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\"></span><br><span class=\"line\">e.name,e.department,ps.product_name,ps.saled_amount</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> employee e <span class=\"keyword\">left</span> <span class=\"keyword\">out</span> <span class=\"keyword\">join</span> product_saled pa</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span> e.id<span class=\"operator\">=</span>pa.employee_id </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"nest-loop-join\"><a href=\"#nest-loop-join\" class=\"headerlink\" title=\"nest-loop join\"></a>nest-loop join</h4><p>嵌套循环关联</p>\n<h4 id=\"左外连接\"><a href=\"#左外连接\" class=\"headerlink\" title=\"左外连接\"></a>左外连接</h4><p>如果左表的数据在右表里没有任何匹配的也要全部返回</p>\n<h4 id=\"右外连接\"><a href=\"#右外连接\" class=\"headerlink\" title=\"右外连接\"></a>右外连接</h4><p>如果右表的数据在左表里没有任何匹配的也要全部返回</p>\n<h2 id=\"limit\"><a href=\"#limit\" class=\"headerlink\" title=\"limit\"></a>limit</h2><p>主要作用就是限制回表到聚簇索引的次数，比如你select * from student ，会进行全表扫描，加个limit就会减少从联合索引查询的数据，然后再从主键索引中查找，性能会好一些</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#查询的是从<span class=\"number\">6</span><span class=\"number\">-15</span>行</span><br><span class=\"line\"></span><br><span class=\"line\">limit <span class=\"number\">5</span>,<span class=\"number\">10</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"mysql执行流程","description":"","abbrlink":"eb58c531","date":"2021-03-23T16:00:00.000Z","_content":"\n\n### 基本流程\n\n\n\n<!-- more -->\n\n\n\n![image-20210325191751923](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210325191751923.png)\n\n\n\n上图就是mysql的基本流程\n\n\n\n#### 连接器\n\n\n\n账号密码输入之后即可登录\n\n\n\n连接的方式分为两种：\n\n\n\n- 长连接：连接成功后，如果客户端持续有请求，则一直使用同一连接，\n\n- 短连接：指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个\n\n\n\n> 建立连接的过程通常是比较复杂的，所以我建议你在使用中要尽量减少建立连接的动作，也就是尽量使用长连接\n\n\n\n但是全部使用长连接后，你可能会发现，有些时候 MySQL 占用内存涨得特别快，这是因为 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现象看就是 MySQL 异常重启了。\n\n\n\n怎么解决这个问题呢？你可以考虑以下两种方案。\n\n\n\n1. 定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。\n\n2. 如果你用的是 MySQL 5.7 或更新版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection 来重新初始化连接资源。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。\n\n\n\n#### 解析器\n\n\n\n这个解析器的功能，其实很好理解，就是用来识别关键字的，比如常见的select delete create等等，同时也要检查你写的sql语句语法是否有问题，有问题的就是直接返回\n\n\n\n#### 优化器\n\n\n\n多索引的时候，一般会选择在索引里扫描行数比比较少的那个条件\n\n\n\n或者join连接的时候，先连接哪个表\n\n\n\n##### 成本计算\n\n\n\n![image-20210404081651310](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210404081651310.png)\n\n\n\n##### sql改写\n\n\n\n就是会对你的sql语句进行一些优化，更加明确sql语句的语义\n\n\n\n\n\n\n\n#### 执行器\n\n\n\n经过前面两个步骤之后，到这里mysql才真正开始执行你写的sql语句，但是它会判断当前这个用户是否有这个操作的权限，如果有，则执行sql语句，如果没有，则返回没有权限的错误\n\n\n\n> 引擎扫描行数跟 rows_examined 并不是完全相同的\n\n\n\n#### innodb引擎\n\n\n\n引擎执行sql语句的时候，也并不是直接去磁盘中查找的，而是要先在缓存中进行查找，在缓存中找不到的话，才会从磁盘中将数据加载到缓存中，然后从缓存中读取\n\n\n\n这个缓存层，在mysql中人们习惯称之为buffer pool\n\n\n\n#### Buffer Pool\n\n\n\n![image-20210328085710305](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210328085710305.png)\n\n\n\n上图其实就是buffer pool的执行流程\n\n\n\n1. 首先是判断数据是否在buffer pool中，如果在的话，直接更新数据，如果不在，则直接去磁盘中请求相应数据，然后刷入到buffer pool中，再从buffer pool中读取\n\n2. 更新undolog到磁盘中，undolog的作用其实非常清楚，它主要是用于回滚事务的，比如你这个事务没有执行成功，它就依靠undolog来进行回滚\n\n3. 将更新数据的操作写入到redolog buffer中\n\n4. 将更新数据的操作写入到binlog中\n\n5. 提交redolog的commit，将redolog写入到os cache中，然后根据redolog的参数来决定os cache的刷盘策略\n\n\n\n##### redolog\n\n\n\n作用：主要用来出现意外情况，数据还在内存当中，但是机器宕机的场景\n\n\n\nredo log里本质上记录的就是在对某个表空间的某个数据页的某个偏移量的地方修改了\n\n\n\n[redolog与binlog的区别](https://mp.weixin.qq.com/s/XTpoYW--6PTqotcC8tpF2A)\n\n\n\nredolog 在缓存中叫做redolog buffer，在磁盘中叫做 redolog file。\n\n\n\n> redologbuffer 默认为16MB\n\n\n\n两段式提交，数据刷新到内存，然后刷新到redolog buffer上，此时redolog是处于prepare阶段，然后mysql将数据刷新到binlog上，binlog写入成功之后，提交给redolog一个commit，此时redolog才算刚刚结束，接着要把redolog buffer刷入到os cache中，然后根据redolog的参数来决定os cache的刷盘策略\n\n\n\n> redolog buffer刷新到磁盘中是有方法的，在redolog buffer没有写满的时候，采用追加写的方式，当redolog buffer 写满的时候，\n\n\n\n了解了redo log的写入方式之后，我们发现主要完成的操作是redo log buffer 到磁盘的redo log file的写入过程，其中需要经过OS buffer进行中转。关于redo log buffer写入redo log file的时机，可以通过 参数innodb_flush_log_at_trx_commit 进行配置，各参数值含义如下：\n\n\n\n- l参数为0的时候，称为“延迟写”。事务提交时不会将redo log buffer中日志写入到OS buffer，而是每秒写入OS buffer并调用写入到redo log file中。换句话说，这种方式每秒会发起写入磁盘的操作，假设系统崩溃，只会丢失1秒钟的数据。\n\n\n\n- l参数为1 的时候，称为“实时写，实时刷”。事务每次提交都会将redo log buffer中的日志写入OS buffer并保存到redo log file中。其有点是，即使系统崩溃也不会丢失任何数据，缺点也很明显就是每次事务提交都要进行磁盘操作，性能较差。\n\n\n\n- l参数为2的时候，称为“实时写，延迟刷”。每次事务提交写入到OS buffer，然后是每秒将日志写入到redo log file。这样性能会好点，缺点是在系统崩溃的时候会丢失1秒中的事务数据。\n\n\n\n###### 结构\n\n\n\n日志类型（就是类似MLOG_1BYTE之类的），表空间ID，数据页号，数据页中的偏移量，具体修改的数据\n\n\n\nredo log就划分为了不同的类型，MLOG_1BYTE类型的日志指的就是修改了1个字节的值，MLOG_2BYTE类型的日志指的就是修改了2个字节的值，以此类推，还有修改了4个字节的值的日志类型，修改了8个字节的值的日志类型。\n\n\n\n当然，如果你要是一下子修改了一大串的值，类型就是MLOG_WRITE_STRING，就是代表你一下子在那个数据页的某个偏移量的位置插入或者修改了一大串的值。\n\n\n\nMLOG_WRITE_STRING类型的日志，因为不知道具体修改了多少字节的数据，所以其实会多一个修改数据长度，就告诉你他这次修改了多少字节的数据，如下所示他的格式：\n\n\n\n日志类型（就是类似MLOG_1BYTE之类的），表空间ID，数据页号，数据页中的偏移量，修改数据长度，具体修改的数据\n\n\n\n###### 组成\n\n\n\nredolog buffer里面有很多条数据，那它刷新到磁盘的时候，总不可能一条数据一条数据刷吧，那样性能就太差了，所以说有了redolog block这个数据结构\n\n\n\nredolog block中存放了许多个单行日志，刷新到磁盘按照redolog block来刷新\n\n\n\n> 一个block最多放496个自己的redo log日志\n\n>\n\n> ，一个redolog block 是512字节，这个redolog block的512字节分成三个部分\n\n>\n\n> 1. 12字节的header快头\n\n>    - 4个字节的block no，块的唯一编号\n\n>    - 2个字节的data length，就是block里面写入了多少字节数据\n\n>    - 2个字节的first record group 这个是说每个事务都会有多个redo log，就是一个redolog group，即一组redo log。那么在这个block里的第一组的redolog的偏移量，就是这个两个字节存储的\n\n>    - 4个字节的checkpoint on\n\n> 2. 496字节的body块体\n\n> 3. 4字节的trailer块尾\n\n\n\n![image-20210330064652434](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210330064652434.png)\n\n\n\n###### 事务\n\n\n\n在进行一个事务的时候，由于一个事务要进行多个增删改查的操作，所以一般都是将这些redolog先在别的地方存放，等到都转型完毕了，就把这一组redolog写入到redolog bufer中\n\n\n\n###### 刷盘时机\n\n\n\n1. 如果写入redolog bufer 的日志已经占据了redolog buffer总容量的一半，就会开始刷盘\n\n2. 一个事务提交的时候，必须把它那些redolog 所在的redolog block刷入到磁盘中去，只有这样，才可以保证事务提交之后，他提交的数据绝对不会丢失。因为redolog有日志记录，随时可以回复事务做的修改\n\n3. 后台线程定时刷新，有一个线程每个1秒就会吧redolog buffer中的redolog block刷入到磁盘文件\n\n4. mysql关闭的时候，redolog buffer全部刷新到磁盘中\n\n\n\n###### 参数\n\n\n\nInnoDB 提供了 innodb_flush_log_at_trx_commit 参数，它有三种可能取值：\n\n\n\n- 设置为 0 的时候，表示每次事务提交时都只是把 redo log 留在 redo log buffer 中 ;\n\n- 设置为 1 的时候，表示每次事务提交时都将 redo log 直接持久化到磁盘；\n\n- 设置为 2 的时候，表示每次事务提交时都只是把 redo log 写到 page cache。\n\n\n\n>一个没有提交的事务的 redo log，也是可能已经持久化到磁盘的。\n\n\n\n###### 组提交\n\n\n\n日志逻辑序列号（log sequence number，LSN）的概念。LSN 是单调递增的，用来对应 redo log 的一个个写入点。每次写入长度为 length 的 redo log， LSN 的值就会加上 length。\n\n\n\n>LSN 也会写到 InnoDB 的数据页中，来确保数据页不会被多次执行重复的 redo log。\n\n\n\n比如说有三个事务并发提交了，对应的 LSN 分别是 50、120 和 160,如果50的lsn对应的事务先到达os cache之后，它就会成为leader，等到它开始要进行刷盘的时候，此时这个组里面已经有三个事务了，lsn变为了160，所以这个事务写盘的时候，带的lsn是160，因此等 这个事务返回时，所有 LSN 小于等于 160 的 redo log，都已经被持久化到磁盘；\n\n\n\n###### 命令\n\n\n\n```bash\n\n#查看redolog目录\n\nshow variables like 'datadir'\n\n#设置redolog目录\n\ninnodb_log_group_home_dir\n\n#redolog默认为48MB，默认有两个日志文件innodb_log_files_in_group\n\ninnodb_log_file_size\n\n```\n\n\n\n##### binlog\n\n\n\n作用：主要用来进行主从备份的\n\n\n\n###### 刷盘方式\n\n\n\n- sync_binlog=0 的时候，表示每次提交事务都只 write，不 fsync；\n\n- sync_binlog=1 的时候，表示每次提交事务都会执行 fsync；\n\n- sync_binlog=N(N>1) 的时候，表示每次提交事务都 write，但累积 N 个事务后才 fsync。\n\n\n\n>在出现 IO 瓶颈的场景里，将 sync_binlog 设置成一个比较大的值，可以提升性能。在实际的业务场景中，考虑到丢失日志量的可控性，一般不建议将这个参数设成 0，比较常见的是将其设置为 100~1000 中的某个数值。但是，将 sync_binlog 设置为 N，对应的风险是：如果主机发生异常重启，会丢失最近 N 个事务的 binlog 日志。\n\n\n\n###### 组提交\n\n\n\n如果你想提升 binlog 组提交的效果，可以通过设置 binlog_group_commit_sync_delay 和 binlog_group_commit_sync_no_delay_count 来实现。\n\n\n\n- binlog_group_commit_sync_delay 参数，表示延迟多少微秒后才调用 fsync;\n\n\n\n- binlog_group_commit_sync_no_delay_count 参数，表示累积多少次以后才调用 fsync。、\n\n\n\n  > 这两个条件是或的关系，也就是说只要有一个满足条件就会调用 fsync。所以，当 binlog_group_commit_sync_delay 设置为 0 的时候，binlog_group_commit_sync_no_delay_count 也无效了。\n\n\n\n###### 格式\n\n\n\n主要分为三种格式，statement row和mixed\n\n\n\n- statement 格式下，记录到 binlog 里的是语句原文，就是你在mysql中执行的是什么语句，在binlog也是同样的语句，但是这样可能会导致出现索引不通的情况出现，当索引不通的时候，你在执行delete的时候还使用了limit，那么就会出现错误删除的情况\n\n- rpw 格式下，记录的是哪个表，删除的主键id是什么，所以是不会执行错误的，但是它同样有一个缺点，就是当数据量大的时候，非常消耗空间\n\n- ，mixed其实就是前两种格式的融合\n\n\n\n> mixed的来源\n\n>\n\n> - 因为有些 statement 格式的 binlog 可能会导致主备不一致，所以要使用 row 格式。\n\n> - 但 row 格式的缺点是，很占空间。比如你用一个 delete 语句删掉 10 万行数据，用 statement 的话就是一个 SQL 语句被记录到 binlog 中，占用几十个字节的空间。但如果用 row 格式的 binlog，就要把这 10 万条记录都写到 binlog 中。这样做，不仅会占用更大的空间，同时写 binlog 也要耗费 IO 资源，影响执行速度。\n\n> - 所以，MySQL 就取了个折中方案，也就是有了 mixed 格式的 binlog。mixed 格式的意思是，MySQL 自己会判断这条 SQL 语句是否可能引起主备不一致，如果有可能，就用 row 格式，否则就用 statement 格式。\n\n\n\n##### undolog\n\n\n\nundolog这个日志主要是用来进行事务回滚的，一般只有进行数据变动的时候才会有undolog，比如update insert delete，但是select 是没有的，因为select只是获取数据，并没有对数据进行变更\n\n\n\n比如你插入一条数据，undolog中记录的是 删除一条数据，是和你进行操作的行为是相反的\n\n\n\n###### 结构\n\n\n\n- 这条日志开始的问题只\n\n- 主键的各列长度和值，主键可能是你设置的表的主键，也可能是三个字段组成的联合主键，也有可能是myslq默认添加的row_id作为主键\n\n- 表id\n\n- undolog日志编号\n\n- undolog日志类型 ，比如 insert语句的undolog的日志类型是 TRX_UNDO_INSERT_REC\n\n- 这条日志的结束位置\n\n\n\n##### 区别\n\n\n\n1. redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。\n\n2. redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID=2 这一行的 c 字段加 1 ”\n\n3. redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。\n\n\n\n> 为什么 binlog cache 是每个线程自己维护的，而 redo log buffer 是全局共用的？\n\n>\n\n> MySQL 这么设计的主要原因是，binlog 是不能“被打断的”。一个事务的 binlog 必须连续写，因此要整个事务完成后，再一起写到文件里。\n\n\n\n##### 非双1\n\n\n\n一般情况下，把生产库改成“非双 1”配置，是设置 innodb_flush_logs_at_trx_commit=2、sync_binlog=1000。\n\n\n\n### **crash-safe**\n\n\n\n即在 InnoDB 存储引擎中，事务提交过程中任何阶段，MySQL突然奔溃，重启后都能保证事务的完整性，已提交的数据不会丢失，未提交完整的数据会自动进行回滚\n\n\n\n这个能力依赖的就是redo log和unod log两个日志。\n\n\n\n实际上数据库的 crash-safe 保证的是：\n\n\n\n- 如果客户端收到事务成功的消息，事务就一定持久化了；\n\n- 如果客户端收到事务失败（比如主键冲突、回滚等）的消息，事务就一定失败了；\n\n- 如果客户端收到“执行异常”的消息，应用需要重连后通过查询当前状态来继续后续的逻辑。此时数据库只需要保证内部（数据和日志之间，主库和备库之间）一致就可以了。\n\n\n\n### 磁盘文件\n\n\n\n磁盘文件有三个层级\n\n\n\n1. 一组数据组，是256个数据区\n\n2. 一个数据区，是64个数据页\n\n3. 一个数据页，是16kb\n\n\n\n在磁盘中把一页的数据叫做数据页，在缓存中，称之为缓存页\n\n\n","source":"_posts/mysql执行流程.md","raw":"---\ntitle: mysql执行流程\ndescription: ''\ntags:\n  - 无标签\nabbrlink: eb58c531\ndate: 2021-03-24 00:00:00\n---\n\n\n### 基本流程\n\n\n\n<!-- more -->\n\n\n\n![image-20210325191751923](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210325191751923.png)\n\n\n\n上图就是mysql的基本流程\n\n\n\n#### 连接器\n\n\n\n账号密码输入之后即可登录\n\n\n\n连接的方式分为两种：\n\n\n\n- 长连接：连接成功后，如果客户端持续有请求，则一直使用同一连接，\n\n- 短连接：指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个\n\n\n\n> 建立连接的过程通常是比较复杂的，所以我建议你在使用中要尽量减少建立连接的动作，也就是尽量使用长连接\n\n\n\n但是全部使用长连接后，你可能会发现，有些时候 MySQL 占用内存涨得特别快，这是因为 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现象看就是 MySQL 异常重启了。\n\n\n\n怎么解决这个问题呢？你可以考虑以下两种方案。\n\n\n\n1. 定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。\n\n2. 如果你用的是 MySQL 5.7 或更新版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection 来重新初始化连接资源。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。\n\n\n\n#### 解析器\n\n\n\n这个解析器的功能，其实很好理解，就是用来识别关键字的，比如常见的select delete create等等，同时也要检查你写的sql语句语法是否有问题，有问题的就是直接返回\n\n\n\n#### 优化器\n\n\n\n多索引的时候，一般会选择在索引里扫描行数比比较少的那个条件\n\n\n\n或者join连接的时候，先连接哪个表\n\n\n\n##### 成本计算\n\n\n\n![image-20210404081651310](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210404081651310.png)\n\n\n\n##### sql改写\n\n\n\n就是会对你的sql语句进行一些优化，更加明确sql语句的语义\n\n\n\n\n\n\n\n#### 执行器\n\n\n\n经过前面两个步骤之后，到这里mysql才真正开始执行你写的sql语句，但是它会判断当前这个用户是否有这个操作的权限，如果有，则执行sql语句，如果没有，则返回没有权限的错误\n\n\n\n> 引擎扫描行数跟 rows_examined 并不是完全相同的\n\n\n\n#### innodb引擎\n\n\n\n引擎执行sql语句的时候，也并不是直接去磁盘中查找的，而是要先在缓存中进行查找，在缓存中找不到的话，才会从磁盘中将数据加载到缓存中，然后从缓存中读取\n\n\n\n这个缓存层，在mysql中人们习惯称之为buffer pool\n\n\n\n#### Buffer Pool\n\n\n\n![image-20210328085710305](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210328085710305.png)\n\n\n\n上图其实就是buffer pool的执行流程\n\n\n\n1. 首先是判断数据是否在buffer pool中，如果在的话，直接更新数据，如果不在，则直接去磁盘中请求相应数据，然后刷入到buffer pool中，再从buffer pool中读取\n\n2. 更新undolog到磁盘中，undolog的作用其实非常清楚，它主要是用于回滚事务的，比如你这个事务没有执行成功，它就依靠undolog来进行回滚\n\n3. 将更新数据的操作写入到redolog buffer中\n\n4. 将更新数据的操作写入到binlog中\n\n5. 提交redolog的commit，将redolog写入到os cache中，然后根据redolog的参数来决定os cache的刷盘策略\n\n\n\n##### redolog\n\n\n\n作用：主要用来出现意外情况，数据还在内存当中，但是机器宕机的场景\n\n\n\nredo log里本质上记录的就是在对某个表空间的某个数据页的某个偏移量的地方修改了\n\n\n\n[redolog与binlog的区别](https://mp.weixin.qq.com/s/XTpoYW--6PTqotcC8tpF2A)\n\n\n\nredolog 在缓存中叫做redolog buffer，在磁盘中叫做 redolog file。\n\n\n\n> redologbuffer 默认为16MB\n\n\n\n两段式提交，数据刷新到内存，然后刷新到redolog buffer上，此时redolog是处于prepare阶段，然后mysql将数据刷新到binlog上，binlog写入成功之后，提交给redolog一个commit，此时redolog才算刚刚结束，接着要把redolog buffer刷入到os cache中，然后根据redolog的参数来决定os cache的刷盘策略\n\n\n\n> redolog buffer刷新到磁盘中是有方法的，在redolog buffer没有写满的时候，采用追加写的方式，当redolog buffer 写满的时候，\n\n\n\n了解了redo log的写入方式之后，我们发现主要完成的操作是redo log buffer 到磁盘的redo log file的写入过程，其中需要经过OS buffer进行中转。关于redo log buffer写入redo log file的时机，可以通过 参数innodb_flush_log_at_trx_commit 进行配置，各参数值含义如下：\n\n\n\n- l参数为0的时候，称为“延迟写”。事务提交时不会将redo log buffer中日志写入到OS buffer，而是每秒写入OS buffer并调用写入到redo log file中。换句话说，这种方式每秒会发起写入磁盘的操作，假设系统崩溃，只会丢失1秒钟的数据。\n\n\n\n- l参数为1 的时候，称为“实时写，实时刷”。事务每次提交都会将redo log buffer中的日志写入OS buffer并保存到redo log file中。其有点是，即使系统崩溃也不会丢失任何数据，缺点也很明显就是每次事务提交都要进行磁盘操作，性能较差。\n\n\n\n- l参数为2的时候，称为“实时写，延迟刷”。每次事务提交写入到OS buffer，然后是每秒将日志写入到redo log file。这样性能会好点，缺点是在系统崩溃的时候会丢失1秒中的事务数据。\n\n\n\n###### 结构\n\n\n\n日志类型（就是类似MLOG_1BYTE之类的），表空间ID，数据页号，数据页中的偏移量，具体修改的数据\n\n\n\nredo log就划分为了不同的类型，MLOG_1BYTE类型的日志指的就是修改了1个字节的值，MLOG_2BYTE类型的日志指的就是修改了2个字节的值，以此类推，还有修改了4个字节的值的日志类型，修改了8个字节的值的日志类型。\n\n\n\n当然，如果你要是一下子修改了一大串的值，类型就是MLOG_WRITE_STRING，就是代表你一下子在那个数据页的某个偏移量的位置插入或者修改了一大串的值。\n\n\n\nMLOG_WRITE_STRING类型的日志，因为不知道具体修改了多少字节的数据，所以其实会多一个修改数据长度，就告诉你他这次修改了多少字节的数据，如下所示他的格式：\n\n\n\n日志类型（就是类似MLOG_1BYTE之类的），表空间ID，数据页号，数据页中的偏移量，修改数据长度，具体修改的数据\n\n\n\n###### 组成\n\n\n\nredolog buffer里面有很多条数据，那它刷新到磁盘的时候，总不可能一条数据一条数据刷吧，那样性能就太差了，所以说有了redolog block这个数据结构\n\n\n\nredolog block中存放了许多个单行日志，刷新到磁盘按照redolog block来刷新\n\n\n\n> 一个block最多放496个自己的redo log日志\n\n>\n\n> ，一个redolog block 是512字节，这个redolog block的512字节分成三个部分\n\n>\n\n> 1. 12字节的header快头\n\n>    - 4个字节的block no，块的唯一编号\n\n>    - 2个字节的data length，就是block里面写入了多少字节数据\n\n>    - 2个字节的first record group 这个是说每个事务都会有多个redo log，就是一个redolog group，即一组redo log。那么在这个block里的第一组的redolog的偏移量，就是这个两个字节存储的\n\n>    - 4个字节的checkpoint on\n\n> 2. 496字节的body块体\n\n> 3. 4字节的trailer块尾\n\n\n\n![image-20210330064652434](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210330064652434.png)\n\n\n\n###### 事务\n\n\n\n在进行一个事务的时候，由于一个事务要进行多个增删改查的操作，所以一般都是将这些redolog先在别的地方存放，等到都转型完毕了，就把这一组redolog写入到redolog bufer中\n\n\n\n###### 刷盘时机\n\n\n\n1. 如果写入redolog bufer 的日志已经占据了redolog buffer总容量的一半，就会开始刷盘\n\n2. 一个事务提交的时候，必须把它那些redolog 所在的redolog block刷入到磁盘中去，只有这样，才可以保证事务提交之后，他提交的数据绝对不会丢失。因为redolog有日志记录，随时可以回复事务做的修改\n\n3. 后台线程定时刷新，有一个线程每个1秒就会吧redolog buffer中的redolog block刷入到磁盘文件\n\n4. mysql关闭的时候，redolog buffer全部刷新到磁盘中\n\n\n\n###### 参数\n\n\n\nInnoDB 提供了 innodb_flush_log_at_trx_commit 参数，它有三种可能取值：\n\n\n\n- 设置为 0 的时候，表示每次事务提交时都只是把 redo log 留在 redo log buffer 中 ;\n\n- 设置为 1 的时候，表示每次事务提交时都将 redo log 直接持久化到磁盘；\n\n- 设置为 2 的时候，表示每次事务提交时都只是把 redo log 写到 page cache。\n\n\n\n>一个没有提交的事务的 redo log，也是可能已经持久化到磁盘的。\n\n\n\n###### 组提交\n\n\n\n日志逻辑序列号（log sequence number，LSN）的概念。LSN 是单调递增的，用来对应 redo log 的一个个写入点。每次写入长度为 length 的 redo log， LSN 的值就会加上 length。\n\n\n\n>LSN 也会写到 InnoDB 的数据页中，来确保数据页不会被多次执行重复的 redo log。\n\n\n\n比如说有三个事务并发提交了，对应的 LSN 分别是 50、120 和 160,如果50的lsn对应的事务先到达os cache之后，它就会成为leader，等到它开始要进行刷盘的时候，此时这个组里面已经有三个事务了，lsn变为了160，所以这个事务写盘的时候，带的lsn是160，因此等 这个事务返回时，所有 LSN 小于等于 160 的 redo log，都已经被持久化到磁盘；\n\n\n\n###### 命令\n\n\n\n```bash\n\n#查看redolog目录\n\nshow variables like 'datadir'\n\n#设置redolog目录\n\ninnodb_log_group_home_dir\n\n#redolog默认为48MB，默认有两个日志文件innodb_log_files_in_group\n\ninnodb_log_file_size\n\n```\n\n\n\n##### binlog\n\n\n\n作用：主要用来进行主从备份的\n\n\n\n###### 刷盘方式\n\n\n\n- sync_binlog=0 的时候，表示每次提交事务都只 write，不 fsync；\n\n- sync_binlog=1 的时候，表示每次提交事务都会执行 fsync；\n\n- sync_binlog=N(N>1) 的时候，表示每次提交事务都 write，但累积 N 个事务后才 fsync。\n\n\n\n>在出现 IO 瓶颈的场景里，将 sync_binlog 设置成一个比较大的值，可以提升性能。在实际的业务场景中，考虑到丢失日志量的可控性，一般不建议将这个参数设成 0，比较常见的是将其设置为 100~1000 中的某个数值。但是，将 sync_binlog 设置为 N，对应的风险是：如果主机发生异常重启，会丢失最近 N 个事务的 binlog 日志。\n\n\n\n###### 组提交\n\n\n\n如果你想提升 binlog 组提交的效果，可以通过设置 binlog_group_commit_sync_delay 和 binlog_group_commit_sync_no_delay_count 来实现。\n\n\n\n- binlog_group_commit_sync_delay 参数，表示延迟多少微秒后才调用 fsync;\n\n\n\n- binlog_group_commit_sync_no_delay_count 参数，表示累积多少次以后才调用 fsync。、\n\n\n\n  > 这两个条件是或的关系，也就是说只要有一个满足条件就会调用 fsync。所以，当 binlog_group_commit_sync_delay 设置为 0 的时候，binlog_group_commit_sync_no_delay_count 也无效了。\n\n\n\n###### 格式\n\n\n\n主要分为三种格式，statement row和mixed\n\n\n\n- statement 格式下，记录到 binlog 里的是语句原文，就是你在mysql中执行的是什么语句，在binlog也是同样的语句，但是这样可能会导致出现索引不通的情况出现，当索引不通的时候，你在执行delete的时候还使用了limit，那么就会出现错误删除的情况\n\n- rpw 格式下，记录的是哪个表，删除的主键id是什么，所以是不会执行错误的，但是它同样有一个缺点，就是当数据量大的时候，非常消耗空间\n\n- ，mixed其实就是前两种格式的融合\n\n\n\n> mixed的来源\n\n>\n\n> - 因为有些 statement 格式的 binlog 可能会导致主备不一致，所以要使用 row 格式。\n\n> - 但 row 格式的缺点是，很占空间。比如你用一个 delete 语句删掉 10 万行数据，用 statement 的话就是一个 SQL 语句被记录到 binlog 中，占用几十个字节的空间。但如果用 row 格式的 binlog，就要把这 10 万条记录都写到 binlog 中。这样做，不仅会占用更大的空间，同时写 binlog 也要耗费 IO 资源，影响执行速度。\n\n> - 所以，MySQL 就取了个折中方案，也就是有了 mixed 格式的 binlog。mixed 格式的意思是，MySQL 自己会判断这条 SQL 语句是否可能引起主备不一致，如果有可能，就用 row 格式，否则就用 statement 格式。\n\n\n\n##### undolog\n\n\n\nundolog这个日志主要是用来进行事务回滚的，一般只有进行数据变动的时候才会有undolog，比如update insert delete，但是select 是没有的，因为select只是获取数据，并没有对数据进行变更\n\n\n\n比如你插入一条数据，undolog中记录的是 删除一条数据，是和你进行操作的行为是相反的\n\n\n\n###### 结构\n\n\n\n- 这条日志开始的问题只\n\n- 主键的各列长度和值，主键可能是你设置的表的主键，也可能是三个字段组成的联合主键，也有可能是myslq默认添加的row_id作为主键\n\n- 表id\n\n- undolog日志编号\n\n- undolog日志类型 ，比如 insert语句的undolog的日志类型是 TRX_UNDO_INSERT_REC\n\n- 这条日志的结束位置\n\n\n\n##### 区别\n\n\n\n1. redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。\n\n2. redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID=2 这一行的 c 字段加 1 ”\n\n3. redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。\n\n\n\n> 为什么 binlog cache 是每个线程自己维护的，而 redo log buffer 是全局共用的？\n\n>\n\n> MySQL 这么设计的主要原因是，binlog 是不能“被打断的”。一个事务的 binlog 必须连续写，因此要整个事务完成后，再一起写到文件里。\n\n\n\n##### 非双1\n\n\n\n一般情况下，把生产库改成“非双 1”配置，是设置 innodb_flush_logs_at_trx_commit=2、sync_binlog=1000。\n\n\n\n### **crash-safe**\n\n\n\n即在 InnoDB 存储引擎中，事务提交过程中任何阶段，MySQL突然奔溃，重启后都能保证事务的完整性，已提交的数据不会丢失，未提交完整的数据会自动进行回滚\n\n\n\n这个能力依赖的就是redo log和unod log两个日志。\n\n\n\n实际上数据库的 crash-safe 保证的是：\n\n\n\n- 如果客户端收到事务成功的消息，事务就一定持久化了；\n\n- 如果客户端收到事务失败（比如主键冲突、回滚等）的消息，事务就一定失败了；\n\n- 如果客户端收到“执行异常”的消息，应用需要重连后通过查询当前状态来继续后续的逻辑。此时数据库只需要保证内部（数据和日志之间，主库和备库之间）一致就可以了。\n\n\n\n### 磁盘文件\n\n\n\n磁盘文件有三个层级\n\n\n\n1. 一组数据组，是256个数据区\n\n2. 一个数据区，是64个数据页\n\n3. 一个数据页，是16kb\n\n\n\n在磁盘中把一页的数据叫做数据页，在缓存中，称之为缓存页\n\n\n","slug":"mysql执行流程","published":1,"updated":"2025-03-02T03:37:34.394Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4r002pn0uk7q7u1z13","content":"<h3 id=\"基本流程\"><a href=\"#基本流程\" class=\"headerlink\" title=\"基本流程\"></a>基本流程</h3><span id=\"more\"></span>\n\n\n\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210325191751923.png\" alt=\"image-20210325191751923\" loading=\"lazy\"></p>\n<p>上图就是mysql的基本流程</p>\n<h4 id=\"连接器\"><a href=\"#连接器\" class=\"headerlink\" title=\"连接器\"></a>连接器</h4><p>账号密码输入之后即可登录</p>\n<p>连接的方式分为两种：</p>\n<ul>\n<li><p>长连接：连接成功后，如果客户端持续有请求，则一直使用同一连接，</p>\n</li>\n<li><p>短连接：指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个</p>\n</li>\n</ul>\n<blockquote>\n<p>建立连接的过程通常是比较复杂的，所以我建议你在使用中要尽量减少建立连接的动作，也就是尽量使用长连接</p>\n</blockquote>\n<p>但是全部使用长连接后，你可能会发现，有些时候 MySQL 占用内存涨得特别快，这是因为 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现象看就是 MySQL 异常重启了。</p>\n<p>怎么解决这个问题呢？你可以考虑以下两种方案。</p>\n<ol>\n<li><p>定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。</p>\n</li>\n<li><p>如果你用的是 MySQL 5.7 或更新版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection 来重新初始化连接资源。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。</p>\n</li>\n</ol>\n<h4 id=\"解析器\"><a href=\"#解析器\" class=\"headerlink\" title=\"解析器\"></a>解析器</h4><p>这个解析器的功能，其实很好理解，就是用来识别关键字的，比如常见的select delete create等等，同时也要检查你写的sql语句语法是否有问题，有问题的就是直接返回</p>\n<h4 id=\"优化器\"><a href=\"#优化器\" class=\"headerlink\" title=\"优化器\"></a>优化器</h4><p>多索引的时候，一般会选择在索引里扫描行数比比较少的那个条件</p>\n<p>或者join连接的时候，先连接哪个表</p>\n<h5 id=\"成本计算\"><a href=\"#成本计算\" class=\"headerlink\" title=\"成本计算\"></a>成本计算</h5><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210404081651310.png\" alt=\"image-20210404081651310\" loading=\"lazy\"></p>\n<h5 id=\"sql改写\"><a href=\"#sql改写\" class=\"headerlink\" title=\"sql改写\"></a>sql改写</h5><p>就是会对你的sql语句进行一些优化，更加明确sql语句的语义</p>\n<h4 id=\"执行器\"><a href=\"#执行器\" class=\"headerlink\" title=\"执行器\"></a>执行器</h4><p>经过前面两个步骤之后，到这里mysql才真正开始执行你写的sql语句，但是它会判断当前这个用户是否有这个操作的权限，如果有，则执行sql语句，如果没有，则返回没有权限的错误</p>\n<blockquote>\n<p>引擎扫描行数跟 rows_examined 并不是完全相同的</p>\n</blockquote>\n<h4 id=\"innodb引擎\"><a href=\"#innodb引擎\" class=\"headerlink\" title=\"innodb引擎\"></a>innodb引擎</h4><p>引擎执行sql语句的时候，也并不是直接去磁盘中查找的，而是要先在缓存中进行查找，在缓存中找不到的话，才会从磁盘中将数据加载到缓存中，然后从缓存中读取</p>\n<p>这个缓存层，在mysql中人们习惯称之为buffer pool</p>\n<h4 id=\"Buffer-Pool\"><a href=\"#Buffer-Pool\" class=\"headerlink\" title=\"Buffer Pool\"></a>Buffer Pool</h4><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210328085710305.png\" alt=\"image-20210328085710305\" loading=\"lazy\"></p>\n<p>上图其实就是buffer pool的执行流程</p>\n<ol>\n<li><p>首先是判断数据是否在buffer pool中，如果在的话，直接更新数据，如果不在，则直接去磁盘中请求相应数据，然后刷入到buffer pool中，再从buffer pool中读取</p>\n</li>\n<li><p>更新undolog到磁盘中，undolog的作用其实非常清楚，它主要是用于回滚事务的，比如你这个事务没有执行成功，它就依靠undolog来进行回滚</p>\n</li>\n<li><p>将更新数据的操作写入到redolog buffer中</p>\n</li>\n<li><p>将更新数据的操作写入到binlog中</p>\n</li>\n<li><p>提交redolog的commit，将redolog写入到os cache中，然后根据redolog的参数来决定os cache的刷盘策略</p>\n</li>\n</ol>\n<h5 id=\"redolog\"><a href=\"#redolog\" class=\"headerlink\" title=\"redolog\"></a>redolog</h5><p>作用：主要用来出现意外情况，数据还在内存当中，但是机器宕机的场景</p>\n<p>redo log里本质上记录的就是在对某个表空间的某个数据页的某个偏移量的地方修改了</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvWFRwb1lXLS02UFRxb3RjQzh0cEYyQQ==\">redolog与binlog的区别<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>redolog 在缓存中叫做redolog buffer，在磁盘中叫做 redolog file。</p>\n<blockquote>\n<p>redologbuffer 默认为16MB</p>\n</blockquote>\n<p>两段式提交，数据刷新到内存，然后刷新到redolog buffer上，此时redolog是处于prepare阶段，然后mysql将数据刷新到binlog上，binlog写入成功之后，提交给redolog一个commit，此时redolog才算刚刚结束，接着要把redolog buffer刷入到os cache中，然后根据redolog的参数来决定os cache的刷盘策略</p>\n<blockquote>\n<p>redolog buffer刷新到磁盘中是有方法的，在redolog buffer没有写满的时候，采用追加写的方式，当redolog buffer 写满的时候，</p>\n</blockquote>\n<p>了解了redo log的写入方式之后，我们发现主要完成的操作是redo log buffer 到磁盘的redo log file的写入过程，其中需要经过OS buffer进行中转。关于redo log buffer写入redo log file的时机，可以通过 参数innodb_flush_log_at_trx_commit 进行配置，各参数值含义如下：</p>\n<ul>\n<li><p>l参数为0的时候，称为“延迟写”。事务提交时不会将redo log buffer中日志写入到OS buffer，而是每秒写入OS buffer并调用写入到redo log file中。换句话说，这种方式每秒会发起写入磁盘的操作，假设系统崩溃，只会丢失1秒钟的数据。</p>\n</li>\n<li><p>l参数为1 的时候，称为“实时写，实时刷”。事务每次提交都会将redo log buffer中的日志写入OS buffer并保存到redo log file中。其有点是，即使系统崩溃也不会丢失任何数据，缺点也很明显就是每次事务提交都要进行磁盘操作，性能较差。</p>\n</li>\n<li><p>l参数为2的时候，称为“实时写，延迟刷”。每次事务提交写入到OS buffer，然后是每秒将日志写入到redo log file。这样性能会好点，缺点是在系统崩溃的时候会丢失1秒中的事务数据。</p>\n</li>\n</ul>\n<h6 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h6><p>日志类型（就是类似MLOG_1BYTE之类的），表空间ID，数据页号，数据页中的偏移量，具体修改的数据</p>\n<p>redo log就划分为了不同的类型，MLOG_1BYTE类型的日志指的就是修改了1个字节的值，MLOG_2BYTE类型的日志指的就是修改了2个字节的值，以此类推，还有修改了4个字节的值的日志类型，修改了8个字节的值的日志类型。</p>\n<p>当然，如果你要是一下子修改了一大串的值，类型就是MLOG_WRITE_STRING，就是代表你一下子在那个数据页的某个偏移量的位置插入或者修改了一大串的值。</p>\n<p>MLOG_WRITE_STRING类型的日志，因为不知道具体修改了多少字节的数据，所以其实会多一个修改数据长度，就告诉你他这次修改了多少字节的数据，如下所示他的格式：</p>\n<p>日志类型（就是类似MLOG_1BYTE之类的），表空间ID，数据页号，数据页中的偏移量，修改数据长度，具体修改的数据</p>\n<h6 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h6><p>redolog buffer里面有很多条数据，那它刷新到磁盘的时候，总不可能一条数据一条数据刷吧，那样性能就太差了，所以说有了redolog block这个数据结构</p>\n<p>redolog block中存放了许多个单行日志，刷新到磁盘按照redolog block来刷新</p>\n<blockquote>\n<p>一个block最多放496个自己的redo log日志</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>，一个redolog block 是512字节，这个redolog block的512字节分成三个部分</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ol>\n<li>12字节的header快头</li>\n</ol>\n</blockquote>\n<blockquote>\n<ul>\n<li>4个字节的block no，块的唯一编号</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>2个字节的data length，就是block里面写入了多少字节数据</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>2个字节的first record group 这个是说每个事务都会有多个redo log，就是一个redolog group，即一组redo log。那么在这个block里的第一组的redolog的偏移量，就是这个两个字节存储的</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>4个字节的checkpoint on</li>\n</ul>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>496字节的body块体</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"3\">\n<li>4字节的trailer块尾</li>\n</ol>\n</blockquote>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210330064652434.png\" alt=\"image-20210330064652434\" loading=\"lazy\"></p>\n<h6 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h6><p>在进行一个事务的时候，由于一个事务要进行多个增删改查的操作，所以一般都是将这些redolog先在别的地方存放，等到都转型完毕了，就把这一组redolog写入到redolog bufer中</p>\n<h6 id=\"刷盘时机\"><a href=\"#刷盘时机\" class=\"headerlink\" title=\"刷盘时机\"></a>刷盘时机</h6><ol>\n<li><p>如果写入redolog bufer 的日志已经占据了redolog buffer总容量的一半，就会开始刷盘</p>\n</li>\n<li><p>一个事务提交的时候，必须把它那些redolog 所在的redolog block刷入到磁盘中去，只有这样，才可以保证事务提交之后，他提交的数据绝对不会丢失。因为redolog有日志记录，随时可以回复事务做的修改</p>\n</li>\n<li><p>后台线程定时刷新，有一个线程每个1秒就会吧redolog buffer中的redolog block刷入到磁盘文件</p>\n</li>\n<li><p>mysql关闭的时候，redolog buffer全部刷新到磁盘中</p>\n</li>\n</ol>\n<h6 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h6><p>InnoDB 提供了 innodb_flush_log_at_trx_commit 参数，它有三种可能取值：</p>\n<ul>\n<li><p>设置为 0 的时候，表示每次事务提交时都只是把 redo log 留在 redo log buffer 中 ;</p>\n</li>\n<li><p>设置为 1 的时候，表示每次事务提交时都将 redo log 直接持久化到磁盘；</p>\n</li>\n<li><p>设置为 2 的时候，表示每次事务提交时都只是把 redo log 写到 page cache。</p>\n</li>\n</ul>\n<blockquote>\n<p>一个没有提交的事务的 redo log，也是可能已经持久化到磁盘的。</p>\n</blockquote>\n<h6 id=\"组提交\"><a href=\"#组提交\" class=\"headerlink\" title=\"组提交\"></a>组提交</h6><p>日志逻辑序列号（log sequence number，LSN）的概念。LSN 是单调递增的，用来对应 redo log 的一个个写入点。每次写入长度为 length 的 redo log， LSN 的值就会加上 length。</p>\n<blockquote>\n<p>LSN 也会写到 InnoDB 的数据页中，来确保数据页不会被多次执行重复的 redo log。</p>\n</blockquote>\n<p>比如说有三个事务并发提交了，对应的 LSN 分别是 50、120 和 160,如果50的lsn对应的事务先到达os cache之后，它就会成为leader，等到它开始要进行刷盘的时候，此时这个组里面已经有三个事务了，lsn变为了160，所以这个事务写盘的时候，带的lsn是160，因此等 这个事务返回时，所有 LSN 小于等于 160 的 redo log，都已经被持久化到磁盘；</p>\n<h6 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看redolog目录</span></span><br><span class=\"line\"></span><br><span class=\"line\">show variables like <span class=\"string\">&#x27;datadir&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置redolog目录</span></span><br><span class=\"line\"></span><br><span class=\"line\">innodb_log_group_home_dir</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#redolog默认为48MB，默认有两个日志文件innodb_log_files_in_group</span></span><br><span class=\"line\"></span><br><span class=\"line\">innodb_log_file_size</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"binlog\"><a href=\"#binlog\" class=\"headerlink\" title=\"binlog\"></a>binlog</h5><p>作用：主要用来进行主从备份的</p>\n<h6 id=\"刷盘方式\"><a href=\"#刷盘方式\" class=\"headerlink\" title=\"刷盘方式\"></a>刷盘方式</h6><ul>\n<li><p>sync_binlog&#x3D;0 的时候，表示每次提交事务都只 write，不 fsync；</p>\n</li>\n<li><p>sync_binlog&#x3D;1 的时候，表示每次提交事务都会执行 fsync；</p>\n</li>\n<li><p>sync_binlog&#x3D;N(N&gt;1) 的时候，表示每次提交事务都 write，但累积 N 个事务后才 fsync。</p>\n</li>\n</ul>\n<blockquote>\n<p>在出现 IO 瓶颈的场景里，将 sync_binlog 设置成一个比较大的值，可以提升性能。在实际的业务场景中，考虑到丢失日志量的可控性，一般不建议将这个参数设成 0，比较常见的是将其设置为 100~1000 中的某个数值。但是，将 sync_binlog 设置为 N，对应的风险是：如果主机发生异常重启，会丢失最近 N 个事务的 binlog 日志。</p>\n</blockquote>\n<h6 id=\"组提交-1\"><a href=\"#组提交-1\" class=\"headerlink\" title=\"组提交\"></a>组提交</h6><p>如果你想提升 binlog 组提交的效果，可以通过设置 binlog_group_commit_sync_delay 和 binlog_group_commit_sync_no_delay_count 来实现。</p>\n<ul>\n<li><p>binlog_group_commit_sync_delay 参数，表示延迟多少微秒后才调用 fsync;</p>\n</li>\n<li><p>binlog_group_commit_sync_no_delay_count 参数，表示累积多少次以后才调用 fsync。、</p>\n<blockquote>\n<p>这两个条件是或的关系，也就是说只要有一个满足条件就会调用 fsync。所以，当 binlog_group_commit_sync_delay 设置为 0 的时候，binlog_group_commit_sync_no_delay_count 也无效了。</p>\n</blockquote>\n</li>\n</ul>\n<h6 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h6><p>主要分为三种格式，statement row和mixed</p>\n<ul>\n<li><p>statement 格式下，记录到 binlog 里的是语句原文，就是你在mysql中执行的是什么语句，在binlog也是同样的语句，但是这样可能会导致出现索引不通的情况出现，当索引不通的时候，你在执行delete的时候还使用了limit，那么就会出现错误删除的情况</p>\n</li>\n<li><p>rpw 格式下，记录的是哪个表，删除的主键id是什么，所以是不会执行错误的，但是它同样有一个缺点，就是当数据量大的时候，非常消耗空间</p>\n</li>\n<li><p>，mixed其实就是前两种格式的融合</p>\n</li>\n</ul>\n<blockquote>\n<p>mixed的来源</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ul>\n<li>因为有些 statement 格式的 binlog 可能会导致主备不一致，所以要使用 row 格式。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>但 row 格式的缺点是，很占空间。比如你用一个 delete 语句删掉 10 万行数据，用 statement 的话就是一个 SQL 语句被记录到 binlog 中，占用几十个字节的空间。但如果用 row 格式的 binlog，就要把这 10 万条记录都写到 binlog 中。这样做，不仅会占用更大的空间，同时写 binlog 也要耗费 IO 资源，影响执行速度。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>所以，MySQL 就取了个折中方案，也就是有了 mixed 格式的 binlog。mixed 格式的意思是，MySQL 自己会判断这条 SQL 语句是否可能引起主备不一致，如果有可能，就用 row 格式，否则就用 statement 格式。</li>\n</ul>\n</blockquote>\n<h5 id=\"undolog\"><a href=\"#undolog\" class=\"headerlink\" title=\"undolog\"></a>undolog</h5><p>undolog这个日志主要是用来进行事务回滚的，一般只有进行数据变动的时候才会有undolog，比如update insert delete，但是select 是没有的，因为select只是获取数据，并没有对数据进行变更</p>\n<p>比如你插入一条数据，undolog中记录的是 删除一条数据，是和你进行操作的行为是相反的</p>\n<h6 id=\"结构-1\"><a href=\"#结构-1\" class=\"headerlink\" title=\"结构\"></a>结构</h6><ul>\n<li><p>这条日志开始的问题只</p>\n</li>\n<li><p>主键的各列长度和值，主键可能是你设置的表的主键，也可能是三个字段组成的联合主键，也有可能是myslq默认添加的row_id作为主键</p>\n</li>\n<li><p>表id</p>\n</li>\n<li><p>undolog日志编号</p>\n</li>\n<li><p>undolog日志类型 ，比如 insert语句的undolog的日志类型是 TRX_UNDO_INSERT_REC</p>\n</li>\n<li><p>这条日志的结束位置</p>\n</li>\n</ul>\n<h5 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h5><ol>\n<li><p>redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。</p>\n</li>\n<li><p>redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID&#x3D;2 这一行的 c 字段加 1 ”</p>\n</li>\n<li><p>redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</p>\n</li>\n</ol>\n<blockquote>\n<p>为什么 binlog cache 是每个线程自己维护的，而 redo log buffer 是全局共用的？</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>MySQL 这么设计的主要原因是，binlog 是不能“被打断的”。一个事务的 binlog 必须连续写，因此要整个事务完成后，再一起写到文件里。</p>\n</blockquote>\n<h5 id=\"非双1\"><a href=\"#非双1\" class=\"headerlink\" title=\"非双1\"></a>非双1</h5><p>一般情况下，把生产库改成“非双 1”配置，是设置 innodb_flush_logs_at_trx_commit&#x3D;2、sync_binlog&#x3D;1000。</p>\n<h3 id=\"crash-safe\"><a href=\"#crash-safe\" class=\"headerlink\" title=\"crash-safe\"></a><strong>crash-safe</strong></h3><p>即在 InnoDB 存储引擎中，事务提交过程中任何阶段，MySQL突然奔溃，重启后都能保证事务的完整性，已提交的数据不会丢失，未提交完整的数据会自动进行回滚</p>\n<p>这个能力依赖的就是redo log和unod log两个日志。</p>\n<p>实际上数据库的 crash-safe 保证的是：</p>\n<ul>\n<li><p>如果客户端收到事务成功的消息，事务就一定持久化了；</p>\n</li>\n<li><p>如果客户端收到事务失败（比如主键冲突、回滚等）的消息，事务就一定失败了；</p>\n</li>\n<li><p>如果客户端收到“执行异常”的消息，应用需要重连后通过查询当前状态来继续后续的逻辑。此时数据库只需要保证内部（数据和日志之间，主库和备库之间）一致就可以了。</p>\n</li>\n</ul>\n<h3 id=\"磁盘文件\"><a href=\"#磁盘文件\" class=\"headerlink\" title=\"磁盘文件\"></a>磁盘文件</h3><p>磁盘文件有三个层级</p>\n<ol>\n<li><p>一组数据组，是256个数据区</p>\n</li>\n<li><p>一个数据区，是64个数据页</p>\n</li>\n<li><p>一个数据页，是16kb</p>\n</li>\n</ol>\n<p>在磁盘中把一页的数据叫做数据页，在缓存中，称之为缓存页</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"基本流程\n\n\n上图就是mysql的基本流程\n\n连接器\n账号密码输入之后即可登录\n\n连接的方式分为两种：\n\n * 长连接：连接成功后，如果客户端持续有请求，则一直使用同一连接，\n   \n   \n * 短连接：指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个\n   \n   \n\n建立连接的过程通常是比较复杂的，所以我建议你在使用中要尽量减少建立连接的动作，也就是尽量使用长连接\n\n但是全部使用长连接后，你可能会发现，有些时候 MySQL 占用内存涨得特别快，这是因为 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才释放。所以如果长连接累积下来，可能","more":"<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210325191751923.png\" alt=\"image-20210325191751923\" loading=\"lazy\"></p>\n<p>上图就是mysql的基本流程</p>\n<h4 id=\"连接器\"><a href=\"#连接器\" class=\"headerlink\" title=\"连接器\"></a>连接器</h4><p>账号密码输入之后即可登录</p>\n<p>连接的方式分为两种：</p>\n<ul>\n<li><p>长连接：连接成功后，如果客户端持续有请求，则一直使用同一连接，</p>\n</li>\n<li><p>短连接：指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个</p>\n</li>\n</ul>\n<blockquote>\n<p>建立连接的过程通常是比较复杂的，所以我建议你在使用中要尽量减少建立连接的动作，也就是尽量使用长连接</p>\n</blockquote>\n<p>但是全部使用长连接后，你可能会发现，有些时候 MySQL 占用内存涨得特别快，这是因为 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现象看就是 MySQL 异常重启了。</p>\n<p>怎么解决这个问题呢？你可以考虑以下两种方案。</p>\n<ol>\n<li><p>定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。</p>\n</li>\n<li><p>如果你用的是 MySQL 5.7 或更新版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection 来重新初始化连接资源。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。</p>\n</li>\n</ol>\n<h4 id=\"解析器\"><a href=\"#解析器\" class=\"headerlink\" title=\"解析器\"></a>解析器</h4><p>这个解析器的功能，其实很好理解，就是用来识别关键字的，比如常见的select delete create等等，同时也要检查你写的sql语句语法是否有问题，有问题的就是直接返回</p>\n<h4 id=\"优化器\"><a href=\"#优化器\" class=\"headerlink\" title=\"优化器\"></a>优化器</h4><p>多索引的时候，一般会选择在索引里扫描行数比比较少的那个条件</p>\n<p>或者join连接的时候，先连接哪个表</p>\n<h5 id=\"成本计算\"><a href=\"#成本计算\" class=\"headerlink\" title=\"成本计算\"></a>成本计算</h5><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210404081651310.png\" alt=\"image-20210404081651310\" loading=\"lazy\"></p>\n<h5 id=\"sql改写\"><a href=\"#sql改写\" class=\"headerlink\" title=\"sql改写\"></a>sql改写</h5><p>就是会对你的sql语句进行一些优化，更加明确sql语句的语义</p>\n<h4 id=\"执行器\"><a href=\"#执行器\" class=\"headerlink\" title=\"执行器\"></a>执行器</h4><p>经过前面两个步骤之后，到这里mysql才真正开始执行你写的sql语句，但是它会判断当前这个用户是否有这个操作的权限，如果有，则执行sql语句，如果没有，则返回没有权限的错误</p>\n<blockquote>\n<p>引擎扫描行数跟 rows_examined 并不是完全相同的</p>\n</blockquote>\n<h4 id=\"innodb引擎\"><a href=\"#innodb引擎\" class=\"headerlink\" title=\"innodb引擎\"></a>innodb引擎</h4><p>引擎执行sql语句的时候，也并不是直接去磁盘中查找的，而是要先在缓存中进行查找，在缓存中找不到的话，才会从磁盘中将数据加载到缓存中，然后从缓存中读取</p>\n<p>这个缓存层，在mysql中人们习惯称之为buffer pool</p>\n<h4 id=\"Buffer-Pool\"><a href=\"#Buffer-Pool\" class=\"headerlink\" title=\"Buffer Pool\"></a>Buffer Pool</h4><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210328085710305.png\" alt=\"image-20210328085710305\" loading=\"lazy\"></p>\n<p>上图其实就是buffer pool的执行流程</p>\n<ol>\n<li><p>首先是判断数据是否在buffer pool中，如果在的话，直接更新数据，如果不在，则直接去磁盘中请求相应数据，然后刷入到buffer pool中，再从buffer pool中读取</p>\n</li>\n<li><p>更新undolog到磁盘中，undolog的作用其实非常清楚，它主要是用于回滚事务的，比如你这个事务没有执行成功，它就依靠undolog来进行回滚</p>\n</li>\n<li><p>将更新数据的操作写入到redolog buffer中</p>\n</li>\n<li><p>将更新数据的操作写入到binlog中</p>\n</li>\n<li><p>提交redolog的commit，将redolog写入到os cache中，然后根据redolog的参数来决定os cache的刷盘策略</p>\n</li>\n</ol>\n<h5 id=\"redolog\"><a href=\"#redolog\" class=\"headerlink\" title=\"redolog\"></a>redolog</h5><p>作用：主要用来出现意外情况，数据还在内存当中，但是机器宕机的场景</p>\n<p>redo log里本质上记录的就是在对某个表空间的某个数据页的某个偏移量的地方修改了</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvWFRwb1lXLS02UFRxb3RjQzh0cEYyQQ==\">redolog与binlog的区别<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>redolog 在缓存中叫做redolog buffer，在磁盘中叫做 redolog file。</p>\n<blockquote>\n<p>redologbuffer 默认为16MB</p>\n</blockquote>\n<p>两段式提交，数据刷新到内存，然后刷新到redolog buffer上，此时redolog是处于prepare阶段，然后mysql将数据刷新到binlog上，binlog写入成功之后，提交给redolog一个commit，此时redolog才算刚刚结束，接着要把redolog buffer刷入到os cache中，然后根据redolog的参数来决定os cache的刷盘策略</p>\n<blockquote>\n<p>redolog buffer刷新到磁盘中是有方法的，在redolog buffer没有写满的时候，采用追加写的方式，当redolog buffer 写满的时候，</p>\n</blockquote>\n<p>了解了redo log的写入方式之后，我们发现主要完成的操作是redo log buffer 到磁盘的redo log file的写入过程，其中需要经过OS buffer进行中转。关于redo log buffer写入redo log file的时机，可以通过 参数innodb_flush_log_at_trx_commit 进行配置，各参数值含义如下：</p>\n<ul>\n<li><p>l参数为0的时候，称为“延迟写”。事务提交时不会将redo log buffer中日志写入到OS buffer，而是每秒写入OS buffer并调用写入到redo log file中。换句话说，这种方式每秒会发起写入磁盘的操作，假设系统崩溃，只会丢失1秒钟的数据。</p>\n</li>\n<li><p>l参数为1 的时候，称为“实时写，实时刷”。事务每次提交都会将redo log buffer中的日志写入OS buffer并保存到redo log file中。其有点是，即使系统崩溃也不会丢失任何数据，缺点也很明显就是每次事务提交都要进行磁盘操作，性能较差。</p>\n</li>\n<li><p>l参数为2的时候，称为“实时写，延迟刷”。每次事务提交写入到OS buffer，然后是每秒将日志写入到redo log file。这样性能会好点，缺点是在系统崩溃的时候会丢失1秒中的事务数据。</p>\n</li>\n</ul>\n<h6 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h6><p>日志类型（就是类似MLOG_1BYTE之类的），表空间ID，数据页号，数据页中的偏移量，具体修改的数据</p>\n<p>redo log就划分为了不同的类型，MLOG_1BYTE类型的日志指的就是修改了1个字节的值，MLOG_2BYTE类型的日志指的就是修改了2个字节的值，以此类推，还有修改了4个字节的值的日志类型，修改了8个字节的值的日志类型。</p>\n<p>当然，如果你要是一下子修改了一大串的值，类型就是MLOG_WRITE_STRING，就是代表你一下子在那个数据页的某个偏移量的位置插入或者修改了一大串的值。</p>\n<p>MLOG_WRITE_STRING类型的日志，因为不知道具体修改了多少字节的数据，所以其实会多一个修改数据长度，就告诉你他这次修改了多少字节的数据，如下所示他的格式：</p>\n<p>日志类型（就是类似MLOG_1BYTE之类的），表空间ID，数据页号，数据页中的偏移量，修改数据长度，具体修改的数据</p>\n<h6 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h6><p>redolog buffer里面有很多条数据，那它刷新到磁盘的时候，总不可能一条数据一条数据刷吧，那样性能就太差了，所以说有了redolog block这个数据结构</p>\n<p>redolog block中存放了许多个单行日志，刷新到磁盘按照redolog block来刷新</p>\n<blockquote>\n<p>一个block最多放496个自己的redo log日志</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>，一个redolog block 是512字节，这个redolog block的512字节分成三个部分</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ol>\n<li>12字节的header快头</li>\n</ol>\n</blockquote>\n<blockquote>\n<ul>\n<li>4个字节的block no，块的唯一编号</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>2个字节的data length，就是block里面写入了多少字节数据</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>2个字节的first record group 这个是说每个事务都会有多个redo log，就是一个redolog group，即一组redo log。那么在这个block里的第一组的redolog的偏移量，就是这个两个字节存储的</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>4个字节的checkpoint on</li>\n</ul>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>496字节的body块体</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"3\">\n<li>4字节的trailer块尾</li>\n</ol>\n</blockquote>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210330064652434.png\" alt=\"image-20210330064652434\" loading=\"lazy\"></p>\n<h6 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h6><p>在进行一个事务的时候，由于一个事务要进行多个增删改查的操作，所以一般都是将这些redolog先在别的地方存放，等到都转型完毕了，就把这一组redolog写入到redolog bufer中</p>\n<h6 id=\"刷盘时机\"><a href=\"#刷盘时机\" class=\"headerlink\" title=\"刷盘时机\"></a>刷盘时机</h6><ol>\n<li><p>如果写入redolog bufer 的日志已经占据了redolog buffer总容量的一半，就会开始刷盘</p>\n</li>\n<li><p>一个事务提交的时候，必须把它那些redolog 所在的redolog block刷入到磁盘中去，只有这样，才可以保证事务提交之后，他提交的数据绝对不会丢失。因为redolog有日志记录，随时可以回复事务做的修改</p>\n</li>\n<li><p>后台线程定时刷新，有一个线程每个1秒就会吧redolog buffer中的redolog block刷入到磁盘文件</p>\n</li>\n<li><p>mysql关闭的时候，redolog buffer全部刷新到磁盘中</p>\n</li>\n</ol>\n<h6 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h6><p>InnoDB 提供了 innodb_flush_log_at_trx_commit 参数，它有三种可能取值：</p>\n<ul>\n<li><p>设置为 0 的时候，表示每次事务提交时都只是把 redo log 留在 redo log buffer 中 ;</p>\n</li>\n<li><p>设置为 1 的时候，表示每次事务提交时都将 redo log 直接持久化到磁盘；</p>\n</li>\n<li><p>设置为 2 的时候，表示每次事务提交时都只是把 redo log 写到 page cache。</p>\n</li>\n</ul>\n<blockquote>\n<p>一个没有提交的事务的 redo log，也是可能已经持久化到磁盘的。</p>\n</blockquote>\n<h6 id=\"组提交\"><a href=\"#组提交\" class=\"headerlink\" title=\"组提交\"></a>组提交</h6><p>日志逻辑序列号（log sequence number，LSN）的概念。LSN 是单调递增的，用来对应 redo log 的一个个写入点。每次写入长度为 length 的 redo log， LSN 的值就会加上 length。</p>\n<blockquote>\n<p>LSN 也会写到 InnoDB 的数据页中，来确保数据页不会被多次执行重复的 redo log。</p>\n</blockquote>\n<p>比如说有三个事务并发提交了，对应的 LSN 分别是 50、120 和 160,如果50的lsn对应的事务先到达os cache之后，它就会成为leader，等到它开始要进行刷盘的时候，此时这个组里面已经有三个事务了，lsn变为了160，所以这个事务写盘的时候，带的lsn是160，因此等 这个事务返回时，所有 LSN 小于等于 160 的 redo log，都已经被持久化到磁盘；</p>\n<h6 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看redolog目录</span></span><br><span class=\"line\"></span><br><span class=\"line\">show variables like <span class=\"string\">&#x27;datadir&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置redolog目录</span></span><br><span class=\"line\"></span><br><span class=\"line\">innodb_log_group_home_dir</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#redolog默认为48MB，默认有两个日志文件innodb_log_files_in_group</span></span><br><span class=\"line\"></span><br><span class=\"line\">innodb_log_file_size</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"binlog\"><a href=\"#binlog\" class=\"headerlink\" title=\"binlog\"></a>binlog</h5><p>作用：主要用来进行主从备份的</p>\n<h6 id=\"刷盘方式\"><a href=\"#刷盘方式\" class=\"headerlink\" title=\"刷盘方式\"></a>刷盘方式</h6><ul>\n<li><p>sync_binlog&#x3D;0 的时候，表示每次提交事务都只 write，不 fsync；</p>\n</li>\n<li><p>sync_binlog&#x3D;1 的时候，表示每次提交事务都会执行 fsync；</p>\n</li>\n<li><p>sync_binlog&#x3D;N(N&gt;1) 的时候，表示每次提交事务都 write，但累积 N 个事务后才 fsync。</p>\n</li>\n</ul>\n<blockquote>\n<p>在出现 IO 瓶颈的场景里，将 sync_binlog 设置成一个比较大的值，可以提升性能。在实际的业务场景中，考虑到丢失日志量的可控性，一般不建议将这个参数设成 0，比较常见的是将其设置为 100~1000 中的某个数值。但是，将 sync_binlog 设置为 N，对应的风险是：如果主机发生异常重启，会丢失最近 N 个事务的 binlog 日志。</p>\n</blockquote>\n<h6 id=\"组提交-1\"><a href=\"#组提交-1\" class=\"headerlink\" title=\"组提交\"></a>组提交</h6><p>如果你想提升 binlog 组提交的效果，可以通过设置 binlog_group_commit_sync_delay 和 binlog_group_commit_sync_no_delay_count 来实现。</p>\n<ul>\n<li><p>binlog_group_commit_sync_delay 参数，表示延迟多少微秒后才调用 fsync;</p>\n</li>\n<li><p>binlog_group_commit_sync_no_delay_count 参数，表示累积多少次以后才调用 fsync。、</p>\n<blockquote>\n<p>这两个条件是或的关系，也就是说只要有一个满足条件就会调用 fsync。所以，当 binlog_group_commit_sync_delay 设置为 0 的时候，binlog_group_commit_sync_no_delay_count 也无效了。</p>\n</blockquote>\n</li>\n</ul>\n<h6 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h6><p>主要分为三种格式，statement row和mixed</p>\n<ul>\n<li><p>statement 格式下，记录到 binlog 里的是语句原文，就是你在mysql中执行的是什么语句，在binlog也是同样的语句，但是这样可能会导致出现索引不通的情况出现，当索引不通的时候，你在执行delete的时候还使用了limit，那么就会出现错误删除的情况</p>\n</li>\n<li><p>rpw 格式下，记录的是哪个表，删除的主键id是什么，所以是不会执行错误的，但是它同样有一个缺点，就是当数据量大的时候，非常消耗空间</p>\n</li>\n<li><p>，mixed其实就是前两种格式的融合</p>\n</li>\n</ul>\n<blockquote>\n<p>mixed的来源</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ul>\n<li>因为有些 statement 格式的 binlog 可能会导致主备不一致，所以要使用 row 格式。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>但 row 格式的缺点是，很占空间。比如你用一个 delete 语句删掉 10 万行数据，用 statement 的话就是一个 SQL 语句被记录到 binlog 中，占用几十个字节的空间。但如果用 row 格式的 binlog，就要把这 10 万条记录都写到 binlog 中。这样做，不仅会占用更大的空间，同时写 binlog 也要耗费 IO 资源，影响执行速度。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>所以，MySQL 就取了个折中方案，也就是有了 mixed 格式的 binlog。mixed 格式的意思是，MySQL 自己会判断这条 SQL 语句是否可能引起主备不一致，如果有可能，就用 row 格式，否则就用 statement 格式。</li>\n</ul>\n</blockquote>\n<h5 id=\"undolog\"><a href=\"#undolog\" class=\"headerlink\" title=\"undolog\"></a>undolog</h5><p>undolog这个日志主要是用来进行事务回滚的，一般只有进行数据变动的时候才会有undolog，比如update insert delete，但是select 是没有的，因为select只是获取数据，并没有对数据进行变更</p>\n<p>比如你插入一条数据，undolog中记录的是 删除一条数据，是和你进行操作的行为是相反的</p>\n<h6 id=\"结构-1\"><a href=\"#结构-1\" class=\"headerlink\" title=\"结构\"></a>结构</h6><ul>\n<li><p>这条日志开始的问题只</p>\n</li>\n<li><p>主键的各列长度和值，主键可能是你设置的表的主键，也可能是三个字段组成的联合主键，也有可能是myslq默认添加的row_id作为主键</p>\n</li>\n<li><p>表id</p>\n</li>\n<li><p>undolog日志编号</p>\n</li>\n<li><p>undolog日志类型 ，比如 insert语句的undolog的日志类型是 TRX_UNDO_INSERT_REC</p>\n</li>\n<li><p>这条日志的结束位置</p>\n</li>\n</ul>\n<h5 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h5><ol>\n<li><p>redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。</p>\n</li>\n<li><p>redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID&#x3D;2 这一行的 c 字段加 1 ”</p>\n</li>\n<li><p>redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</p>\n</li>\n</ol>\n<blockquote>\n<p>为什么 binlog cache 是每个线程自己维护的，而 redo log buffer 是全局共用的？</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>MySQL 这么设计的主要原因是，binlog 是不能“被打断的”。一个事务的 binlog 必须连续写，因此要整个事务完成后，再一起写到文件里。</p>\n</blockquote>\n<h5 id=\"非双1\"><a href=\"#非双1\" class=\"headerlink\" title=\"非双1\"></a>非双1</h5><p>一般情况下，把生产库改成“非双 1”配置，是设置 innodb_flush_logs_at_trx_commit&#x3D;2、sync_binlog&#x3D;1000。</p>\n<h3 id=\"crash-safe\"><a href=\"#crash-safe\" class=\"headerlink\" title=\"crash-safe\"></a><strong>crash-safe</strong></h3><p>即在 InnoDB 存储引擎中，事务提交过程中任何阶段，MySQL突然奔溃，重启后都能保证事务的完整性，已提交的数据不会丢失，未提交完整的数据会自动进行回滚</p>\n<p>这个能力依赖的就是redo log和unod log两个日志。</p>\n<p>实际上数据库的 crash-safe 保证的是：</p>\n<ul>\n<li><p>如果客户端收到事务成功的消息，事务就一定持久化了；</p>\n</li>\n<li><p>如果客户端收到事务失败（比如主键冲突、回滚等）的消息，事务就一定失败了；</p>\n</li>\n<li><p>如果客户端收到“执行异常”的消息，应用需要重连后通过查询当前状态来继续后续的逻辑。此时数据库只需要保证内部（数据和日志之间，主库和备库之间）一致就可以了。</p>\n</li>\n</ul>\n<h3 id=\"磁盘文件\"><a href=\"#磁盘文件\" class=\"headerlink\" title=\"磁盘文件\"></a>磁盘文件</h3><p>磁盘文件有三个层级</p>\n<ol>\n<li><p>一组数据组，是256个数据区</p>\n</li>\n<li><p>一个数据区，是64个数据页</p>\n</li>\n<li><p>一个数据页，是16kb</p>\n</li>\n</ol>\n<p>在磁盘中把一页的数据叫做数据页，在缓存中，称之为缓存页</p>"},{"title":"mysql常见生产问题","description":"","abbrlink":"a63fc0d0","date":"2021-03-30T16:00:00.000Z","_content":"\n\n## 线上数据库时不时的发生性能抖动的问题\n\n\n\n<!-- more -->\n\n\n\n1. 当buffer pool中没有缓存页的时候，来了一个查询大量数据的sql，大量脏页刷盘\n\n2. redolog buffer的所有文件都已经写满的时候，来了一个大量更新的sql，需要将第一个redolog涉及的缓存页更新到磁盘中\n\n\n\n> 解决办法：\n\n>\n\n> 1. 由于无法控制缓存页刷新到磁盘的频率，所以只能是加大内存，给buffre pool分配的内存大一点大小\n\n> 2. 就是加快缓存页到磁盘的速度，那就是才去SSD固态硬盘，众所周知，固态硬盘比机械硬盘快","source":"_posts/mysql常见生产问题.md","raw":"---\ntitle: mysql常见生产问题\ndescription: ''\ntags:\n  - 无标签\nabbrlink: a63fc0d0\ndate: 2021-03-31 00:00:00\n---\n\n\n## 线上数据库时不时的发生性能抖动的问题\n\n\n\n<!-- more -->\n\n\n\n1. 当buffer pool中没有缓存页的时候，来了一个查询大量数据的sql，大量脏页刷盘\n\n2. redolog buffer的所有文件都已经写满的时候，来了一个大量更新的sql，需要将第一个redolog涉及的缓存页更新到磁盘中\n\n\n\n> 解决办法：\n\n>\n\n> 1. 由于无法控制缓存页刷新到磁盘的频率，所以只能是加大内存，给buffre pool分配的内存大一点大小\n\n> 2. 就是加快缓存页到磁盘的速度，那就是才去SSD固态硬盘，众所周知，固态硬盘比机械硬盘快","slug":"mysql常见生产问题","published":1,"updated":"2025-03-02T03:37:34.394Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4r002rn0uk4ulx91qn","content":"<h2 id=\"线上数据库时不时的发生性能抖动的问题\"><a href=\"#线上数据库时不时的发生性能抖动的问题\" class=\"headerlink\" title=\"线上数据库时不时的发生性能抖动的问题\"></a>线上数据库时不时的发生性能抖动的问题</h2><span id=\"more\"></span>\n\n\n\n<ol>\n<li><p>当buffer pool中没有缓存页的时候，来了一个查询大量数据的sql，大量脏页刷盘</p>\n</li>\n<li><p>redolog buffer的所有文件都已经写满的时候，来了一个大量更新的sql，需要将第一个redolog涉及的缓存页更新到磁盘中</p>\n</li>\n</ol>\n<blockquote>\n<p>解决办法：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ol>\n<li>由于无法控制缓存页刷新到磁盘的频率，所以只能是加大内存，给buffre pool分配的内存大一点大小</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>就是加快缓存页到磁盘的速度，那就是才去SSD固态硬盘，众所周知，固态硬盘比机械硬盘快</li>\n</ol>\n</blockquote>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"线上数据库时不时的发生性能抖动的问题\n 1. 当buffer pool中没有缓存页的时候，来了一个查询大量数据的sql，大量脏页刷盘\n    \n    \n 2. redolog buffer的所有文件都已经写满的时候，来了一个大量更新的sql，需要将第一个redolog涉及的缓存页更新到磁盘中\n    \n    \n\n解决办法：\n\n 1. 由于无法控制缓存页刷新到磁盘的频率，所以只能是加大内存，给buffre pool分配的内存大一点大小\n\n 2. 就是加快缓存页到磁盘的速度，那就是才去SSD固态硬盘，众所周知，固态硬盘比机械硬盘快","more":"<ol>\n<li><p>当buffer pool中没有缓存页的时候，来了一个查询大量数据的sql，大量脏页刷盘</p>\n</li>\n<li><p>redolog buffer的所有文件都已经写满的时候，来了一个大量更新的sql，需要将第一个redolog涉及的缓存页更新到磁盘中</p>\n</li>\n</ol>\n<blockquote>\n<p>解决办法：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ol>\n<li>由于无法控制缓存页刷新到磁盘的频率，所以只能是加大内存，给buffre pool分配的内存大一点大小</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>就是加快缓存页到磁盘的速度，那就是才去SSD固态硬盘，众所周知，固态硬盘比机械硬盘快</li>\n</ol>\n</blockquote>"},{"title":"mysql执行计划","description":"","abbrlink":"943bf5e0","date":"2021-04-03T16:00:00.000Z","_content":"\n\n## Explain\n\n\n\n<!-- more -->\n\n\n\n### 模样\n\n\n\n![image-20210404081229369](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210404081229369.png)\n\n\n\n### 使用\n\n\n\n```sql\n\nexplain select * from user\n\n```\n\n\n\n### possible_keys\n\n\n\n所有的可能使用的索引\n\n\n\n### key\n\n\n\n实际使用的索引\n\n\n\n### select_type\n\n\n\nsimply  单表或者多表连接查询\n\n\n\nprimary  主查询\n\n\n\nsubquery 子查询\n\n\n\nunion_result  根据union去重\n\n\n\ndepend subquery  内层的子查询\n\n\n\ndepend union   内层的union\n\n\n\nderived  根据临时表执行的查询\n\n\n\nmaterialized  物化为临时表，就是生成一个临时表存储到磁盘上\n\n\n\n### id\n\n\n\n一个select对应一个id，如果是多个select就会对应多个id\n\n\n\n### keys_len\n\n\n\n索引的长度\n\n\n\n### extra\n\n\n\n#### using index\n\n\n\n直接在二级索引中查到结果，不需要回表\n\n\n\n#### using index condition\n\n\n\n![image-20210404081452807](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210404081452807.png)\n\n\n\n#### using where\n\n\n\n1. 没有用到索引\n\n2. 除了用到了索引，还用到了其他没有索引的字段\n\n\n\n#### using firesort\n\n\n\n没有用到索引，会基于内存或者磁盘进行排序，大部分情况下都是基于内存进行排序的，性能非常差\n\n\n\n#### using temporary\n\n\n\n使用了临时表进行操作\n\n\n\n#### using join buffer\n\n\n\n内存优化的手段，减少表的全表扫描次数\n\n\n\n### filtered\n\n\n\n经过搜索之后剩余数据的百分比,也就是你想要的结果\n\n\n\n### rows\n\n\n\n预估读取的行数\n\n\n\n### type\n\n\n\n#### const\n\n\n\n直接通过主键索引或者唯一二级索引列进行等值匹配的时候可以查找到数据，type就是const\n\n\n\n但是这个二级索引必须是唯一的，如果只是二级索引不是唯一索引，type就是ref\n\n\n\n#### ref\n\n\n\n1. 如果是普通索引进行等值比较，就是ref\n\n2. 执行连接查询，被驱动表中的某个普通二级索引列与驱动表中的某个列进行等值匹配，那么对被驱动表也可能是使用ref的访问方法\n\n\n\n#### eq_ref\n\n\n\n执行连接查询的时候，如果被驱动表是通过主键或不允许存储null值的唯一二级索引列等值匹配的方式进行访问的（如果该主键或者不允许存储null的唯一二级索引是联合索引，则所有的索引都必须进行等值比较），则对该驱动表的访问方式是eq_ref\n\n\n\n#### ref_or_null\n\n\n\n如果是多个普通索引，连续多个都是等值比较且索引列的值可以null值的时候，访问方法可能是ref_or_null\n\n\n\n> 不是某个列的值为null，而是在sql语句中专门加上is null 这种情况\n\n\n\n#### fulltext\n\n\n\n全文索引\n\n\n\n#### index_merge\n\n\n\n一般情况下只会为单个索引生成扫描区间，但是我们在唠叨单标访问方式的时候，特意强调了在某些场景下也可以使用Intersection union sort-union这三种索引列合并的方式来执行查询\n\n\n\n#### unique_subquery\n\n\n\n类似于两表连接的eq_ref访问方法，unique_subquery针对的是一些包含in子查询的查询语句。如果查询优化器决定将in子查询转换为exists子查询，而且子查询在转换之后可以使用爪机或者不允许存储null值的唯一二级索引进行等值匹配，那么该子查询的type列的值就是unique_subquery\n\n\n\n#### index_subquery\n\n\n\n和unique_subquery类似，只不过在访问子查询中的表时使用的是普通索引\n\n\n\n#### range\n\n\n\n一旦使用了二级索引作为范围查找，就是range\n\n\n\n#### index\n\n\n\n1. 只要遍历二级索引就可以拿到想要的数据，不需要进行回表的，就是index\n\n\n\n   >比如 select x，y，z from user where x2=xxx（联合索引字段为x，y，z），这个时候发现，x，y，z都是联合索引的字段，所以直接根据联合索引的索引树，将数据取出来即可，这个比遍历主键索引块多了，毕竟二级索引的叶子节点数据比主键索引的叶子节点少的多\n\n\n\n2. 对于innodb存储引擎来说，当我们需要执行全表扫描，并且需要对主键进行排序的时候，此时访问方法就是index\n\n\n\n#### all\n\n\n\n全表扫描\n\n\n\n### ref\n\n\n\n#### const\n\n\n\n使用了你在sql语句中的值进行等值匹配\n\n\n\n#### table_db.t1.id\n\n\n\n```sql\n\nselect * from t1 inner join t2 on t1.id=t2.id\n\n```\n\n\n\n这样的情况，type列一般为eq_ref\n\n\n\n## show wanging\n\n\n\n执行完执行计划，可以执行这个语句，如果看到semi join可能这就是sql之索引慢的原因了\n\n\n\n> mysql在生成执行计划的时候，会自动的把一个普通的in语句，优化成了in+子查询","source":"_posts/mysql执行计划.md","raw":"---\ntitle: mysql执行计划\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 943bf5e0\ndate: 2021-04-04 00:00:00\n---\n\n\n## Explain\n\n\n\n<!-- more -->\n\n\n\n### 模样\n\n\n\n![image-20210404081229369](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210404081229369.png)\n\n\n\n### 使用\n\n\n\n```sql\n\nexplain select * from user\n\n```\n\n\n\n### possible_keys\n\n\n\n所有的可能使用的索引\n\n\n\n### key\n\n\n\n实际使用的索引\n\n\n\n### select_type\n\n\n\nsimply  单表或者多表连接查询\n\n\n\nprimary  主查询\n\n\n\nsubquery 子查询\n\n\n\nunion_result  根据union去重\n\n\n\ndepend subquery  内层的子查询\n\n\n\ndepend union   内层的union\n\n\n\nderived  根据临时表执行的查询\n\n\n\nmaterialized  物化为临时表，就是生成一个临时表存储到磁盘上\n\n\n\n### id\n\n\n\n一个select对应一个id，如果是多个select就会对应多个id\n\n\n\n### keys_len\n\n\n\n索引的长度\n\n\n\n### extra\n\n\n\n#### using index\n\n\n\n直接在二级索引中查到结果，不需要回表\n\n\n\n#### using index condition\n\n\n\n![image-20210404081452807](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210404081452807.png)\n\n\n\n#### using where\n\n\n\n1. 没有用到索引\n\n2. 除了用到了索引，还用到了其他没有索引的字段\n\n\n\n#### using firesort\n\n\n\n没有用到索引，会基于内存或者磁盘进行排序，大部分情况下都是基于内存进行排序的，性能非常差\n\n\n\n#### using temporary\n\n\n\n使用了临时表进行操作\n\n\n\n#### using join buffer\n\n\n\n内存优化的手段，减少表的全表扫描次数\n\n\n\n### filtered\n\n\n\n经过搜索之后剩余数据的百分比,也就是你想要的结果\n\n\n\n### rows\n\n\n\n预估读取的行数\n\n\n\n### type\n\n\n\n#### const\n\n\n\n直接通过主键索引或者唯一二级索引列进行等值匹配的时候可以查找到数据，type就是const\n\n\n\n但是这个二级索引必须是唯一的，如果只是二级索引不是唯一索引，type就是ref\n\n\n\n#### ref\n\n\n\n1. 如果是普通索引进行等值比较，就是ref\n\n2. 执行连接查询，被驱动表中的某个普通二级索引列与驱动表中的某个列进行等值匹配，那么对被驱动表也可能是使用ref的访问方法\n\n\n\n#### eq_ref\n\n\n\n执行连接查询的时候，如果被驱动表是通过主键或不允许存储null值的唯一二级索引列等值匹配的方式进行访问的（如果该主键或者不允许存储null的唯一二级索引是联合索引，则所有的索引都必须进行等值比较），则对该驱动表的访问方式是eq_ref\n\n\n\n#### ref_or_null\n\n\n\n如果是多个普通索引，连续多个都是等值比较且索引列的值可以null值的时候，访问方法可能是ref_or_null\n\n\n\n> 不是某个列的值为null，而是在sql语句中专门加上is null 这种情况\n\n\n\n#### fulltext\n\n\n\n全文索引\n\n\n\n#### index_merge\n\n\n\n一般情况下只会为单个索引生成扫描区间，但是我们在唠叨单标访问方式的时候，特意强调了在某些场景下也可以使用Intersection union sort-union这三种索引列合并的方式来执行查询\n\n\n\n#### unique_subquery\n\n\n\n类似于两表连接的eq_ref访问方法，unique_subquery针对的是一些包含in子查询的查询语句。如果查询优化器决定将in子查询转换为exists子查询，而且子查询在转换之后可以使用爪机或者不允许存储null值的唯一二级索引进行等值匹配，那么该子查询的type列的值就是unique_subquery\n\n\n\n#### index_subquery\n\n\n\n和unique_subquery类似，只不过在访问子查询中的表时使用的是普通索引\n\n\n\n#### range\n\n\n\n一旦使用了二级索引作为范围查找，就是range\n\n\n\n#### index\n\n\n\n1. 只要遍历二级索引就可以拿到想要的数据，不需要进行回表的，就是index\n\n\n\n   >比如 select x，y，z from user where x2=xxx（联合索引字段为x，y，z），这个时候发现，x，y，z都是联合索引的字段，所以直接根据联合索引的索引树，将数据取出来即可，这个比遍历主键索引块多了，毕竟二级索引的叶子节点数据比主键索引的叶子节点少的多\n\n\n\n2. 对于innodb存储引擎来说，当我们需要执行全表扫描，并且需要对主键进行排序的时候，此时访问方法就是index\n\n\n\n#### all\n\n\n\n全表扫描\n\n\n\n### ref\n\n\n\n#### const\n\n\n\n使用了你在sql语句中的值进行等值匹配\n\n\n\n#### table_db.t1.id\n\n\n\n```sql\n\nselect * from t1 inner join t2 on t1.id=t2.id\n\n```\n\n\n\n这样的情况，type列一般为eq_ref\n\n\n\n## show wanging\n\n\n\n执行完执行计划，可以执行这个语句，如果看到semi join可能这就是sql之索引慢的原因了\n\n\n\n> mysql在生成执行计划的时候，会自动的把一个普通的in语句，优化成了in+子查询","slug":"mysql执行计划","published":1,"updated":"2025-03-02T03:37:34.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4r002tn0ukaf7pfq3q","content":"<h2 id=\"Explain\"><a href=\"#Explain\" class=\"headerlink\" title=\"Explain\"></a>Explain</h2><span id=\"more\"></span>\n\n\n\n<h3 id=\"模样\"><a href=\"#模样\" class=\"headerlink\" title=\"模样\"></a>模样</h3><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210404081229369.png\" alt=\"image-20210404081229369\" loading=\"lazy\"></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">explain <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"possible-keys\"><a href=\"#possible-keys\" class=\"headerlink\" title=\"possible_keys\"></a>possible_keys</h3><p>所有的可能使用的索引</p>\n<h3 id=\"key\"><a href=\"#key\" class=\"headerlink\" title=\"key\"></a>key</h3><p>实际使用的索引</p>\n<h3 id=\"select-type\"><a href=\"#select-type\" class=\"headerlink\" title=\"select_type\"></a>select_type</h3><p>simply  单表或者多表连接查询</p>\n<p>primary  主查询</p>\n<p>subquery 子查询</p>\n<p>union_result  根据union去重</p>\n<p>depend subquery  内层的子查询</p>\n<p>depend union   内层的union</p>\n<p>derived  根据临时表执行的查询</p>\n<p>materialized  物化为临时表，就是生成一个临时表存储到磁盘上</p>\n<h3 id=\"id\"><a href=\"#id\" class=\"headerlink\" title=\"id\"></a>id</h3><p>一个select对应一个id，如果是多个select就会对应多个id</p>\n<h3 id=\"keys-len\"><a href=\"#keys-len\" class=\"headerlink\" title=\"keys_len\"></a>keys_len</h3><p>索引的长度</p>\n<h3 id=\"extra\"><a href=\"#extra\" class=\"headerlink\" title=\"extra\"></a>extra</h3><h4 id=\"using-index\"><a href=\"#using-index\" class=\"headerlink\" title=\"using index\"></a>using index</h4><p>直接在二级索引中查到结果，不需要回表</p>\n<h4 id=\"using-index-condition\"><a href=\"#using-index-condition\" class=\"headerlink\" title=\"using index condition\"></a>using index condition</h4><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210404081452807.png\" alt=\"image-20210404081452807\" loading=\"lazy\"></p>\n<h4 id=\"using-where\"><a href=\"#using-where\" class=\"headerlink\" title=\"using where\"></a>using where</h4><ol>\n<li><p>没有用到索引</p>\n</li>\n<li><p>除了用到了索引，还用到了其他没有索引的字段</p>\n</li>\n</ol>\n<h4 id=\"using-firesort\"><a href=\"#using-firesort\" class=\"headerlink\" title=\"using firesort\"></a>using firesort</h4><p>没有用到索引，会基于内存或者磁盘进行排序，大部分情况下都是基于内存进行排序的，性能非常差</p>\n<h4 id=\"using-temporary\"><a href=\"#using-temporary\" class=\"headerlink\" title=\"using temporary\"></a>using temporary</h4><p>使用了临时表进行操作</p>\n<h4 id=\"using-join-buffer\"><a href=\"#using-join-buffer\" class=\"headerlink\" title=\"using join buffer\"></a>using join buffer</h4><p>内存优化的手段，减少表的全表扫描次数</p>\n<h3 id=\"filtered\"><a href=\"#filtered\" class=\"headerlink\" title=\"filtered\"></a>filtered</h3><p>经过搜索之后剩余数据的百分比,也就是你想要的结果</p>\n<h3 id=\"rows\"><a href=\"#rows\" class=\"headerlink\" title=\"rows\"></a>rows</h3><p>预估读取的行数</p>\n<h3 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h3><h4 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h4><p>直接通过主键索引或者唯一二级索引列进行等值匹配的时候可以查找到数据，type就是const</p>\n<p>但是这个二级索引必须是唯一的，如果只是二级索引不是唯一索引，type就是ref</p>\n<h4 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h4><ol>\n<li><p>如果是普通索引进行等值比较，就是ref</p>\n</li>\n<li><p>执行连接查询，被驱动表中的某个普通二级索引列与驱动表中的某个列进行等值匹配，那么对被驱动表也可能是使用ref的访问方法</p>\n</li>\n</ol>\n<h4 id=\"eq-ref\"><a href=\"#eq-ref\" class=\"headerlink\" title=\"eq_ref\"></a>eq_ref</h4><p>执行连接查询的时候，如果被驱动表是通过主键或不允许存储null值的唯一二级索引列等值匹配的方式进行访问的（如果该主键或者不允许存储null的唯一二级索引是联合索引，则所有的索引都必须进行等值比较），则对该驱动表的访问方式是eq_ref</p>\n<h4 id=\"ref-or-null\"><a href=\"#ref-or-null\" class=\"headerlink\" title=\"ref_or_null\"></a>ref_or_null</h4><p>如果是多个普通索引，连续多个都是等值比较且索引列的值可以null值的时候，访问方法可能是ref_or_null</p>\n<blockquote>\n<p>不是某个列的值为null，而是在sql语句中专门加上is null 这种情况</p>\n</blockquote>\n<h4 id=\"fulltext\"><a href=\"#fulltext\" class=\"headerlink\" title=\"fulltext\"></a>fulltext</h4><p>全文索引</p>\n<h4 id=\"index-merge\"><a href=\"#index-merge\" class=\"headerlink\" title=\"index_merge\"></a>index_merge</h4><p>一般情况下只会为单个索引生成扫描区间，但是我们在唠叨单标访问方式的时候，特意强调了在某些场景下也可以使用Intersection union sort-union这三种索引列合并的方式来执行查询</p>\n<h4 id=\"unique-subquery\"><a href=\"#unique-subquery\" class=\"headerlink\" title=\"unique_subquery\"></a>unique_subquery</h4><p>类似于两表连接的eq_ref访问方法，unique_subquery针对的是一些包含in子查询的查询语句。如果查询优化器决定将in子查询转换为exists子查询，而且子查询在转换之后可以使用爪机或者不允许存储null值的唯一二级索引进行等值匹配，那么该子查询的type列的值就是unique_subquery</p>\n<h4 id=\"index-subquery\"><a href=\"#index-subquery\" class=\"headerlink\" title=\"index_subquery\"></a>index_subquery</h4><p>和unique_subquery类似，只不过在访问子查询中的表时使用的是普通索引</p>\n<h4 id=\"range\"><a href=\"#range\" class=\"headerlink\" title=\"range\"></a>range</h4><p>一旦使用了二级索引作为范围查找，就是range</p>\n<h4 id=\"index\"><a href=\"#index\" class=\"headerlink\" title=\"index\"></a>index</h4><ol>\n<li><p>只要遍历二级索引就可以拿到想要的数据，不需要进行回表的，就是index</p>\n<blockquote>\n<p>比如 select x，y，z from user where x2&#x3D;xxx（联合索引字段为x，y，z），这个时候发现，x，y，z都是联合索引的字段，所以直接根据联合索引的索引树，将数据取出来即可，这个比遍历主键索引块多了，毕竟二级索引的叶子节点数据比主键索引的叶子节点少的多</p>\n</blockquote>\n</li>\n<li><p>对于innodb存储引擎来说，当我们需要执行全表扫描，并且需要对主键进行排序的时候，此时访问方法就是index</p>\n</li>\n</ol>\n<h4 id=\"all\"><a href=\"#all\" class=\"headerlink\" title=\"all\"></a>all</h4><p>全表扫描</p>\n<h3 id=\"ref-1\"><a href=\"#ref-1\" class=\"headerlink\" title=\"ref\"></a>ref</h3><h4 id=\"const-1\"><a href=\"#const-1\" class=\"headerlink\" title=\"const\"></a>const</h4><p>使用了你在sql语句中的值进行等值匹配</p>\n<h4 id=\"table-db-t1-id\"><a href=\"#table-db-t1-id\" class=\"headerlink\" title=\"table_db.t1.id\"></a>table_db.t1.id</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> t1 <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> t2 <span class=\"keyword\">on</span> t1.id<span class=\"operator\">=</span>t2.id</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这样的情况，type列一般为eq_ref</p>\n<h2 id=\"show-wanging\"><a href=\"#show-wanging\" class=\"headerlink\" title=\"show wanging\"></a>show wanging</h2><p>执行完执行计划，可以执行这个语句，如果看到semi join可能这就是sql之索引慢的原因了</p>\n<blockquote>\n<p>mysql在生成执行计划的时候，会自动的把一个普通的in语句，优化成了in+子查询</p>\n</blockquote>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"Explain\n模样\n\n\n使用\n1\n2\n3\n\n\n\nexplain select * from user\n\n\n\npossible_keys\n所有的可能使用的索引\n\nkey\n实际使用的索引\n\nselect_type\nsimply 单表或者多表连接查询\n\nprimary 主查询\n\nsubquery 子查询\n\nunion_result 根据union去重\n\ndepend subquery 内层的子查询\n\ndepend union 内层的union\n\nderived 根据临时表执行的查询\n\nmaterialized 物化为临时表，就是生成一个临时表存储到磁盘上\n\nid\n一个select对应一个id，如果","more":"<h3 id=\"模样\"><a href=\"#模样\" class=\"headerlink\" title=\"模样\"></a>模样</h3><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210404081229369.png\" alt=\"image-20210404081229369\" loading=\"lazy\"></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">explain <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"possible-keys\"><a href=\"#possible-keys\" class=\"headerlink\" title=\"possible_keys\"></a>possible_keys</h3><p>所有的可能使用的索引</p>\n<h3 id=\"key\"><a href=\"#key\" class=\"headerlink\" title=\"key\"></a>key</h3><p>实际使用的索引</p>\n<h3 id=\"select-type\"><a href=\"#select-type\" class=\"headerlink\" title=\"select_type\"></a>select_type</h3><p>simply  单表或者多表连接查询</p>\n<p>primary  主查询</p>\n<p>subquery 子查询</p>\n<p>union_result  根据union去重</p>\n<p>depend subquery  内层的子查询</p>\n<p>depend union   内层的union</p>\n<p>derived  根据临时表执行的查询</p>\n<p>materialized  物化为临时表，就是生成一个临时表存储到磁盘上</p>\n<h3 id=\"id\"><a href=\"#id\" class=\"headerlink\" title=\"id\"></a>id</h3><p>一个select对应一个id，如果是多个select就会对应多个id</p>\n<h3 id=\"keys-len\"><a href=\"#keys-len\" class=\"headerlink\" title=\"keys_len\"></a>keys_len</h3><p>索引的长度</p>\n<h3 id=\"extra\"><a href=\"#extra\" class=\"headerlink\" title=\"extra\"></a>extra</h3><h4 id=\"using-index\"><a href=\"#using-index\" class=\"headerlink\" title=\"using index\"></a>using index</h4><p>直接在二级索引中查到结果，不需要回表</p>\n<h4 id=\"using-index-condition\"><a href=\"#using-index-condition\" class=\"headerlink\" title=\"using index condition\"></a>using index condition</h4><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210404081452807.png\" alt=\"image-20210404081452807\" loading=\"lazy\"></p>\n<h4 id=\"using-where\"><a href=\"#using-where\" class=\"headerlink\" title=\"using where\"></a>using where</h4><ol>\n<li><p>没有用到索引</p>\n</li>\n<li><p>除了用到了索引，还用到了其他没有索引的字段</p>\n</li>\n</ol>\n<h4 id=\"using-firesort\"><a href=\"#using-firesort\" class=\"headerlink\" title=\"using firesort\"></a>using firesort</h4><p>没有用到索引，会基于内存或者磁盘进行排序，大部分情况下都是基于内存进行排序的，性能非常差</p>\n<h4 id=\"using-temporary\"><a href=\"#using-temporary\" class=\"headerlink\" title=\"using temporary\"></a>using temporary</h4><p>使用了临时表进行操作</p>\n<h4 id=\"using-join-buffer\"><a href=\"#using-join-buffer\" class=\"headerlink\" title=\"using join buffer\"></a>using join buffer</h4><p>内存优化的手段，减少表的全表扫描次数</p>\n<h3 id=\"filtered\"><a href=\"#filtered\" class=\"headerlink\" title=\"filtered\"></a>filtered</h3><p>经过搜索之后剩余数据的百分比,也就是你想要的结果</p>\n<h3 id=\"rows\"><a href=\"#rows\" class=\"headerlink\" title=\"rows\"></a>rows</h3><p>预估读取的行数</p>\n<h3 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h3><h4 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h4><p>直接通过主键索引或者唯一二级索引列进行等值匹配的时候可以查找到数据，type就是const</p>\n<p>但是这个二级索引必须是唯一的，如果只是二级索引不是唯一索引，type就是ref</p>\n<h4 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h4><ol>\n<li><p>如果是普通索引进行等值比较，就是ref</p>\n</li>\n<li><p>执行连接查询，被驱动表中的某个普通二级索引列与驱动表中的某个列进行等值匹配，那么对被驱动表也可能是使用ref的访问方法</p>\n</li>\n</ol>\n<h4 id=\"eq-ref\"><a href=\"#eq-ref\" class=\"headerlink\" title=\"eq_ref\"></a>eq_ref</h4><p>执行连接查询的时候，如果被驱动表是通过主键或不允许存储null值的唯一二级索引列等值匹配的方式进行访问的（如果该主键或者不允许存储null的唯一二级索引是联合索引，则所有的索引都必须进行等值比较），则对该驱动表的访问方式是eq_ref</p>\n<h4 id=\"ref-or-null\"><a href=\"#ref-or-null\" class=\"headerlink\" title=\"ref_or_null\"></a>ref_or_null</h4><p>如果是多个普通索引，连续多个都是等值比较且索引列的值可以null值的时候，访问方法可能是ref_or_null</p>\n<blockquote>\n<p>不是某个列的值为null，而是在sql语句中专门加上is null 这种情况</p>\n</blockquote>\n<h4 id=\"fulltext\"><a href=\"#fulltext\" class=\"headerlink\" title=\"fulltext\"></a>fulltext</h4><p>全文索引</p>\n<h4 id=\"index-merge\"><a href=\"#index-merge\" class=\"headerlink\" title=\"index_merge\"></a>index_merge</h4><p>一般情况下只会为单个索引生成扫描区间，但是我们在唠叨单标访问方式的时候，特意强调了在某些场景下也可以使用Intersection union sort-union这三种索引列合并的方式来执行查询</p>\n<h4 id=\"unique-subquery\"><a href=\"#unique-subquery\" class=\"headerlink\" title=\"unique_subquery\"></a>unique_subquery</h4><p>类似于两表连接的eq_ref访问方法，unique_subquery针对的是一些包含in子查询的查询语句。如果查询优化器决定将in子查询转换为exists子查询，而且子查询在转换之后可以使用爪机或者不允许存储null值的唯一二级索引进行等值匹配，那么该子查询的type列的值就是unique_subquery</p>\n<h4 id=\"index-subquery\"><a href=\"#index-subquery\" class=\"headerlink\" title=\"index_subquery\"></a>index_subquery</h4><p>和unique_subquery类似，只不过在访问子查询中的表时使用的是普通索引</p>\n<h4 id=\"range\"><a href=\"#range\" class=\"headerlink\" title=\"range\"></a>range</h4><p>一旦使用了二级索引作为范围查找，就是range</p>\n<h4 id=\"index\"><a href=\"#index\" class=\"headerlink\" title=\"index\"></a>index</h4><ol>\n<li><p>只要遍历二级索引就可以拿到想要的数据，不需要进行回表的，就是index</p>\n<blockquote>\n<p>比如 select x，y，z from user where x2&#x3D;xxx（联合索引字段为x，y，z），这个时候发现，x，y，z都是联合索引的字段，所以直接根据联合索引的索引树，将数据取出来即可，这个比遍历主键索引块多了，毕竟二级索引的叶子节点数据比主键索引的叶子节点少的多</p>\n</blockquote>\n</li>\n<li><p>对于innodb存储引擎来说，当我们需要执行全表扫描，并且需要对主键进行排序的时候，此时访问方法就是index</p>\n</li>\n</ol>\n<h4 id=\"all\"><a href=\"#all\" class=\"headerlink\" title=\"all\"></a>all</h4><p>全表扫描</p>\n<h3 id=\"ref-1\"><a href=\"#ref-1\" class=\"headerlink\" title=\"ref\"></a>ref</h3><h4 id=\"const-1\"><a href=\"#const-1\" class=\"headerlink\" title=\"const\"></a>const</h4><p>使用了你在sql语句中的值进行等值匹配</p>\n<h4 id=\"table-db-t1-id\"><a href=\"#table-db-t1-id\" class=\"headerlink\" title=\"table_db.t1.id\"></a>table_db.t1.id</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> t1 <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> t2 <span class=\"keyword\">on</span> t1.id<span class=\"operator\">=</span>t2.id</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这样的情况，type列一般为eq_ref</p>\n<h2 id=\"show-wanging\"><a href=\"#show-wanging\" class=\"headerlink\" title=\"show wanging\"></a>show wanging</h2><p>执行完执行计划，可以执行这个语句，如果看到semi join可能这就是sql之索引慢的原因了</p>\n<blockquote>\n<p>mysql在生成执行计划的时候，会自动的把一个普通的in语句，优化成了in+子查询</p>\n</blockquote>"},{"title":"mysql索引","description":"","abbrlink":"71014c5a","date":"2021-03-31T16:00:00.000Z","_content":"\n\n想要了解mysql的索引，首先要了解mysql的物理存储结构\n\n\n\n## 物理存储结构\n\n\n\n<!-- more -->\n\n\n\n![image-20210401131310090](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210401131310090.png)\n\n\n\nmysql的物理存储结构其实就是上图所示，是一个双向链表，每个结点的都是一个数据页，\n\n\n\n一行一行的数据就放在这个数据页中\n\n\n\n## 索引\n\n\n\n为什么会产生索引这么一个东西，很简单，就是加快查询速度啊！\n\n\n\n其实索引就和书籍的目录一样，都是为了更快的可以找到所需要的数据\n\n\n\n那数据库的索引究竟是什么样子那？\n\n\n\n其实就和书籍的目录一样，就是将每一个数据页的最小数据放在目录上，根据这个数据来进行多次的二分查找\n\n\n\n### 页分裂\n\n\n\n目的：就是进行主键排序，保证所有的数据页的主键都是从小到大排序的\n\n\n\n页分裂这个其实也很简单，数据库中那么多数据，一个数据页肯定存储不下，当存储的数据大于一个数据页的时候，就会将新的数据和这个数据页的整体数据进行排序，主键比较大的数据放在新建的数据页中\n\n\n\n### 构成\n\n\n\n其实我们从索引的作用就可以自己猜想出来索引的组成了\n\n\n\n1. 首先，肯定是有对应数据页的主键的最小值，目的很简单，就是用于二分查找，提高查询的速度\n\n2. 根据上一步拿到了想要找的数据所在的数据页，但是具体是那个不知道啊，所以就必须有 数据页页号\n\n\n\n### B+树\n\n\n\n众所周知myslq数据库采用的B+树的数据结构，那究竟是为什那？\n\n\n\n有以下三个原因\n\n\n\n- 单一节点存储的元素更多，使得查询的IO次数更少，所以也就使得它更适合做为数据库MySQL的底层数据结构了。\n\n- 所有的查询都要查找到叶子节点，查询性能是稳定的，而B树，每个节点都可以查找到数据，所以不稳定。\n\n- 所有的叶子节点形成了一个有序链表，更加便于查找。\n\n\n\n### 原则\n\n\n\n#### 最左匹配原则\n\n\n\n比如说你建立了一个（a,b）的索引，就没有必要再建立a索引了，因为（a，b）这个所以已经包括了a索引了，所有没有必要再单独建立b索引，但是b索引还是要单独建立的，因为（a,b）是满足a且满足b的情况，与只索引b不是一个意思\n\n\n\n当然，a和b你要考虑这两个索引的大小，尽量选择较小的那个，单独作为索引，因为这样速度相对来说会快一点\n\n\n\n> 第一原则是，如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的。\n\n\n\n#### 等值原则\n\n\n\n查询的字段和数据库的字段一样，而且是=进行匹配的，百分之一百会使用索引\n\n\n\n#### 最左前缀匹配原则\n\n\n\n如果要用like来进行模糊查询，1%可以用上索引，但是%1就不行了\n\n\n\n#### 范围查找原则\n\n\n\n如果where语句中有范围查询，那么只有联合索引的最左侧的索引进行范围查找才能用到索引\n\n\n\n#### 等值匹配+范围匹配原则\n\n\n\n### 类型\n\n\n\n#### 主键索引\n\n\n\n主键索引又被称为聚簇索引\n\n\n\n> 主键索引的叶子节点存的是完整的数据页\n\n\n\n在Key-Value的场景下，只有一个索引且是唯一索引，则适合直接使用业务字段作为主键索引。\n\n\n\n主键索引首先要去查询主键目录，主键目录维护的就是每个数据页的页号和最小的主键值\n\n\n\n#### 非主键索引\n\n\n\n别名：二级索引、辅助索引、普通索引\n\n\n\n非主键索引的叶子节点内容是主键的值\n\n\n\n叶子结点存储的是主键+字段值\n\n\n\n在不影响排序结果的情况下，在取出主键后，回表之前，会在对所有获取到的主键排序\n\n\n\n> - 如果一个主键被定义了，那么这个主键就是作为聚集索引。\n\n>\n\n> - 如果没有主键被定义，那么该表的第一个唯一非空索引被作为聚集索引。\n\n>\n\n> - 如果没有主键也没有合适的唯一索引，那么innodb内部会生成一个隐藏的主键作为聚集索引，这个隐藏的主键是一个6个字节的列row_id，该列的值会随着数据的插入自增。\n\n\n\n减少回表次数的方法\n\n\n\n> 覆盖索引\n\n\n\n一般来说，一个sql语句中只能用到一个二级索引，但是也有可能同时查多个索引树取个交集，再回表到主键索引，这个可能性是有的\n\n\n\n#### 区别\n\n\n\n主键索引和普通索引的区别：主键索引只要搜索ID这个B+Tree即可拿到数据。普通索引先搜索索引拿到主键值，再到主键索引树搜索一次(回表)\n\n\n\n> 那么我们是选择用业务字段来当做主键，还是一个自增字段来当做主键？\n\n\n\n- 首先自增主键的插入数据模式，正符合了我们前面提到的递增插入的场景。每次插入一条新记录，都是追加操作，都不涉及到挪动其他记录，也不会触发叶子节点的分裂。而有业务逻辑的字段做主键，则往往不容易保证有序插入，这样写数据成本相对较高。\n\n- 除了考虑性能外，我们还可以从存储空间的角度来看。假设你的表中确实有一个唯一字段，比如字符串类型的身份证号，那应该用身份证号做主键，还是用自增字段做主键呢？由于每个非主键索引的叶子节点上都是主键的值。如果用身份证号做主键，那么每个二级索引的叶子节点占用约 20 个字节，而如果用整型做主键，则只要 4 个字节，如果是长整型（bigint）则是 8 个字节。\n\n\n\n显然，主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小。\n\n\n\n所以，从性能和存储空间方面考量，自增主键往往是更合理的选择\n\n\n\n一个数据页满了，按照B+Tree算法，新增加一个数据页，叫做页分裂，会导致性能下降。空间利用率降低大概50%。当相邻的两个数据页利用率很低的时候会做数据页合并，合并的过程是分裂过程的逆过程。\n\n\n\n#### 覆盖索引\n\n\n\n如果查询条件使用的是普通索引（或是联合索引的最左原则字段），查询结果是联合索引的字段或是主键，那么就不用回表操作，直接在联合索引 索引树就可以查找到数据，可以直接返回结果\n\n\n\n必须索引包含了where条件部分和select返回部分的所有字段，才能实现覆盖索引\n\n\n\n> 最好是用上limit 或者where之类的语句，来限定回表到聚簇索引的次数\n\n\n\n#### 唯一索引\n\n\n\n唯一索引就是字面意思，一个表中只有一个索引，如果这个索引不是主键索引，那么它就只可能是非主键索引（即我们常说的二级索引或普通索引）\n\n\n\n#### 联合索引\n\n\n\n就是依次按照每个字段进行二分查找，先定位到第一个字段的值在哪个页里，然后如果一个页里有很多条数据都一样，就会根据第二个字段来找，以此类推\n\n\n\n> 联合索引的叶子节点放的是也是页，但是不是整个页数据，而是联合索引中的那些字段\n\n\n\n### 设计索引\n\n\n\n1. 尽量让使用基数比较大的字段，就是值比较多的字段用上索引，充分发挥B+树的优势\n\n\n\n   > 基础比较大的字段是说，比如一个字段，虽然在所有的行中都有值，但是其实都是0和1，那么就没有必要为这个字段设置索引\n\n   >\n\n   > 因为你的索引字段中如果只有1和0两个数字，也就没有办法利用二分查找，所以设置这个字段为索引也就没有什么意义\n\n\n\n2. 尽量对字段的类型比较小的字段进行索引\n\n\n\n3. 尽量不要让查询语句中有函数或者计算，这样会导致用不上索引\n\n\n\n4. 尽量主键是自增的，不要用uuid之类的，因为如果主键是自增的，就会自然进行页分裂，但是如果不是，就会导致频繁的页分裂\n\n\n\n5. 索引不要太多，一般两三个联合索引就可以覆盖一个表的全部查询了\n\n\n\n   > 一个表中的索引太多的话，会导致虽然查询非常方便，但是增删改每次都要维护巨大的索引树，性能会急速下降\n\n\n\n6. 尽量范围查询放在最后面，保证索引都可以用\n\n\n\n> where 筛选和order by排序实际上大部分情况下，是没有办法同时用到索引的\n\n>\n\n> 这个时候，推荐让where用上索引，因为where用上索引，会在数据量小的情况下，先将符合条件的where的数据加载到内存中，然后根据order by条件进行排序，在内存中排序会比直接在磁盘排序要快得多\n\n\n\n#### 重点\n\n\n\n尽量利用一两个复杂的多字段的联合索引，支撑下80%以上的查询，然后利用一两个辅助索引支撑下剩余20%的非典型索引，保证99%以上的查询都能充分利用索引，就能保证你的查询和性能！\n\n\n\n### 技巧\n\n\n\n1. 比如你经常需要查询在七天之内登录的用户，完全可以将这个情况当做一个字段，新增这个字段，比如1就是七天之内登录，0就是七天之内没有登录，直接将其转换为枚举值了\n\n\n\n### 注意问题\n\n\n\n对索引字段做函数操作，优化器会放弃走树搜索功能\n\n\n\n如果一个字段做了范围索引，那么之后的索引都会失效，所以一般建议范围索引放在最后面\n\n\n\n## 排序\n\n\n\n### 使用\n\n\n\n经常用的多字段排序，可以直接按照顺序建立一个联合索引，由于索引本身就有排序，所以速度很快，直接根据索引树查找即可\n\n\n\n要求必须要都是升序或者降序，mysql默认为升序，降序的话需要在order by后面+desc\n\n\n\n### where和orderby\n\n\n\n当where和orderby只能选择一个使用索引的时候，如果数据量小，可以选择先where查找出来数据，之后再进行排序和分页，成本不会太大\n\n\n\n### 原理\n\n\n\nMySQL会为每个线程分配一个内存（sort_buffer）用于排序该内存大小为sort_buffer_size\n\n\n\n- 如果排序的数据量小于sort_buffer_size，排序将会在内存中完成\n\n- 如果排序数据量很大，内存中无法存下这么多数据，则会使用磁盘临时文件来辅助排序，也称外部排序\n\n- 在使用外部排序时，MySQL会分成好几份单独的临时文件用来存放排序后的数据，然后在将这些文件合并成一个大文件\n\n\n\nmysql会通过遍历索引将满足条件的数据读取到sort_buffer，并且按照排序字段进行快速排序\n\n\n\n- 如果查询的字段不包含在辅助索引中，需要按照辅助索引记录的主键返回聚集索引取出所需字段\n\n- 该方式会造成随机IO，在MySQL5.6提供了MRR的机制，会将辅助索引匹配记录的主键取出来在内存中进行排序，然后在回表\n\n- 按照情况建立联合索引来避免排序所带来的性能损耗，允许的情况下也可以建立覆盖索引来避免回表","source":"_posts/mysql索引.md","raw":"---\ntitle: mysql索引\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 71014c5a\ndate: 2021-04-01 00:00:00\n---\n\n\n想要了解mysql的索引，首先要了解mysql的物理存储结构\n\n\n\n## 物理存储结构\n\n\n\n<!-- more -->\n\n\n\n![image-20210401131310090](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210401131310090.png)\n\n\n\nmysql的物理存储结构其实就是上图所示，是一个双向链表，每个结点的都是一个数据页，\n\n\n\n一行一行的数据就放在这个数据页中\n\n\n\n## 索引\n\n\n\n为什么会产生索引这么一个东西，很简单，就是加快查询速度啊！\n\n\n\n其实索引就和书籍的目录一样，都是为了更快的可以找到所需要的数据\n\n\n\n那数据库的索引究竟是什么样子那？\n\n\n\n其实就和书籍的目录一样，就是将每一个数据页的最小数据放在目录上，根据这个数据来进行多次的二分查找\n\n\n\n### 页分裂\n\n\n\n目的：就是进行主键排序，保证所有的数据页的主键都是从小到大排序的\n\n\n\n页分裂这个其实也很简单，数据库中那么多数据，一个数据页肯定存储不下，当存储的数据大于一个数据页的时候，就会将新的数据和这个数据页的整体数据进行排序，主键比较大的数据放在新建的数据页中\n\n\n\n### 构成\n\n\n\n其实我们从索引的作用就可以自己猜想出来索引的组成了\n\n\n\n1. 首先，肯定是有对应数据页的主键的最小值，目的很简单，就是用于二分查找，提高查询的速度\n\n2. 根据上一步拿到了想要找的数据所在的数据页，但是具体是那个不知道啊，所以就必须有 数据页页号\n\n\n\n### B+树\n\n\n\n众所周知myslq数据库采用的B+树的数据结构，那究竟是为什那？\n\n\n\n有以下三个原因\n\n\n\n- 单一节点存储的元素更多，使得查询的IO次数更少，所以也就使得它更适合做为数据库MySQL的底层数据结构了。\n\n- 所有的查询都要查找到叶子节点，查询性能是稳定的，而B树，每个节点都可以查找到数据，所以不稳定。\n\n- 所有的叶子节点形成了一个有序链表，更加便于查找。\n\n\n\n### 原则\n\n\n\n#### 最左匹配原则\n\n\n\n比如说你建立了一个（a,b）的索引，就没有必要再建立a索引了，因为（a，b）这个所以已经包括了a索引了，所有没有必要再单独建立b索引，但是b索引还是要单独建立的，因为（a,b）是满足a且满足b的情况，与只索引b不是一个意思\n\n\n\n当然，a和b你要考虑这两个索引的大小，尽量选择较小的那个，单独作为索引，因为这样速度相对来说会快一点\n\n\n\n> 第一原则是，如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的。\n\n\n\n#### 等值原则\n\n\n\n查询的字段和数据库的字段一样，而且是=进行匹配的，百分之一百会使用索引\n\n\n\n#### 最左前缀匹配原则\n\n\n\n如果要用like来进行模糊查询，1%可以用上索引，但是%1就不行了\n\n\n\n#### 范围查找原则\n\n\n\n如果where语句中有范围查询，那么只有联合索引的最左侧的索引进行范围查找才能用到索引\n\n\n\n#### 等值匹配+范围匹配原则\n\n\n\n### 类型\n\n\n\n#### 主键索引\n\n\n\n主键索引又被称为聚簇索引\n\n\n\n> 主键索引的叶子节点存的是完整的数据页\n\n\n\n在Key-Value的场景下，只有一个索引且是唯一索引，则适合直接使用业务字段作为主键索引。\n\n\n\n主键索引首先要去查询主键目录，主键目录维护的就是每个数据页的页号和最小的主键值\n\n\n\n#### 非主键索引\n\n\n\n别名：二级索引、辅助索引、普通索引\n\n\n\n非主键索引的叶子节点内容是主键的值\n\n\n\n叶子结点存储的是主键+字段值\n\n\n\n在不影响排序结果的情况下，在取出主键后，回表之前，会在对所有获取到的主键排序\n\n\n\n> - 如果一个主键被定义了，那么这个主键就是作为聚集索引。\n\n>\n\n> - 如果没有主键被定义，那么该表的第一个唯一非空索引被作为聚集索引。\n\n>\n\n> - 如果没有主键也没有合适的唯一索引，那么innodb内部会生成一个隐藏的主键作为聚集索引，这个隐藏的主键是一个6个字节的列row_id，该列的值会随着数据的插入自增。\n\n\n\n减少回表次数的方法\n\n\n\n> 覆盖索引\n\n\n\n一般来说，一个sql语句中只能用到一个二级索引，但是也有可能同时查多个索引树取个交集，再回表到主键索引，这个可能性是有的\n\n\n\n#### 区别\n\n\n\n主键索引和普通索引的区别：主键索引只要搜索ID这个B+Tree即可拿到数据。普通索引先搜索索引拿到主键值，再到主键索引树搜索一次(回表)\n\n\n\n> 那么我们是选择用业务字段来当做主键，还是一个自增字段来当做主键？\n\n\n\n- 首先自增主键的插入数据模式，正符合了我们前面提到的递增插入的场景。每次插入一条新记录，都是追加操作，都不涉及到挪动其他记录，也不会触发叶子节点的分裂。而有业务逻辑的字段做主键，则往往不容易保证有序插入，这样写数据成本相对较高。\n\n- 除了考虑性能外，我们还可以从存储空间的角度来看。假设你的表中确实有一个唯一字段，比如字符串类型的身份证号，那应该用身份证号做主键，还是用自增字段做主键呢？由于每个非主键索引的叶子节点上都是主键的值。如果用身份证号做主键，那么每个二级索引的叶子节点占用约 20 个字节，而如果用整型做主键，则只要 4 个字节，如果是长整型（bigint）则是 8 个字节。\n\n\n\n显然，主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小。\n\n\n\n所以，从性能和存储空间方面考量，自增主键往往是更合理的选择\n\n\n\n一个数据页满了，按照B+Tree算法，新增加一个数据页，叫做页分裂，会导致性能下降。空间利用率降低大概50%。当相邻的两个数据页利用率很低的时候会做数据页合并，合并的过程是分裂过程的逆过程。\n\n\n\n#### 覆盖索引\n\n\n\n如果查询条件使用的是普通索引（或是联合索引的最左原则字段），查询结果是联合索引的字段或是主键，那么就不用回表操作，直接在联合索引 索引树就可以查找到数据，可以直接返回结果\n\n\n\n必须索引包含了where条件部分和select返回部分的所有字段，才能实现覆盖索引\n\n\n\n> 最好是用上limit 或者where之类的语句，来限定回表到聚簇索引的次数\n\n\n\n#### 唯一索引\n\n\n\n唯一索引就是字面意思，一个表中只有一个索引，如果这个索引不是主键索引，那么它就只可能是非主键索引（即我们常说的二级索引或普通索引）\n\n\n\n#### 联合索引\n\n\n\n就是依次按照每个字段进行二分查找，先定位到第一个字段的值在哪个页里，然后如果一个页里有很多条数据都一样，就会根据第二个字段来找，以此类推\n\n\n\n> 联合索引的叶子节点放的是也是页，但是不是整个页数据，而是联合索引中的那些字段\n\n\n\n### 设计索引\n\n\n\n1. 尽量让使用基数比较大的字段，就是值比较多的字段用上索引，充分发挥B+树的优势\n\n\n\n   > 基础比较大的字段是说，比如一个字段，虽然在所有的行中都有值，但是其实都是0和1，那么就没有必要为这个字段设置索引\n\n   >\n\n   > 因为你的索引字段中如果只有1和0两个数字，也就没有办法利用二分查找，所以设置这个字段为索引也就没有什么意义\n\n\n\n2. 尽量对字段的类型比较小的字段进行索引\n\n\n\n3. 尽量不要让查询语句中有函数或者计算，这样会导致用不上索引\n\n\n\n4. 尽量主键是自增的，不要用uuid之类的，因为如果主键是自增的，就会自然进行页分裂，但是如果不是，就会导致频繁的页分裂\n\n\n\n5. 索引不要太多，一般两三个联合索引就可以覆盖一个表的全部查询了\n\n\n\n   > 一个表中的索引太多的话，会导致虽然查询非常方便，但是增删改每次都要维护巨大的索引树，性能会急速下降\n\n\n\n6. 尽量范围查询放在最后面，保证索引都可以用\n\n\n\n> where 筛选和order by排序实际上大部分情况下，是没有办法同时用到索引的\n\n>\n\n> 这个时候，推荐让where用上索引，因为where用上索引，会在数据量小的情况下，先将符合条件的where的数据加载到内存中，然后根据order by条件进行排序，在内存中排序会比直接在磁盘排序要快得多\n\n\n\n#### 重点\n\n\n\n尽量利用一两个复杂的多字段的联合索引，支撑下80%以上的查询，然后利用一两个辅助索引支撑下剩余20%的非典型索引，保证99%以上的查询都能充分利用索引，就能保证你的查询和性能！\n\n\n\n### 技巧\n\n\n\n1. 比如你经常需要查询在七天之内登录的用户，完全可以将这个情况当做一个字段，新增这个字段，比如1就是七天之内登录，0就是七天之内没有登录，直接将其转换为枚举值了\n\n\n\n### 注意问题\n\n\n\n对索引字段做函数操作，优化器会放弃走树搜索功能\n\n\n\n如果一个字段做了范围索引，那么之后的索引都会失效，所以一般建议范围索引放在最后面\n\n\n\n## 排序\n\n\n\n### 使用\n\n\n\n经常用的多字段排序，可以直接按照顺序建立一个联合索引，由于索引本身就有排序，所以速度很快，直接根据索引树查找即可\n\n\n\n要求必须要都是升序或者降序，mysql默认为升序，降序的话需要在order by后面+desc\n\n\n\n### where和orderby\n\n\n\n当where和orderby只能选择一个使用索引的时候，如果数据量小，可以选择先where查找出来数据，之后再进行排序和分页，成本不会太大\n\n\n\n### 原理\n\n\n\nMySQL会为每个线程分配一个内存（sort_buffer）用于排序该内存大小为sort_buffer_size\n\n\n\n- 如果排序的数据量小于sort_buffer_size，排序将会在内存中完成\n\n- 如果排序数据量很大，内存中无法存下这么多数据，则会使用磁盘临时文件来辅助排序，也称外部排序\n\n- 在使用外部排序时，MySQL会分成好几份单独的临时文件用来存放排序后的数据，然后在将这些文件合并成一个大文件\n\n\n\nmysql会通过遍历索引将满足条件的数据读取到sort_buffer，并且按照排序字段进行快速排序\n\n\n\n- 如果查询的字段不包含在辅助索引中，需要按照辅助索引记录的主键返回聚集索引取出所需字段\n\n- 该方式会造成随机IO，在MySQL5.6提供了MRR的机制，会将辅助索引匹配记录的主键取出来在内存中进行排序，然后在回表\n\n- 按照情况建立联合索引来避免排序所带来的性能损耗，允许的情况下也可以建立覆盖索引来避免回表","slug":"mysql索引","published":1,"updated":"2025-03-02T03:37:34.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4s002vn0uk1be2e042","content":"<p>想要了解mysql的索引，首先要了解mysql的物理存储结构</p>\n<h2 id=\"物理存储结构\"><a href=\"#物理存储结构\" class=\"headerlink\" title=\"物理存储结构\"></a>物理存储结构</h2><span id=\"more\"></span>\n\n\n\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210401131310090.png\" alt=\"image-20210401131310090\" loading=\"lazy\"></p>\n<p>mysql的物理存储结构其实就是上图所示，是一个双向链表，每个结点的都是一个数据页，</p>\n<p>一行一行的数据就放在这个数据页中</p>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><p>为什么会产生索引这么一个东西，很简单，就是加快查询速度啊！</p>\n<p>其实索引就和书籍的目录一样，都是为了更快的可以找到所需要的数据</p>\n<p>那数据库的索引究竟是什么样子那？</p>\n<p>其实就和书籍的目录一样，就是将每一个数据页的最小数据放在目录上，根据这个数据来进行多次的二分查找</p>\n<h3 id=\"页分裂\"><a href=\"#页分裂\" class=\"headerlink\" title=\"页分裂\"></a>页分裂</h3><p>目的：就是进行主键排序，保证所有的数据页的主键都是从小到大排序的</p>\n<p>页分裂这个其实也很简单，数据库中那么多数据，一个数据页肯定存储不下，当存储的数据大于一个数据页的时候，就会将新的数据和这个数据页的整体数据进行排序，主键比较大的数据放在新建的数据页中</p>\n<h3 id=\"构成\"><a href=\"#构成\" class=\"headerlink\" title=\"构成\"></a>构成</h3><p>其实我们从索引的作用就可以自己猜想出来索引的组成了</p>\n<ol>\n<li><p>首先，肯定是有对应数据页的主键的最小值，目的很简单，就是用于二分查找，提高查询的速度</p>\n</li>\n<li><p>根据上一步拿到了想要找的数据所在的数据页，但是具体是那个不知道啊，所以就必须有 数据页页号</p>\n</li>\n</ol>\n<h3 id=\"B-树\"><a href=\"#B-树\" class=\"headerlink\" title=\"B+树\"></a>B+树</h3><p>众所周知myslq数据库采用的B+树的数据结构，那究竟是为什那？</p>\n<p>有以下三个原因</p>\n<ul>\n<li><p>单一节点存储的元素更多，使得查询的IO次数更少，所以也就使得它更适合做为数据库MySQL的底层数据结构了。</p>\n</li>\n<li><p>所有的查询都要查找到叶子节点，查询性能是稳定的，而B树，每个节点都可以查找到数据，所以不稳定。</p>\n</li>\n<li><p>所有的叶子节点形成了一个有序链表，更加便于查找。</p>\n</li>\n</ul>\n<h3 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h3><h4 id=\"最左匹配原则\"><a href=\"#最左匹配原则\" class=\"headerlink\" title=\"最左匹配原则\"></a>最左匹配原则</h4><p>比如说你建立了一个（a,b）的索引，就没有必要再建立a索引了，因为（a，b）这个所以已经包括了a索引了，所有没有必要再单独建立b索引，但是b索引还是要单独建立的，因为（a,b）是满足a且满足b的情况，与只索引b不是一个意思</p>\n<p>当然，a和b你要考虑这两个索引的大小，尽量选择较小的那个，单独作为索引，因为这样速度相对来说会快一点</p>\n<blockquote>\n<p>第一原则是，如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的。</p>\n</blockquote>\n<h4 id=\"等值原则\"><a href=\"#等值原则\" class=\"headerlink\" title=\"等值原则\"></a>等值原则</h4><p>查询的字段和数据库的字段一样，而且是&#x3D;进行匹配的，百分之一百会使用索引</p>\n<h4 id=\"最左前缀匹配原则\"><a href=\"#最左前缀匹配原则\" class=\"headerlink\" title=\"最左前缀匹配原则\"></a>最左前缀匹配原则</h4><p>如果要用like来进行模糊查询，1%可以用上索引，但是%1就不行了</p>\n<h4 id=\"范围查找原则\"><a href=\"#范围查找原则\" class=\"headerlink\" title=\"范围查找原则\"></a>范围查找原则</h4><p>如果where语句中有范围查询，那么只有联合索引的最左侧的索引进行范围查找才能用到索引</p>\n<h4 id=\"等值匹配-范围匹配原则\"><a href=\"#等值匹配-范围匹配原则\" class=\"headerlink\" title=\"等值匹配+范围匹配原则\"></a>等值匹配+范围匹配原则</h4><h3 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h3><h4 id=\"主键索引\"><a href=\"#主键索引\" class=\"headerlink\" title=\"主键索引\"></a>主键索引</h4><p>主键索引又被称为聚簇索引</p>\n<blockquote>\n<p>主键索引的叶子节点存的是完整的数据页</p>\n</blockquote>\n<p>在Key-Value的场景下，只有一个索引且是唯一索引，则适合直接使用业务字段作为主键索引。</p>\n<p>主键索引首先要去查询主键目录，主键目录维护的就是每个数据页的页号和最小的主键值</p>\n<h4 id=\"非主键索引\"><a href=\"#非主键索引\" class=\"headerlink\" title=\"非主键索引\"></a>非主键索引</h4><p>别名：二级索引、辅助索引、普通索引</p>\n<p>非主键索引的叶子节点内容是主键的值</p>\n<p>叶子结点存储的是主键+字段值</p>\n<p>在不影响排序结果的情况下，在取出主键后，回表之前，会在对所有获取到的主键排序</p>\n<blockquote>\n<ul>\n<li>如果一个主键被定义了，那么这个主键就是作为聚集索引。</li>\n</ul>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ul>\n<li>如果没有主键被定义，那么该表的第一个唯一非空索引被作为聚集索引。</li>\n</ul>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ul>\n<li>如果没有主键也没有合适的唯一索引，那么innodb内部会生成一个隐藏的主键作为聚集索引，这个隐藏的主键是一个6个字节的列row_id，该列的值会随着数据的插入自增。</li>\n</ul>\n</blockquote>\n<p>减少回表次数的方法</p>\n<blockquote>\n<p>覆盖索引</p>\n</blockquote>\n<p>一般来说，一个sql语句中只能用到一个二级索引，但是也有可能同时查多个索引树取个交集，再回表到主键索引，这个可能性是有的</p>\n<h4 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h4><p>主键索引和普通索引的区别：主键索引只要搜索ID这个B+Tree即可拿到数据。普通索引先搜索索引拿到主键值，再到主键索引树搜索一次(回表)</p>\n<blockquote>\n<p>那么我们是选择用业务字段来当做主键，还是一个自增字段来当做主键？</p>\n</blockquote>\n<ul>\n<li><p>首先自增主键的插入数据模式，正符合了我们前面提到的递增插入的场景。每次插入一条新记录，都是追加操作，都不涉及到挪动其他记录，也不会触发叶子节点的分裂。而有业务逻辑的字段做主键，则往往不容易保证有序插入，这样写数据成本相对较高。</p>\n</li>\n<li><p>除了考虑性能外，我们还可以从存储空间的角度来看。假设你的表中确实有一个唯一字段，比如字符串类型的身份证号，那应该用身份证号做主键，还是用自增字段做主键呢？由于每个非主键索引的叶子节点上都是主键的值。如果用身份证号做主键，那么每个二级索引的叶子节点占用约 20 个字节，而如果用整型做主键，则只要 4 个字节，如果是长整型（bigint）则是 8 个字节。</p>\n</li>\n</ul>\n<p>显然，主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小。</p>\n<p>所以，从性能和存储空间方面考量，自增主键往往是更合理的选择</p>\n<p>一个数据页满了，按照B+Tree算法，新增加一个数据页，叫做页分裂，会导致性能下降。空间利用率降低大概50%。当相邻的两个数据页利用率很低的时候会做数据页合并，合并的过程是分裂过程的逆过程。</p>\n<h4 id=\"覆盖索引\"><a href=\"#覆盖索引\" class=\"headerlink\" title=\"覆盖索引\"></a>覆盖索引</h4><p>如果查询条件使用的是普通索引（或是联合索引的最左原则字段），查询结果是联合索引的字段或是主键，那么就不用回表操作，直接在联合索引 索引树就可以查找到数据，可以直接返回结果</p>\n<p>必须索引包含了where条件部分和select返回部分的所有字段，才能实现覆盖索引</p>\n<blockquote>\n<p>最好是用上limit 或者where之类的语句，来限定回表到聚簇索引的次数</p>\n</blockquote>\n<h4 id=\"唯一索引\"><a href=\"#唯一索引\" class=\"headerlink\" title=\"唯一索引\"></a>唯一索引</h4><p>唯一索引就是字面意思，一个表中只有一个索引，如果这个索引不是主键索引，那么它就只可能是非主键索引（即我们常说的二级索引或普通索引）</p>\n<h4 id=\"联合索引\"><a href=\"#联合索引\" class=\"headerlink\" title=\"联合索引\"></a>联合索引</h4><p>就是依次按照每个字段进行二分查找，先定位到第一个字段的值在哪个页里，然后如果一个页里有很多条数据都一样，就会根据第二个字段来找，以此类推</p>\n<blockquote>\n<p>联合索引的叶子节点放的是也是页，但是不是整个页数据，而是联合索引中的那些字段</p>\n</blockquote>\n<h3 id=\"设计索引\"><a href=\"#设计索引\" class=\"headerlink\" title=\"设计索引\"></a>设计索引</h3><ol>\n<li><p>尽量让使用基数比较大的字段，就是值比较多的字段用上索引，充分发挥B+树的优势</p>\n<blockquote>\n<p>基础比较大的字段是说，比如一个字段，虽然在所有的行中都有值，但是其实都是0和1，那么就没有必要为这个字段设置索引</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>因为你的索引字段中如果只有1和0两个数字，也就没有办法利用二分查找，所以设置这个字段为索引也就没有什么意义</p>\n</blockquote>\n</li>\n<li><p>尽量对字段的类型比较小的字段进行索引</p>\n</li>\n<li><p>尽量不要让查询语句中有函数或者计算，这样会导致用不上索引</p>\n</li>\n<li><p>尽量主键是自增的，不要用uuid之类的，因为如果主键是自增的，就会自然进行页分裂，但是如果不是，就会导致频繁的页分裂</p>\n</li>\n<li><p>索引不要太多，一般两三个联合索引就可以覆盖一个表的全部查询了</p>\n<blockquote>\n<p>一个表中的索引太多的话，会导致虽然查询非常方便，但是增删改每次都要维护巨大的索引树，性能会急速下降</p>\n</blockquote>\n</li>\n<li><p>尽量范围查询放在最后面，保证索引都可以用</p>\n</li>\n</ol>\n<blockquote>\n<p>where 筛选和order by排序实际上大部分情况下，是没有办法同时用到索引的</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>这个时候，推荐让where用上索引，因为where用上索引，会在数据量小的情况下，先将符合条件的where的数据加载到内存中，然后根据order by条件进行排序，在内存中排序会比直接在磁盘排序要快得多</p>\n</blockquote>\n<h4 id=\"重点\"><a href=\"#重点\" class=\"headerlink\" title=\"重点\"></a>重点</h4><p>尽量利用一两个复杂的多字段的联合索引，支撑下80%以上的查询，然后利用一两个辅助索引支撑下剩余20%的非典型索引，保证99%以上的查询都能充分利用索引，就能保证你的查询和性能！</p>\n<h3 id=\"技巧\"><a href=\"#技巧\" class=\"headerlink\" title=\"技巧\"></a>技巧</h3><ol>\n<li>比如你经常需要查询在七天之内登录的用户，完全可以将这个情况当做一个字段，新增这个字段，比如1就是七天之内登录，0就是七天之内没有登录，直接将其转换为枚举值了</li>\n</ol>\n<h3 id=\"注意问题\"><a href=\"#注意问题\" class=\"headerlink\" title=\"注意问题\"></a>注意问题</h3><p>对索引字段做函数操作，优化器会放弃走树搜索功能</p>\n<p>如果一个字段做了范围索引，那么之后的索引都会失效，所以一般建议范围索引放在最后面</p>\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>经常用的多字段排序，可以直接按照顺序建立一个联合索引，由于索引本身就有排序，所以速度很快，直接根据索引树查找即可</p>\n<p>要求必须要都是升序或者降序，mysql默认为升序，降序的话需要在order by后面+desc</p>\n<h3 id=\"where和orderby\"><a href=\"#where和orderby\" class=\"headerlink\" title=\"where和orderby\"></a>where和orderby</h3><p>当where和orderby只能选择一个使用索引的时候，如果数据量小，可以选择先where查找出来数据，之后再进行排序和分页，成本不会太大</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>MySQL会为每个线程分配一个内存（sort_buffer）用于排序该内存大小为sort_buffer_size</p>\n<ul>\n<li><p>如果排序的数据量小于sort_buffer_size，排序将会在内存中完成</p>\n</li>\n<li><p>如果排序数据量很大，内存中无法存下这么多数据，则会使用磁盘临时文件来辅助排序，也称外部排序</p>\n</li>\n<li><p>在使用外部排序时，MySQL会分成好几份单独的临时文件用来存放排序后的数据，然后在将这些文件合并成一个大文件</p>\n</li>\n</ul>\n<p>mysql会通过遍历索引将满足条件的数据读取到sort_buffer，并且按照排序字段进行快速排序</p>\n<ul>\n<li><p>如果查询的字段不包含在辅助索引中，需要按照辅助索引记录的主键返回聚集索引取出所需字段</p>\n</li>\n<li><p>该方式会造成随机IO，在MySQL5.6提供了MRR的机制，会将辅助索引匹配记录的主键取出来在内存中进行排序，然后在回表</p>\n</li>\n<li><p>按照情况建立联合索引来避免排序所带来的性能损耗，允许的情况下也可以建立覆盖索引来避免回表</p>\n</li>\n</ul>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"想要了解mysql的索引，首先要了解mysql的物理存储结构\n\n物理存储结构\n\n\nmysql的物理存储结构其实就是上图所示，是一个双向链表，每个结点的都是一个数据页，\n\n一行一行的数据就放在这个数据页中\n\n索引\n为什么会产生索引这么一个东西，很简单，就是加快查询速度啊！\n\n其实索引就和书籍的目录一样，都是为了更快的可以找到所需要的数据\n\n那数据库的索引究竟是什么样子那？\n\n其实就和书籍的目录一样，就是将每一个数据页的最小数据放在目录上，根据这个数据来进行多次的二分查找\n\n页分裂\n目的：就是进行主键排序，保证所有的数据页的主键都是从小到大排序的\n\n页分裂这个其实也很简单，数据库中那么多数据，一个","more":"<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210401131310090.png\" alt=\"image-20210401131310090\" loading=\"lazy\"></p>\n<p>mysql的物理存储结构其实就是上图所示，是一个双向链表，每个结点的都是一个数据页，</p>\n<p>一行一行的数据就放在这个数据页中</p>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><p>为什么会产生索引这么一个东西，很简单，就是加快查询速度啊！</p>\n<p>其实索引就和书籍的目录一样，都是为了更快的可以找到所需要的数据</p>\n<p>那数据库的索引究竟是什么样子那？</p>\n<p>其实就和书籍的目录一样，就是将每一个数据页的最小数据放在目录上，根据这个数据来进行多次的二分查找</p>\n<h3 id=\"页分裂\"><a href=\"#页分裂\" class=\"headerlink\" title=\"页分裂\"></a>页分裂</h3><p>目的：就是进行主键排序，保证所有的数据页的主键都是从小到大排序的</p>\n<p>页分裂这个其实也很简单，数据库中那么多数据，一个数据页肯定存储不下，当存储的数据大于一个数据页的时候，就会将新的数据和这个数据页的整体数据进行排序，主键比较大的数据放在新建的数据页中</p>\n<h3 id=\"构成\"><a href=\"#构成\" class=\"headerlink\" title=\"构成\"></a>构成</h3><p>其实我们从索引的作用就可以自己猜想出来索引的组成了</p>\n<ol>\n<li><p>首先，肯定是有对应数据页的主键的最小值，目的很简单，就是用于二分查找，提高查询的速度</p>\n</li>\n<li><p>根据上一步拿到了想要找的数据所在的数据页，但是具体是那个不知道啊，所以就必须有 数据页页号</p>\n</li>\n</ol>\n<h3 id=\"B-树\"><a href=\"#B-树\" class=\"headerlink\" title=\"B+树\"></a>B+树</h3><p>众所周知myslq数据库采用的B+树的数据结构，那究竟是为什那？</p>\n<p>有以下三个原因</p>\n<ul>\n<li><p>单一节点存储的元素更多，使得查询的IO次数更少，所以也就使得它更适合做为数据库MySQL的底层数据结构了。</p>\n</li>\n<li><p>所有的查询都要查找到叶子节点，查询性能是稳定的，而B树，每个节点都可以查找到数据，所以不稳定。</p>\n</li>\n<li><p>所有的叶子节点形成了一个有序链表，更加便于查找。</p>\n</li>\n</ul>\n<h3 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h3><h4 id=\"最左匹配原则\"><a href=\"#最左匹配原则\" class=\"headerlink\" title=\"最左匹配原则\"></a>最左匹配原则</h4><p>比如说你建立了一个（a,b）的索引，就没有必要再建立a索引了，因为（a，b）这个所以已经包括了a索引了，所有没有必要再单独建立b索引，但是b索引还是要单独建立的，因为（a,b）是满足a且满足b的情况，与只索引b不是一个意思</p>\n<p>当然，a和b你要考虑这两个索引的大小，尽量选择较小的那个，单独作为索引，因为这样速度相对来说会快一点</p>\n<blockquote>\n<p>第一原则是，如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的。</p>\n</blockquote>\n<h4 id=\"等值原则\"><a href=\"#等值原则\" class=\"headerlink\" title=\"等值原则\"></a>等值原则</h4><p>查询的字段和数据库的字段一样，而且是&#x3D;进行匹配的，百分之一百会使用索引</p>\n<h4 id=\"最左前缀匹配原则\"><a href=\"#最左前缀匹配原则\" class=\"headerlink\" title=\"最左前缀匹配原则\"></a>最左前缀匹配原则</h4><p>如果要用like来进行模糊查询，1%可以用上索引，但是%1就不行了</p>\n<h4 id=\"范围查找原则\"><a href=\"#范围查找原则\" class=\"headerlink\" title=\"范围查找原则\"></a>范围查找原则</h4><p>如果where语句中有范围查询，那么只有联合索引的最左侧的索引进行范围查找才能用到索引</p>\n<h4 id=\"等值匹配-范围匹配原则\"><a href=\"#等值匹配-范围匹配原则\" class=\"headerlink\" title=\"等值匹配+范围匹配原则\"></a>等值匹配+范围匹配原则</h4><h3 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h3><h4 id=\"主键索引\"><a href=\"#主键索引\" class=\"headerlink\" title=\"主键索引\"></a>主键索引</h4><p>主键索引又被称为聚簇索引</p>\n<blockquote>\n<p>主键索引的叶子节点存的是完整的数据页</p>\n</blockquote>\n<p>在Key-Value的场景下，只有一个索引且是唯一索引，则适合直接使用业务字段作为主键索引。</p>\n<p>主键索引首先要去查询主键目录，主键目录维护的就是每个数据页的页号和最小的主键值</p>\n<h4 id=\"非主键索引\"><a href=\"#非主键索引\" class=\"headerlink\" title=\"非主键索引\"></a>非主键索引</h4><p>别名：二级索引、辅助索引、普通索引</p>\n<p>非主键索引的叶子节点内容是主键的值</p>\n<p>叶子结点存储的是主键+字段值</p>\n<p>在不影响排序结果的情况下，在取出主键后，回表之前，会在对所有获取到的主键排序</p>\n<blockquote>\n<ul>\n<li>如果一个主键被定义了，那么这个主键就是作为聚集索引。</li>\n</ul>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ul>\n<li>如果没有主键被定义，那么该表的第一个唯一非空索引被作为聚集索引。</li>\n</ul>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ul>\n<li>如果没有主键也没有合适的唯一索引，那么innodb内部会生成一个隐藏的主键作为聚集索引，这个隐藏的主键是一个6个字节的列row_id，该列的值会随着数据的插入自增。</li>\n</ul>\n</blockquote>\n<p>减少回表次数的方法</p>\n<blockquote>\n<p>覆盖索引</p>\n</blockquote>\n<p>一般来说，一个sql语句中只能用到一个二级索引，但是也有可能同时查多个索引树取个交集，再回表到主键索引，这个可能性是有的</p>\n<h4 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h4><p>主键索引和普通索引的区别：主键索引只要搜索ID这个B+Tree即可拿到数据。普通索引先搜索索引拿到主键值，再到主键索引树搜索一次(回表)</p>\n<blockquote>\n<p>那么我们是选择用业务字段来当做主键，还是一个自增字段来当做主键？</p>\n</blockquote>\n<ul>\n<li><p>首先自增主键的插入数据模式，正符合了我们前面提到的递增插入的场景。每次插入一条新记录，都是追加操作，都不涉及到挪动其他记录，也不会触发叶子节点的分裂。而有业务逻辑的字段做主键，则往往不容易保证有序插入，这样写数据成本相对较高。</p>\n</li>\n<li><p>除了考虑性能外，我们还可以从存储空间的角度来看。假设你的表中确实有一个唯一字段，比如字符串类型的身份证号，那应该用身份证号做主键，还是用自增字段做主键呢？由于每个非主键索引的叶子节点上都是主键的值。如果用身份证号做主键，那么每个二级索引的叶子节点占用约 20 个字节，而如果用整型做主键，则只要 4 个字节，如果是长整型（bigint）则是 8 个字节。</p>\n</li>\n</ul>\n<p>显然，主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小。</p>\n<p>所以，从性能和存储空间方面考量，自增主键往往是更合理的选择</p>\n<p>一个数据页满了，按照B+Tree算法，新增加一个数据页，叫做页分裂，会导致性能下降。空间利用率降低大概50%。当相邻的两个数据页利用率很低的时候会做数据页合并，合并的过程是分裂过程的逆过程。</p>\n<h4 id=\"覆盖索引\"><a href=\"#覆盖索引\" class=\"headerlink\" title=\"覆盖索引\"></a>覆盖索引</h4><p>如果查询条件使用的是普通索引（或是联合索引的最左原则字段），查询结果是联合索引的字段或是主键，那么就不用回表操作，直接在联合索引 索引树就可以查找到数据，可以直接返回结果</p>\n<p>必须索引包含了where条件部分和select返回部分的所有字段，才能实现覆盖索引</p>\n<blockquote>\n<p>最好是用上limit 或者where之类的语句，来限定回表到聚簇索引的次数</p>\n</blockquote>\n<h4 id=\"唯一索引\"><a href=\"#唯一索引\" class=\"headerlink\" title=\"唯一索引\"></a>唯一索引</h4><p>唯一索引就是字面意思，一个表中只有一个索引，如果这个索引不是主键索引，那么它就只可能是非主键索引（即我们常说的二级索引或普通索引）</p>\n<h4 id=\"联合索引\"><a href=\"#联合索引\" class=\"headerlink\" title=\"联合索引\"></a>联合索引</h4><p>就是依次按照每个字段进行二分查找，先定位到第一个字段的值在哪个页里，然后如果一个页里有很多条数据都一样，就会根据第二个字段来找，以此类推</p>\n<blockquote>\n<p>联合索引的叶子节点放的是也是页，但是不是整个页数据，而是联合索引中的那些字段</p>\n</blockquote>\n<h3 id=\"设计索引\"><a href=\"#设计索引\" class=\"headerlink\" title=\"设计索引\"></a>设计索引</h3><ol>\n<li><p>尽量让使用基数比较大的字段，就是值比较多的字段用上索引，充分发挥B+树的优势</p>\n<blockquote>\n<p>基础比较大的字段是说，比如一个字段，虽然在所有的行中都有值，但是其实都是0和1，那么就没有必要为这个字段设置索引</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>因为你的索引字段中如果只有1和0两个数字，也就没有办法利用二分查找，所以设置这个字段为索引也就没有什么意义</p>\n</blockquote>\n</li>\n<li><p>尽量对字段的类型比较小的字段进行索引</p>\n</li>\n<li><p>尽量不要让查询语句中有函数或者计算，这样会导致用不上索引</p>\n</li>\n<li><p>尽量主键是自增的，不要用uuid之类的，因为如果主键是自增的，就会自然进行页分裂，但是如果不是，就会导致频繁的页分裂</p>\n</li>\n<li><p>索引不要太多，一般两三个联合索引就可以覆盖一个表的全部查询了</p>\n<blockquote>\n<p>一个表中的索引太多的话，会导致虽然查询非常方便，但是增删改每次都要维护巨大的索引树，性能会急速下降</p>\n</blockquote>\n</li>\n<li><p>尽量范围查询放在最后面，保证索引都可以用</p>\n</li>\n</ol>\n<blockquote>\n<p>where 筛选和order by排序实际上大部分情况下，是没有办法同时用到索引的</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>这个时候，推荐让where用上索引，因为where用上索引，会在数据量小的情况下，先将符合条件的where的数据加载到内存中，然后根据order by条件进行排序，在内存中排序会比直接在磁盘排序要快得多</p>\n</blockquote>\n<h4 id=\"重点\"><a href=\"#重点\" class=\"headerlink\" title=\"重点\"></a>重点</h4><p>尽量利用一两个复杂的多字段的联合索引，支撑下80%以上的查询，然后利用一两个辅助索引支撑下剩余20%的非典型索引，保证99%以上的查询都能充分利用索引，就能保证你的查询和性能！</p>\n<h3 id=\"技巧\"><a href=\"#技巧\" class=\"headerlink\" title=\"技巧\"></a>技巧</h3><ol>\n<li>比如你经常需要查询在七天之内登录的用户，完全可以将这个情况当做一个字段，新增这个字段，比如1就是七天之内登录，0就是七天之内没有登录，直接将其转换为枚举值了</li>\n</ol>\n<h3 id=\"注意问题\"><a href=\"#注意问题\" class=\"headerlink\" title=\"注意问题\"></a>注意问题</h3><p>对索引字段做函数操作，优化器会放弃走树搜索功能</p>\n<p>如果一个字段做了范围索引，那么之后的索引都会失效，所以一般建议范围索引放在最后面</p>\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>经常用的多字段排序，可以直接按照顺序建立一个联合索引，由于索引本身就有排序，所以速度很快，直接根据索引树查找即可</p>\n<p>要求必须要都是升序或者降序，mysql默认为升序，降序的话需要在order by后面+desc</p>\n<h3 id=\"where和orderby\"><a href=\"#where和orderby\" class=\"headerlink\" title=\"where和orderby\"></a>where和orderby</h3><p>当where和orderby只能选择一个使用索引的时候，如果数据量小，可以选择先where查找出来数据，之后再进行排序和分页，成本不会太大</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>MySQL会为每个线程分配一个内存（sort_buffer）用于排序该内存大小为sort_buffer_size</p>\n<ul>\n<li><p>如果排序的数据量小于sort_buffer_size，排序将会在内存中完成</p>\n</li>\n<li><p>如果排序数据量很大，内存中无法存下这么多数据，则会使用磁盘临时文件来辅助排序，也称外部排序</p>\n</li>\n<li><p>在使用外部排序时，MySQL会分成好几份单独的临时文件用来存放排序后的数据，然后在将这些文件合并成一个大文件</p>\n</li>\n</ul>\n<p>mysql会通过遍历索引将满足条件的数据读取到sort_buffer，并且按照排序字段进行快速排序</p>\n<ul>\n<li><p>如果查询的字段不包含在辅助索引中，需要按照辅助索引记录的主键返回聚集索引取出所需字段</p>\n</li>\n<li><p>该方式会造成随机IO，在MySQL5.6提供了MRR的机制，会将辅助索引匹配记录的主键取出来在内存中进行排序，然后在回表</p>\n</li>\n<li><p>按照情况建立联合索引来避免排序所带来的性能损耗，允许的情况下也可以建立覆盖索引来避免回表</p>\n</li>\n</ul>"},{"title":"mysql锁","description":"","abbrlink":"466916d7","date":"2021-03-30T16:00:00.000Z","_content":"\n\n## 表结构分类\n\n\n\n<!-- more -->\n\n\n\n### 行锁\n\n\n\n默认情况下，是不需要锁的，默认是开启MVCC机制的，所以读取数据和修改数据完全不会互相影响，直接根据undolog版本链和ReadView来进行读取即可\n\n\n\n#### 共享锁\n\n\n\n共享锁又被称为S锁\n\n\n\n默认查询数据不会开启共享锁的，是走mvcc机制读快照版本，但是可以手动添加\n\n\n\n```sql\n\n#加共享锁\n\nselect * from vpm_project lock in share mode\n\n#查询之后还是更新，这样就给查询语句加上了独占锁\n\nselect * from vpm_project for update\n\n```\n\n\n\n> 生产情况下，是不会开启共享锁的，因为根据这样会造成性能下降，而且根据mvcc机制读快也可以保证数据的准确性\n\n>\n\n> 如果非要在查询的时候加锁，通常都是在redis/zookeeper分布式锁来控制系统的锁逻辑，因为你如果直接在数据中加上复杂业务的锁逻辑，锁逻辑会隐藏在sql语句中，这对于java来说不太好维护\n\n>\n\n> lock in share mode 只锁覆盖索引\n\n\n\n#### 独占锁\n\n\n\n默认更新数据的时候是开启的\n\n\n\n#### 关系\n\n\n\n![](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210331205512682.png)\n\n\n\n> 读取数据其实就是 select\n\n>\n\n> 修改数据其实就是  update delete insert\n\n\n\n#### 间隙锁\n\n\n\ngap lock 官方称为  LOCK_GAP\n\n\n\n作用：只是为了给这条记录前面的间隙插入数据\n\n\n\n这个锁的设计之初就是为了防止插入幻影记录\n\n\n\n这个锁也有S锁和X锁两种，但是其实并没有什么卵用，并不妨碍其他事务的插入\n\n\n\n> infimum：表示一个表中的最小记录\n\n>\n\n> supremum：表是一个表中的最大记录\n\n>\n\n> 比如你要防止在id为20之后中插入新的记录，你就可以给所在页面的supremum加上一个gap锁\n\n\n\n#### Next-Key Lock\n\n\n\n作用：既想要给当前记录加锁，又想要阻止其他事务在该记录前面的间隙插入新纪录\n\n\n\n本质就是record lock和gap lock的个体\n\n\n\n> - 这个锁只有在可重读的情况下才会生效，在可重复读的情况下，mysql加锁的基本单位就是next-key lock\n\n> - next-key lock 是前开后闭区间\n\n> - \n\n\n\n#### insert intention lock\n\n\n\n插入意向锁  官方名称为  LOCK_INSERT_INTENTION\n\n\n\n一个事务在插入一条记录的时候，需要判断插入位置是否已经被别的事务加入了gap锁，如果有的话，插入操作需要等待，知道等待拥有gap锁的按个事务提交为止。\n\n\n\ninnodb规定，这种也需要生成一个锁，于是命名为insert intention lock\n\n\n\n> 这个锁比较“鸡肋”，不会阻拦任何其他事务的操作\n\n\n\n#### record lock\n\n\n\n我们自己给它起个别名叫 记录锁 官方 名称为 LOCK_REC_NOT_GAP\n\n\n\n就是给数据库里的一条记录加锁，这中锁也有S锁和X锁两种\n\n\n\n> 和基础的S锁和X锁一样\n\n>\n\n> 写锁和写锁 读锁都冲突\n\n>\n\n> 读锁和读锁不冲突，和写锁冲突\n\n\n\n#### 隐式锁\n\n\n\n事务id其实就是一个隐式锁\n\n\n\n> 其他所有的锁，加锁之后都会在内存中创建一个锁记录关联，只有隐式锁不会\n\n\n\n#### 两段锁协议\n\n\n\n在 InnoDB 事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这个就是两阶段锁协议。\n\n\n\n如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放。\n\n\n\n出现死锁之后的解决办法：\n\n\n\n- 一种策略是，直接进入等待，直到超时。这个超时时间可以通过参数 innodb_lock_wait_timeout 来设置。\n\n- 另一种策略是，发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 innodb_deadlock_detect 设置为 on，表示开启这个逻辑。\n\n\n\n如何解决热点行更新导致的性能问题？\n\n\n\n1. 如果你能确保这个业务一定不会出现死锁，可以临时把死锁检测关闭掉。一般不建议采用\n\n2. 控制并发度，对应相同行的更新，在进入引擎之前排队。这样在InnoDB内部就不会有大量的死锁检测工作了。\n\n3. 将热更新的行数据拆分成逻辑上的多行来减少锁冲突，但是业务复杂度可能会大大提高。\n\n\n\n### 表锁\n\n\n\n执行DDL语句的时候，默认会加上表锁，这是通过数据库的元数据锁实现的，也就是Metadata Locks\n\n\n\n>DDL语句和增删改操作，确实是互斥的\n\n\n\n#### 共享锁\n\n\n\n```sql\n\n#加表级共享锁\n\nlock tables 表名 read;\n\n```\n\n\n\n#### 独占锁\n\n\n\n```sql\n\n#加表级独占锁\n\nlock tables 表名 write;\n\n```\n\n\n\n#### 意向共享锁\n\n\n\n当有事务在表里执行增删改操作的时候，会默认在行级加独占锁，同时也会在表级加一个意向独占锁\n\n\n\n#### 意向独占锁\n\n\n\n当有事务在表里执行查询操作的时候，会默认在表级加一个意向共享锁\n\n\n\n#### 关系\n\n\n\n![](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210331212950511.png)\n\n\n\n### 全局锁\n\n\n\n对整个数据库实例加锁。\n\n\n\nMySQL提供加全局读锁的方法：Flush tables with read lock(FTWRL)\n\n\n\n这个命令可以使整个库处于只读状态。使用该命令之后，数据更新语句、数据定义语句和更新类事务的提交语句等操作都会被阻塞。\n\n\n\n使用场景：全库逻辑备份。\n\n\n\n**风险：**\n\n\n\n1.如果在主库备份，在备份期间不能更新，业务停摆\n\n\n\n2.如果在从库备份，备份期间不能执行主库同步的binlog，导致主从延迟\n\n\n\n官方自带的逻辑备份工具mysqldump，当mysqldump使用参数--single-transaction的时候，会启动一个事务，确保拿到一致性视图。而由于MVCC的支持，这个过程中数据是可以正常更新的。\n\n\n\n一致性读是好，但是前提是引擎要支持这个隔离级别。\n\n\n\n**如果要全库只读，为什么不使用set global readonly=true的方式？**\n\n\n\n1.在有些系统中，readonly的值会被用来做其他逻辑，比如判断主备库。所以修改global变量的方式影响太大。\n\n\n\n2.在异常处理机制上有差异。如果执行FTWRL命令之后由于客户端发生异常断开，那么MySQL会自动释放这个全局锁，整个库回到可以正常更新的状态。而将整个库设置为readonly之后，如果客户端发生异常，则数据库就会一直保持readonly状态，这样会导致整个库长时间处于不可写状态，风险较高。\n\n\n\n## 加锁条件\n\n\n\n- 在同一个事务中进行加锁操作\n\n- 被加锁的记录在同一个页面中\n\n- 加锁的类型是一样的】\n\n- 等待状态是一样的\n\n\n\n同时满足上面四个条件，就可以将多个所记录的锁放在同一个锁结构中\n\n\n\n## 加锁规则总结\n\n\n\n### 可重复读\n\n\n\n- 加锁的基本单位是 next-key lock。希望你还记得，next-key lock 是前开后闭区间。\n\n- 查找过程中访问到的对象才会加锁。\n\n- 等值查询，给唯一索引加锁的时候，next-key lock 退化为行锁。如果不是唯一索引，向右遍历时且最后一个值不满足等值条件的时候，next-key lock 退化为间隙锁。\n\n- 范围查询，无论是否是唯一索引，范围查询都需要访问到不满足条件的第一个值为止\n\n\n\n> - for update 默认的是更新之后还要进行查找，所以不仅给索引上锁，符合条件的主键索引页会上锁\n\n> - 唯一索引会找到对应范围就会停止，但是非唯一索引是需要多找一段\n\n> - 范围索引InnoDB 会往前扫描到第一个不满足条件的行为止\n\n> - 删除的时候limit，不仅可以控制删除数据的条数，让操作更安全，还可以减小加锁的范围\n\n\n\n### 读提交\n\n\n\n语句执行过程中加上的行锁，在语句执行完成后，就要把“不满足条件的行”上的行锁直接释放了，不需要等到事务提交。","source":"_posts/mysql锁.md","raw":"---\ntitle: mysql锁\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 466916d7\ndate: 2021-03-31 00:00:00\n---\n\n\n## 表结构分类\n\n\n\n<!-- more -->\n\n\n\n### 行锁\n\n\n\n默认情况下，是不需要锁的，默认是开启MVCC机制的，所以读取数据和修改数据完全不会互相影响，直接根据undolog版本链和ReadView来进行读取即可\n\n\n\n#### 共享锁\n\n\n\n共享锁又被称为S锁\n\n\n\n默认查询数据不会开启共享锁的，是走mvcc机制读快照版本，但是可以手动添加\n\n\n\n```sql\n\n#加共享锁\n\nselect * from vpm_project lock in share mode\n\n#查询之后还是更新，这样就给查询语句加上了独占锁\n\nselect * from vpm_project for update\n\n```\n\n\n\n> 生产情况下，是不会开启共享锁的，因为根据这样会造成性能下降，而且根据mvcc机制读快也可以保证数据的准确性\n\n>\n\n> 如果非要在查询的时候加锁，通常都是在redis/zookeeper分布式锁来控制系统的锁逻辑，因为你如果直接在数据中加上复杂业务的锁逻辑，锁逻辑会隐藏在sql语句中，这对于java来说不太好维护\n\n>\n\n> lock in share mode 只锁覆盖索引\n\n\n\n#### 独占锁\n\n\n\n默认更新数据的时候是开启的\n\n\n\n#### 关系\n\n\n\n![](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210331205512682.png)\n\n\n\n> 读取数据其实就是 select\n\n>\n\n> 修改数据其实就是  update delete insert\n\n\n\n#### 间隙锁\n\n\n\ngap lock 官方称为  LOCK_GAP\n\n\n\n作用：只是为了给这条记录前面的间隙插入数据\n\n\n\n这个锁的设计之初就是为了防止插入幻影记录\n\n\n\n这个锁也有S锁和X锁两种，但是其实并没有什么卵用，并不妨碍其他事务的插入\n\n\n\n> infimum：表示一个表中的最小记录\n\n>\n\n> supremum：表是一个表中的最大记录\n\n>\n\n> 比如你要防止在id为20之后中插入新的记录，你就可以给所在页面的supremum加上一个gap锁\n\n\n\n#### Next-Key Lock\n\n\n\n作用：既想要给当前记录加锁，又想要阻止其他事务在该记录前面的间隙插入新纪录\n\n\n\n本质就是record lock和gap lock的个体\n\n\n\n> - 这个锁只有在可重读的情况下才会生效，在可重复读的情况下，mysql加锁的基本单位就是next-key lock\n\n> - next-key lock 是前开后闭区间\n\n> - \n\n\n\n#### insert intention lock\n\n\n\n插入意向锁  官方名称为  LOCK_INSERT_INTENTION\n\n\n\n一个事务在插入一条记录的时候，需要判断插入位置是否已经被别的事务加入了gap锁，如果有的话，插入操作需要等待，知道等待拥有gap锁的按个事务提交为止。\n\n\n\ninnodb规定，这种也需要生成一个锁，于是命名为insert intention lock\n\n\n\n> 这个锁比较“鸡肋”，不会阻拦任何其他事务的操作\n\n\n\n#### record lock\n\n\n\n我们自己给它起个别名叫 记录锁 官方 名称为 LOCK_REC_NOT_GAP\n\n\n\n就是给数据库里的一条记录加锁，这中锁也有S锁和X锁两种\n\n\n\n> 和基础的S锁和X锁一样\n\n>\n\n> 写锁和写锁 读锁都冲突\n\n>\n\n> 读锁和读锁不冲突，和写锁冲突\n\n\n\n#### 隐式锁\n\n\n\n事务id其实就是一个隐式锁\n\n\n\n> 其他所有的锁，加锁之后都会在内存中创建一个锁记录关联，只有隐式锁不会\n\n\n\n#### 两段锁协议\n\n\n\n在 InnoDB 事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这个就是两阶段锁协议。\n\n\n\n如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放。\n\n\n\n出现死锁之后的解决办法：\n\n\n\n- 一种策略是，直接进入等待，直到超时。这个超时时间可以通过参数 innodb_lock_wait_timeout 来设置。\n\n- 另一种策略是，发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 innodb_deadlock_detect 设置为 on，表示开启这个逻辑。\n\n\n\n如何解决热点行更新导致的性能问题？\n\n\n\n1. 如果你能确保这个业务一定不会出现死锁，可以临时把死锁检测关闭掉。一般不建议采用\n\n2. 控制并发度，对应相同行的更新，在进入引擎之前排队。这样在InnoDB内部就不会有大量的死锁检测工作了。\n\n3. 将热更新的行数据拆分成逻辑上的多行来减少锁冲突，但是业务复杂度可能会大大提高。\n\n\n\n### 表锁\n\n\n\n执行DDL语句的时候，默认会加上表锁，这是通过数据库的元数据锁实现的，也就是Metadata Locks\n\n\n\n>DDL语句和增删改操作，确实是互斥的\n\n\n\n#### 共享锁\n\n\n\n```sql\n\n#加表级共享锁\n\nlock tables 表名 read;\n\n```\n\n\n\n#### 独占锁\n\n\n\n```sql\n\n#加表级独占锁\n\nlock tables 表名 write;\n\n```\n\n\n\n#### 意向共享锁\n\n\n\n当有事务在表里执行增删改操作的时候，会默认在行级加独占锁，同时也会在表级加一个意向独占锁\n\n\n\n#### 意向独占锁\n\n\n\n当有事务在表里执行查询操作的时候，会默认在表级加一个意向共享锁\n\n\n\n#### 关系\n\n\n\n![](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210331212950511.png)\n\n\n\n### 全局锁\n\n\n\n对整个数据库实例加锁。\n\n\n\nMySQL提供加全局读锁的方法：Flush tables with read lock(FTWRL)\n\n\n\n这个命令可以使整个库处于只读状态。使用该命令之后，数据更新语句、数据定义语句和更新类事务的提交语句等操作都会被阻塞。\n\n\n\n使用场景：全库逻辑备份。\n\n\n\n**风险：**\n\n\n\n1.如果在主库备份，在备份期间不能更新，业务停摆\n\n\n\n2.如果在从库备份，备份期间不能执行主库同步的binlog，导致主从延迟\n\n\n\n官方自带的逻辑备份工具mysqldump，当mysqldump使用参数--single-transaction的时候，会启动一个事务，确保拿到一致性视图。而由于MVCC的支持，这个过程中数据是可以正常更新的。\n\n\n\n一致性读是好，但是前提是引擎要支持这个隔离级别。\n\n\n\n**如果要全库只读，为什么不使用set global readonly=true的方式？**\n\n\n\n1.在有些系统中，readonly的值会被用来做其他逻辑，比如判断主备库。所以修改global变量的方式影响太大。\n\n\n\n2.在异常处理机制上有差异。如果执行FTWRL命令之后由于客户端发生异常断开，那么MySQL会自动释放这个全局锁，整个库回到可以正常更新的状态。而将整个库设置为readonly之后，如果客户端发生异常，则数据库就会一直保持readonly状态，这样会导致整个库长时间处于不可写状态，风险较高。\n\n\n\n## 加锁条件\n\n\n\n- 在同一个事务中进行加锁操作\n\n- 被加锁的记录在同一个页面中\n\n- 加锁的类型是一样的】\n\n- 等待状态是一样的\n\n\n\n同时满足上面四个条件，就可以将多个所记录的锁放在同一个锁结构中\n\n\n\n## 加锁规则总结\n\n\n\n### 可重复读\n\n\n\n- 加锁的基本单位是 next-key lock。希望你还记得，next-key lock 是前开后闭区间。\n\n- 查找过程中访问到的对象才会加锁。\n\n- 等值查询，给唯一索引加锁的时候，next-key lock 退化为行锁。如果不是唯一索引，向右遍历时且最后一个值不满足等值条件的时候，next-key lock 退化为间隙锁。\n\n- 范围查询，无论是否是唯一索引，范围查询都需要访问到不满足条件的第一个值为止\n\n\n\n> - for update 默认的是更新之后还要进行查找，所以不仅给索引上锁，符合条件的主键索引页会上锁\n\n> - 唯一索引会找到对应范围就会停止，但是非唯一索引是需要多找一段\n\n> - 范围索引InnoDB 会往前扫描到第一个不满足条件的行为止\n\n> - 删除的时候limit，不仅可以控制删除数据的条数，让操作更安全，还可以减小加锁的范围\n\n\n\n### 读提交\n\n\n\n语句执行过程中加上的行锁，在语句执行完成后，就要把“不满足条件的行”上的行锁直接释放了，不需要等到事务提交。","slug":"mysql锁","published":1,"updated":"2025-03-02T03:37:34.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4s002xn0ukhjs6450l","content":"<h2 id=\"表结构分类\"><a href=\"#表结构分类\" class=\"headerlink\" title=\"表结构分类\"></a>表结构分类</h2><span id=\"more\"></span>\n\n\n\n<h3 id=\"行锁\"><a href=\"#行锁\" class=\"headerlink\" title=\"行锁\"></a>行锁</h3><p>默认情况下，是不需要锁的，默认是开启MVCC机制的，所以读取数据和修改数据完全不会互相影响，直接根据undolog版本链和ReadView来进行读取即可</p>\n<h4 id=\"共享锁\"><a href=\"#共享锁\" class=\"headerlink\" title=\"共享锁\"></a>共享锁</h4><p>共享锁又被称为S锁</p>\n<p>默认查询数据不会开启共享锁的，是走mvcc机制读快照版本，但是可以手动添加</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#加共享锁</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> vpm_project lock <span class=\"keyword\">in</span> share mode</span><br><span class=\"line\"></span><br><span class=\"line\">#查询之后还是更新，这样就给查询语句加上了独占锁</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> vpm_project <span class=\"keyword\">for</span> <span class=\"keyword\">update</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>生产情况下，是不会开启共享锁的，因为根据这样会造成性能下降，而且根据mvcc机制读快也可以保证数据的准确性</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>如果非要在查询的时候加锁，通常都是在redis&#x2F;zookeeper分布式锁来控制系统的锁逻辑，因为你如果直接在数据中加上复杂业务的锁逻辑，锁逻辑会隐藏在sql语句中，这对于java来说不太好维护</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>lock in share mode 只锁覆盖索引</p>\n</blockquote>\n<h4 id=\"独占锁\"><a href=\"#独占锁\" class=\"headerlink\" title=\"独占锁\"></a>独占锁</h4><p>默认更新数据的时候是开启的</p>\n<h4 id=\"关系\"><a href=\"#关系\" class=\"headerlink\" title=\"关系\"></a>关系</h4><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210331205512682.png\" loading=\"lazy\"></p>\n<blockquote>\n<p>读取数据其实就是 select</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>修改数据其实就是  update delete insert</p>\n</blockquote>\n<h4 id=\"间隙锁\"><a href=\"#间隙锁\" class=\"headerlink\" title=\"间隙锁\"></a>间隙锁</h4><p>gap lock 官方称为  LOCK_GAP</p>\n<p>作用：只是为了给这条记录前面的间隙插入数据</p>\n<p>这个锁的设计之初就是为了防止插入幻影记录</p>\n<p>这个锁也有S锁和X锁两种，但是其实并没有什么卵用，并不妨碍其他事务的插入</p>\n<blockquote>\n<p>infimum：表示一个表中的最小记录</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>supremum：表是一个表中的最大记录</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>比如你要防止在id为20之后中插入新的记录，你就可以给所在页面的supremum加上一个gap锁</p>\n</blockquote>\n<h4 id=\"Next-Key-Lock\"><a href=\"#Next-Key-Lock\" class=\"headerlink\" title=\"Next-Key Lock\"></a>Next-Key Lock</h4><p>作用：既想要给当前记录加锁，又想要阻止其他事务在该记录前面的间隙插入新纪录</p>\n<p>本质就是record lock和gap lock的个体</p>\n<blockquote>\n<ul>\n<li>这个锁只有在可重读的情况下才会生效，在可重复读的情况下，mysql加锁的基本单位就是next-key lock</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>next-key lock 是前开后闭区间</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>- </p>\n</blockquote>\n<h4 id=\"insert-intention-lock\"><a href=\"#insert-intention-lock\" class=\"headerlink\" title=\"insert intention lock\"></a>insert intention lock</h4><p>插入意向锁  官方名称为  LOCK_INSERT_INTENTION</p>\n<p>一个事务在插入一条记录的时候，需要判断插入位置是否已经被别的事务加入了gap锁，如果有的话，插入操作需要等待，知道等待拥有gap锁的按个事务提交为止。</p>\n<p>innodb规定，这种也需要生成一个锁，于是命名为insert intention lock</p>\n<blockquote>\n<p>这个锁比较“鸡肋”，不会阻拦任何其他事务的操作</p>\n</blockquote>\n<h4 id=\"record-lock\"><a href=\"#record-lock\" class=\"headerlink\" title=\"record lock\"></a>record lock</h4><p>我们自己给它起个别名叫 记录锁 官方 名称为 LOCK_REC_NOT_GAP</p>\n<p>就是给数据库里的一条记录加锁，这中锁也有S锁和X锁两种</p>\n<blockquote>\n<p>和基础的S锁和X锁一样</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>写锁和写锁 读锁都冲突</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>读锁和读锁不冲突，和写锁冲突</p>\n</blockquote>\n<h4 id=\"隐式锁\"><a href=\"#隐式锁\" class=\"headerlink\" title=\"隐式锁\"></a>隐式锁</h4><p>事务id其实就是一个隐式锁</p>\n<blockquote>\n<p>其他所有的锁，加锁之后都会在内存中创建一个锁记录关联，只有隐式锁不会</p>\n</blockquote>\n<h4 id=\"两段锁协议\"><a href=\"#两段锁协议\" class=\"headerlink\" title=\"两段锁协议\"></a>两段锁协议</h4><p>在 InnoDB 事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这个就是两阶段锁协议。</p>\n<p>如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放。</p>\n<p>出现死锁之后的解决办法：</p>\n<ul>\n<li><p>一种策略是，直接进入等待，直到超时。这个超时时间可以通过参数 innodb_lock_wait_timeout 来设置。</p>\n</li>\n<li><p>另一种策略是，发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 innodb_deadlock_detect 设置为 on，表示开启这个逻辑。</p>\n</li>\n</ul>\n<p>如何解决热点行更新导致的性能问题？</p>\n<ol>\n<li><p>如果你能确保这个业务一定不会出现死锁，可以临时把死锁检测关闭掉。一般不建议采用</p>\n</li>\n<li><p>控制并发度，对应相同行的更新，在进入引擎之前排队。这样在InnoDB内部就不会有大量的死锁检测工作了。</p>\n</li>\n<li><p>将热更新的行数据拆分成逻辑上的多行来减少锁冲突，但是业务复杂度可能会大大提高。</p>\n</li>\n</ol>\n<h3 id=\"表锁\"><a href=\"#表锁\" class=\"headerlink\" title=\"表锁\"></a>表锁</h3><p>执行DDL语句的时候，默认会加上表锁，这是通过数据库的元数据锁实现的，也就是Metadata Locks</p>\n<blockquote>\n<p>DDL语句和增删改操作，确实是互斥的</p>\n</blockquote>\n<h4 id=\"共享锁-1\"><a href=\"#共享锁-1\" class=\"headerlink\" title=\"共享锁\"></a>共享锁</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#加表级共享锁</span><br><span class=\"line\"></span><br><span class=\"line\">lock tables 表名 read;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"独占锁-1\"><a href=\"#独占锁-1\" class=\"headerlink\" title=\"独占锁\"></a>独占锁</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#加表级独占锁</span><br><span class=\"line\"></span><br><span class=\"line\">lock tables 表名 write;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"意向共享锁\"><a href=\"#意向共享锁\" class=\"headerlink\" title=\"意向共享锁\"></a>意向共享锁</h4><p>当有事务在表里执行增删改操作的时候，会默认在行级加独占锁，同时也会在表级加一个意向独占锁</p>\n<h4 id=\"意向独占锁\"><a href=\"#意向独占锁\" class=\"headerlink\" title=\"意向独占锁\"></a>意向独占锁</h4><p>当有事务在表里执行查询操作的时候，会默认在表级加一个意向共享锁</p>\n<h4 id=\"关系-1\"><a href=\"#关系-1\" class=\"headerlink\" title=\"关系\"></a>关系</h4><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210331212950511.png\" loading=\"lazy\"></p>\n<h3 id=\"全局锁\"><a href=\"#全局锁\" class=\"headerlink\" title=\"全局锁\"></a>全局锁</h3><p>对整个数据库实例加锁。</p>\n<p>MySQL提供加全局读锁的方法：Flush tables with read lock(FTWRL)</p>\n<p>这个命令可以使整个库处于只读状态。使用该命令之后，数据更新语句、数据定义语句和更新类事务的提交语句等操作都会被阻塞。</p>\n<p>使用场景：全库逻辑备份。</p>\n<p><strong>风险：</strong></p>\n<p>1.如果在主库备份，在备份期间不能更新，业务停摆</p>\n<p>2.如果在从库备份，备份期间不能执行主库同步的binlog，导致主从延迟</p>\n<p>官方自带的逻辑备份工具mysqldump，当mysqldump使用参数--single-transaction的时候，会启动一个事务，确保拿到一致性视图。而由于MVCC的支持，这个过程中数据是可以正常更新的。</p>\n<p>一致性读是好，但是前提是引擎要支持这个隔离级别。</p>\n<p><strong>如果要全库只读，为什么不使用set global readonly&#x3D;true的方式？</strong></p>\n<p>1.在有些系统中，readonly的值会被用来做其他逻辑，比如判断主备库。所以修改global变量的方式影响太大。</p>\n<p>2.在异常处理机制上有差异。如果执行FTWRL命令之后由于客户端发生异常断开，那么MySQL会自动释放这个全局锁，整个库回到可以正常更新的状态。而将整个库设置为readonly之后，如果客户端发生异常，则数据库就会一直保持readonly状态，这样会导致整个库长时间处于不可写状态，风险较高。</p>\n<h2 id=\"加锁条件\"><a href=\"#加锁条件\" class=\"headerlink\" title=\"加锁条件\"></a>加锁条件</h2><ul>\n<li><p>在同一个事务中进行加锁操作</p>\n</li>\n<li><p>被加锁的记录在同一个页面中</p>\n</li>\n<li><p>加锁的类型是一样的】</p>\n</li>\n<li><p>等待状态是一样的</p>\n</li>\n</ul>\n<p>同时满足上面四个条件，就可以将多个所记录的锁放在同一个锁结构中</p>\n<h2 id=\"加锁规则总结\"><a href=\"#加锁规则总结\" class=\"headerlink\" title=\"加锁规则总结\"></a>加锁规则总结</h2><h3 id=\"可重复读\"><a href=\"#可重复读\" class=\"headerlink\" title=\"可重复读\"></a>可重复读</h3><ul>\n<li><p>加锁的基本单位是 next-key lock。希望你还记得，next-key lock 是前开后闭区间。</p>\n</li>\n<li><p>查找过程中访问到的对象才会加锁。</p>\n</li>\n<li><p>等值查询，给唯一索引加锁的时候，next-key lock 退化为行锁。如果不是唯一索引，向右遍历时且最后一个值不满足等值条件的时候，next-key lock 退化为间隙锁。</p>\n</li>\n<li><p>范围查询，无论是否是唯一索引，范围查询都需要访问到不满足条件的第一个值为止</p>\n</li>\n</ul>\n<blockquote>\n<ul>\n<li>for update 默认的是更新之后还要进行查找，所以不仅给索引上锁，符合条件的主键索引页会上锁</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>唯一索引会找到对应范围就会停止，但是非唯一索引是需要多找一段</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>范围索引InnoDB 会往前扫描到第一个不满足条件的行为止</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>删除的时候limit，不仅可以控制删除数据的条数，让操作更安全，还可以减小加锁的范围</li>\n</ul>\n</blockquote>\n<h3 id=\"读提交\"><a href=\"#读提交\" class=\"headerlink\" title=\"读提交\"></a>读提交</h3><p>语句执行过程中加上的行锁，在语句执行完成后，就要把“不满足条件的行”上的行锁直接释放了，不需要等到事务提交。</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"表结构分类\n行锁\n默认情况下，是不需要锁的，默认是开启MVCC机制的，所以读取数据和修改数据完全不会互相影响，直接根据undolog版本链和ReadView来进行读取即可\n\n共享锁\n共享锁又被称为S锁\n\n默认查询数据不会开启共享锁的，是走mvcc机制读快照版本，但是可以手动添加\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n#加共享锁\n\nselect * from vpm_project lock in share mode\n\n#查询之后还是更新，这样就给查询语句加上了独占锁\n\nselect * from vpm_project for update\n\n\n\n生产情况下，是不会开启共享锁的，因为根","more":"<h3 id=\"行锁\"><a href=\"#行锁\" class=\"headerlink\" title=\"行锁\"></a>行锁</h3><p>默认情况下，是不需要锁的，默认是开启MVCC机制的，所以读取数据和修改数据完全不会互相影响，直接根据undolog版本链和ReadView来进行读取即可</p>\n<h4 id=\"共享锁\"><a href=\"#共享锁\" class=\"headerlink\" title=\"共享锁\"></a>共享锁</h4><p>共享锁又被称为S锁</p>\n<p>默认查询数据不会开启共享锁的，是走mvcc机制读快照版本，但是可以手动添加</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#加共享锁</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> vpm_project lock <span class=\"keyword\">in</span> share mode</span><br><span class=\"line\"></span><br><span class=\"line\">#查询之后还是更新，这样就给查询语句加上了独占锁</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> vpm_project <span class=\"keyword\">for</span> <span class=\"keyword\">update</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>生产情况下，是不会开启共享锁的，因为根据这样会造成性能下降，而且根据mvcc机制读快也可以保证数据的准确性</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>如果非要在查询的时候加锁，通常都是在redis&#x2F;zookeeper分布式锁来控制系统的锁逻辑，因为你如果直接在数据中加上复杂业务的锁逻辑，锁逻辑会隐藏在sql语句中，这对于java来说不太好维护</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>lock in share mode 只锁覆盖索引</p>\n</blockquote>\n<h4 id=\"独占锁\"><a href=\"#独占锁\" class=\"headerlink\" title=\"独占锁\"></a>独占锁</h4><p>默认更新数据的时候是开启的</p>\n<h4 id=\"关系\"><a href=\"#关系\" class=\"headerlink\" title=\"关系\"></a>关系</h4><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210331205512682.png\" loading=\"lazy\"></p>\n<blockquote>\n<p>读取数据其实就是 select</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>修改数据其实就是  update delete insert</p>\n</blockquote>\n<h4 id=\"间隙锁\"><a href=\"#间隙锁\" class=\"headerlink\" title=\"间隙锁\"></a>间隙锁</h4><p>gap lock 官方称为  LOCK_GAP</p>\n<p>作用：只是为了给这条记录前面的间隙插入数据</p>\n<p>这个锁的设计之初就是为了防止插入幻影记录</p>\n<p>这个锁也有S锁和X锁两种，但是其实并没有什么卵用，并不妨碍其他事务的插入</p>\n<blockquote>\n<p>infimum：表示一个表中的最小记录</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>supremum：表是一个表中的最大记录</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>比如你要防止在id为20之后中插入新的记录，你就可以给所在页面的supremum加上一个gap锁</p>\n</blockquote>\n<h4 id=\"Next-Key-Lock\"><a href=\"#Next-Key-Lock\" class=\"headerlink\" title=\"Next-Key Lock\"></a>Next-Key Lock</h4><p>作用：既想要给当前记录加锁，又想要阻止其他事务在该记录前面的间隙插入新纪录</p>\n<p>本质就是record lock和gap lock的个体</p>\n<blockquote>\n<ul>\n<li>这个锁只有在可重读的情况下才会生效，在可重复读的情况下，mysql加锁的基本单位就是next-key lock</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>next-key lock 是前开后闭区间</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>- </p>\n</blockquote>\n<h4 id=\"insert-intention-lock\"><a href=\"#insert-intention-lock\" class=\"headerlink\" title=\"insert intention lock\"></a>insert intention lock</h4><p>插入意向锁  官方名称为  LOCK_INSERT_INTENTION</p>\n<p>一个事务在插入一条记录的时候，需要判断插入位置是否已经被别的事务加入了gap锁，如果有的话，插入操作需要等待，知道等待拥有gap锁的按个事务提交为止。</p>\n<p>innodb规定，这种也需要生成一个锁，于是命名为insert intention lock</p>\n<blockquote>\n<p>这个锁比较“鸡肋”，不会阻拦任何其他事务的操作</p>\n</blockquote>\n<h4 id=\"record-lock\"><a href=\"#record-lock\" class=\"headerlink\" title=\"record lock\"></a>record lock</h4><p>我们自己给它起个别名叫 记录锁 官方 名称为 LOCK_REC_NOT_GAP</p>\n<p>就是给数据库里的一条记录加锁，这中锁也有S锁和X锁两种</p>\n<blockquote>\n<p>和基础的S锁和X锁一样</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>写锁和写锁 读锁都冲突</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>读锁和读锁不冲突，和写锁冲突</p>\n</blockquote>\n<h4 id=\"隐式锁\"><a href=\"#隐式锁\" class=\"headerlink\" title=\"隐式锁\"></a>隐式锁</h4><p>事务id其实就是一个隐式锁</p>\n<blockquote>\n<p>其他所有的锁，加锁之后都会在内存中创建一个锁记录关联，只有隐式锁不会</p>\n</blockquote>\n<h4 id=\"两段锁协议\"><a href=\"#两段锁协议\" class=\"headerlink\" title=\"两段锁协议\"></a>两段锁协议</h4><p>在 InnoDB 事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这个就是两阶段锁协议。</p>\n<p>如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放。</p>\n<p>出现死锁之后的解决办法：</p>\n<ul>\n<li><p>一种策略是，直接进入等待，直到超时。这个超时时间可以通过参数 innodb_lock_wait_timeout 来设置。</p>\n</li>\n<li><p>另一种策略是，发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 innodb_deadlock_detect 设置为 on，表示开启这个逻辑。</p>\n</li>\n</ul>\n<p>如何解决热点行更新导致的性能问题？</p>\n<ol>\n<li><p>如果你能确保这个业务一定不会出现死锁，可以临时把死锁检测关闭掉。一般不建议采用</p>\n</li>\n<li><p>控制并发度，对应相同行的更新，在进入引擎之前排队。这样在InnoDB内部就不会有大量的死锁检测工作了。</p>\n</li>\n<li><p>将热更新的行数据拆分成逻辑上的多行来减少锁冲突，但是业务复杂度可能会大大提高。</p>\n</li>\n</ol>\n<h3 id=\"表锁\"><a href=\"#表锁\" class=\"headerlink\" title=\"表锁\"></a>表锁</h3><p>执行DDL语句的时候，默认会加上表锁，这是通过数据库的元数据锁实现的，也就是Metadata Locks</p>\n<blockquote>\n<p>DDL语句和增删改操作，确实是互斥的</p>\n</blockquote>\n<h4 id=\"共享锁-1\"><a href=\"#共享锁-1\" class=\"headerlink\" title=\"共享锁\"></a>共享锁</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#加表级共享锁</span><br><span class=\"line\"></span><br><span class=\"line\">lock tables 表名 read;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"独占锁-1\"><a href=\"#独占锁-1\" class=\"headerlink\" title=\"独占锁\"></a>独占锁</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#加表级独占锁</span><br><span class=\"line\"></span><br><span class=\"line\">lock tables 表名 write;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"意向共享锁\"><a href=\"#意向共享锁\" class=\"headerlink\" title=\"意向共享锁\"></a>意向共享锁</h4><p>当有事务在表里执行增删改操作的时候，会默认在行级加独占锁，同时也会在表级加一个意向独占锁</p>\n<h4 id=\"意向独占锁\"><a href=\"#意向独占锁\" class=\"headerlink\" title=\"意向独占锁\"></a>意向独占锁</h4><p>当有事务在表里执行查询操作的时候，会默认在表级加一个意向共享锁</p>\n<h4 id=\"关系-1\"><a href=\"#关系-1\" class=\"headerlink\" title=\"关系\"></a>关系</h4><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210331212950511.png\" loading=\"lazy\"></p>\n<h3 id=\"全局锁\"><a href=\"#全局锁\" class=\"headerlink\" title=\"全局锁\"></a>全局锁</h3><p>对整个数据库实例加锁。</p>\n<p>MySQL提供加全局读锁的方法：Flush tables with read lock(FTWRL)</p>\n<p>这个命令可以使整个库处于只读状态。使用该命令之后，数据更新语句、数据定义语句和更新类事务的提交语句等操作都会被阻塞。</p>\n<p>使用场景：全库逻辑备份。</p>\n<p><strong>风险：</strong></p>\n<p>1.如果在主库备份，在备份期间不能更新，业务停摆</p>\n<p>2.如果在从库备份，备份期间不能执行主库同步的binlog，导致主从延迟</p>\n<p>官方自带的逻辑备份工具mysqldump，当mysqldump使用参数--single-transaction的时候，会启动一个事务，确保拿到一致性视图。而由于MVCC的支持，这个过程中数据是可以正常更新的。</p>\n<p>一致性读是好，但是前提是引擎要支持这个隔离级别。</p>\n<p><strong>如果要全库只读，为什么不使用set global readonly&#x3D;true的方式？</strong></p>\n<p>1.在有些系统中，readonly的值会被用来做其他逻辑，比如判断主备库。所以修改global变量的方式影响太大。</p>\n<p>2.在异常处理机制上有差异。如果执行FTWRL命令之后由于客户端发生异常断开，那么MySQL会自动释放这个全局锁，整个库回到可以正常更新的状态。而将整个库设置为readonly之后，如果客户端发生异常，则数据库就会一直保持readonly状态，这样会导致整个库长时间处于不可写状态，风险较高。</p>\n<h2 id=\"加锁条件\"><a href=\"#加锁条件\" class=\"headerlink\" title=\"加锁条件\"></a>加锁条件</h2><ul>\n<li><p>在同一个事务中进行加锁操作</p>\n</li>\n<li><p>被加锁的记录在同一个页面中</p>\n</li>\n<li><p>加锁的类型是一样的】</p>\n</li>\n<li><p>等待状态是一样的</p>\n</li>\n</ul>\n<p>同时满足上面四个条件，就可以将多个所记录的锁放在同一个锁结构中</p>\n<h2 id=\"加锁规则总结\"><a href=\"#加锁规则总结\" class=\"headerlink\" title=\"加锁规则总结\"></a>加锁规则总结</h2><h3 id=\"可重复读\"><a href=\"#可重复读\" class=\"headerlink\" title=\"可重复读\"></a>可重复读</h3><ul>\n<li><p>加锁的基本单位是 next-key lock。希望你还记得，next-key lock 是前开后闭区间。</p>\n</li>\n<li><p>查找过程中访问到的对象才会加锁。</p>\n</li>\n<li><p>等值查询，给唯一索引加锁的时候，next-key lock 退化为行锁。如果不是唯一索引，向右遍历时且最后一个值不满足等值条件的时候，next-key lock 退化为间隙锁。</p>\n</li>\n<li><p>范围查询，无论是否是唯一索引，范围查询都需要访问到不满足条件的第一个值为止</p>\n</li>\n</ul>\n<blockquote>\n<ul>\n<li>for update 默认的是更新之后还要进行查找，所以不仅给索引上锁，符合条件的主键索引页会上锁</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>唯一索引会找到对应范围就会停止，但是非唯一索引是需要多找一段</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>范围索引InnoDB 会往前扫描到第一个不满足条件的行为止</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>删除的时候limit，不仅可以控制删除数据的条数，让操作更安全，还可以减小加锁的范围</li>\n</ul>\n</blockquote>\n<h3 id=\"读提交\"><a href=\"#读提交\" class=\"headerlink\" title=\"读提交\"></a>读提交</h3><p>语句执行过程中加上的行锁，在语句执行完成后，就要把“不满足条件的行”上的行锁直接释放了，不需要等到事务提交。</p>"},{"title":"mysql集群","description":"","abbrlink":"47a61b40","date":"2021-04-03T16:00:00.000Z","_content":"\n\n## 主从架构\n\n\n\n<!-- more -->\n\n\n\n其实就是一个master服务器和一个slave服务器\n\n\n\nmaster服务器主要负责平常的读和写，而slave就是要同步master的数据\n\n\n\n同步原理\n\n\n\n![image-20210404121918522](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210404121918522.png)\n\n\n\n1. 从库上有个io线程与主库进行tcp连接\n\n2. 这个io线程请求主库将binlog传输给自己，主库上有个io dump线程，负责通过这个tcp连接把binglog日志传输给从库的io线程\n\n3. 从库的io线程会把读取到的binlog日志写入到自己的本地的中转（relaylog）日志中\n\n4. 从库中另外一个sql线程会读取relay日志里的内容，进行日志重做，把所有主库执行过的增删改查，在从库上执行一遍，做到数据和主库的数据一致\n\n\n\n> 从库可以设置为只读（readonly）模式\n\n>\n\n> - 有时候一些运营类的查询语句会被放到备库上去查，设置为只读可以防止误操作；\n\n> - 防止切换逻辑有 bug，比如切换过程中出现双写，造成主备不一致；\n\n> - 可以用 readonly 状态，来判断节点的角色。\n\n>\n\n> 你可能会问，我把备库设置成只读了，还怎么跟主库保持同步更新呢？\n\n>\n\n> 因为 readonly 设置对超级 (super) 权限用户是无效的，而用于同步更新的线程，就拥有超级权限。\n\n>\n\n> 建议log_slave_updates 设置为 on，表示备库执行 relay log 后生成 binlog\n\n\n\n### 读写分离\n\n\n\n### 半同步复制\n\n\n\n1. after_commit   主库写入数据到binlog，等到binlog传输给从库，主库就提交事务，接着等待从库返回给自己一个成功的响应，然后主库返回提交事务成功的响应给客户端\n\n2. mysql5.7默认的 主库写入数据到binlog，将binlog传输给从库，从库写入成功，给主库返回响应，主库才提交事务，接着返回事务成功的响应给客户端\n\n\n\n```sql\n\n#检查半同步复制是否正常运行\n\nshwo global status like '%semi%';\n\n如果看到了Rpl_semi_sync_master_status的状态是on，就表示开启的\n\n```\n\n\n\n### 主从延迟\n\n\n\n使用percona-toolkit工具集里的pt-hearbeat工具，他会在主库中创建一个hearbeat表，然后有一个线程定时更细这个表里的时间戳字段，从库上就会有一个monitor线程会负责检查从库同步古来的hearbeat表的的时间戳\n\n\n\n把时间戳跟当前时间戳比较一个下，就知道主从同步落后了多长时间\n\n\n\n> 解决办法：\n\n>\n\n> mysql5.7已经支持并行复制了，在从库中设置slave_parallel_workers>0 然后把slave_parallel_type设置为 logical_clock 就ok了\n\n>\n\n> 如果想要刚写入的数据立马强制必须一定可以读到，可以利用类似mycat或者sharding-spherre之类的中间件里设置强制读写都从主库从，这样你写入主库的数据，强制从主库里读取，一定立即可以读到\n\n\n\n#### 三个原因\n\n\n\n1. 备库的压力大\n\n\n\n2. 备库所在机器的性能要比主库所在的机器性能差\n\n\n\n3. 大事务\n\n\n\n   > - 不建议一次性地用 delete 语句删除太多数据\n\n\n\n4. 备库的并行复制能力\n\n\n\n### 高可用\n\n\n\n一般生产环境使用MHA，Master High Availablility Magager and Tools for Mysql，日本人写的，用perl脚本写的一个工具，这个工具就是专门用于监控主库的状态，如果感觉不对，可以把从库切换为主库\n\n\n\n这MHA也是需要单独部署的，分为manager和node。manager节点一般是单独部署一台机器的，node节点一般是部署在每台myslq机器上的额，因为node节点需要通过解析各个myslq的日志来进行一些分析\n\n\n\n### 单表\n\n\n\n建议mysql的单表数据量不要超过1000万，最好是在500万之内，如果能控制在100万以内，那是最佳的选择，基本单表在100万以内的数据，性能上不会有太大的问题，前提是你做好索引\n\n\n\n> 一般一亿行数据，大小在一个g到几个g之间","source":"_posts/mysql集群.md","raw":"---\ntitle: mysql集群\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 47a61b40\ndate: 2021-04-04 00:00:00\n---\n\n\n## 主从架构\n\n\n\n<!-- more -->\n\n\n\n其实就是一个master服务器和一个slave服务器\n\n\n\nmaster服务器主要负责平常的读和写，而slave就是要同步master的数据\n\n\n\n同步原理\n\n\n\n![image-20210404121918522](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210404121918522.png)\n\n\n\n1. 从库上有个io线程与主库进行tcp连接\n\n2. 这个io线程请求主库将binlog传输给自己，主库上有个io dump线程，负责通过这个tcp连接把binglog日志传输给从库的io线程\n\n3. 从库的io线程会把读取到的binlog日志写入到自己的本地的中转（relaylog）日志中\n\n4. 从库中另外一个sql线程会读取relay日志里的内容，进行日志重做，把所有主库执行过的增删改查，在从库上执行一遍，做到数据和主库的数据一致\n\n\n\n> 从库可以设置为只读（readonly）模式\n\n>\n\n> - 有时候一些运营类的查询语句会被放到备库上去查，设置为只读可以防止误操作；\n\n> - 防止切换逻辑有 bug，比如切换过程中出现双写，造成主备不一致；\n\n> - 可以用 readonly 状态，来判断节点的角色。\n\n>\n\n> 你可能会问，我把备库设置成只读了，还怎么跟主库保持同步更新呢？\n\n>\n\n> 因为 readonly 设置对超级 (super) 权限用户是无效的，而用于同步更新的线程，就拥有超级权限。\n\n>\n\n> 建议log_slave_updates 设置为 on，表示备库执行 relay log 后生成 binlog\n\n\n\n### 读写分离\n\n\n\n### 半同步复制\n\n\n\n1. after_commit   主库写入数据到binlog，等到binlog传输给从库，主库就提交事务，接着等待从库返回给自己一个成功的响应，然后主库返回提交事务成功的响应给客户端\n\n2. mysql5.7默认的 主库写入数据到binlog，将binlog传输给从库，从库写入成功，给主库返回响应，主库才提交事务，接着返回事务成功的响应给客户端\n\n\n\n```sql\n\n#检查半同步复制是否正常运行\n\nshwo global status like '%semi%';\n\n如果看到了Rpl_semi_sync_master_status的状态是on，就表示开启的\n\n```\n\n\n\n### 主从延迟\n\n\n\n使用percona-toolkit工具集里的pt-hearbeat工具，他会在主库中创建一个hearbeat表，然后有一个线程定时更细这个表里的时间戳字段，从库上就会有一个monitor线程会负责检查从库同步古来的hearbeat表的的时间戳\n\n\n\n把时间戳跟当前时间戳比较一个下，就知道主从同步落后了多长时间\n\n\n\n> 解决办法：\n\n>\n\n> mysql5.7已经支持并行复制了，在从库中设置slave_parallel_workers>0 然后把slave_parallel_type设置为 logical_clock 就ok了\n\n>\n\n> 如果想要刚写入的数据立马强制必须一定可以读到，可以利用类似mycat或者sharding-spherre之类的中间件里设置强制读写都从主库从，这样你写入主库的数据，强制从主库里读取，一定立即可以读到\n\n\n\n#### 三个原因\n\n\n\n1. 备库的压力大\n\n\n\n2. 备库所在机器的性能要比主库所在的机器性能差\n\n\n\n3. 大事务\n\n\n\n   > - 不建议一次性地用 delete 语句删除太多数据\n\n\n\n4. 备库的并行复制能力\n\n\n\n### 高可用\n\n\n\n一般生产环境使用MHA，Master High Availablility Magager and Tools for Mysql，日本人写的，用perl脚本写的一个工具，这个工具就是专门用于监控主库的状态，如果感觉不对，可以把从库切换为主库\n\n\n\n这MHA也是需要单独部署的，分为manager和node。manager节点一般是单独部署一台机器的，node节点一般是部署在每台myslq机器上的额，因为node节点需要通过解析各个myslq的日志来进行一些分析\n\n\n\n### 单表\n\n\n\n建议mysql的单表数据量不要超过1000万，最好是在500万之内，如果能控制在100万以内，那是最佳的选择，基本单表在100万以内的数据，性能上不会有太大的问题，前提是你做好索引\n\n\n\n> 一般一亿行数据，大小在一个g到几个g之间","slug":"mysql集群","published":1,"updated":"2025-03-02T03:37:34.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4s002zn0uk86by50io","content":"<h2 id=\"主从架构\"><a href=\"#主从架构\" class=\"headerlink\" title=\"主从架构\"></a>主从架构</h2><span id=\"more\"></span>\n\n\n\n<p>其实就是一个master服务器和一个slave服务器</p>\n<p>master服务器主要负责平常的读和写，而slave就是要同步master的数据</p>\n<p>同步原理</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210404121918522.png\" alt=\"image-20210404121918522\" loading=\"lazy\"></p>\n<ol>\n<li><p>从库上有个io线程与主库进行tcp连接</p>\n</li>\n<li><p>这个io线程请求主库将binlog传输给自己，主库上有个io dump线程，负责通过这个tcp连接把binglog日志传输给从库的io线程</p>\n</li>\n<li><p>从库的io线程会把读取到的binlog日志写入到自己的本地的中转（relaylog）日志中</p>\n</li>\n<li><p>从库中另外一个sql线程会读取relay日志里的内容，进行日志重做，把所有主库执行过的增删改查，在从库上执行一遍，做到数据和主库的数据一致</p>\n</li>\n</ol>\n<blockquote>\n<p>从库可以设置为只读（readonly）模式</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ul>\n<li>有时候一些运营类的查询语句会被放到备库上去查，设置为只读可以防止误操作；</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>防止切换逻辑有 bug，比如切换过程中出现双写，造成主备不一致；</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>可以用 readonly 状态，来判断节点的角色。</li>\n</ul>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>你可能会问，我把备库设置成只读了，还怎么跟主库保持同步更新呢？</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>因为 readonly 设置对超级 (super) 权限用户是无效的，而用于同步更新的线程，就拥有超级权限。</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>建议log_slave_updates 设置为 on，表示备库执行 relay log 后生成 binlog</p>\n</blockquote>\n<h3 id=\"读写分离\"><a href=\"#读写分离\" class=\"headerlink\" title=\"读写分离\"></a>读写分离</h3><h3 id=\"半同步复制\"><a href=\"#半同步复制\" class=\"headerlink\" title=\"半同步复制\"></a>半同步复制</h3><ol>\n<li><p>after_commit   主库写入数据到binlog，等到binlog传输给从库，主库就提交事务，接着等待从库返回给自己一个成功的响应，然后主库返回提交事务成功的响应给客户端</p>\n</li>\n<li><p>mysql5.7默认的 主库写入数据到binlog，将binlog传输给从库，从库写入成功，给主库返回响应，主库才提交事务，接着返回事务成功的响应给客户端</p>\n</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#检查半同步复制是否正常运行</span><br><span class=\"line\"></span><br><span class=\"line\">shwo <span class=\"keyword\">global</span> status <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%semi%&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">如果看到了Rpl_semi_sync_master_status的状态是<span class=\"keyword\">on</span>，就表示开启的</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"主从延迟\"><a href=\"#主从延迟\" class=\"headerlink\" title=\"主从延迟\"></a>主从延迟</h3><p>使用percona-toolkit工具集里的pt-hearbeat工具，他会在主库中创建一个hearbeat表，然后有一个线程定时更细这个表里的时间戳字段，从库上就会有一个monitor线程会负责检查从库同步古来的hearbeat表的的时间戳</p>\n<p>把时间戳跟当前时间戳比较一个下，就知道主从同步落后了多长时间</p>\n<blockquote>\n<p>解决办法：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>mysql5.7已经支持并行复制了，在从库中设置slave_parallel_workers&gt;0 然后把slave_parallel_type设置为 logical_clock 就ok了</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>如果想要刚写入的数据立马强制必须一定可以读到，可以利用类似mycat或者sharding-spherre之类的中间件里设置强制读写都从主库从，这样你写入主库的数据，强制从主库里读取，一定立即可以读到</p>\n</blockquote>\n<h4 id=\"三个原因\"><a href=\"#三个原因\" class=\"headerlink\" title=\"三个原因\"></a>三个原因</h4><ol>\n<li><p>备库的压力大</p>\n</li>\n<li><p>备库所在机器的性能要比主库所在的机器性能差</p>\n</li>\n<li><p>大事务</p>\n<blockquote>\n<ul>\n<li>不建议一次性地用 delete 语句删除太多数据</li>\n</ul>\n</blockquote>\n</li>\n<li><p>备库的并行复制能力</p>\n</li>\n</ol>\n<h3 id=\"高可用\"><a href=\"#高可用\" class=\"headerlink\" title=\"高可用\"></a>高可用</h3><p>一般生产环境使用MHA，Master High Availablility Magager and Tools for Mysql，日本人写的，用perl脚本写的一个工具，这个工具就是专门用于监控主库的状态，如果感觉不对，可以把从库切换为主库</p>\n<p>这MHA也是需要单独部署的，分为manager和node。manager节点一般是单独部署一台机器的，node节点一般是部署在每台myslq机器上的额，因为node节点需要通过解析各个myslq的日志来进行一些分析</p>\n<h3 id=\"单表\"><a href=\"#单表\" class=\"headerlink\" title=\"单表\"></a>单表</h3><p>建议mysql的单表数据量不要超过1000万，最好是在500万之内，如果能控制在100万以内，那是最佳的选择，基本单表在100万以内的数据，性能上不会有太大的问题，前提是你做好索引</p>\n<blockquote>\n<p>一般一亿行数据，大小在一个g到几个g之间</p>\n</blockquote>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"主从架构\n其实就是一个master服务器和一个slave服务器\n\nmaster服务器主要负责平常的读和写，而slave就是要同步master的数据\n\n同步原理\n\n\n\n 1. 从库上有个io线程与主库进行tcp连接\n    \n    \n 2. 这个io线程请求主库将binlog传输给自己，主库上有个io dump线程，负责通过这个tcp连接把binglog日志传输给从库的io线程\n    \n    \n 3. 从库的io线程会把读取到的binlog日志写入到自己的本地的中转（relaylog）日志中\n    \n    \n 4. 从库中另外一个sql线程会读取relay日志里的内容，进行日志重做，把","more":"<p>其实就是一个master服务器和一个slave服务器</p>\n<p>master服务器主要负责平常的读和写，而slave就是要同步master的数据</p>\n<p>同步原理</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210404121918522.png\" alt=\"image-20210404121918522\" loading=\"lazy\"></p>\n<ol>\n<li><p>从库上有个io线程与主库进行tcp连接</p>\n</li>\n<li><p>这个io线程请求主库将binlog传输给自己，主库上有个io dump线程，负责通过这个tcp连接把binglog日志传输给从库的io线程</p>\n</li>\n<li><p>从库的io线程会把读取到的binlog日志写入到自己的本地的中转（relaylog）日志中</p>\n</li>\n<li><p>从库中另外一个sql线程会读取relay日志里的内容，进行日志重做，把所有主库执行过的增删改查，在从库上执行一遍，做到数据和主库的数据一致</p>\n</li>\n</ol>\n<blockquote>\n<p>从库可以设置为只读（readonly）模式</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ul>\n<li>有时候一些运营类的查询语句会被放到备库上去查，设置为只读可以防止误操作；</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>防止切换逻辑有 bug，比如切换过程中出现双写，造成主备不一致；</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>可以用 readonly 状态，来判断节点的角色。</li>\n</ul>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>你可能会问，我把备库设置成只读了，还怎么跟主库保持同步更新呢？</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>因为 readonly 设置对超级 (super) 权限用户是无效的，而用于同步更新的线程，就拥有超级权限。</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>建议log_slave_updates 设置为 on，表示备库执行 relay log 后生成 binlog</p>\n</blockquote>\n<h3 id=\"读写分离\"><a href=\"#读写分离\" class=\"headerlink\" title=\"读写分离\"></a>读写分离</h3><h3 id=\"半同步复制\"><a href=\"#半同步复制\" class=\"headerlink\" title=\"半同步复制\"></a>半同步复制</h3><ol>\n<li><p>after_commit   主库写入数据到binlog，等到binlog传输给从库，主库就提交事务，接着等待从库返回给自己一个成功的响应，然后主库返回提交事务成功的响应给客户端</p>\n</li>\n<li><p>mysql5.7默认的 主库写入数据到binlog，将binlog传输给从库，从库写入成功，给主库返回响应，主库才提交事务，接着返回事务成功的响应给客户端</p>\n</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#检查半同步复制是否正常运行</span><br><span class=\"line\"></span><br><span class=\"line\">shwo <span class=\"keyword\">global</span> status <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%semi%&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">如果看到了Rpl_semi_sync_master_status的状态是<span class=\"keyword\">on</span>，就表示开启的</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"主从延迟\"><a href=\"#主从延迟\" class=\"headerlink\" title=\"主从延迟\"></a>主从延迟</h3><p>使用percona-toolkit工具集里的pt-hearbeat工具，他会在主库中创建一个hearbeat表，然后有一个线程定时更细这个表里的时间戳字段，从库上就会有一个monitor线程会负责检查从库同步古来的hearbeat表的的时间戳</p>\n<p>把时间戳跟当前时间戳比较一个下，就知道主从同步落后了多长时间</p>\n<blockquote>\n<p>解决办法：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>mysql5.7已经支持并行复制了，在从库中设置slave_parallel_workers&gt;0 然后把slave_parallel_type设置为 logical_clock 就ok了</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>如果想要刚写入的数据立马强制必须一定可以读到，可以利用类似mycat或者sharding-spherre之类的中间件里设置强制读写都从主库从，这样你写入主库的数据，强制从主库里读取，一定立即可以读到</p>\n</blockquote>\n<h4 id=\"三个原因\"><a href=\"#三个原因\" class=\"headerlink\" title=\"三个原因\"></a>三个原因</h4><ol>\n<li><p>备库的压力大</p>\n</li>\n<li><p>备库所在机器的性能要比主库所在的机器性能差</p>\n</li>\n<li><p>大事务</p>\n<blockquote>\n<ul>\n<li>不建议一次性地用 delete 语句删除太多数据</li>\n</ul>\n</blockquote>\n</li>\n<li><p>备库的并行复制能力</p>\n</li>\n</ol>\n<h3 id=\"高可用\"><a href=\"#高可用\" class=\"headerlink\" title=\"高可用\"></a>高可用</h3><p>一般生产环境使用MHA，Master High Availablility Magager and Tools for Mysql，日本人写的，用perl脚本写的一个工具，这个工具就是专门用于监控主库的状态，如果感觉不对，可以把从库切换为主库</p>\n<p>这MHA也是需要单独部署的，分为manager和node。manager节点一般是单独部署一台机器的，node节点一般是部署在每台myslq机器上的额，因为node节点需要通过解析各个myslq的日志来进行一些分析</p>\n<h3 id=\"单表\"><a href=\"#单表\" class=\"headerlink\" title=\"单表\"></a>单表</h3><p>建议mysql的单表数据量不要超过1000万，最好是在500万之内，如果能控制在100万以内，那是最佳的选择，基本单表在100万以内的数据，性能上不会有太大的问题，前提是你做好索引</p>\n<blockquote>\n<p>一般一亿行数据，大小在一个g到几个g之间</p>\n</blockquote>"},{"title":"oracle表空间","description":"","abbrlink":"e8062535","date":"2021-06-11T16:00:00.000Z","_content":"\n\n详细介绍表空间\n\n\n\n<!-- more -->\n\n\n\n在逻辑结构中，Oracle从大到下，分别是如下的结构：**数据库实例 -> 表空间 -> 数据段（表） -> 区 -> 块。**\n\n\n\n也就是说当我们要使用Oracle作为项目的数据库时，我们需要先创建数据库实例，之后创建表空间，再创建相对应的表（也就是逻辑结构中的数据段）。\n\n\n\n使用Oracle作为项目的数据库时，我们需要先创建数据库实例，之后创建表空间，再创建相对应的表（也就是逻辑结构中的数据段）。\n\n\n\n## 常营命令\n\n\n\n```sql\n\n# 给表空间增加大小\n\nalter tablespace HGCS1031 \n\nadd datafile 'C:\\APP\\YSS\\PRODUCT\\11.2.0\\DBHOME_1\\DATABASE\\HGCS1031_1.DBF'\n\nSize 1000M Autoextend on maxsize unlimited; \n\n#查看表空间大小\n\nselect tablespace_name,sum(bytes)/1024/1024 from dba_data_files group by tablespace_name;\n\n# 查看表空间大小已经使用的情况和分配情况\n\nselect SEGMENT_TYPE,owner,sum(bytes)/1024/1024 from  dba_segments  where tablespace_name='XITONG' group by segment_type,owner;\n\n # 查看block的大小\n\n select value/1024 as \"kb\" from v$parameter where name='db_block_size'; \n\n```\n\n\n\n由于Oracle的Rowid使用22位来代表数据块号，因此Oracle表空间数据文件每个数据文件最多只能包含2^22个数据块。\n\n\n\n也因此数据库表空间的数据文件不是无限增长的，例如：\n\n\n\n在数据块为8k的情况下，单个数据文件的最大容量为8K*2^22 = 32G\n\n\n\n2K = 8G、8K = 32G、16K = 64G、32K = 128G；\n\n\n\nDB_BLOCK_SIZE作为数据库的最小操作单位，是在创建数据库的时候指定的，在创建完数据库之后便不可修改。要修改DB_BLOCK_SIZE，需要重建数据库。一般可以将数据EXP出来，然后重建数据库，指定新的DB_BLOCK_SIZE，然后再将数据IMP进数据库。\n\n\n\n## 空间不足\n\n\n\n首先选择设置自增长，sql语句：Alter tablespace 表空间名 adddatafile ‘数据文件存放路径‘ autoextend on next 每次增加的大小 maxsize 数据文件大小的最大值\n\n\n\n## 增加数据文件\n\n\n\n在自增长失灵了之后，需要增加数据文件，sql语句：Alter tablespace 表空间名 adddatafile ‘数据文件存放的路径’ size 数据文件大小M autoextend on next 每次自增长大小M Maxsize UNLIMITED；（后半部分为设置自增长）\n\n\n\n这里放个例子：\n\n\n\n```sql\n\nalter tablespace SDE add datafile 'E:\\app\\EmmaXu\\product\\11.1.0\\db_1\\database\\SDE_1.dbf' size 400Mautoextend off\n\n```\n\n\n","source":"_posts/oracle表空间.md","raw":"---\ntitle: oracle表空间\ndescription: ''\ntags:\n  - 无标签\nabbrlink: e8062535\ndate: 2021-06-12 00:00:00\n---\n\n\n详细介绍表空间\n\n\n\n<!-- more -->\n\n\n\n在逻辑结构中，Oracle从大到下，分别是如下的结构：**数据库实例 -> 表空间 -> 数据段（表） -> 区 -> 块。**\n\n\n\n也就是说当我们要使用Oracle作为项目的数据库时，我们需要先创建数据库实例，之后创建表空间，再创建相对应的表（也就是逻辑结构中的数据段）。\n\n\n\n使用Oracle作为项目的数据库时，我们需要先创建数据库实例，之后创建表空间，再创建相对应的表（也就是逻辑结构中的数据段）。\n\n\n\n## 常营命令\n\n\n\n```sql\n\n# 给表空间增加大小\n\nalter tablespace HGCS1031 \n\nadd datafile 'C:\\APP\\YSS\\PRODUCT\\11.2.0\\DBHOME_1\\DATABASE\\HGCS1031_1.DBF'\n\nSize 1000M Autoextend on maxsize unlimited; \n\n#查看表空间大小\n\nselect tablespace_name,sum(bytes)/1024/1024 from dba_data_files group by tablespace_name;\n\n# 查看表空间大小已经使用的情况和分配情况\n\nselect SEGMENT_TYPE,owner,sum(bytes)/1024/1024 from  dba_segments  where tablespace_name='XITONG' group by segment_type,owner;\n\n # 查看block的大小\n\n select value/1024 as \"kb\" from v$parameter where name='db_block_size'; \n\n```\n\n\n\n由于Oracle的Rowid使用22位来代表数据块号，因此Oracle表空间数据文件每个数据文件最多只能包含2^22个数据块。\n\n\n\n也因此数据库表空间的数据文件不是无限增长的，例如：\n\n\n\n在数据块为8k的情况下，单个数据文件的最大容量为8K*2^22 = 32G\n\n\n\n2K = 8G、8K = 32G、16K = 64G、32K = 128G；\n\n\n\nDB_BLOCK_SIZE作为数据库的最小操作单位，是在创建数据库的时候指定的，在创建完数据库之后便不可修改。要修改DB_BLOCK_SIZE，需要重建数据库。一般可以将数据EXP出来，然后重建数据库，指定新的DB_BLOCK_SIZE，然后再将数据IMP进数据库。\n\n\n\n## 空间不足\n\n\n\n首先选择设置自增长，sql语句：Alter tablespace 表空间名 adddatafile ‘数据文件存放路径‘ autoextend on next 每次增加的大小 maxsize 数据文件大小的最大值\n\n\n\n## 增加数据文件\n\n\n\n在自增长失灵了之后，需要增加数据文件，sql语句：Alter tablespace 表空间名 adddatafile ‘数据文件存放的路径’ size 数据文件大小M autoextend on next 每次自增长大小M Maxsize UNLIMITED；（后半部分为设置自增长）\n\n\n\n这里放个例子：\n\n\n\n```sql\n\nalter tablespace SDE add datafile 'E:\\app\\EmmaXu\\product\\11.1.0\\db_1\\database\\SDE_1.dbf' size 400Mautoextend off\n\n```\n\n\n","slug":"oracle表空间","published":1,"updated":"2025-03-02T03:37:34.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4t0031n0ukdtnoefhh","content":"<p>详细介绍表空间</p>\n<span id=\"more\"></span>\n\n\n\n<p>在逻辑结构中，Oracle从大到下，分别是如下的结构：<strong>数据库实例 -&gt; 表空间 -&gt; 数据段（表） -&gt; 区 -&gt; 块。</strong></p>\n<p>也就是说当我们要使用Oracle作为项目的数据库时，我们需要先创建数据库实例，之后创建表空间，再创建相对应的表（也就是逻辑结构中的数据段）。</p>\n<p>使用Oracle作为项目的数据库时，我们需要先创建数据库实例，之后创建表空间，再创建相对应的表（也就是逻辑结构中的数据段）。</p>\n<h2 id=\"常营命令\"><a href=\"#常营命令\" class=\"headerlink\" title=\"常营命令\"></a>常营命令</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 给表空间增加大小</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">alter</span> tablespace HGCS1031 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add</span> datafile <span class=\"string\">&#x27;C:\\APP\\YSS\\PRODUCT\\11.2.0\\DBHOME_1\\DATABASE\\HGCS1031_1.DBF&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Size <span class=\"number\">1000</span>M Autoextend <span class=\"keyword\">on</span> maxsize unlimited; </span><br><span class=\"line\"></span><br><span class=\"line\">#查看表空间大小</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> tablespace_name,<span class=\"built_in\">sum</span>(bytes)<span class=\"operator\">/</span><span class=\"number\">1024</span><span class=\"operator\">/</span><span class=\"number\">1024</span> <span class=\"keyword\">from</span> dba_data_files <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> tablespace_name;</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看表空间大小已经使用的情况和分配情况</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> SEGMENT_TYPE,owner,<span class=\"built_in\">sum</span>(bytes)<span class=\"operator\">/</span><span class=\"number\">1024</span><span class=\"operator\">/</span><span class=\"number\">1024</span> <span class=\"keyword\">from</span>  dba_segments  <span class=\"keyword\">where</span> tablespace_name<span class=\"operator\">=</span><span class=\"string\">&#x27;XITONG&#x27;</span> <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> segment_type,owner;</span><br><span class=\"line\"></span><br><span class=\"line\"> # 查看block的大小</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">select</span> <span class=\"keyword\">value</span><span class=\"operator\">/</span><span class=\"number\">1024</span> <span class=\"keyword\">as</span> &quot;kb&quot; <span class=\"keyword\">from</span> v$<span class=\"keyword\">parameter</span> <span class=\"keyword\">where</span> name<span class=\"operator\">=</span><span class=\"string\">&#x27;db_block_size&#x27;</span>; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>由于Oracle的Rowid使用22位来代表数据块号，因此Oracle表空间数据文件每个数据文件最多只能包含2^22个数据块。</p>\n<p>也因此数据库表空间的数据文件不是无限增长的，例如：</p>\n<p>在数据块为8k的情况下，单个数据文件的最大容量为8K*2^22 &#x3D; 32G</p>\n<p>2K &#x3D; 8G、8K &#x3D; 32G、16K &#x3D; 64G、32K &#x3D; 128G；</p>\n<p>DB_BLOCK_SIZE作为数据库的最小操作单位，是在创建数据库的时候指定的，在创建完数据库之后便不可修改。要修改DB_BLOCK_SIZE，需要重建数据库。一般可以将数据EXP出来，然后重建数据库，指定新的DB_BLOCK_SIZE，然后再将数据IMP进数据库。</p>\n<h2 id=\"空间不足\"><a href=\"#空间不足\" class=\"headerlink\" title=\"空间不足\"></a>空间不足</h2><p>首先选择设置自增长，sql语句：Alter tablespace 表空间名 adddatafile ‘数据文件存放路径‘ autoextend on next 每次增加的大小 maxsize 数据文件大小的最大值</p>\n<h2 id=\"增加数据文件\"><a href=\"#增加数据文件\" class=\"headerlink\" title=\"增加数据文件\"></a>增加数据文件</h2><p>在自增长失灵了之后，需要增加数据文件，sql语句：Alter tablespace 表空间名 adddatafile ‘数据文件存放的路径’ size 数据文件大小M autoextend on next 每次自增长大小M Maxsize UNLIMITED；（后半部分为设置自增长）</p>\n<p>这里放个例子：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">alter</span> tablespace SDE <span class=\"keyword\">add</span> datafile <span class=\"string\">&#x27;E:\\app\\EmmaXu\\product\\11.1.0\\db_1\\database\\SDE_1.dbf&#x27;</span> size <span class=\"number\">400</span>Mautoextend off</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"详细介绍表空间\n\n在逻辑结构中，Oracle从大到下，分别是如下的结构：数据库实例 -> 表空间 -> 数据段（表） -> 区 -> 块。\n\n也就是说当我们要使用Oracle作为项目的数据库时，我们需要先创建数据库实例，之后创建表空间，再创建相对应的表（也就是逻辑结构中的数据段）。\n\n使用Oracle作为项目的数据库时，我们需要先创建数据库实例，之后创建表空间，再创建相对应的表（也就是逻辑结构中的数据段）。\n\n常营命令\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 给表空间增加大小\n\nalter tablespace HG","more":"<p>在逻辑结构中，Oracle从大到下，分别是如下的结构：<strong>数据库实例 -&gt; 表空间 -&gt; 数据段（表） -&gt; 区 -&gt; 块。</strong></p>\n<p>也就是说当我们要使用Oracle作为项目的数据库时，我们需要先创建数据库实例，之后创建表空间，再创建相对应的表（也就是逻辑结构中的数据段）。</p>\n<p>使用Oracle作为项目的数据库时，我们需要先创建数据库实例，之后创建表空间，再创建相对应的表（也就是逻辑结构中的数据段）。</p>\n<h2 id=\"常营命令\"><a href=\"#常营命令\" class=\"headerlink\" title=\"常营命令\"></a>常营命令</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 给表空间增加大小</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">alter</span> tablespace HGCS1031 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add</span> datafile <span class=\"string\">&#x27;C:\\APP\\YSS\\PRODUCT\\11.2.0\\DBHOME_1\\DATABASE\\HGCS1031_1.DBF&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Size <span class=\"number\">1000</span>M Autoextend <span class=\"keyword\">on</span> maxsize unlimited; </span><br><span class=\"line\"></span><br><span class=\"line\">#查看表空间大小</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> tablespace_name,<span class=\"built_in\">sum</span>(bytes)<span class=\"operator\">/</span><span class=\"number\">1024</span><span class=\"operator\">/</span><span class=\"number\">1024</span> <span class=\"keyword\">from</span> dba_data_files <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> tablespace_name;</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看表空间大小已经使用的情况和分配情况</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> SEGMENT_TYPE,owner,<span class=\"built_in\">sum</span>(bytes)<span class=\"operator\">/</span><span class=\"number\">1024</span><span class=\"operator\">/</span><span class=\"number\">1024</span> <span class=\"keyword\">from</span>  dba_segments  <span class=\"keyword\">where</span> tablespace_name<span class=\"operator\">=</span><span class=\"string\">&#x27;XITONG&#x27;</span> <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> segment_type,owner;</span><br><span class=\"line\"></span><br><span class=\"line\"> # 查看block的大小</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">select</span> <span class=\"keyword\">value</span><span class=\"operator\">/</span><span class=\"number\">1024</span> <span class=\"keyword\">as</span> &quot;kb&quot; <span class=\"keyword\">from</span> v$<span class=\"keyword\">parameter</span> <span class=\"keyword\">where</span> name<span class=\"operator\">=</span><span class=\"string\">&#x27;db_block_size&#x27;</span>; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>由于Oracle的Rowid使用22位来代表数据块号，因此Oracle表空间数据文件每个数据文件最多只能包含2^22个数据块。</p>\n<p>也因此数据库表空间的数据文件不是无限增长的，例如：</p>\n<p>在数据块为8k的情况下，单个数据文件的最大容量为8K*2^22 &#x3D; 32G</p>\n<p>2K &#x3D; 8G、8K &#x3D; 32G、16K &#x3D; 64G、32K &#x3D; 128G；</p>\n<p>DB_BLOCK_SIZE作为数据库的最小操作单位，是在创建数据库的时候指定的，在创建完数据库之后便不可修改。要修改DB_BLOCK_SIZE，需要重建数据库。一般可以将数据EXP出来，然后重建数据库，指定新的DB_BLOCK_SIZE，然后再将数据IMP进数据库。</p>\n<h2 id=\"空间不足\"><a href=\"#空间不足\" class=\"headerlink\" title=\"空间不足\"></a>空间不足</h2><p>首先选择设置自增长，sql语句：Alter tablespace 表空间名 adddatafile ‘数据文件存放路径‘ autoextend on next 每次增加的大小 maxsize 数据文件大小的最大值</p>\n<h2 id=\"增加数据文件\"><a href=\"#增加数据文件\" class=\"headerlink\" title=\"增加数据文件\"></a>增加数据文件</h2><p>在自增长失灵了之后，需要增加数据文件，sql语句：Alter tablespace 表空间名 adddatafile ‘数据文件存放的路径’ size 数据文件大小M autoextend on next 每次自增长大小M Maxsize UNLIMITED；（后半部分为设置自增长）</p>\n<p>这里放个例子：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">alter</span> tablespace SDE <span class=\"keyword\">add</span> datafile <span class=\"string\">&#x27;E:\\app\\EmmaXu\\product\\11.1.0\\db_1\\database\\SDE_1.dbf&#x27;</span> size <span class=\"number\">400</span>Mautoextend off</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"redis之String","description":"","abbrlink":"d877136c","date":"2021-05-08T16:00:00.000Z","_content":"\n\n详细介绍redis String类型\n\n\n\n<!-- more -->\n\n\n\n# what\n\n\n\nString是redis的基本类型之一\n\n\n\n```Bash\n\nset name shy     #设置name为shy的键值对\n\nget name    #获取键为name的值\n\nkeys *    #查看所有键值对\n\nexits key名字 #返回1，表示key存在，0表示不存在\n\nmove key名字 1  #1表示当前数据库，删除key\n\nexpire key名字 10  #设置key名字的过期时间为10秒\n\nttl key名字 #查看key名字的过期时间还剩多少秒\n\ntype key名字 #key的类型\n\nappend key名字 值 #向key的值追加数据\n\nstrlen key名字 #获取key的长度\n\nincr key  #给key+1\n\ndecr key   #给key-1\n\nincrby key 步长  #key每次加多少\n\ndecrby  key 步长# key每次减多少\n\ngetrange key 0 3  #截取字符串从0到3\n\ngetrange key 0 -1  #查看所有内容\n\nsetrange key 1 xx   #将第1位的值替换为xx\n\nsetex（set with expire）  #设置过期时间\n\nsetex key3 30 “hello” #设置key3的值为hello，30秒后会过期\n\nsetnx（set if not exist）  #不存在设置\n\nsetnx key3 “redis”  #如果不存在key3，就创建\n\nmset key value  #一次设置多个键值对\n\nmget key1 key2  #一次获取多个键的值\n\nmsetnx 多键值对版本 #是一个原子性的操作，要么都成功，要么都失败 \n\nmset user:1:name zhangsan  user:1:age 12\n\n#设置一个对象的两个属性 对象名：ID：属性名\n\nmget user：1：name user：1：age\n\n#获取一个对象的两个属性\n\nsetget v1 redis\n\n#如果不存在v1，则返回空，但是将v1的值设置为redis\n\n#，如果存在，则返回v1的值，然后将v1的设置为redis\n\n```\n\n\n\n# why\n\n\n\n## SDS\n\n\n\n采用sds结构来存储字符串，结果如下\n\n\n\n![](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210509073428239.png)redis中使用这样的sds的结构来构建字符串主要有以下几个原因：\n\n\n\n1. 当获取长度的时候，时间复杂度为0（1）\n\n2. 二进制安全，当比如用一个空字符串作为字符串中的一个特殊变量的时候，由于c中的字符串是通过\\0这个空字符来区分一个字符串是否结尾的，所以它只能用于保存文本数据，而不能保存像图片、音频、视频、压缩文件这样的二进制数据\n\n3. 杜绝缓冲区溢出（sds是通过预分配策略和惰性空间释放来减少的）\n\n4. 减少修改字符串时带来的内存重分配次数（sds是通过预分配策略和惰性空间释放来减少的）\n\n5. 可以使用c语言的一些函数，因为sds字符串的也是以\\0 作为结尾的，但是sds字符串是通过sds的len属性来确定这个字符串是不是结束的，c的字符串则是单一的通过\\0来确认一个字符串是否结束\n\n\n\n### 预分配策略\n\n\n\n如果对SDS进行修改之后，SDS的长度（也即是len属性的值）将小于1MB，那么程序分配和len属性同样大小的未使用空间，这时SDS len属性的值将和free属性的值相同。举个例子，如果进行修改之后，SDS的len将变成13字节，那么程序也会分配13字节的未使用空间，SDS的buf数组的实际长度将变成13+13+1=27字节（额外的一字节用于保存空字符）。\n\n\n\n如果对SDS进行修改之后，SDS的长度将大于等于1MB，那么程序会分配1MB的未使用空间。举个例子，如果进行修改之后，SDS的len将变成30MB，那么程序会分配1MB的未使用空间，SDS的buf数组的实际长度将为30MB+1MB+1byte。\n\n\n\n### 惰性空间释放\n\n\n\n惰性空间释放用于优化SDS的字符串缩短操作：当SDS的API需要缩短SDS保存的字符串时，程序并不立即使用内存重分配来回收缩短后多出来的字节，而是使用free属性将这些字节的数量记录起来，并等待将来使用。\n\n\n\n### sds和c字符串的区别\n\n\n\n![image-20210509073428239](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210509073428239.png)","source":"_posts/redis之String.md","raw":"---\ntitle: redis之String\ndescription: ''\ntags:\n  - 无标签\nabbrlink: d877136c\ndate: 2021-05-09 00:00:00\n---\n\n\n详细介绍redis String类型\n\n\n\n<!-- more -->\n\n\n\n# what\n\n\n\nString是redis的基本类型之一\n\n\n\n```Bash\n\nset name shy     #设置name为shy的键值对\n\nget name    #获取键为name的值\n\nkeys *    #查看所有键值对\n\nexits key名字 #返回1，表示key存在，0表示不存在\n\nmove key名字 1  #1表示当前数据库，删除key\n\nexpire key名字 10  #设置key名字的过期时间为10秒\n\nttl key名字 #查看key名字的过期时间还剩多少秒\n\ntype key名字 #key的类型\n\nappend key名字 值 #向key的值追加数据\n\nstrlen key名字 #获取key的长度\n\nincr key  #给key+1\n\ndecr key   #给key-1\n\nincrby key 步长  #key每次加多少\n\ndecrby  key 步长# key每次减多少\n\ngetrange key 0 3  #截取字符串从0到3\n\ngetrange key 0 -1  #查看所有内容\n\nsetrange key 1 xx   #将第1位的值替换为xx\n\nsetex（set with expire）  #设置过期时间\n\nsetex key3 30 “hello” #设置key3的值为hello，30秒后会过期\n\nsetnx（set if not exist）  #不存在设置\n\nsetnx key3 “redis”  #如果不存在key3，就创建\n\nmset key value  #一次设置多个键值对\n\nmget key1 key2  #一次获取多个键的值\n\nmsetnx 多键值对版本 #是一个原子性的操作，要么都成功，要么都失败 \n\nmset user:1:name zhangsan  user:1:age 12\n\n#设置一个对象的两个属性 对象名：ID：属性名\n\nmget user：1：name user：1：age\n\n#获取一个对象的两个属性\n\nsetget v1 redis\n\n#如果不存在v1，则返回空，但是将v1的值设置为redis\n\n#，如果存在，则返回v1的值，然后将v1的设置为redis\n\n```\n\n\n\n# why\n\n\n\n## SDS\n\n\n\n采用sds结构来存储字符串，结果如下\n\n\n\n![](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210509073428239.png)redis中使用这样的sds的结构来构建字符串主要有以下几个原因：\n\n\n\n1. 当获取长度的时候，时间复杂度为0（1）\n\n2. 二进制安全，当比如用一个空字符串作为字符串中的一个特殊变量的时候，由于c中的字符串是通过\\0这个空字符来区分一个字符串是否结尾的，所以它只能用于保存文本数据，而不能保存像图片、音频、视频、压缩文件这样的二进制数据\n\n3. 杜绝缓冲区溢出（sds是通过预分配策略和惰性空间释放来减少的）\n\n4. 减少修改字符串时带来的内存重分配次数（sds是通过预分配策略和惰性空间释放来减少的）\n\n5. 可以使用c语言的一些函数，因为sds字符串的也是以\\0 作为结尾的，但是sds字符串是通过sds的len属性来确定这个字符串是不是结束的，c的字符串则是单一的通过\\0来确认一个字符串是否结束\n\n\n\n### 预分配策略\n\n\n\n如果对SDS进行修改之后，SDS的长度（也即是len属性的值）将小于1MB，那么程序分配和len属性同样大小的未使用空间，这时SDS len属性的值将和free属性的值相同。举个例子，如果进行修改之后，SDS的len将变成13字节，那么程序也会分配13字节的未使用空间，SDS的buf数组的实际长度将变成13+13+1=27字节（额外的一字节用于保存空字符）。\n\n\n\n如果对SDS进行修改之后，SDS的长度将大于等于1MB，那么程序会分配1MB的未使用空间。举个例子，如果进行修改之后，SDS的len将变成30MB，那么程序会分配1MB的未使用空间，SDS的buf数组的实际长度将为30MB+1MB+1byte。\n\n\n\n### 惰性空间释放\n\n\n\n惰性空间释放用于优化SDS的字符串缩短操作：当SDS的API需要缩短SDS保存的字符串时，程序并不立即使用内存重分配来回收缩短后多出来的字节，而是使用free属性将这些字节的数量记录起来，并等待将来使用。\n\n\n\n### sds和c字符串的区别\n\n\n\n![image-20210509073428239](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210509073428239.png)","slug":"redis之String","published":1,"updated":"2025-03-02T03:37:34.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4t0033n0uk17zycd22","content":"<p>详细介绍redis String类型</p>\n<span id=\"more\"></span>\n\n\n\n<h1 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h1><p>String是redis的基本类型之一</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> name shy     <span class=\"comment\">#设置name为shy的键值对</span></span><br><span class=\"line\"></span><br><span class=\"line\">get name    <span class=\"comment\">#获取键为name的值</span></span><br><span class=\"line\"></span><br><span class=\"line\">keys *    <span class=\"comment\">#查看所有键值对</span></span><br><span class=\"line\"></span><br><span class=\"line\">exits key名字 <span class=\"comment\">#返回1，表示key存在，0表示不存在</span></span><br><span class=\"line\"></span><br><span class=\"line\">move key名字 1  <span class=\"comment\">#1表示当前数据库，删除key</span></span><br><span class=\"line\"></span><br><span class=\"line\">expire key名字 10  <span class=\"comment\">#设置key名字的过期时间为10秒</span></span><br><span class=\"line\"></span><br><span class=\"line\">ttl key名字 <span class=\"comment\">#查看key名字的过期时间还剩多少秒</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">type</span> key名字 <span class=\"comment\">#key的类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">append key名字 值 <span class=\"comment\">#向key的值追加数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">strlen key名字 <span class=\"comment\">#获取key的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">incr key  <span class=\"comment\">#给key+1</span></span><br><span class=\"line\"></span><br><span class=\"line\">decr key   <span class=\"comment\">#给key-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">incrby key 步长  <span class=\"comment\">#key每次加多少</span></span><br><span class=\"line\"></span><br><span class=\"line\">decrby  key 步长# key每次减多少</span><br><span class=\"line\"></span><br><span class=\"line\">getrange key 0 3  <span class=\"comment\">#截取字符串从0到3</span></span><br><span class=\"line\"></span><br><span class=\"line\">getrange key 0 -1  <span class=\"comment\">#查看所有内容</span></span><br><span class=\"line\"></span><br><span class=\"line\">setrange key 1 xx   <span class=\"comment\">#将第1位的值替换为xx</span></span><br><span class=\"line\"></span><br><span class=\"line\">setex（<span class=\"built_in\">set</span> with expire）  <span class=\"comment\">#设置过期时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">setex key3 30 “hello” <span class=\"comment\">#设置key3的值为hello，30秒后会过期</span></span><br><span class=\"line\"></span><br><span class=\"line\">setnx（<span class=\"built_in\">set</span> <span class=\"keyword\">if</span> not exist）  <span class=\"comment\">#不存在设置</span></span><br><span class=\"line\"></span><br><span class=\"line\">setnx key3 “redis”  <span class=\"comment\">#如果不存在key3，就创建</span></span><br><span class=\"line\"></span><br><span class=\"line\">mset key value  <span class=\"comment\">#一次设置多个键值对</span></span><br><span class=\"line\"></span><br><span class=\"line\">mget key1 key2  <span class=\"comment\">#一次获取多个键的值</span></span><br><span class=\"line\"></span><br><span class=\"line\">msetnx 多键值对版本 <span class=\"comment\">#是一个原子性的操作，要么都成功，要么都失败 </span></span><br><span class=\"line\"></span><br><span class=\"line\">mset user:1:name zhangsan  user:1:age 12</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置一个对象的两个属性 对象名：ID：属性名</span></span><br><span class=\"line\"></span><br><span class=\"line\">mget user：1：name user：1：age</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#获取一个对象的两个属性</span></span><br><span class=\"line\"></span><br><span class=\"line\">setget v1 redis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#如果不存在v1，则返回空，但是将v1的值设置为redis</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#，如果存在，则返回v1的值，然后将v1的设置为redis</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"why\"><a href=\"#why\" class=\"headerlink\" title=\"why\"></a>why</h1><h2 id=\"SDS\"><a href=\"#SDS\" class=\"headerlink\" title=\"SDS\"></a>SDS</h2><p>采用sds结构来存储字符串，结果如下</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210509073428239.png\" loading=\"lazy\">redis中使用这样的sds的结构来构建字符串主要有以下几个原因：</p>\n<ol>\n<li><p>当获取长度的时候，时间复杂度为0（1）</p>\n</li>\n<li><p>二进制安全，当比如用一个空字符串作为字符串中的一个特殊变量的时候，由于c中的字符串是通过\\0这个空字符来区分一个字符串是否结尾的，所以它只能用于保存文本数据，而不能保存像图片、音频、视频、压缩文件这样的二进制数据</p>\n</li>\n<li><p>杜绝缓冲区溢出（sds是通过预分配策略和惰性空间释放来减少的）</p>\n</li>\n<li><p>减少修改字符串时带来的内存重分配次数（sds是通过预分配策略和惰性空间释放来减少的）</p>\n</li>\n<li><p>可以使用c语言的一些函数，因为sds字符串的也是以\\0 作为结尾的，但是sds字符串是通过sds的len属性来确定这个字符串是不是结束的，c的字符串则是单一的通过\\0来确认一个字符串是否结束</p>\n</li>\n</ol>\n<h3 id=\"预分配策略\"><a href=\"#预分配策略\" class=\"headerlink\" title=\"预分配策略\"></a>预分配策略</h3><p>如果对SDS进行修改之后，SDS的长度（也即是len属性的值）将小于1MB，那么程序分配和len属性同样大小的未使用空间，这时SDS len属性的值将和free属性的值相同。举个例子，如果进行修改之后，SDS的len将变成13字节，那么程序也会分配13字节的未使用空间，SDS的buf数组的实际长度将变成13+13+1&#x3D;27字节（额外的一字节用于保存空字符）。</p>\n<p>如果对SDS进行修改之后，SDS的长度将大于等于1MB，那么程序会分配1MB的未使用空间。举个例子，如果进行修改之后，SDS的len将变成30MB，那么程序会分配1MB的未使用空间，SDS的buf数组的实际长度将为30MB+1MB+1byte。</p>\n<h3 id=\"惰性空间释放\"><a href=\"#惰性空间释放\" class=\"headerlink\" title=\"惰性空间释放\"></a>惰性空间释放</h3><p>惰性空间释放用于优化SDS的字符串缩短操作：当SDS的API需要缩短SDS保存的字符串时，程序并不立即使用内存重分配来回收缩短后多出来的字节，而是使用free属性将这些字节的数量记录起来，并等待将来使用。</p>\n<h3 id=\"sds和c字符串的区别\"><a href=\"#sds和c字符串的区别\" class=\"headerlink\" title=\"sds和c字符串的区别\"></a>sds和c字符串的区别</h3><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210509073428239.png\" alt=\"image-20210509073428239\" loading=\"lazy\"></p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"详细介绍redis String类型\n\nwhat\nString是redis的基本类型之一\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n\n\n\nset name shy     #设置name为shy的键值对\n\nget name    #获取键为name的值\n\nkeys *    #查","more":"<h1 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h1><p>String是redis的基本类型之一</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> name shy     <span class=\"comment\">#设置name为shy的键值对</span></span><br><span class=\"line\"></span><br><span class=\"line\">get name    <span class=\"comment\">#获取键为name的值</span></span><br><span class=\"line\"></span><br><span class=\"line\">keys *    <span class=\"comment\">#查看所有键值对</span></span><br><span class=\"line\"></span><br><span class=\"line\">exits key名字 <span class=\"comment\">#返回1，表示key存在，0表示不存在</span></span><br><span class=\"line\"></span><br><span class=\"line\">move key名字 1  <span class=\"comment\">#1表示当前数据库，删除key</span></span><br><span class=\"line\"></span><br><span class=\"line\">expire key名字 10  <span class=\"comment\">#设置key名字的过期时间为10秒</span></span><br><span class=\"line\"></span><br><span class=\"line\">ttl key名字 <span class=\"comment\">#查看key名字的过期时间还剩多少秒</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">type</span> key名字 <span class=\"comment\">#key的类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">append key名字 值 <span class=\"comment\">#向key的值追加数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">strlen key名字 <span class=\"comment\">#获取key的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">incr key  <span class=\"comment\">#给key+1</span></span><br><span class=\"line\"></span><br><span class=\"line\">decr key   <span class=\"comment\">#给key-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">incrby key 步长  <span class=\"comment\">#key每次加多少</span></span><br><span class=\"line\"></span><br><span class=\"line\">decrby  key 步长# key每次减多少</span><br><span class=\"line\"></span><br><span class=\"line\">getrange key 0 3  <span class=\"comment\">#截取字符串从0到3</span></span><br><span class=\"line\"></span><br><span class=\"line\">getrange key 0 -1  <span class=\"comment\">#查看所有内容</span></span><br><span class=\"line\"></span><br><span class=\"line\">setrange key 1 xx   <span class=\"comment\">#将第1位的值替换为xx</span></span><br><span class=\"line\"></span><br><span class=\"line\">setex（<span class=\"built_in\">set</span> with expire）  <span class=\"comment\">#设置过期时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">setex key3 30 “hello” <span class=\"comment\">#设置key3的值为hello，30秒后会过期</span></span><br><span class=\"line\"></span><br><span class=\"line\">setnx（<span class=\"built_in\">set</span> <span class=\"keyword\">if</span> not exist）  <span class=\"comment\">#不存在设置</span></span><br><span class=\"line\"></span><br><span class=\"line\">setnx key3 “redis”  <span class=\"comment\">#如果不存在key3，就创建</span></span><br><span class=\"line\"></span><br><span class=\"line\">mset key value  <span class=\"comment\">#一次设置多个键值对</span></span><br><span class=\"line\"></span><br><span class=\"line\">mget key1 key2  <span class=\"comment\">#一次获取多个键的值</span></span><br><span class=\"line\"></span><br><span class=\"line\">msetnx 多键值对版本 <span class=\"comment\">#是一个原子性的操作，要么都成功，要么都失败 </span></span><br><span class=\"line\"></span><br><span class=\"line\">mset user:1:name zhangsan  user:1:age 12</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置一个对象的两个属性 对象名：ID：属性名</span></span><br><span class=\"line\"></span><br><span class=\"line\">mget user：1：name user：1：age</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#获取一个对象的两个属性</span></span><br><span class=\"line\"></span><br><span class=\"line\">setget v1 redis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#如果不存在v1，则返回空，但是将v1的值设置为redis</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#，如果存在，则返回v1的值，然后将v1的设置为redis</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"why\"><a href=\"#why\" class=\"headerlink\" title=\"why\"></a>why</h1><h2 id=\"SDS\"><a href=\"#SDS\" class=\"headerlink\" title=\"SDS\"></a>SDS</h2><p>采用sds结构来存储字符串，结果如下</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210509073428239.png\" loading=\"lazy\">redis中使用这样的sds的结构来构建字符串主要有以下几个原因：</p>\n<ol>\n<li><p>当获取长度的时候，时间复杂度为0（1）</p>\n</li>\n<li><p>二进制安全，当比如用一个空字符串作为字符串中的一个特殊变量的时候，由于c中的字符串是通过\\0这个空字符来区分一个字符串是否结尾的，所以它只能用于保存文本数据，而不能保存像图片、音频、视频、压缩文件这样的二进制数据</p>\n</li>\n<li><p>杜绝缓冲区溢出（sds是通过预分配策略和惰性空间释放来减少的）</p>\n</li>\n<li><p>减少修改字符串时带来的内存重分配次数（sds是通过预分配策略和惰性空间释放来减少的）</p>\n</li>\n<li><p>可以使用c语言的一些函数，因为sds字符串的也是以\\0 作为结尾的，但是sds字符串是通过sds的len属性来确定这个字符串是不是结束的，c的字符串则是单一的通过\\0来确认一个字符串是否结束</p>\n</li>\n</ol>\n<h3 id=\"预分配策略\"><a href=\"#预分配策略\" class=\"headerlink\" title=\"预分配策略\"></a>预分配策略</h3><p>如果对SDS进行修改之后，SDS的长度（也即是len属性的值）将小于1MB，那么程序分配和len属性同样大小的未使用空间，这时SDS len属性的值将和free属性的值相同。举个例子，如果进行修改之后，SDS的len将变成13字节，那么程序也会分配13字节的未使用空间，SDS的buf数组的实际长度将变成13+13+1&#x3D;27字节（额外的一字节用于保存空字符）。</p>\n<p>如果对SDS进行修改之后，SDS的长度将大于等于1MB，那么程序会分配1MB的未使用空间。举个例子，如果进行修改之后，SDS的len将变成30MB，那么程序会分配1MB的未使用空间，SDS的buf数组的实际长度将为30MB+1MB+1byte。</p>\n<h3 id=\"惰性空间释放\"><a href=\"#惰性空间释放\" class=\"headerlink\" title=\"惰性空间释放\"></a>惰性空间释放</h3><p>惰性空间释放用于优化SDS的字符串缩短操作：当SDS的API需要缩短SDS保存的字符串时，程序并不立即使用内存重分配来回收缩短后多出来的字节，而是使用free属性将这些字节的数量记录起来，并等待将来使用。</p>\n<h3 id=\"sds和c字符串的区别\"><a href=\"#sds和c字符串的区别\" class=\"headerlink\" title=\"sds和c字符串的区别\"></a>sds和c字符串的区别</h3><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210509073428239.png\" alt=\"image-20210509073428239\" loading=\"lazy\"></p>"},{"title":"redis的string类型","description":"","abbrlink":"d5eb6ab8","date":"2021-04-22T16:00:00.000Z","_content":"\n\n详细redis的数据类型\n\n\n\n<!-- more -->\n\n\n\n# String\n\n\n\n## what\n\n\n\n```Bash\n\nset name shy     #设置name为shy的键值对\n\nget name    #获取键为name的值\n\nkeys *    #查看所有键值对\n\nexits key名字 #返回1，表示key存在，0表示不存在\n\nmove key名字 1  #1表示当前数据库，删除key\n\nexpire key名字 10  #设置key名字的过期时间为10秒\n\nttl key名字 #查看key名字的过期时间还剩多少秒\n\ntype key名字 #key的类型\n\nappend key名字 值 #向key的值追加数据\n\nstrlen key名字 #获取key的长度\n\nincr key  #给key+1\n\ndecr key   #给key-1\n\nincrby key 步长  #key每次加多少\n\ndecrby  key 步长# key每次减多少\n\ngetrange key 0 3  #截取字符串从0到3\n\ngetrange key 0 -1  #查看所有内容\n\nsetrange key 1 xx   #将第1位的值替换为xx\n\nsetex（set with expire）  #设置过期时间\n\nsetex key3 30 “hello” #设置key3的值为hello，30秒后会过期\n\nsetnx（set if not exist）  #不存在设置\n\nsetnx key3 “redis”  #如果不存在key3，就创建\n\nmset key value  #一次设置多个键值对\n\nmget key1 key2  #一次获取多个键的值\n\nmsetnx 多键值对版本 #是一个原子性的操作，要么都成功，要么都失败 \n\nmset user:1:name zhangsan  user:1:age 12\n\n#设置一个对象的两个属性 对象名：ID：属性名\n\nmget user：1：name user：1：age\n\n#获取一个对象的两个属性\n\nsetget v1 redis\n\n#如果不存在v1，则返回空，但是将v1的值设置为redis\n\n#，如果存在，则返回v1的值，然后将v1的设置为redis\n\n```\n\n\n\n## why\n\n\n\n### SDS\n\n\n\n采用sds结构来存储字符串，结果如下\n\n\n\n![image-20210423141456702](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210423141456702.png)\n\n\n\nredis中使用这样的sds的结构来构建字符串主要有以下几个原因：\n\n\n\n1. 当获取长度的时候，时间复杂度为0（1）\n\n2. 二进制安全，当比如用一个空字符串作为字符串中的一个特殊变量的时候，由于c中的字符串是通过\\0这个空字符来区分一个字符串是否结尾的，所以它只能用于保存文本数据，而不能保存像图片、音频、视频、压缩文件这样的二进制数据\n\n3. 杜绝缓冲区溢出（sds是通过预分配策略和惰性空间释放来减少的）\n\n4. 减少修改字符串时带来的内存重分配次数（sds是通过预分配策略和惰性空间释放来减少的）\n\n5. 可以使用c语言的一些函数，因为sds字符串的也是以\\0 作为结尾的，但是sds字符串是通过sds的len属性来确定这个字符串是不是结束的，c的字符串则是单一的通过\\0来确认一个字符串是否结束\n\n\n\n#### 预分配策略\n\n\n\n如果对SDS进行修改之后，SDS的长度（也即是len属性的值）将小于1MB，那么程序分配和len属性同样大小的未使用空间，这时SDS len属性的值将和free属性的值相同。举个例子，如果进行修改之后，SDS的len将变成13字节，那么程序也会分配13字节的未使用空间，SDS的buf数组的实际长度将变成13+13+1=27字节（额外的一字节用于保存空字符）。\n\n\n\n如果对SDS进行修改之后，SDS的长度将大于等于1MB，那么程序会分配1MB的未使用空间。举个例子，如果进行修改之后，SDS的len将变成30MB，那么程序会分配1MB的未使用空间，SDS的buf数组的实际长度将为30MB+1MB+1byte。\n\n\n\n#### 惰性空间释放\n\n\n\n惰性空间释放用于优化SDS的字符串缩短操作：当SDS的API需要缩短SDS保存的字符串时，程序并不立即使用内存重分配来回收缩短后多出来的字节，而是使用free属性将这些字节的数量记录起来，并等待将来使用。\n\n\n\n#### sds和c字符串的区别\n\n\n\n![image-20210423141537291](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210423141537291.png)\n\n\n\n# List\n\n\n\n## 常用语法\n\n\n\n在redis中可以将list玩成栈，队列，阻塞队列\n\n\n\nlist中所有的命令以l开头\n\n\n\n```Bash\n\nlpush list one  #将一个或多个值插入到列表头部（左）\n\nrpush list one  # 将一个或多个值插入到列表尾部（右）\n\nlrange list 0 -1 # 获取list中的值！\n\nlpop list  # 移除列表的第一个元素\n\nrpop #移除列表的最后一个元素\n\nlindex list 0  # 获取list的第0个值\n\nllen list   # 获取list的长度\n\nlrem list 1 one # 移除list结合中指定个数的value\n\nltrim list 1 2 #通过下标截取指定的长度\n\nrpoplpush list list1 #移除list列表中最后一个元素到新的list1列表中\n\nexists list #判断list是否存在\n\nlset list 0 item #将list【0】的值设为item 注意：如果list没有创建，会报错\n\nlinsert list before/after ss # aa在list集合中的值ss的前面（或后面）aa\n\n```\n\n\n\n## why\n\n\n\n### 结构\n\n\n\n![img](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210509075834547.png)\n\n\n\n![image-20210509075856037](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210509075856037.png)\n\n\n\n## 特性\n\n\n\n1. 链表节点带有prev和next指针，获取某个节点的前置节点和后置节点的复杂度都是O（1）\n\n2. 表头节点的prev指针和表尾节点的next指针都指向NULL，对链表的访问以NULL为终点\n\n3. 带表头指针和表尾指针：通过list结构的head指针和tail指针，程序获取链表的表头节点和表尾节点的复杂度为O（1）\n\n4. 带链表长度计数器：程序使用list结构的len属性来对list持有的链表节点进行计数，程序获取链表中节点数量的复杂度为O（1）\n\n5. 链表节点使用void*指针来保存节点值，并且可以通过list结构的dup、free、match三个属性为节点值设置类型特定函数，所以链表可以用于保存各种不同类型的值\n\n\n\n# Set\n\n\n\n# hash\n\n\n\n## 结构\n\n\n\n![image-20210509085530594](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210509085530594.png)\n\n\n\n![image-20210509085552656](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210509085552656.png)\n\n\n\n# zset\n\n\n\n# bitmap","source":"_posts/redis基础数据类型.md","raw":"---\ntitle: redis的string类型\ndescription: ''\ntags:\n  - 无标签\nabbrlink: d5eb6ab8\ndate: 2021-04-23 00:00:00\n---\n\n\n详细redis的数据类型\n\n\n\n<!-- more -->\n\n\n\n# String\n\n\n\n## what\n\n\n\n```Bash\n\nset name shy     #设置name为shy的键值对\n\nget name    #获取键为name的值\n\nkeys *    #查看所有键值对\n\nexits key名字 #返回1，表示key存在，0表示不存在\n\nmove key名字 1  #1表示当前数据库，删除key\n\nexpire key名字 10  #设置key名字的过期时间为10秒\n\nttl key名字 #查看key名字的过期时间还剩多少秒\n\ntype key名字 #key的类型\n\nappend key名字 值 #向key的值追加数据\n\nstrlen key名字 #获取key的长度\n\nincr key  #给key+1\n\ndecr key   #给key-1\n\nincrby key 步长  #key每次加多少\n\ndecrby  key 步长# key每次减多少\n\ngetrange key 0 3  #截取字符串从0到3\n\ngetrange key 0 -1  #查看所有内容\n\nsetrange key 1 xx   #将第1位的值替换为xx\n\nsetex（set with expire）  #设置过期时间\n\nsetex key3 30 “hello” #设置key3的值为hello，30秒后会过期\n\nsetnx（set if not exist）  #不存在设置\n\nsetnx key3 “redis”  #如果不存在key3，就创建\n\nmset key value  #一次设置多个键值对\n\nmget key1 key2  #一次获取多个键的值\n\nmsetnx 多键值对版本 #是一个原子性的操作，要么都成功，要么都失败 \n\nmset user:1:name zhangsan  user:1:age 12\n\n#设置一个对象的两个属性 对象名：ID：属性名\n\nmget user：1：name user：1：age\n\n#获取一个对象的两个属性\n\nsetget v1 redis\n\n#如果不存在v1，则返回空，但是将v1的值设置为redis\n\n#，如果存在，则返回v1的值，然后将v1的设置为redis\n\n```\n\n\n\n## why\n\n\n\n### SDS\n\n\n\n采用sds结构来存储字符串，结果如下\n\n\n\n![image-20210423141456702](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210423141456702.png)\n\n\n\nredis中使用这样的sds的结构来构建字符串主要有以下几个原因：\n\n\n\n1. 当获取长度的时候，时间复杂度为0（1）\n\n2. 二进制安全，当比如用一个空字符串作为字符串中的一个特殊变量的时候，由于c中的字符串是通过\\0这个空字符来区分一个字符串是否结尾的，所以它只能用于保存文本数据，而不能保存像图片、音频、视频、压缩文件这样的二进制数据\n\n3. 杜绝缓冲区溢出（sds是通过预分配策略和惰性空间释放来减少的）\n\n4. 减少修改字符串时带来的内存重分配次数（sds是通过预分配策略和惰性空间释放来减少的）\n\n5. 可以使用c语言的一些函数，因为sds字符串的也是以\\0 作为结尾的，但是sds字符串是通过sds的len属性来确定这个字符串是不是结束的，c的字符串则是单一的通过\\0来确认一个字符串是否结束\n\n\n\n#### 预分配策略\n\n\n\n如果对SDS进行修改之后，SDS的长度（也即是len属性的值）将小于1MB，那么程序分配和len属性同样大小的未使用空间，这时SDS len属性的值将和free属性的值相同。举个例子，如果进行修改之后，SDS的len将变成13字节，那么程序也会分配13字节的未使用空间，SDS的buf数组的实际长度将变成13+13+1=27字节（额外的一字节用于保存空字符）。\n\n\n\n如果对SDS进行修改之后，SDS的长度将大于等于1MB，那么程序会分配1MB的未使用空间。举个例子，如果进行修改之后，SDS的len将变成30MB，那么程序会分配1MB的未使用空间，SDS的buf数组的实际长度将为30MB+1MB+1byte。\n\n\n\n#### 惰性空间释放\n\n\n\n惰性空间释放用于优化SDS的字符串缩短操作：当SDS的API需要缩短SDS保存的字符串时，程序并不立即使用内存重分配来回收缩短后多出来的字节，而是使用free属性将这些字节的数量记录起来，并等待将来使用。\n\n\n\n#### sds和c字符串的区别\n\n\n\n![image-20210423141537291](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210423141537291.png)\n\n\n\n# List\n\n\n\n## 常用语法\n\n\n\n在redis中可以将list玩成栈，队列，阻塞队列\n\n\n\nlist中所有的命令以l开头\n\n\n\n```Bash\n\nlpush list one  #将一个或多个值插入到列表头部（左）\n\nrpush list one  # 将一个或多个值插入到列表尾部（右）\n\nlrange list 0 -1 # 获取list中的值！\n\nlpop list  # 移除列表的第一个元素\n\nrpop #移除列表的最后一个元素\n\nlindex list 0  # 获取list的第0个值\n\nllen list   # 获取list的长度\n\nlrem list 1 one # 移除list结合中指定个数的value\n\nltrim list 1 2 #通过下标截取指定的长度\n\nrpoplpush list list1 #移除list列表中最后一个元素到新的list1列表中\n\nexists list #判断list是否存在\n\nlset list 0 item #将list【0】的值设为item 注意：如果list没有创建，会报错\n\nlinsert list before/after ss # aa在list集合中的值ss的前面（或后面）aa\n\n```\n\n\n\n## why\n\n\n\n### 结构\n\n\n\n![img](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210509075834547.png)\n\n\n\n![image-20210509075856037](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210509075856037.png)\n\n\n\n## 特性\n\n\n\n1. 链表节点带有prev和next指针，获取某个节点的前置节点和后置节点的复杂度都是O（1）\n\n2. 表头节点的prev指针和表尾节点的next指针都指向NULL，对链表的访问以NULL为终点\n\n3. 带表头指针和表尾指针：通过list结构的head指针和tail指针，程序获取链表的表头节点和表尾节点的复杂度为O（1）\n\n4. 带链表长度计数器：程序使用list结构的len属性来对list持有的链表节点进行计数，程序获取链表中节点数量的复杂度为O（1）\n\n5. 链表节点使用void*指针来保存节点值，并且可以通过list结构的dup、free、match三个属性为节点值设置类型特定函数，所以链表可以用于保存各种不同类型的值\n\n\n\n# Set\n\n\n\n# hash\n\n\n\n## 结构\n\n\n\n![image-20210509085530594](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210509085530594.png)\n\n\n\n![image-20210509085552656](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210509085552656.png)\n\n\n\n# zset\n\n\n\n# bitmap","slug":"redis基础数据类型","published":1,"updated":"2025-03-02T03:37:34.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4x0035n0uk2jns6qns","content":"<p>详细redis的数据类型</p>\n<span id=\"more\"></span>\n\n\n\n<h1 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h1><h2 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> name shy     <span class=\"comment\">#设置name为shy的键值对</span></span><br><span class=\"line\"></span><br><span class=\"line\">get name    <span class=\"comment\">#获取键为name的值</span></span><br><span class=\"line\"></span><br><span class=\"line\">keys *    <span class=\"comment\">#查看所有键值对</span></span><br><span class=\"line\"></span><br><span class=\"line\">exits key名字 <span class=\"comment\">#返回1，表示key存在，0表示不存在</span></span><br><span class=\"line\"></span><br><span class=\"line\">move key名字 1  <span class=\"comment\">#1表示当前数据库，删除key</span></span><br><span class=\"line\"></span><br><span class=\"line\">expire key名字 10  <span class=\"comment\">#设置key名字的过期时间为10秒</span></span><br><span class=\"line\"></span><br><span class=\"line\">ttl key名字 <span class=\"comment\">#查看key名字的过期时间还剩多少秒</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">type</span> key名字 <span class=\"comment\">#key的类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">append key名字 值 <span class=\"comment\">#向key的值追加数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">strlen key名字 <span class=\"comment\">#获取key的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">incr key  <span class=\"comment\">#给key+1</span></span><br><span class=\"line\"></span><br><span class=\"line\">decr key   <span class=\"comment\">#给key-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">incrby key 步长  <span class=\"comment\">#key每次加多少</span></span><br><span class=\"line\"></span><br><span class=\"line\">decrby  key 步长# key每次减多少</span><br><span class=\"line\"></span><br><span class=\"line\">getrange key 0 3  <span class=\"comment\">#截取字符串从0到3</span></span><br><span class=\"line\"></span><br><span class=\"line\">getrange key 0 -1  <span class=\"comment\">#查看所有内容</span></span><br><span class=\"line\"></span><br><span class=\"line\">setrange key 1 xx   <span class=\"comment\">#将第1位的值替换为xx</span></span><br><span class=\"line\"></span><br><span class=\"line\">setex（<span class=\"built_in\">set</span> with expire）  <span class=\"comment\">#设置过期时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">setex key3 30 “hello” <span class=\"comment\">#设置key3的值为hello，30秒后会过期</span></span><br><span class=\"line\"></span><br><span class=\"line\">setnx（<span class=\"built_in\">set</span> <span class=\"keyword\">if</span> not exist）  <span class=\"comment\">#不存在设置</span></span><br><span class=\"line\"></span><br><span class=\"line\">setnx key3 “redis”  <span class=\"comment\">#如果不存在key3，就创建</span></span><br><span class=\"line\"></span><br><span class=\"line\">mset key value  <span class=\"comment\">#一次设置多个键值对</span></span><br><span class=\"line\"></span><br><span class=\"line\">mget key1 key2  <span class=\"comment\">#一次获取多个键的值</span></span><br><span class=\"line\"></span><br><span class=\"line\">msetnx 多键值对版本 <span class=\"comment\">#是一个原子性的操作，要么都成功，要么都失败 </span></span><br><span class=\"line\"></span><br><span class=\"line\">mset user:1:name zhangsan  user:1:age 12</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置一个对象的两个属性 对象名：ID：属性名</span></span><br><span class=\"line\"></span><br><span class=\"line\">mget user：1：name user：1：age</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#获取一个对象的两个属性</span></span><br><span class=\"line\"></span><br><span class=\"line\">setget v1 redis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#如果不存在v1，则返回空，但是将v1的值设置为redis</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#，如果存在，则返回v1的值，然后将v1的设置为redis</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"why\"><a href=\"#why\" class=\"headerlink\" title=\"why\"></a>why</h2><h3 id=\"SDS\"><a href=\"#SDS\" class=\"headerlink\" title=\"SDS\"></a>SDS</h3><p>采用sds结构来存储字符串，结果如下</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210423141456702.png\" alt=\"image-20210423141456702\" loading=\"lazy\"></p>\n<p>redis中使用这样的sds的结构来构建字符串主要有以下几个原因：</p>\n<ol>\n<li><p>当获取长度的时候，时间复杂度为0（1）</p>\n</li>\n<li><p>二进制安全，当比如用一个空字符串作为字符串中的一个特殊变量的时候，由于c中的字符串是通过\\0这个空字符来区分一个字符串是否结尾的，所以它只能用于保存文本数据，而不能保存像图片、音频、视频、压缩文件这样的二进制数据</p>\n</li>\n<li><p>杜绝缓冲区溢出（sds是通过预分配策略和惰性空间释放来减少的）</p>\n</li>\n<li><p>减少修改字符串时带来的内存重分配次数（sds是通过预分配策略和惰性空间释放来减少的）</p>\n</li>\n<li><p>可以使用c语言的一些函数，因为sds字符串的也是以\\0 作为结尾的，但是sds字符串是通过sds的len属性来确定这个字符串是不是结束的，c的字符串则是单一的通过\\0来确认一个字符串是否结束</p>\n</li>\n</ol>\n<h4 id=\"预分配策略\"><a href=\"#预分配策略\" class=\"headerlink\" title=\"预分配策略\"></a>预分配策略</h4><p>如果对SDS进行修改之后，SDS的长度（也即是len属性的值）将小于1MB，那么程序分配和len属性同样大小的未使用空间，这时SDS len属性的值将和free属性的值相同。举个例子，如果进行修改之后，SDS的len将变成13字节，那么程序也会分配13字节的未使用空间，SDS的buf数组的实际长度将变成13+13+1&#x3D;27字节（额外的一字节用于保存空字符）。</p>\n<p>如果对SDS进行修改之后，SDS的长度将大于等于1MB，那么程序会分配1MB的未使用空间。举个例子，如果进行修改之后，SDS的len将变成30MB，那么程序会分配1MB的未使用空间，SDS的buf数组的实际长度将为30MB+1MB+1byte。</p>\n<h4 id=\"惰性空间释放\"><a href=\"#惰性空间释放\" class=\"headerlink\" title=\"惰性空间释放\"></a>惰性空间释放</h4><p>惰性空间释放用于优化SDS的字符串缩短操作：当SDS的API需要缩短SDS保存的字符串时，程序并不立即使用内存重分配来回收缩短后多出来的字节，而是使用free属性将这些字节的数量记录起来，并等待将来使用。</p>\n<h4 id=\"sds和c字符串的区别\"><a href=\"#sds和c字符串的区别\" class=\"headerlink\" title=\"sds和c字符串的区别\"></a>sds和c字符串的区别</h4><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210423141537291.png\" alt=\"image-20210423141537291\" loading=\"lazy\"></p>\n<h1 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h1><h2 id=\"常用语法\"><a href=\"#常用语法\" class=\"headerlink\" title=\"常用语法\"></a>常用语法</h2><p>在redis中可以将list玩成栈，队列，阻塞队列</p>\n<p>list中所有的命令以l开头</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">lpush list one  <span class=\"comment\">#将一个或多个值插入到列表头部（左）</span></span><br><span class=\"line\"></span><br><span class=\"line\">rpush list one  <span class=\"comment\"># 将一个或多个值插入到列表尾部（右）</span></span><br><span class=\"line\"></span><br><span class=\"line\">lrange list 0 -1 <span class=\"comment\"># 获取list中的值！</span></span><br><span class=\"line\"></span><br><span class=\"line\">lpop list  <span class=\"comment\"># 移除列表的第一个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">rpop <span class=\"comment\">#移除列表的最后一个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">lindex list 0  <span class=\"comment\"># 获取list的第0个值</span></span><br><span class=\"line\"></span><br><span class=\"line\">llen list   <span class=\"comment\"># 获取list的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">lrem list 1 one <span class=\"comment\"># 移除list结合中指定个数的value</span></span><br><span class=\"line\"></span><br><span class=\"line\">ltrim list 1 2 <span class=\"comment\">#通过下标截取指定的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">rpoplpush list list1 <span class=\"comment\">#移除list列表中最后一个元素到新的list1列表中</span></span><br><span class=\"line\"></span><br><span class=\"line\">exists list <span class=\"comment\">#判断list是否存在</span></span><br><span class=\"line\"></span><br><span class=\"line\">lset list 0 item <span class=\"comment\">#将list【0】的值设为item 注意：如果list没有创建，会报错</span></span><br><span class=\"line\"></span><br><span class=\"line\">linsert list before/after ss <span class=\"comment\"># aa在list集合中的值ss的前面（或后面）aa</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"why-1\"><a href=\"#why-1\" class=\"headerlink\" title=\"why\"></a>why</h2><h3 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h3><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210509075834547.png\" alt=\"img\" loading=\"lazy\"></p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210509075856037.png\" alt=\"image-20210509075856037\" loading=\"lazy\"></p>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ol>\n<li><p>链表节点带有prev和next指针，获取某个节点的前置节点和后置节点的复杂度都是O（1）</p>\n</li>\n<li><p>表头节点的prev指针和表尾节点的next指针都指向NULL，对链表的访问以NULL为终点</p>\n</li>\n<li><p>带表头指针和表尾指针：通过list结构的head指针和tail指针，程序获取链表的表头节点和表尾节点的复杂度为O（1）</p>\n</li>\n<li><p>带链表长度计数器：程序使用list结构的len属性来对list持有的链表节点进行计数，程序获取链表中节点数量的复杂度为O（1）</p>\n</li>\n<li><p>链表节点使用void*指针来保存节点值，并且可以通过list结构的dup、free、match三个属性为节点值设置类型特定函数，所以链表可以用于保存各种不同类型的值</p>\n</li>\n</ol>\n<h1 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h1><h1 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h1><h2 id=\"结构-1\"><a href=\"#结构-1\" class=\"headerlink\" title=\"结构\"></a>结构</h2><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210509085530594.png\" alt=\"image-20210509085530594\" loading=\"lazy\"></p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210509085552656.png\" alt=\"image-20210509085552656\" loading=\"lazy\"></p>\n<h1 id=\"zset\"><a href=\"#zset\" class=\"headerlink\" title=\"zset\"></a>zset</h1><h1 id=\"bitmap\"><a href=\"#bitmap\" class=\"headerlink\" title=\"bitmap\"></a>bitmap</h1>","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"详细redis的数据类型\n\nString\nwhat\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n\n\n\nset name shy     #设置name为shy的键值对\n\nget name    #获取键为name的值\n\nkeys *    #查看所有键值对\n\nexits key名字 ","more":"<h1 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h1><h2 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> name shy     <span class=\"comment\">#设置name为shy的键值对</span></span><br><span class=\"line\"></span><br><span class=\"line\">get name    <span class=\"comment\">#获取键为name的值</span></span><br><span class=\"line\"></span><br><span class=\"line\">keys *    <span class=\"comment\">#查看所有键值对</span></span><br><span class=\"line\"></span><br><span class=\"line\">exits key名字 <span class=\"comment\">#返回1，表示key存在，0表示不存在</span></span><br><span class=\"line\"></span><br><span class=\"line\">move key名字 1  <span class=\"comment\">#1表示当前数据库，删除key</span></span><br><span class=\"line\"></span><br><span class=\"line\">expire key名字 10  <span class=\"comment\">#设置key名字的过期时间为10秒</span></span><br><span class=\"line\"></span><br><span class=\"line\">ttl key名字 <span class=\"comment\">#查看key名字的过期时间还剩多少秒</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">type</span> key名字 <span class=\"comment\">#key的类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">append key名字 值 <span class=\"comment\">#向key的值追加数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">strlen key名字 <span class=\"comment\">#获取key的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">incr key  <span class=\"comment\">#给key+1</span></span><br><span class=\"line\"></span><br><span class=\"line\">decr key   <span class=\"comment\">#给key-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">incrby key 步长  <span class=\"comment\">#key每次加多少</span></span><br><span class=\"line\"></span><br><span class=\"line\">decrby  key 步长# key每次减多少</span><br><span class=\"line\"></span><br><span class=\"line\">getrange key 0 3  <span class=\"comment\">#截取字符串从0到3</span></span><br><span class=\"line\"></span><br><span class=\"line\">getrange key 0 -1  <span class=\"comment\">#查看所有内容</span></span><br><span class=\"line\"></span><br><span class=\"line\">setrange key 1 xx   <span class=\"comment\">#将第1位的值替换为xx</span></span><br><span class=\"line\"></span><br><span class=\"line\">setex（<span class=\"built_in\">set</span> with expire）  <span class=\"comment\">#设置过期时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">setex key3 30 “hello” <span class=\"comment\">#设置key3的值为hello，30秒后会过期</span></span><br><span class=\"line\"></span><br><span class=\"line\">setnx（<span class=\"built_in\">set</span> <span class=\"keyword\">if</span> not exist）  <span class=\"comment\">#不存在设置</span></span><br><span class=\"line\"></span><br><span class=\"line\">setnx key3 “redis”  <span class=\"comment\">#如果不存在key3，就创建</span></span><br><span class=\"line\"></span><br><span class=\"line\">mset key value  <span class=\"comment\">#一次设置多个键值对</span></span><br><span class=\"line\"></span><br><span class=\"line\">mget key1 key2  <span class=\"comment\">#一次获取多个键的值</span></span><br><span class=\"line\"></span><br><span class=\"line\">msetnx 多键值对版本 <span class=\"comment\">#是一个原子性的操作，要么都成功，要么都失败 </span></span><br><span class=\"line\"></span><br><span class=\"line\">mset user:1:name zhangsan  user:1:age 12</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置一个对象的两个属性 对象名：ID：属性名</span></span><br><span class=\"line\"></span><br><span class=\"line\">mget user：1：name user：1：age</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#获取一个对象的两个属性</span></span><br><span class=\"line\"></span><br><span class=\"line\">setget v1 redis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#如果不存在v1，则返回空，但是将v1的值设置为redis</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#，如果存在，则返回v1的值，然后将v1的设置为redis</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"why\"><a href=\"#why\" class=\"headerlink\" title=\"why\"></a>why</h2><h3 id=\"SDS\"><a href=\"#SDS\" class=\"headerlink\" title=\"SDS\"></a>SDS</h3><p>采用sds结构来存储字符串，结果如下</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210423141456702.png\" alt=\"image-20210423141456702\" loading=\"lazy\"></p>\n<p>redis中使用这样的sds的结构来构建字符串主要有以下几个原因：</p>\n<ol>\n<li><p>当获取长度的时候，时间复杂度为0（1）</p>\n</li>\n<li><p>二进制安全，当比如用一个空字符串作为字符串中的一个特殊变量的时候，由于c中的字符串是通过\\0这个空字符来区分一个字符串是否结尾的，所以它只能用于保存文本数据，而不能保存像图片、音频、视频、压缩文件这样的二进制数据</p>\n</li>\n<li><p>杜绝缓冲区溢出（sds是通过预分配策略和惰性空间释放来减少的）</p>\n</li>\n<li><p>减少修改字符串时带来的内存重分配次数（sds是通过预分配策略和惰性空间释放来减少的）</p>\n</li>\n<li><p>可以使用c语言的一些函数，因为sds字符串的也是以\\0 作为结尾的，但是sds字符串是通过sds的len属性来确定这个字符串是不是结束的，c的字符串则是单一的通过\\0来确认一个字符串是否结束</p>\n</li>\n</ol>\n<h4 id=\"预分配策略\"><a href=\"#预分配策略\" class=\"headerlink\" title=\"预分配策略\"></a>预分配策略</h4><p>如果对SDS进行修改之后，SDS的长度（也即是len属性的值）将小于1MB，那么程序分配和len属性同样大小的未使用空间，这时SDS len属性的值将和free属性的值相同。举个例子，如果进行修改之后，SDS的len将变成13字节，那么程序也会分配13字节的未使用空间，SDS的buf数组的实际长度将变成13+13+1&#x3D;27字节（额外的一字节用于保存空字符）。</p>\n<p>如果对SDS进行修改之后，SDS的长度将大于等于1MB，那么程序会分配1MB的未使用空间。举个例子，如果进行修改之后，SDS的len将变成30MB，那么程序会分配1MB的未使用空间，SDS的buf数组的实际长度将为30MB+1MB+1byte。</p>\n<h4 id=\"惰性空间释放\"><a href=\"#惰性空间释放\" class=\"headerlink\" title=\"惰性空间释放\"></a>惰性空间释放</h4><p>惰性空间释放用于优化SDS的字符串缩短操作：当SDS的API需要缩短SDS保存的字符串时，程序并不立即使用内存重分配来回收缩短后多出来的字节，而是使用free属性将这些字节的数量记录起来，并等待将来使用。</p>\n<h4 id=\"sds和c字符串的区别\"><a href=\"#sds和c字符串的区别\" class=\"headerlink\" title=\"sds和c字符串的区别\"></a>sds和c字符串的区别</h4><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210423141537291.png\" alt=\"image-20210423141537291\" loading=\"lazy\"></p>\n<h1 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h1><h2 id=\"常用语法\"><a href=\"#常用语法\" class=\"headerlink\" title=\"常用语法\"></a>常用语法</h2><p>在redis中可以将list玩成栈，队列，阻塞队列</p>\n<p>list中所有的命令以l开头</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">lpush list one  <span class=\"comment\">#将一个或多个值插入到列表头部（左）</span></span><br><span class=\"line\"></span><br><span class=\"line\">rpush list one  <span class=\"comment\"># 将一个或多个值插入到列表尾部（右）</span></span><br><span class=\"line\"></span><br><span class=\"line\">lrange list 0 -1 <span class=\"comment\"># 获取list中的值！</span></span><br><span class=\"line\"></span><br><span class=\"line\">lpop list  <span class=\"comment\"># 移除列表的第一个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">rpop <span class=\"comment\">#移除列表的最后一个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">lindex list 0  <span class=\"comment\"># 获取list的第0个值</span></span><br><span class=\"line\"></span><br><span class=\"line\">llen list   <span class=\"comment\"># 获取list的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">lrem list 1 one <span class=\"comment\"># 移除list结合中指定个数的value</span></span><br><span class=\"line\"></span><br><span class=\"line\">ltrim list 1 2 <span class=\"comment\">#通过下标截取指定的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">rpoplpush list list1 <span class=\"comment\">#移除list列表中最后一个元素到新的list1列表中</span></span><br><span class=\"line\"></span><br><span class=\"line\">exists list <span class=\"comment\">#判断list是否存在</span></span><br><span class=\"line\"></span><br><span class=\"line\">lset list 0 item <span class=\"comment\">#将list【0】的值设为item 注意：如果list没有创建，会报错</span></span><br><span class=\"line\"></span><br><span class=\"line\">linsert list before/after ss <span class=\"comment\"># aa在list集合中的值ss的前面（或后面）aa</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"why-1\"><a href=\"#why-1\" class=\"headerlink\" title=\"why\"></a>why</h2><h3 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h3><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210509075834547.png\" alt=\"img\" loading=\"lazy\"></p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210509075856037.png\" alt=\"image-20210509075856037\" loading=\"lazy\"></p>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ol>\n<li><p>链表节点带有prev和next指针，获取某个节点的前置节点和后置节点的复杂度都是O（1）</p>\n</li>\n<li><p>表头节点的prev指针和表尾节点的next指针都指向NULL，对链表的访问以NULL为终点</p>\n</li>\n<li><p>带表头指针和表尾指针：通过list结构的head指针和tail指针，程序获取链表的表头节点和表尾节点的复杂度为O（1）</p>\n</li>\n<li><p>带链表长度计数器：程序使用list结构的len属性来对list持有的链表节点进行计数，程序获取链表中节点数量的复杂度为O（1）</p>\n</li>\n<li><p>链表节点使用void*指针来保存节点值，并且可以通过list结构的dup、free、match三个属性为节点值设置类型特定函数，所以链表可以用于保存各种不同类型的值</p>\n</li>\n</ol>\n<h1 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h1><h1 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h1><h2 id=\"结构-1\"><a href=\"#结构-1\" class=\"headerlink\" title=\"结构\"></a>结构</h2><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210509085530594.png\" alt=\"image-20210509085530594\" loading=\"lazy\"></p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210509085552656.png\" alt=\"image-20210509085552656\" loading=\"lazy\"></p>\n<h1 id=\"zset\"><a href=\"#zset\" class=\"headerlink\" title=\"zset\"></a>zset</h1><h1 id=\"bitmap\"><a href=\"#bitmap\" class=\"headerlink\" title=\"bitmap\"></a>bitmap</h1>"},{"title":"redis命令","description":"","abbrlink":"d43a4e4c","date":"2021-03-26T16:00:00.000Z","_content":"\n\n### 基础命令\n\n\n\n<!-- more -->\n\n\n\n```bash\n\n# nx 都是在key不存在的时候进行设置，通过这个可以实现最简单的分布式锁\n\nset key  value nx\n\n#统计字符串数量\n\nstrlen\n\n#取字符串的一个片段\n\ngetrange 开始 结尾\n\n#默认每次给一个key增加1，也可以设置增加的数值\n\n#博客点赞次数\n\nincr\n\n#默认给key减一\n\ndecr\n\n```\n\n\n\n审计日志\n\n\n\n可以用到append命令，key为当前日期，value为今天对机器的所有操作\n\n\n\n网址的长链接转短链接\n\n\n\n```java\n\n转换为对象集合的，可以使用 fastjson的 json.parseArray().tostring,数据\n\n```\n\n\n\n\n\n\n","source":"_posts/redis命令.md","raw":"---\ntitle: redis命令\ndescription: ''\ntags:\n  - 无标签\nabbrlink: d43a4e4c\ndate: 2021-03-27 00:00:00\n---\n\n\n### 基础命令\n\n\n\n<!-- more -->\n\n\n\n```bash\n\n# nx 都是在key不存在的时候进行设置，通过这个可以实现最简单的分布式锁\n\nset key  value nx\n\n#统计字符串数量\n\nstrlen\n\n#取字符串的一个片段\n\ngetrange 开始 结尾\n\n#默认每次给一个key增加1，也可以设置增加的数值\n\n#博客点赞次数\n\nincr\n\n#默认给key减一\n\ndecr\n\n```\n\n\n\n审计日志\n\n\n\n可以用到append命令，key为当前日期，value为今天对机器的所有操作\n\n\n\n网址的长链接转短链接\n\n\n\n```java\n\n转换为对象集合的，可以使用 fastjson的 json.parseArray().tostring,数据\n\n```\n\n\n\n\n\n\n","slug":"redis命令","published":1,"updated":"2025-03-02T03:37:34.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4x0037n0ukdyi61zzu","content":"<h3 id=\"基础命令\"><a href=\"#基础命令\" class=\"headerlink\" title=\"基础命令\"></a>基础命令</h3><span id=\"more\"></span>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># nx 都是在key不存在的时候进行设置，通过这个可以实现最简单的分布式锁</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> key  value nx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#统计字符串数量</span></span><br><span class=\"line\"></span><br><span class=\"line\">strlen</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#取字符串的一个片段</span></span><br><span class=\"line\"></span><br><span class=\"line\">getrange 开始 结尾</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#默认每次给一个key增加1，也可以设置增加的数值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#博客点赞次数</span></span><br><span class=\"line\"></span><br><span class=\"line\">incr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#默认给key减一</span></span><br><span class=\"line\"></span><br><span class=\"line\">decr</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>审计日志</p>\n<p>可以用到append命令，key为当前日期，value为今天对机器的所有操作</p>\n<p>网址的长链接转短链接</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">转换为对象集合的，可以使用 fastjson的 json.parseArray().tostring,数据</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"基础命令\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# nx 都是在key不存在的时候进行设置，通过这个可以实现最简单的分布式锁\n\nset key  value nx\n\n#统计字符串数量\n\nstrlen\n\n#取字符串的一个片段\n\ngetrange 开始 结尾\n\n#默认每次给一个key增加1，也可以设置增加的数值\n\n#博客点赞次数\n\nincr\n\n#默认给key减一\n\ndecr\n\n\n\n审计日志\n\n可以用到append命令，key为当前日期，value为今天对机器的所有操作\n\n网址的长链接转短链接\n\n1\n2\n3\n\n\n","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># nx 都是在key不存在的时候进行设置，通过这个可以实现最简单的分布式锁</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> key  value nx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#统计字符串数量</span></span><br><span class=\"line\"></span><br><span class=\"line\">strlen</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#取字符串的一个片段</span></span><br><span class=\"line\"></span><br><span class=\"line\">getrange 开始 结尾</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#默认每次给一个key增加1，也可以设置增加的数值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#博客点赞次数</span></span><br><span class=\"line\"></span><br><span class=\"line\">incr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#默认给key减一</span></span><br><span class=\"line\"></span><br><span class=\"line\">decr</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>审计日志</p>\n<p>可以用到append命令，key为当前日期，value为今天对机器的所有操作</p>\n<p>网址的长链接转短链接</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">转换为对象集合的，可以使用 fastjson的 json.parseArray().tostring,数据</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"redis持久化","description":"","abbrlink":"dcfaa904","date":"2021-05-08T16:00:00.000Z","_content":"\n\n介绍redis的两种持久化方式rdb和aof\n\n\n\n<!-- more -->\n\n\n\n# rdb\n\n\n\nRDB方式，是将redis某一时刻的数据持久化到磁盘中，是一种快照式的持久化方法。\n\n\n\n有两个Redis命令可以用于生成RDB文件，一个是SAVE，另一个是BGSAVE。\n\n\n\nRDB文件的载入工作是在服务器启动时自动执行的，所以Redis并没有专门用于载入RDB文件的命令，只要Redis服务器在启动时检测到RDB文件存在，它就会自动载入RDB文件。\n\n\n\n> 如果服务器开启了AOF持久化功能，那么服务器会优先使用AOF文件来还原数据库状态。只\n\n>\n\n> 有在AOF持久化功能处于关闭状态时，服务器才会使用RDB文件来还原数据库状态。\n\n>\n\n> 服务器在载入RDB文件期间，会一直处于阻塞状态，直到载入工作完成为止。\n\n\n\n## save\n\n\n\nSAVE命令会阻塞Redis服务器进程，直到RDB文件创建完毕为止，在服务器进程阻塞期间，服务器不能处理任何命令请求：\n\n\n\n## bgsave\n\n\n\nBGSAVE命令会派生出一个子进程，然后由子进程负责创建RDB文件，服务器进程（父进程）继续处理命令请求：\n\n\n\n在这个命令执行期间，服务器处理SAVE、BGSAVE、BGREWRITEAOF三个命令的方式会和平时有所不同。\n\n\n\n1. 客户端发送的SAVE命令会被服务器拒绝，服务器禁止SAVE命令和BGSAVE命令同时执行是为了避免父进程（服务器进程）和子进程同时执行两个rdbSave调用，防止产生竞争条件\n\n2. 客户端发送的BGSAVE命令会被服务器拒绝，因为同时执行两个BGSAVE命令也会产生竞争条件。\n\n3. BGREWRITEAOF和BGSAVE两个命令不能同时执行\n\n\n\n> - 如果BGSAVE命令正在执行，那么客户端发送的BGREWRITEAOF命令会被延迟到BGSAVE命令执行完毕之后执行。\n\n> - 如果BGREWRITEAOF命令正在执行，那么客户端发送的BGSAVE命令会被服务器拒绝。\n\n\n\n在redis.conf的配置文件中，就有这样的条件来触发bgsave的命令\n\n\n\n![image-20210509200449863](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210509200449863.png)\n\n\n\n上面的意思我那第一个来举例说明\n\n\n\n服务器在900秒之内，对数据库进行了至少1次修改。\n\n\n\n只要满足上面任意一个条件都会触发bgsave的命令\n\n\n\n问题来了，怎么自动触发bgsave那？\n\n\n\n肯定是要有一个方法来触发的，就是服务器周期性操作函数serverCron，默认每隔100毫秒就会执行一次，其实的一项工作就是检查save选项所设置的保存条件是否已经满足，如果满足的话，就执行BGSAVE命令。\n\n\n\n## 结构\n\n\n\n\n\n\n\n# aof\n\n\n\nAOF持久化是通过保存Redis服务器所执行的写命令来记录数据库状态的\n\n\n\n## 实现\n\n\n\nAOF持久化功能的实现可以分为命令追加（append）、文件写入、文件同步（sync）三个步骤。\n\n\n","source":"_posts/redis持久化.md","raw":"---\ntitle: redis持久化\ndescription: ''\ntags:\n  - 无标签\nabbrlink: dcfaa904\ndate: 2021-05-09 00:00:00\n---\n\n\n介绍redis的两种持久化方式rdb和aof\n\n\n\n<!-- more -->\n\n\n\n# rdb\n\n\n\nRDB方式，是将redis某一时刻的数据持久化到磁盘中，是一种快照式的持久化方法。\n\n\n\n有两个Redis命令可以用于生成RDB文件，一个是SAVE，另一个是BGSAVE。\n\n\n\nRDB文件的载入工作是在服务器启动时自动执行的，所以Redis并没有专门用于载入RDB文件的命令，只要Redis服务器在启动时检测到RDB文件存在，它就会自动载入RDB文件。\n\n\n\n> 如果服务器开启了AOF持久化功能，那么服务器会优先使用AOF文件来还原数据库状态。只\n\n>\n\n> 有在AOF持久化功能处于关闭状态时，服务器才会使用RDB文件来还原数据库状态。\n\n>\n\n> 服务器在载入RDB文件期间，会一直处于阻塞状态，直到载入工作完成为止。\n\n\n\n## save\n\n\n\nSAVE命令会阻塞Redis服务器进程，直到RDB文件创建完毕为止，在服务器进程阻塞期间，服务器不能处理任何命令请求：\n\n\n\n## bgsave\n\n\n\nBGSAVE命令会派生出一个子进程，然后由子进程负责创建RDB文件，服务器进程（父进程）继续处理命令请求：\n\n\n\n在这个命令执行期间，服务器处理SAVE、BGSAVE、BGREWRITEAOF三个命令的方式会和平时有所不同。\n\n\n\n1. 客户端发送的SAVE命令会被服务器拒绝，服务器禁止SAVE命令和BGSAVE命令同时执行是为了避免父进程（服务器进程）和子进程同时执行两个rdbSave调用，防止产生竞争条件\n\n2. 客户端发送的BGSAVE命令会被服务器拒绝，因为同时执行两个BGSAVE命令也会产生竞争条件。\n\n3. BGREWRITEAOF和BGSAVE两个命令不能同时执行\n\n\n\n> - 如果BGSAVE命令正在执行，那么客户端发送的BGREWRITEAOF命令会被延迟到BGSAVE命令执行完毕之后执行。\n\n> - 如果BGREWRITEAOF命令正在执行，那么客户端发送的BGSAVE命令会被服务器拒绝。\n\n\n\n在redis.conf的配置文件中，就有这样的条件来触发bgsave的命令\n\n\n\n![image-20210509200449863](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210509200449863.png)\n\n\n\n上面的意思我那第一个来举例说明\n\n\n\n服务器在900秒之内，对数据库进行了至少1次修改。\n\n\n\n只要满足上面任意一个条件都会触发bgsave的命令\n\n\n\n问题来了，怎么自动触发bgsave那？\n\n\n\n肯定是要有一个方法来触发的，就是服务器周期性操作函数serverCron，默认每隔100毫秒就会执行一次，其实的一项工作就是检查save选项所设置的保存条件是否已经满足，如果满足的话，就执行BGSAVE命令。\n\n\n\n## 结构\n\n\n\n\n\n\n\n# aof\n\n\n\nAOF持久化是通过保存Redis服务器所执行的写命令来记录数据库状态的\n\n\n\n## 实现\n\n\n\nAOF持久化功能的实现可以分为命令追加（append）、文件写入、文件同步（sync）三个步骤。\n\n\n","slug":"redis持久化","published":1,"updated":"2025-03-02T03:37:34.402Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4y0039n0ukcfjb98mr","content":"<p>介绍redis的两种持久化方式rdb和aof</p>\n<span id=\"more\"></span>\n\n\n\n<h1 id=\"rdb\"><a href=\"#rdb\" class=\"headerlink\" title=\"rdb\"></a>rdb</h1><p>RDB方式，是将redis某一时刻的数据持久化到磁盘中，是一种快照式的持久化方法。</p>\n<p>有两个Redis命令可以用于生成RDB文件，一个是SAVE，另一个是BGSAVE。</p>\n<p>RDB文件的载入工作是在服务器启动时自动执行的，所以Redis并没有专门用于载入RDB文件的命令，只要Redis服务器在启动时检测到RDB文件存在，它就会自动载入RDB文件。</p>\n<blockquote>\n<p>如果服务器开启了AOF持久化功能，那么服务器会优先使用AOF文件来还原数据库状态。只</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>有在AOF持久化功能处于关闭状态时，服务器才会使用RDB文件来还原数据库状态。</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>服务器在载入RDB文件期间，会一直处于阻塞状态，直到载入工作完成为止。</p>\n</blockquote>\n<h2 id=\"save\"><a href=\"#save\" class=\"headerlink\" title=\"save\"></a>save</h2><p>SAVE命令会阻塞Redis服务器进程，直到RDB文件创建完毕为止，在服务器进程阻塞期间，服务器不能处理任何命令请求：</p>\n<h2 id=\"bgsave\"><a href=\"#bgsave\" class=\"headerlink\" title=\"bgsave\"></a>bgsave</h2><p>BGSAVE命令会派生出一个子进程，然后由子进程负责创建RDB文件，服务器进程（父进程）继续处理命令请求：</p>\n<p>在这个命令执行期间，服务器处理SAVE、BGSAVE、BGREWRITEAOF三个命令的方式会和平时有所不同。</p>\n<ol>\n<li><p>客户端发送的SAVE命令会被服务器拒绝，服务器禁止SAVE命令和BGSAVE命令同时执行是为了避免父进程（服务器进程）和子进程同时执行两个rdbSave调用，防止产生竞争条件</p>\n</li>\n<li><p>客户端发送的BGSAVE命令会被服务器拒绝，因为同时执行两个BGSAVE命令也会产生竞争条件。</p>\n</li>\n<li><p>BGREWRITEAOF和BGSAVE两个命令不能同时执行</p>\n</li>\n</ol>\n<blockquote>\n<ul>\n<li>如果BGSAVE命令正在执行，那么客户端发送的BGREWRITEAOF命令会被延迟到BGSAVE命令执行完毕之后执行。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>如果BGREWRITEAOF命令正在执行，那么客户端发送的BGSAVE命令会被服务器拒绝。</li>\n</ul>\n</blockquote>\n<p>在redis.conf的配置文件中，就有这样的条件来触发bgsave的命令</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210509200449863.png\" alt=\"image-20210509200449863\" loading=\"lazy\"></p>\n<p>上面的意思我那第一个来举例说明</p>\n<p>服务器在900秒之内，对数据库进行了至少1次修改。</p>\n<p>只要满足上面任意一个条件都会触发bgsave的命令</p>\n<p>问题来了，怎么自动触发bgsave那？</p>\n<p>肯定是要有一个方法来触发的，就是服务器周期性操作函数serverCron，默认每隔100毫秒就会执行一次，其实的一项工作就是检查save选项所设置的保存条件是否已经满足，如果满足的话，就执行BGSAVE命令。</p>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><h1 id=\"aof\"><a href=\"#aof\" class=\"headerlink\" title=\"aof\"></a>aof</h1><p>AOF持久化是通过保存Redis服务器所执行的写命令来记录数据库状态的</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>AOF持久化功能的实现可以分为命令追加（append）、文件写入、文件同步（sync）三个步骤。</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"介绍redis的两种持久化方式rdb和aof\n\nrdb\nRDB方式，是将redis某一时刻的数据持久化到磁盘中，是一种快照式的持久化方法。\n\n有两个Redis命令可以用于生成RDB文件，一个是SAVE，另一个是BGSAVE。\n\nRDB文件的载入工作是在服务器启动时自动执行的，所以Redis并没有专门用于载入RDB文件的命令，只要Redis服务器在启动时检测到RDB文件存在，它就会自动载入RDB文件。\n\n如果服务器开启了AOF持久化功能，那么服务器会优先使用AOF文件来还原数据库状态。只\n\n有在AOF持久化功能处于关闭状态时，服务器才会使用RDB文件来还原数据库状态。\n\n服务器在载入RDB文件期","more":"<h1 id=\"rdb\"><a href=\"#rdb\" class=\"headerlink\" title=\"rdb\"></a>rdb</h1><p>RDB方式，是将redis某一时刻的数据持久化到磁盘中，是一种快照式的持久化方法。</p>\n<p>有两个Redis命令可以用于生成RDB文件，一个是SAVE，另一个是BGSAVE。</p>\n<p>RDB文件的载入工作是在服务器启动时自动执行的，所以Redis并没有专门用于载入RDB文件的命令，只要Redis服务器在启动时检测到RDB文件存在，它就会自动载入RDB文件。</p>\n<blockquote>\n<p>如果服务器开启了AOF持久化功能，那么服务器会优先使用AOF文件来还原数据库状态。只</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>有在AOF持久化功能处于关闭状态时，服务器才会使用RDB文件来还原数据库状态。</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>服务器在载入RDB文件期间，会一直处于阻塞状态，直到载入工作完成为止。</p>\n</blockquote>\n<h2 id=\"save\"><a href=\"#save\" class=\"headerlink\" title=\"save\"></a>save</h2><p>SAVE命令会阻塞Redis服务器进程，直到RDB文件创建完毕为止，在服务器进程阻塞期间，服务器不能处理任何命令请求：</p>\n<h2 id=\"bgsave\"><a href=\"#bgsave\" class=\"headerlink\" title=\"bgsave\"></a>bgsave</h2><p>BGSAVE命令会派生出一个子进程，然后由子进程负责创建RDB文件，服务器进程（父进程）继续处理命令请求：</p>\n<p>在这个命令执行期间，服务器处理SAVE、BGSAVE、BGREWRITEAOF三个命令的方式会和平时有所不同。</p>\n<ol>\n<li><p>客户端发送的SAVE命令会被服务器拒绝，服务器禁止SAVE命令和BGSAVE命令同时执行是为了避免父进程（服务器进程）和子进程同时执行两个rdbSave调用，防止产生竞争条件</p>\n</li>\n<li><p>客户端发送的BGSAVE命令会被服务器拒绝，因为同时执行两个BGSAVE命令也会产生竞争条件。</p>\n</li>\n<li><p>BGREWRITEAOF和BGSAVE两个命令不能同时执行</p>\n</li>\n</ol>\n<blockquote>\n<ul>\n<li>如果BGSAVE命令正在执行，那么客户端发送的BGREWRITEAOF命令会被延迟到BGSAVE命令执行完毕之后执行。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>如果BGREWRITEAOF命令正在执行，那么客户端发送的BGSAVE命令会被服务器拒绝。</li>\n</ul>\n</blockquote>\n<p>在redis.conf的配置文件中，就有这样的条件来触发bgsave的命令</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210509200449863.png\" alt=\"image-20210509200449863\" loading=\"lazy\"></p>\n<p>上面的意思我那第一个来举例说明</p>\n<p>服务器在900秒之内，对数据库进行了至少1次修改。</p>\n<p>只要满足上面任意一个条件都会触发bgsave的命令</p>\n<p>问题来了，怎么自动触发bgsave那？</p>\n<p>肯定是要有一个方法来触发的，就是服务器周期性操作函数serverCron，默认每隔100毫秒就会执行一次，其实的一项工作就是检查save选项所设置的保存条件是否已经满足，如果满足的话，就执行BGSAVE命令。</p>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><h1 id=\"aof\"><a href=\"#aof\" class=\"headerlink\" title=\"aof\"></a>aof</h1><p>AOF持久化是通过保存Redis服务器所执行的写命令来记录数据库状态的</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>AOF持久化功能的实现可以分为命令追加（append）、文件写入、文件同步（sync）三个步骤。</p>"},{"title":"redis集群配置","description":"","abbrlink":"a680d5af","date":"2021-03-26T16:00:00.000Z","_content":"\n\n## 单机基本配置\n\n\n\n<!-- more -->\n\n\n\n```bash\n\n#将redis目录下面utils中的redis_init_script复制到/etc/init.d/目录下，并且改为为redis_端口号\n\ncp redis_init_script /etc/init.d/redis_6379\n\nmkdir /etc/redis                  #存放redis的配置文件\n\nmkdir /var/redis/6379             #存放redis的持久化文件\n\n修改redis.conf拷贝到/etc/redis/6379.conf中\n\n#修改redis.conf中的配置环境为生产环境\n\ndaemonize yes                     # 让redis以后台方式启动\n\npidfile /var/run/redis_6379.pid   #设置redis的pid文件位置\n\nport 6379                         #设置redis的监听端口号\n\ndir /var/redis/6379               #设置持久化文件的存储位置\n\n#在任何目录下都可以使用redis_cli\n\nsudo cp src/redis-cli /usr/local/bin/ \n\nsudo cp src/redis-server /usr/local/bin/ \n\n#启动redis\n\ncd /etc/init.d/\n\nchmod 777 6379.conf\n\n./redis_6379.conf start\n\n#让redis开机自动启动，在redis_6379的最上面加入下面两行注释\n\n#chkconifg:2345 90 10\n\n#description:Redis is a persistent key-value database\n\n#--------------------------\n\n#在当前目录下执行下面这个命令\n\nchkconfig redis_6379 on\n\n#查看redis是否启动\n\nps -ef |grep redis \n\n```\n\n## 主从复制配置\n\n### master\n\n在redis的配置文件中，即/etc/redis/6379.conf\n\n```bash\n\nbind 自己的ip地址\n\nrequirepass 密钥（自己随意设置即可）\n\n```\n\n### slave\n\n```bash\n\nbind 自己的ip地址\n\nmasterauth  上面master设置的密钥\n\nreplicaof（比较旧的版本是slaveof） aster的IP地址  端口号（一般默认为6379）\n\n```\n\n### 启动redis\n\n```bash\n\n注意：先启动master再启动slave\n\n#启动redis   进入到/etc/init.d/目录下\n\n./redis.6379 start\n\n#进入redis,设置了requirepass的服务器需要输入密钥，没有设置的不需要，也就是说master是需要输入，而slave不需要输入密钥\n\n redisl-cli -h 当前服务器的ip地址  -a  设置的密钥\n\n #在服务器中可以查看主从配置信息\n\n info replication \n\n```\n\n#### master info replication\n\n\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3dd32bfe31d74f9fa170d62f43227600~tplv-k3u1fbpfcp-watermark.image)\n\n#### slave info replication\n\n\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8d84bb27a385400495429d7b7e0021cb~tplv-k3u1fbpfcp-watermark.image)\n\n### 问题\n\n#### ping通，但是telnet不通\n\n1. 如果你在从的redis中看见master_link——status 状态是down，可能是telnet到master的端口不通，执行telent master ip地址  redis设置的端口号（默认是6379）\n\n2. 如果发现没有telnet命令，需要执行 yum install -y telnet   \n\n3. 如果yum出现问题，修改yum的源文件，vim /etc/yum.repos.d/ epel.repo   \n\n将下图中的metalink注释起来，将baseurl取消注释，下图是修改后的结果\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bf0ba8e566b4b8aa1282bfaa063a8a6~tplv-k3u1fbpfcp-watermark.image)\n\n4. telnet安装之后，还是slave 可以ping通master，但是telnet不通，这种情况一般就是服务器的防火墙的问题，可以选择直接将服务器关闭\n\n```bash\n\n#关闭开机自动启动防火墙\n\nsystemctl disable firewalld.service \n\n#查看防火墙的状态\n\nfirewall-cmd --state\n\n#临时关闭防火墙\n\nsystemctl stop firewalld.service\n\n```","source":"_posts/redis集群配置.md","raw":"---\ntitle: redis集群配置\ndescription: ''\ntags:\n  - 无标签\nabbrlink: a680d5af\ndate: 2021-03-27 00:00:00\n---\n\n\n## 单机基本配置\n\n\n\n<!-- more -->\n\n\n\n```bash\n\n#将redis目录下面utils中的redis_init_script复制到/etc/init.d/目录下，并且改为为redis_端口号\n\ncp redis_init_script /etc/init.d/redis_6379\n\nmkdir /etc/redis                  #存放redis的配置文件\n\nmkdir /var/redis/6379             #存放redis的持久化文件\n\n修改redis.conf拷贝到/etc/redis/6379.conf中\n\n#修改redis.conf中的配置环境为生产环境\n\ndaemonize yes                     # 让redis以后台方式启动\n\npidfile /var/run/redis_6379.pid   #设置redis的pid文件位置\n\nport 6379                         #设置redis的监听端口号\n\ndir /var/redis/6379               #设置持久化文件的存储位置\n\n#在任何目录下都可以使用redis_cli\n\nsudo cp src/redis-cli /usr/local/bin/ \n\nsudo cp src/redis-server /usr/local/bin/ \n\n#启动redis\n\ncd /etc/init.d/\n\nchmod 777 6379.conf\n\n./redis_6379.conf start\n\n#让redis开机自动启动，在redis_6379的最上面加入下面两行注释\n\n#chkconifg:2345 90 10\n\n#description:Redis is a persistent key-value database\n\n#--------------------------\n\n#在当前目录下执行下面这个命令\n\nchkconfig redis_6379 on\n\n#查看redis是否启动\n\nps -ef |grep redis \n\n```\n\n## 主从复制配置\n\n### master\n\n在redis的配置文件中，即/etc/redis/6379.conf\n\n```bash\n\nbind 自己的ip地址\n\nrequirepass 密钥（自己随意设置即可）\n\n```\n\n### slave\n\n```bash\n\nbind 自己的ip地址\n\nmasterauth  上面master设置的密钥\n\nreplicaof（比较旧的版本是slaveof） aster的IP地址  端口号（一般默认为6379）\n\n```\n\n### 启动redis\n\n```bash\n\n注意：先启动master再启动slave\n\n#启动redis   进入到/etc/init.d/目录下\n\n./redis.6379 start\n\n#进入redis,设置了requirepass的服务器需要输入密钥，没有设置的不需要，也就是说master是需要输入，而slave不需要输入密钥\n\n redisl-cli -h 当前服务器的ip地址  -a  设置的密钥\n\n #在服务器中可以查看主从配置信息\n\n info replication \n\n```\n\n#### master info replication\n\n\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3dd32bfe31d74f9fa170d62f43227600~tplv-k3u1fbpfcp-watermark.image)\n\n#### slave info replication\n\n\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8d84bb27a385400495429d7b7e0021cb~tplv-k3u1fbpfcp-watermark.image)\n\n### 问题\n\n#### ping通，但是telnet不通\n\n1. 如果你在从的redis中看见master_link——status 状态是down，可能是telnet到master的端口不通，执行telent master ip地址  redis设置的端口号（默认是6379）\n\n2. 如果发现没有telnet命令，需要执行 yum install -y telnet   \n\n3. 如果yum出现问题，修改yum的源文件，vim /etc/yum.repos.d/ epel.repo   \n\n将下图中的metalink注释起来，将baseurl取消注释，下图是修改后的结果\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bf0ba8e566b4b8aa1282bfaa063a8a6~tplv-k3u1fbpfcp-watermark.image)\n\n4. telnet安装之后，还是slave 可以ping通master，但是telnet不通，这种情况一般就是服务器的防火墙的问题，可以选择直接将服务器关闭\n\n```bash\n\n#关闭开机自动启动防火墙\n\nsystemctl disable firewalld.service \n\n#查看防火墙的状态\n\nfirewall-cmd --state\n\n#临时关闭防火墙\n\nsystemctl stop firewalld.service\n\n```","slug":"redis集群配置","published":1,"updated":"2025-03-02T03:37:34.402Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4y003bn0ukgmi0fzi2","content":"<h2 id=\"单机基本配置\"><a href=\"#单机基本配置\" class=\"headerlink\" title=\"单机基本配置\"></a>单机基本配置</h2><span id=\"more\"></span>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将redis目录下面utils中的redis_init_script复制到/etc/init.d/目录下，并且改为为redis_端口号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cp</span> redis_init_script /etc/init.d/redis_6379</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> /etc/redis                  <span class=\"comment\">#存放redis的配置文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> /var/redis/6379             <span class=\"comment\">#存放redis的持久化文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">修改redis.conf拷贝到/etc/redis/6379.conf中</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#修改redis.conf中的配置环境为生产环境</span></span><br><span class=\"line\"></span><br><span class=\"line\">daemonize <span class=\"built_in\">yes</span>                     <span class=\"comment\"># 让redis以后台方式启动</span></span><br><span class=\"line\"></span><br><span class=\"line\">pidfile /var/run/redis_6379.pid   <span class=\"comment\">#设置redis的pid文件位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">port 6379                         <span class=\"comment\">#设置redis的监听端口号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">dir</span> /var/redis/6379               <span class=\"comment\">#设置持久化文件的存储位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在任何目录下都可以使用redis_cli</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">cp</span> src/redis-cli /usr/local/bin/ </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">cp</span> src/redis-server /usr/local/bin/ </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#启动redis</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /etc/init.d/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 6379.conf</span><br><span class=\"line\"></span><br><span class=\"line\">./redis_6379.conf start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#让redis开机自动启动，在redis_6379的最上面加入下面两行注释</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#chkconifg:2345 90 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#description:Redis is a persistent key-value database</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#--------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在当前目录下执行下面这个命令</span></span><br><span class=\"line\"></span><br><span class=\"line\">chkconfig redis_6379 on</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看redis是否启动</span></span><br><span class=\"line\"></span><br><span class=\"line\">ps -ef |grep redis </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"主从复制配置\"><a href=\"#主从复制配置\" class=\"headerlink\" title=\"主从复制配置\"></a>主从复制配置</h2><h3 id=\"master\"><a href=\"#master\" class=\"headerlink\" title=\"master\"></a>master</h3><p>在redis的配置文件中，即&#x2F;etc&#x2F;redis&#x2F;6379.conf</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">bind</span> 自己的ip地址</span><br><span class=\"line\"></span><br><span class=\"line\">requirepass 密钥（自己随意设置即可）</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"slave\"><a href=\"#slave\" class=\"headerlink\" title=\"slave\"></a>slave</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">bind</span> 自己的ip地址</span><br><span class=\"line\"></span><br><span class=\"line\">masterauth  上面master设置的密钥</span><br><span class=\"line\"></span><br><span class=\"line\">replicaof（比较旧的版本是slaveof） aster的IP地址  端口号（一般默认为6379）</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动redis\"><a href=\"#启动redis\" class=\"headerlink\" title=\"启动redis\"></a>启动redis</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">注意：先启动master再启动slave</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#启动redis   进入到/etc/init.d/目录下</span></span><br><span class=\"line\"></span><br><span class=\"line\">./redis.6379 start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进入redis,设置了requirepass的服务器需要输入密钥，没有设置的不需要，也就是说master是需要输入，而slave不需要输入密钥</span></span><br><span class=\"line\"></span><br><span class=\"line\"> redisl-cli -h 当前服务器的ip地址  -a  设置的密钥</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">#在服务器中可以查看主从配置信息</span></span><br><span class=\"line\"></span><br><span class=\"line\"> info replication </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"master-info-replication\"><a href=\"#master-info-replication\" class=\"headerlink\" title=\"master info replication\"></a>master info replication</h4><p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3dd32bfe31d74f9fa170d62f43227600~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\"></p>\n<h4 id=\"slave-info-replication\"><a href=\"#slave-info-replication\" class=\"headerlink\" title=\"slave info replication\"></a>slave info replication</h4><p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8d84bb27a385400495429d7b7e0021cb~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\"></p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><h4 id=\"ping通，但是telnet不通\"><a href=\"#ping通，但是telnet不通\" class=\"headerlink\" title=\"ping通，但是telnet不通\"></a>ping通，但是telnet不通</h4><ol>\n<li><p>如果你在从的redis中看见master_link——status 状态是down，可能是telnet到master的端口不通，执行telent master ip地址  redis设置的端口号（默认是6379）</p>\n</li>\n<li><p>如果发现没有telnet命令，需要执行 yum install -y telnet   </p>\n</li>\n<li><p>如果yum出现问题，修改yum的源文件，vim &#x2F;etc&#x2F;yum.repos.d&#x2F; epel.repo</p>\n</li>\n</ol>\n<p>将下图中的metalink注释起来，将baseurl取消注释，下图是修改后的结果</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bf0ba8e566b4b8aa1282bfaa063a8a6~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\"></p>\n<ol start=\"4\">\n<li>telnet安装之后，还是slave 可以ping通master，但是telnet不通，这种情况一般就是服务器的防火墙的问题，可以选择直接将服务器关闭</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#关闭开机自动启动防火墙</span></span><br><span class=\"line\"></span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld.service </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看防火墙的状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">firewall-cmd --state</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#临时关闭防火墙</span></span><br><span class=\"line\"></span><br><span class=\"line\">systemctl stop firewalld.service</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"单机基本配置\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n\n\n\n#将redis目录下面utils中的redis_init_script复制到/etc/init.d/目录下，并且改为为redis_端口号\n\ncp redis_init_script /etc/init.d/redis_6379\n\nmkdir /etc/redis               ","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将redis目录下面utils中的redis_init_script复制到/etc/init.d/目录下，并且改为为redis_端口号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cp</span> redis_init_script /etc/init.d/redis_6379</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> /etc/redis                  <span class=\"comment\">#存放redis的配置文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> /var/redis/6379             <span class=\"comment\">#存放redis的持久化文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">修改redis.conf拷贝到/etc/redis/6379.conf中</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#修改redis.conf中的配置环境为生产环境</span></span><br><span class=\"line\"></span><br><span class=\"line\">daemonize <span class=\"built_in\">yes</span>                     <span class=\"comment\"># 让redis以后台方式启动</span></span><br><span class=\"line\"></span><br><span class=\"line\">pidfile /var/run/redis_6379.pid   <span class=\"comment\">#设置redis的pid文件位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">port 6379                         <span class=\"comment\">#设置redis的监听端口号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">dir</span> /var/redis/6379               <span class=\"comment\">#设置持久化文件的存储位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在任何目录下都可以使用redis_cli</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">cp</span> src/redis-cli /usr/local/bin/ </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">cp</span> src/redis-server /usr/local/bin/ </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#启动redis</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /etc/init.d/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 6379.conf</span><br><span class=\"line\"></span><br><span class=\"line\">./redis_6379.conf start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#让redis开机自动启动，在redis_6379的最上面加入下面两行注释</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#chkconifg:2345 90 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#description:Redis is a persistent key-value database</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#--------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在当前目录下执行下面这个命令</span></span><br><span class=\"line\"></span><br><span class=\"line\">chkconfig redis_6379 on</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看redis是否启动</span></span><br><span class=\"line\"></span><br><span class=\"line\">ps -ef |grep redis </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"主从复制配置\"><a href=\"#主从复制配置\" class=\"headerlink\" title=\"主从复制配置\"></a>主从复制配置</h2><h3 id=\"master\"><a href=\"#master\" class=\"headerlink\" title=\"master\"></a>master</h3><p>在redis的配置文件中，即&#x2F;etc&#x2F;redis&#x2F;6379.conf</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">bind</span> 自己的ip地址</span><br><span class=\"line\"></span><br><span class=\"line\">requirepass 密钥（自己随意设置即可）</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"slave\"><a href=\"#slave\" class=\"headerlink\" title=\"slave\"></a>slave</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">bind</span> 自己的ip地址</span><br><span class=\"line\"></span><br><span class=\"line\">masterauth  上面master设置的密钥</span><br><span class=\"line\"></span><br><span class=\"line\">replicaof（比较旧的版本是slaveof） aster的IP地址  端口号（一般默认为6379）</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动redis\"><a href=\"#启动redis\" class=\"headerlink\" title=\"启动redis\"></a>启动redis</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">注意：先启动master再启动slave</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#启动redis   进入到/etc/init.d/目录下</span></span><br><span class=\"line\"></span><br><span class=\"line\">./redis.6379 start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进入redis,设置了requirepass的服务器需要输入密钥，没有设置的不需要，也就是说master是需要输入，而slave不需要输入密钥</span></span><br><span class=\"line\"></span><br><span class=\"line\"> redisl-cli -h 当前服务器的ip地址  -a  设置的密钥</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">#在服务器中可以查看主从配置信息</span></span><br><span class=\"line\"></span><br><span class=\"line\"> info replication </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"master-info-replication\"><a href=\"#master-info-replication\" class=\"headerlink\" title=\"master info replication\"></a>master info replication</h4><p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3dd32bfe31d74f9fa170d62f43227600~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\"></p>\n<h4 id=\"slave-info-replication\"><a href=\"#slave-info-replication\" class=\"headerlink\" title=\"slave info replication\"></a>slave info replication</h4><p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8d84bb27a385400495429d7b7e0021cb~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\"></p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><h4 id=\"ping通，但是telnet不通\"><a href=\"#ping通，但是telnet不通\" class=\"headerlink\" title=\"ping通，但是telnet不通\"></a>ping通，但是telnet不通</h4><ol>\n<li><p>如果你在从的redis中看见master_link——status 状态是down，可能是telnet到master的端口不通，执行telent master ip地址  redis设置的端口号（默认是6379）</p>\n</li>\n<li><p>如果发现没有telnet命令，需要执行 yum install -y telnet   </p>\n</li>\n<li><p>如果yum出现问题，修改yum的源文件，vim &#x2F;etc&#x2F;yum.repos.d&#x2F; epel.repo</p>\n</li>\n</ol>\n<p>将下图中的metalink注释起来，将baseurl取消注释，下图是修改后的结果</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bf0ba8e566b4b8aa1282bfaa063a8a6~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\"></p>\n<ol start=\"4\">\n<li>telnet安装之后，还是slave 可以ping通master，但是telnet不通，这种情况一般就是服务器的防火墙的问题，可以选择直接将服务器关闭</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#关闭开机自动启动防火墙</span></span><br><span class=\"line\"></span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld.service </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看防火墙的状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">firewall-cmd --state</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#临时关闭防火墙</span></span><br><span class=\"line\"></span><br><span class=\"line\">systemctl stop firewalld.service</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"ribbon原理","description":"","abbrlink":"99b39663","date":"2022-03-22T16:00:00.000Z","_content":"\n\n# 注解\n\n## @LoadBalanced\n\n![image.png](https://shyblog.oss-cn-beijing.aliyuncs.com/img//image_1648026993336.png)\n\nLoadBalanced没有@import什么的，只有一个@Qualifier\n\n### LoadBalancerAutoConfiguration\n\n在LoadBalancerAutoConfiguration中用了@LoadBalanced\n\n![image.png](https://shyblog.oss-cn-beijing.aliyuncs.com/img//image_1648027060344.png)\n\n将所有具有负载均衡标识的RestTemplate类型的Bean注入到集合中\n\n```java\n\n    @Bean\n\n    @LoadBalanced\n\n    public RestTemplate restTemplate(){\n\n        return new RestTemplate();\n\n    }\n\n```\n\n使用一般这样使用\n\n# 参考\n\n- [Ribbon中@LoadBalanced注解的原理](https://blog.51cto.com/u_14643435/2866253)\n","source":"_posts/ribbon原理.md","raw":"---\ntitle: ribbon原理\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 99b39663\ndate: 2022-03-23 00:00:00\n---\n\n\n# 注解\n\n## @LoadBalanced\n\n![image.png](https://shyblog.oss-cn-beijing.aliyuncs.com/img//image_1648026993336.png)\n\nLoadBalanced没有@import什么的，只有一个@Qualifier\n\n### LoadBalancerAutoConfiguration\n\n在LoadBalancerAutoConfiguration中用了@LoadBalanced\n\n![image.png](https://shyblog.oss-cn-beijing.aliyuncs.com/img//image_1648027060344.png)\n\n将所有具有负载均衡标识的RestTemplate类型的Bean注入到集合中\n\n```java\n\n    @Bean\n\n    @LoadBalanced\n\n    public RestTemplate restTemplate(){\n\n        return new RestTemplate();\n\n    }\n\n```\n\n使用一般这样使用\n\n# 参考\n\n- [Ribbon中@LoadBalanced注解的原理](https://blog.51cto.com/u_14643435/2866253)\n","slug":"ribbon原理","published":1,"updated":"2025-03-02T03:37:34.403Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4y003dn0uk0qa25wia","content":"<h1 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h1><h2 id=\"LoadBalanced\"><a href=\"#LoadBalanced\" class=\"headerlink\" title=\"@LoadBalanced\"></a>@LoadBalanced</h2><p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img//image_1648026993336.png\" alt=\"image.png\" loading=\"lazy\"></p>\n<p>LoadBalanced没有@import什么的，只有一个@Qualifier</p>\n<h3 id=\"LoadBalancerAutoConfiguration\"><a href=\"#LoadBalancerAutoConfiguration\" class=\"headerlink\" title=\"LoadBalancerAutoConfiguration\"></a>LoadBalancerAutoConfiguration</h3><p>在LoadBalancerAutoConfiguration中用了@LoadBalanced</p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img//image_1648027060344.png\" alt=\"image.png\" loading=\"lazy\"></p>\n<p>将所有具有负载均衡标识的RestTemplate类型的Bean注入到集合中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@LoadBalanced</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> RestTemplate <span class=\"title function_\">restTemplate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用一般这样使用</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS91XzE0NjQzNDM1LzI4NjYyNTM=\">Ribbon中@LoadBalanced注解的原理<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"注解\n@LoadBalanced\n\n\nLoadBalanced没有@import什么的，只有一个@Qualifier\n\nLoadBalancerAutoConfiguration\n在LoadBalancerAutoConfiguration中用了@LoadBalanced\n\n\n\n将所有具有负载均衡标识的RestTemplate类型的Bean注入到集合中\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n@Bean\n\n@LoadBalanced\n\npublic RestTemplate restTemplate(){\n\n    return new RestTemplate();\n\n}\n\n","more":"<h1 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h1><h2 id=\"LoadBalanced\"><a href=\"#LoadBalanced\" class=\"headerlink\" title=\"@LoadBalanced\"></a>@LoadBalanced</h2><p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img//image_1648026993336.png\" alt=\"image.png\" loading=\"lazy\"></p>\n<p>LoadBalanced没有@import什么的，只有一个@Qualifier</p>\n<h3 id=\"LoadBalancerAutoConfiguration\"><a href=\"#LoadBalancerAutoConfiguration\" class=\"headerlink\" title=\"LoadBalancerAutoConfiguration\"></a>LoadBalancerAutoConfiguration</h3><p>在LoadBalancerAutoConfiguration中用了@LoadBalanced</p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img//image_1648027060344.png\" alt=\"image.png\" loading=\"lazy\"></p>\n<p>将所有具有负载均衡标识的RestTemplate类型的Bean注入到集合中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@LoadBalanced</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> RestTemplate <span class=\"title function_\">restTemplate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用一般这样使用</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS91XzE0NjQzNDM1LzI4NjYyNTM=\">Ribbon中@LoadBalanced注解的原理<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n"},{"title":"redis cluster","description":"","abbrlink":"e02375f9","date":"2021-03-20T16:00:00.000Z","_content":"\n\n### 集群配置\n\n\n\n<!-- more -->\n\n\n\n```bash\n\nmkdir -p /etc/redis-cluster\n\nmkdir -p /var/log/redis\n\nmkdir -p /var/redis/7001\n\n#配置文件目录\n\n/var/redis/7001.conf\n\n#redis.conf\n\nport 7001\n\ncluster-enabled yes\n\ncluster-conifg-file /etc/redis-cluster/node/7001.conf\n\ncluster-node-timeout 15000\n\ndaemonize yes\n\npidfile /var/run/redis_7001.conf\n\ndir /var/redis/7001\n\nlogfile /var/log/redis/7001.log\n\nbind 192.168.0.21\n\nappendonly yes \n\n```\n\n\n\n至少要3个master节点启动，每个master加一个slave节点，先选择6个节点，启动6个实例\n\n\n\n```bash\n\nyum install -y ruby\n\nyum install -y rubygems\n\ngem install redis\n\ncp /home/redis/src/redis.trib.rm /usr/local/bin\n\n \n\nredis-trib.rb create --replicas 1 192.168.0.21:7001 192.168.0.21:7002 192.168.0.22:7003 192.168.0.22:7004 192.168.0.23:7005 192.168.0.23:7006\n\n#查看redis.cluster对于主从节点的配置信息\n\nredis-cli --cluster check 192.168.0.21:7001\n\n\n\n#测试\n\nredis-cli -h 192.168.0.22 -p 7004\n\n #自动写入对应的机器\n\nredis-cli -h 192.168.0.22 -p 7004 -c\n\n#将节点加入到redis-cluster集群中\n\nredis-cli --cluster add-node 192.168.0.21:7007 192.168.0.22:7004\n\n#加入salve节点\n\nredis-cli --cluster add-node --slave --master-id c1dcc6197201c958fb06fa7737190e4209dc2171 192.168.0.22:7008 192.168.0.22:7004\n\n #删除一个节点，要把它上面的slot移动到其他机器上\n\n  \n\n```\n\n\n\n多master写入\n\n\n\n每条数据上只存在于一个master上，不同master负责存储不同的数据\n\n\n\n当你清空一个master的hashslot的时候，redis cluster会将其slace挂载到其他master上去，这个时候，你只需要删除这个节点就可以了\n\n\n\n### 扩容\n\n\n\nredis-cli --cluster reshard 192.168.0.21:7001\n\n\n\n![image-20210322160409452](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210322160409452.png)\n\n\n\n### 读写分离\n\n\n\nredis-cluster可以实现物理的读写分离即一个redis专门用来读数据，一个redis专门用来写数据，但是一般不建议使用，现在用的都是master负责读写，而slave只是数据备份\n\n\n\n默认不支持slave节点读或者写\n\n\n\n在slave中要先执行readlonly，再执行get命令，才可以取到数据\n\n\n\n### 自动化slave迁移\n\n\n\n当master的slave挂掉了，其他有冗余的slave会将自动将其slave挂在到缺失slave的master\n\n\n\n#### why\n\n\n\n为什么不进行读写分离那\n\n\n\n原因是因为之前我们让物理的读写分离，是在一主多从的情况下，想要增加访问量，就是要增加slave的数量，这样才可以达到水平扩容的效果，但是用了redis.cluster之后，是多主多从的情况，因此要想增加屯库量直接增加master的数量就可以了\n\n\n\n### 机器配置\n\n\n\nredis的内存不建议太大，一般是8g或者16g，如果内存比较大，redis在fork子线程的时候，可能会造成机器卡顿\n\n\n\n### 原理\n\n\n\n#### 基础通信原理\n\n\n\n各个节点之间通过gossip协议进行通信\n\n\n\n跟集中式不通，不是讲集群元数据放在某一个节点上，而是互相之间不断通信，保持整个集群所有节点的数据是完整的\n\n\n\n集中式存储\n\n\n\n![image-20210322160443703](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210322160443703.png)\n\n\n\n#### 10000端口\n\n\n\n每个节点都有一个专门用于节点间通信的端口，就是自己提供服务端口号+10000，比如7001，那么用于通信的就是17001，每个节点每隔一段时间会往另外几个节点发送pin消息，同时其他节点接受到ping之后会返回pong\n\n\n\n#### 交换信息\n\n\n\n故障信息，节点的增加和移除，hashslot信息 等\n\n\n\n#### gossip\n\n\n\ngossip协议包括多种信息，包括 Ping pong meet fail等\n\n\n\nmeet：某个节点发送meet给新加入的节点，让新节点加入集群中，然后新节点就会开始与其他节点通信\n\n\n\nping： 每个节点都会频繁的给其他节点发送ping，其中包含自己的状态和自己维护的集群元数据，互相通过ping来交换元数据\n\n\n\n每个节点每隔10秒回执行10次ping，每次会选择5个最久没有通信的其他节点，如果发现某个节点的通信延时达到了cluster_*node_*out/2，那么立即发送ping，避免数据交换延迟过长\n\n\n\n每次ping，一个是带上自己的节点的信息，还有就是带上十分之一的其他节点的信息发送出去，进行数据交换\n\n\n\n至少包含3个其他节点的信息，最多包含总节点-2个其他节点的信息\n\n\n\npong： 返回ping和meet，包含自己的状态和其他等信息，也可以用于信息广播和更新\n\n\n\nfail： 某个节点判断另一个节点fail之后，就发送fail给其他节点，通知其他节点，指定的节点宕机了\n\n\n\n## 测试\n\n\n\n![image-20210322160504870](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210322160504870.png)\n\n\n\n图中出现的是moved的意思是应该到192.168.0.23的机器上 ，端口为7005的机器上进行这个命令的写入\n\n\n\n每个机器在执行命令的时候，都会计算这key对应的crc16的值，然后对16384的hashslot取模，找到对应的hashslot，并且返回该hashslo所对应的机器及端口号\n\n\n\n自动将命令执行在对应的机器上\n\n\n\nredis-cli -h 192.168.0.21 -p 7001 -c\n\n\n\n重启之后的日志","source":"_posts/redis.md","raw":"---\ntitle: redis cluster\ndescription: ''\ntags:\n  - 无标签\nabbrlink: e02375f9\ndate: 2021-03-21 00:00:00\n---\n\n\n### 集群配置\n\n\n\n<!-- more -->\n\n\n\n```bash\n\nmkdir -p /etc/redis-cluster\n\nmkdir -p /var/log/redis\n\nmkdir -p /var/redis/7001\n\n#配置文件目录\n\n/var/redis/7001.conf\n\n#redis.conf\n\nport 7001\n\ncluster-enabled yes\n\ncluster-conifg-file /etc/redis-cluster/node/7001.conf\n\ncluster-node-timeout 15000\n\ndaemonize yes\n\npidfile /var/run/redis_7001.conf\n\ndir /var/redis/7001\n\nlogfile /var/log/redis/7001.log\n\nbind 192.168.0.21\n\nappendonly yes \n\n```\n\n\n\n至少要3个master节点启动，每个master加一个slave节点，先选择6个节点，启动6个实例\n\n\n\n```bash\n\nyum install -y ruby\n\nyum install -y rubygems\n\ngem install redis\n\ncp /home/redis/src/redis.trib.rm /usr/local/bin\n\n \n\nredis-trib.rb create --replicas 1 192.168.0.21:7001 192.168.0.21:7002 192.168.0.22:7003 192.168.0.22:7004 192.168.0.23:7005 192.168.0.23:7006\n\n#查看redis.cluster对于主从节点的配置信息\n\nredis-cli --cluster check 192.168.0.21:7001\n\n\n\n#测试\n\nredis-cli -h 192.168.0.22 -p 7004\n\n #自动写入对应的机器\n\nredis-cli -h 192.168.0.22 -p 7004 -c\n\n#将节点加入到redis-cluster集群中\n\nredis-cli --cluster add-node 192.168.0.21:7007 192.168.0.22:7004\n\n#加入salve节点\n\nredis-cli --cluster add-node --slave --master-id c1dcc6197201c958fb06fa7737190e4209dc2171 192.168.0.22:7008 192.168.0.22:7004\n\n #删除一个节点，要把它上面的slot移动到其他机器上\n\n  \n\n```\n\n\n\n多master写入\n\n\n\n每条数据上只存在于一个master上，不同master负责存储不同的数据\n\n\n\n当你清空一个master的hashslot的时候，redis cluster会将其slace挂载到其他master上去，这个时候，你只需要删除这个节点就可以了\n\n\n\n### 扩容\n\n\n\nredis-cli --cluster reshard 192.168.0.21:7001\n\n\n\n![image-20210322160409452](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210322160409452.png)\n\n\n\n### 读写分离\n\n\n\nredis-cluster可以实现物理的读写分离即一个redis专门用来读数据，一个redis专门用来写数据，但是一般不建议使用，现在用的都是master负责读写，而slave只是数据备份\n\n\n\n默认不支持slave节点读或者写\n\n\n\n在slave中要先执行readlonly，再执行get命令，才可以取到数据\n\n\n\n### 自动化slave迁移\n\n\n\n当master的slave挂掉了，其他有冗余的slave会将自动将其slave挂在到缺失slave的master\n\n\n\n#### why\n\n\n\n为什么不进行读写分离那\n\n\n\n原因是因为之前我们让物理的读写分离，是在一主多从的情况下，想要增加访问量，就是要增加slave的数量，这样才可以达到水平扩容的效果，但是用了redis.cluster之后，是多主多从的情况，因此要想增加屯库量直接增加master的数量就可以了\n\n\n\n### 机器配置\n\n\n\nredis的内存不建议太大，一般是8g或者16g，如果内存比较大，redis在fork子线程的时候，可能会造成机器卡顿\n\n\n\n### 原理\n\n\n\n#### 基础通信原理\n\n\n\n各个节点之间通过gossip协议进行通信\n\n\n\n跟集中式不通，不是讲集群元数据放在某一个节点上，而是互相之间不断通信，保持整个集群所有节点的数据是完整的\n\n\n\n集中式存储\n\n\n\n![image-20210322160443703](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210322160443703.png)\n\n\n\n#### 10000端口\n\n\n\n每个节点都有一个专门用于节点间通信的端口，就是自己提供服务端口号+10000，比如7001，那么用于通信的就是17001，每个节点每隔一段时间会往另外几个节点发送pin消息，同时其他节点接受到ping之后会返回pong\n\n\n\n#### 交换信息\n\n\n\n故障信息，节点的增加和移除，hashslot信息 等\n\n\n\n#### gossip\n\n\n\ngossip协议包括多种信息，包括 Ping pong meet fail等\n\n\n\nmeet：某个节点发送meet给新加入的节点，让新节点加入集群中，然后新节点就会开始与其他节点通信\n\n\n\nping： 每个节点都会频繁的给其他节点发送ping，其中包含自己的状态和自己维护的集群元数据，互相通过ping来交换元数据\n\n\n\n每个节点每隔10秒回执行10次ping，每次会选择5个最久没有通信的其他节点，如果发现某个节点的通信延时达到了cluster_*node_*out/2，那么立即发送ping，避免数据交换延迟过长\n\n\n\n每次ping，一个是带上自己的节点的信息，还有就是带上十分之一的其他节点的信息发送出去，进行数据交换\n\n\n\n至少包含3个其他节点的信息，最多包含总节点-2个其他节点的信息\n\n\n\npong： 返回ping和meet，包含自己的状态和其他等信息，也可以用于信息广播和更新\n\n\n\nfail： 某个节点判断另一个节点fail之后，就发送fail给其他节点，通知其他节点，指定的节点宕机了\n\n\n\n## 测试\n\n\n\n![image-20210322160504870](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210322160504870.png)\n\n\n\n图中出现的是moved的意思是应该到192.168.0.23的机器上 ，端口为7005的机器上进行这个命令的写入\n\n\n\n每个机器在执行命令的时候，都会计算这key对应的crc16的值，然后对16384的hashslot取模，找到对应的hashslot，并且返回该hashslo所对应的机器及端口号\n\n\n\n自动将命令执行在对应的机器上\n\n\n\nredis-cli -h 192.168.0.21 -p 7001 -c\n\n\n\n重启之后的日志","slug":"redis","published":1,"updated":"2025-03-02T03:37:34.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4z003fn0uk140b3dgf","content":"<h3 id=\"集群配置\"><a href=\"#集群配置\" class=\"headerlink\" title=\"集群配置\"></a>集群配置</h3><span id=\"more\"></span>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /etc/redis-cluster</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /var/log/redis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /var/redis/7001</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#配置文件目录</span></span><br><span class=\"line\"></span><br><span class=\"line\">/var/redis/7001.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#redis.conf</span></span><br><span class=\"line\"></span><br><span class=\"line\">port 7001</span><br><span class=\"line\"></span><br><span class=\"line\">cluster-enabled <span class=\"built_in\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">cluster-conifg-file /etc/redis-cluster/node/7001.conf</span><br><span class=\"line\"></span><br><span class=\"line\">cluster-node-timeout 15000</span><br><span class=\"line\"></span><br><span class=\"line\">daemonize <span class=\"built_in\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">pidfile /var/run/redis_7001.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">dir</span> /var/redis/7001</span><br><span class=\"line\"></span><br><span class=\"line\">logfile /var/log/redis/7001.<span class=\"built_in\">log</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">bind</span> 192.168.0.21</span><br><span class=\"line\"></span><br><span class=\"line\">appendonly <span class=\"built_in\">yes</span> </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>至少要3个master节点启动，每个master加一个slave节点，先选择6个节点，启动6个实例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">yum install -y ruby</span><br><span class=\"line\"></span><br><span class=\"line\">yum install -y rubygems</span><br><span class=\"line\"></span><br><span class=\"line\">gem install redis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cp</span> /home/redis/src/redis.trib.rm /usr/local/bin</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">redis-trib.rb create --replicas 1 192.168.0.21:7001 192.168.0.21:7002 192.168.0.22:7003 192.168.0.22:7004 192.168.0.23:7005 192.168.0.23:7006</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看redis.cluster对于主从节点的配置信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli --cluster check 192.168.0.21:7001</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#测试</span></span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli -h 192.168.0.22 -p 7004</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">#自动写入对应的机器</span></span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli -h 192.168.0.22 -p 7004 -c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将节点加入到redis-cluster集群中</span></span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli --cluster add-node 192.168.0.21:7007 192.168.0.22:7004</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#加入salve节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli --cluster add-node --slave --master-id c1dcc6197201c958fb06fa7737190e4209dc2171 192.168.0.22:7008 192.168.0.22:7004</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">#删除一个节点，要把它上面的slot移动到其他机器上</span></span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>多master写入</p>\n<p>每条数据上只存在于一个master上，不同master负责存储不同的数据</p>\n<p>当你清空一个master的hashslot的时候，redis cluster会将其slace挂载到其他master上去，这个时候，你只需要删除这个节点就可以了</p>\n<h3 id=\"扩容\"><a href=\"#扩容\" class=\"headerlink\" title=\"扩容\"></a>扩容</h3><p>redis-cli --cluster reshard 192.168.0.21:7001</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210322160409452.png\" alt=\"image-20210322160409452\" loading=\"lazy\"></p>\n<h3 id=\"读写分离\"><a href=\"#读写分离\" class=\"headerlink\" title=\"读写分离\"></a>读写分离</h3><p>redis-cluster可以实现物理的读写分离即一个redis专门用来读数据，一个redis专门用来写数据，但是一般不建议使用，现在用的都是master负责读写，而slave只是数据备份</p>\n<p>默认不支持slave节点读或者写</p>\n<p>在slave中要先执行readlonly，再执行get命令，才可以取到数据</p>\n<h3 id=\"自动化slave迁移\"><a href=\"#自动化slave迁移\" class=\"headerlink\" title=\"自动化slave迁移\"></a>自动化slave迁移</h3><p>当master的slave挂掉了，其他有冗余的slave会将自动将其slave挂在到缺失slave的master</p>\n<h4 id=\"why\"><a href=\"#why\" class=\"headerlink\" title=\"why\"></a>why</h4><p>为什么不进行读写分离那</p>\n<p>原因是因为之前我们让物理的读写分离，是在一主多从的情况下，想要增加访问量，就是要增加slave的数量，这样才可以达到水平扩容的效果，但是用了redis.cluster之后，是多主多从的情况，因此要想增加屯库量直接增加master的数量就可以了</p>\n<h3 id=\"机器配置\"><a href=\"#机器配置\" class=\"headerlink\" title=\"机器配置\"></a>机器配置</h3><p>redis的内存不建议太大，一般是8g或者16g，如果内存比较大，redis在fork子线程的时候，可能会造成机器卡顿</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><h4 id=\"基础通信原理\"><a href=\"#基础通信原理\" class=\"headerlink\" title=\"基础通信原理\"></a>基础通信原理</h4><p>各个节点之间通过gossip协议进行通信</p>\n<p>跟集中式不通，不是讲集群元数据放在某一个节点上，而是互相之间不断通信，保持整个集群所有节点的数据是完整的</p>\n<p>集中式存储</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210322160443703.png\" alt=\"image-20210322160443703\" loading=\"lazy\"></p>\n<h4 id=\"10000端口\"><a href=\"#10000端口\" class=\"headerlink\" title=\"10000端口\"></a>10000端口</h4><p>每个节点都有一个专门用于节点间通信的端口，就是自己提供服务端口号+10000，比如7001，那么用于通信的就是17001，每个节点每隔一段时间会往另外几个节点发送pin消息，同时其他节点接受到ping之后会返回pong</p>\n<h4 id=\"交换信息\"><a href=\"#交换信息\" class=\"headerlink\" title=\"交换信息\"></a>交换信息</h4><p>故障信息，节点的增加和移除，hashslot信息 等</p>\n<h4 id=\"gossip\"><a href=\"#gossip\" class=\"headerlink\" title=\"gossip\"></a>gossip</h4><p>gossip协议包括多种信息，包括 Ping pong meet fail等</p>\n<p>meet：某个节点发送meet给新加入的节点，让新节点加入集群中，然后新节点就会开始与其他节点通信</p>\n<p>ping： 每个节点都会频繁的给其他节点发送ping，其中包含自己的状态和自己维护的集群元数据，互相通过ping来交换元数据</p>\n<p>每个节点每隔10秒回执行10次ping，每次会选择5个最久没有通信的其他节点，如果发现某个节点的通信延时达到了cluster_*node_*out&#x2F;2，那么立即发送ping，避免数据交换延迟过长</p>\n<p>每次ping，一个是带上自己的节点的信息，还有就是带上十分之一的其他节点的信息发送出去，进行数据交换</p>\n<p>至少包含3个其他节点的信息，最多包含总节点-2个其他节点的信息</p>\n<p>pong： 返回ping和meet，包含自己的状态和其他等信息，也可以用于信息广播和更新</p>\n<p>fail： 某个节点判断另一个节点fail之后，就发送fail给其他节点，通知其他节点，指定的节点宕机了</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210322160504870.png\" alt=\"image-20210322160504870\" loading=\"lazy\"></p>\n<p>图中出现的是moved的意思是应该到192.168.0.23的机器上 ，端口为7005的机器上进行这个命令的写入</p>\n<p>每个机器在执行命令的时候，都会计算这key对应的crc16的值，然后对16384的hashslot取模，找到对应的hashslot，并且返回该hashslo所对应的机器及端口号</p>\n<p>自动将命令执行在对应的机器上</p>\n<p>redis-cli -h 192.168.0.21 -p 7001 -c</p>\n<p>重启之后的日志</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"集群配置\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\nmkdir -p /etc/redis-cluster\n\nmkdir -p /var/log/redis\n\nmkdir -p /var/redis/7001\n\n#配置文件目录\n\n/var/redis/7001.conf\n\n#redis.conf\n\nport 7001\n\ncluster-enabled yes\n\ncluster-conifg-file /etc/redis-cluster/node/70","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /etc/redis-cluster</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /var/log/redis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /var/redis/7001</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#配置文件目录</span></span><br><span class=\"line\"></span><br><span class=\"line\">/var/redis/7001.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#redis.conf</span></span><br><span class=\"line\"></span><br><span class=\"line\">port 7001</span><br><span class=\"line\"></span><br><span class=\"line\">cluster-enabled <span class=\"built_in\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">cluster-conifg-file /etc/redis-cluster/node/7001.conf</span><br><span class=\"line\"></span><br><span class=\"line\">cluster-node-timeout 15000</span><br><span class=\"line\"></span><br><span class=\"line\">daemonize <span class=\"built_in\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">pidfile /var/run/redis_7001.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">dir</span> /var/redis/7001</span><br><span class=\"line\"></span><br><span class=\"line\">logfile /var/log/redis/7001.<span class=\"built_in\">log</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">bind</span> 192.168.0.21</span><br><span class=\"line\"></span><br><span class=\"line\">appendonly <span class=\"built_in\">yes</span> </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>至少要3个master节点启动，每个master加一个slave节点，先选择6个节点，启动6个实例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">yum install -y ruby</span><br><span class=\"line\"></span><br><span class=\"line\">yum install -y rubygems</span><br><span class=\"line\"></span><br><span class=\"line\">gem install redis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cp</span> /home/redis/src/redis.trib.rm /usr/local/bin</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">redis-trib.rb create --replicas 1 192.168.0.21:7001 192.168.0.21:7002 192.168.0.22:7003 192.168.0.22:7004 192.168.0.23:7005 192.168.0.23:7006</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看redis.cluster对于主从节点的配置信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli --cluster check 192.168.0.21:7001</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#测试</span></span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli -h 192.168.0.22 -p 7004</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">#自动写入对应的机器</span></span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli -h 192.168.0.22 -p 7004 -c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将节点加入到redis-cluster集群中</span></span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli --cluster add-node 192.168.0.21:7007 192.168.0.22:7004</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#加入salve节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli --cluster add-node --slave --master-id c1dcc6197201c958fb06fa7737190e4209dc2171 192.168.0.22:7008 192.168.0.22:7004</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">#删除一个节点，要把它上面的slot移动到其他机器上</span></span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>多master写入</p>\n<p>每条数据上只存在于一个master上，不同master负责存储不同的数据</p>\n<p>当你清空一个master的hashslot的时候，redis cluster会将其slace挂载到其他master上去，这个时候，你只需要删除这个节点就可以了</p>\n<h3 id=\"扩容\"><a href=\"#扩容\" class=\"headerlink\" title=\"扩容\"></a>扩容</h3><p>redis-cli --cluster reshard 192.168.0.21:7001</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210322160409452.png\" alt=\"image-20210322160409452\" loading=\"lazy\"></p>\n<h3 id=\"读写分离\"><a href=\"#读写分离\" class=\"headerlink\" title=\"读写分离\"></a>读写分离</h3><p>redis-cluster可以实现物理的读写分离即一个redis专门用来读数据，一个redis专门用来写数据，但是一般不建议使用，现在用的都是master负责读写，而slave只是数据备份</p>\n<p>默认不支持slave节点读或者写</p>\n<p>在slave中要先执行readlonly，再执行get命令，才可以取到数据</p>\n<h3 id=\"自动化slave迁移\"><a href=\"#自动化slave迁移\" class=\"headerlink\" title=\"自动化slave迁移\"></a>自动化slave迁移</h3><p>当master的slave挂掉了，其他有冗余的slave会将自动将其slave挂在到缺失slave的master</p>\n<h4 id=\"why\"><a href=\"#why\" class=\"headerlink\" title=\"why\"></a>why</h4><p>为什么不进行读写分离那</p>\n<p>原因是因为之前我们让物理的读写分离，是在一主多从的情况下，想要增加访问量，就是要增加slave的数量，这样才可以达到水平扩容的效果，但是用了redis.cluster之后，是多主多从的情况，因此要想增加屯库量直接增加master的数量就可以了</p>\n<h3 id=\"机器配置\"><a href=\"#机器配置\" class=\"headerlink\" title=\"机器配置\"></a>机器配置</h3><p>redis的内存不建议太大，一般是8g或者16g，如果内存比较大，redis在fork子线程的时候，可能会造成机器卡顿</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><h4 id=\"基础通信原理\"><a href=\"#基础通信原理\" class=\"headerlink\" title=\"基础通信原理\"></a>基础通信原理</h4><p>各个节点之间通过gossip协议进行通信</p>\n<p>跟集中式不通，不是讲集群元数据放在某一个节点上，而是互相之间不断通信，保持整个集群所有节点的数据是完整的</p>\n<p>集中式存储</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210322160443703.png\" alt=\"image-20210322160443703\" loading=\"lazy\"></p>\n<h4 id=\"10000端口\"><a href=\"#10000端口\" class=\"headerlink\" title=\"10000端口\"></a>10000端口</h4><p>每个节点都有一个专门用于节点间通信的端口，就是自己提供服务端口号+10000，比如7001，那么用于通信的就是17001，每个节点每隔一段时间会往另外几个节点发送pin消息，同时其他节点接受到ping之后会返回pong</p>\n<h4 id=\"交换信息\"><a href=\"#交换信息\" class=\"headerlink\" title=\"交换信息\"></a>交换信息</h4><p>故障信息，节点的增加和移除，hashslot信息 等</p>\n<h4 id=\"gossip\"><a href=\"#gossip\" class=\"headerlink\" title=\"gossip\"></a>gossip</h4><p>gossip协议包括多种信息，包括 Ping pong meet fail等</p>\n<p>meet：某个节点发送meet给新加入的节点，让新节点加入集群中，然后新节点就会开始与其他节点通信</p>\n<p>ping： 每个节点都会频繁的给其他节点发送ping，其中包含自己的状态和自己维护的集群元数据，互相通过ping来交换元数据</p>\n<p>每个节点每隔10秒回执行10次ping，每次会选择5个最久没有通信的其他节点，如果发现某个节点的通信延时达到了cluster_*node_*out&#x2F;2，那么立即发送ping，避免数据交换延迟过长</p>\n<p>每次ping，一个是带上自己的节点的信息，还有就是带上十分之一的其他节点的信息发送出去，进行数据交换</p>\n<p>至少包含3个其他节点的信息，最多包含总节点-2个其他节点的信息</p>\n<p>pong： 返回ping和meet，包含自己的状态和其他等信息，也可以用于信息广播和更新</p>\n<p>fail： 某个节点判断另一个节点fail之后，就发送fail给其他节点，通知其他节点，指定的节点宕机了</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210322160504870.png\" alt=\"image-20210322160504870\" loading=\"lazy\"></p>\n<p>图中出现的是moved的意思是应该到192.168.0.23的机器上 ，端口为7005的机器上进行这个命令的写入</p>\n<p>每个机器在执行命令的时候，都会计算这key对应的crc16的值，然后对16384的hashslot取模，找到对应的hashslot，并且返回该hashslo所对应的机器及端口号</p>\n<p>自动将命令执行在对应的机器上</p>\n<p>redis-cli -h 192.168.0.21 -p 7001 -c</p>\n<p>重启之后的日志</p>"},{"title":"robots.txt 使用","description":"","abbrlink":"112ee01b","date":"2023-05-28T16:00:00.000Z","_content":"\n\n简单介绍今天在github上学习到的一个小玩意\n\n\n\n<!-- more -->\n\n\n\n## 简介\n\n\n\nrobots.txt 文件规定了搜索引擎抓取工具可以访问您网站上的哪些网址。 此文件主要用于避免您的网站收到过多请求；\n\n\n\n- [谷歌](https://developers.google.com/search/docs/crawling-indexing/robots/intro?hl=zh-cn) 对于这个文件的说明，比官方的要好点\n\n- 测试是否起作用是 这个网址[Yandex](https://webmaster.yandex.com/tools/robotstxt/)\n\n\n\n## 测试\n\n\n\n![image-20230529101644600](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20230529101644600.png)\n\n\n\n上面显示对号 就表示 这个网址可以被搜索引擎抓取到\n","source":"_posts/robots-txt-使用.md","raw":"---\ntitle: robots.txt 使用\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 112ee01b\ndate: 2023-05-29 00:00:00\n---\n\n\n简单介绍今天在github上学习到的一个小玩意\n\n\n\n<!-- more -->\n\n\n\n## 简介\n\n\n\nrobots.txt 文件规定了搜索引擎抓取工具可以访问您网站上的哪些网址。 此文件主要用于避免您的网站收到过多请求；\n\n\n\n- [谷歌](https://developers.google.com/search/docs/crawling-indexing/robots/intro?hl=zh-cn) 对于这个文件的说明，比官方的要好点\n\n- 测试是否起作用是 这个网址[Yandex](https://webmaster.yandex.com/tools/robotstxt/)\n\n\n\n## 测试\n\n\n\n![image-20230529101644600](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20230529101644600.png)\n\n\n\n上面显示对号 就表示 这个网址可以被搜索引擎抓取到\n","slug":"robots-txt-使用","published":1,"updated":"2025-03-02T03:37:34.404Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4z003hn0ukdimp2sbb","content":"<p>简单介绍今天在github上学习到的一个小玩意</p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>robots.txt 文件规定了搜索引擎抓取工具可以访问您网站上的哪些网址。 此文件主要用于避免您的网站收到过多请求；</p>\n<ul>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vc2VhcmNoL2RvY3MvY3Jhd2xpbmctaW5kZXhpbmcvcm9ib3RzL2ludHJvP2hsPXpoLWNu\">谷歌<i class=\"fa fa-external-link-alt\"></i></span> 对于这个文件的说明，比官方的要好点</p>\n</li>\n<li><p>测试是否起作用是 这个网址<span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWJtYXN0ZXIueWFuZGV4LmNvbS90b29scy9yb2JvdHN0eHQv\">Yandex<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n</ul>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20230529101644600.png\" alt=\"image-20230529101644600\" loading=\"lazy\"></p>\n<p>上面显示对号 就表示 这个网址可以被搜索引擎抓取到</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"简单介绍今天在github上学习到的一个小玩意\n\n简介\nrobots.txt 文件规定了搜索引擎抓取工具可以访问您网站上的哪些网址。 此文件主要用于避免您的网站收到过多请求；\n\n * 谷歌 对于这个文件的说明，比官方的要好点\n   \n   \n * 测试是否起作用是 这个网址Yandex\n   \n   \n\n测试\n\n\n上面显示对号 就表示 这个网址可以被搜索引擎抓取到","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>robots.txt 文件规定了搜索引擎抓取工具可以访问您网站上的哪些网址。 此文件主要用于避免您的网站收到过多请求；</p>\n<ul>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vc2VhcmNoL2RvY3MvY3Jhd2xpbmctaW5kZXhpbmcvcm9ib3RzL2ludHJvP2hsPXpoLWNu\">谷歌<i class=\"fa fa-external-link-alt\"></i></span> 对于这个文件的说明，比官方的要好点</p>\n</li>\n<li><p>测试是否起作用是 这个网址<span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWJtYXN0ZXIueWFuZGV4LmNvbS90b29scy9yb2JvdHN0eHQv\">Yandex<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n</ul>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20230529101644600.png\" alt=\"image-20230529101644600\" loading=\"lazy\"></p>\n<p>上面显示对号 就表示 这个网址可以被搜索引擎抓取到</p>"},{"title":"rocketmq","description":"","abbrlink":"3e7adddd","date":"2021-03-26T16:00:00.000Z","_content":"\n\n单机最多10万并发 阿里开发 \n\n\n\n<!-- more -->\n\n\n\n## 集群部署\n\n\n\n### 架构图\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5d27582a681480c9ed1870ba1d5c749~tplv-k3u1fbpfcp-watermark.image)\n\n### 原理\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f13fbb8e198e4adcba63578c2eb05122~tplv-k3u1fbpfcp-watermark.image)\n\n## 高可用\n\n\n\n主从架构及多副本策略\n\n\n\nBorker有主和副之分，master broker 主要负责写入\n\n\n\nmaster borker 收到消息之后会同步给slave broker ，保证一个机器宕机之后，另一个机器有数据\n\n\n\nslave broker固定时间会从master broker拉取数据，这就是所谓的主从同步\n\n\n\n每个broker启动都要向所有的nameserver进行注册。\n\n\n\n因为如果只是向个别nameserver进行注册的话，当一台nameserver宕机之后，就会丢失broker的信息\n\n\n\nnameserver和borker之间有个心跳机制，保证当broker宕机之后，nameserver会及时感知到\n\n\n\n> 每隔固定时间，broker会向nameserver发送心跳，nameserver会将这个最新心跳时间更新\n\n\n\nnameserver每隔固定时间来扫描所有broker的心跳时间，如果超过一个数据，将认为这个broker宕机\n\n\n\n心跳传输的时候，还会降\n\n\n\n#### 消息获取来源\n\n\n\n消息获取可能来自于master broker，也可能来自于slave broker\n\n\n\nbroker将消息返回给请求系统的时候，会向系统建议下一次消息请求要请求master broker或者slave broker，\n\n\n\n#### 重点\n\n\n\nrocketmq4.5之前不是完全的高可用模式，当master broker宕机之后，不会自动切换到slave broker，需要人手动修改\n\n\n\n4.5之后，采用一种Dledger的机制来支持master broker宕机之后自动切换到slaver broker\n\n\n\nDledger采用的是raft算法\n\n\n\n## 下载安装\n\n\n\n```java\n\n#下载rocketmq\n\nhttps://github.com/apache/rocketmq\n\n\n\n#下载dledger \n\nhttps://github.com/openmessaging/openmessaging-storage-dledger \n\n#可视化界面\n\nhttps://github.com/apache/rocketmq-externals \n\n```\n\n\n\n## 保证消息不丢失\n\n\n\n### 发送消息到mq零丢失\n\n\n\n1. 同步发送消息+反复多次重试\n\n\n\n2. rocketmq事务消息机制，这个整体效果会更好一点\n\n\n\n### mq收到消息之后零丢失\n\n\n\n开启同步刷盘+主从架构同步机制\n\n\n\n将数据写入磁盘后，并且将数据写入到slave broker的磁盘之后才返回给生产者，消息写入mq成功\n\n\n\n### 消费者收到消息之后零丢失\n\n\n\nrocketmq天然就保证了，因为rocketmq默认就是当消息处理之后才会返回给mq消息发送成功，而不是在执行消息处理逻辑之前就将成功的消息返回给mq了\n\n\n\n## 幂等性\n\n\n\n避免对同一\n\n\n\n1. 业务方法判断，当重试的时候，提前发送一条消息到mq中查询这个条消息是否已经发送过了，如果有则不再发送，没有则发送\n\n\n\n2. 状态查询 你写入到mq一条消息，将消息也写入到redis中，写入id和订单状态，当接口重复调用的时候，就去redis中年查询一下，根据id查询状态，成功则不再发送，失败则再次发送\n\n\n\nredis这种方案有缺陷，还有可能会重复消费\n\n\n\n就是你将消息发送到mq，没有来得及写redis，redis宕机了，重启之后会将重新发一次消息，这样就有两条消息了；所以一般来说推荐使用业务方法来进行判断\n\n\n\n## 重复消息\n\n\n\n会有专门的重试队列，最多重试16次，16次之后进入死信队列，死信队列的处理方式是自定义，看业务需求\n\n\n\n当业务由于某种原因故障不能消费消息时,可以返回reconsume_laster,将消息加入到延时消息consumerGroup中进行消息的重试最大15次阶梯型重试,15失败后放入到死信队列中消费者则专门开启线程进行消费\n\n\n\n## 消费者\n\n\n\n消费者消费消息的方式有两种，一种是push，broker主动向consumer不定时发送消息；一种是pull，consumer不定时从broker拉取消息\n\n\n\n### push\n\n\n\n本质上也是消费者不停向broker发送消息拉取数据\n\n\n\n消费者在处理完一批消息之后，会立马发送请求到broker拉取消息，看起来好像是broker不定时向消费者推送信息一样，其实是消费者不停向broker发送消息拉取数据\n\n\n\n当请求发送到broker的时候，发现没有消息可以消费，就会让这个请求线程挂起，默认挂起15秒，然后后台有一个线程不停地检查broker中是否有消息，有的话，会主动将请求线程唤醒，然后消费者拿到消息\n\n\n\n### pull\n\n\n\n### 保证消息不丢失\n\n\n\n消息如果发送到消费者了，但是可能消费者还没有真正消费消息，就宕机了，此时消息在系统缓存中，但是却返回给mq的消息是消费者消费消息成功了\n\n\n\n同步机制\n\n\n\n当消费者真正执行完消息的处理逻辑之后，再将成功的消息返回给mq\n\n\n\n不能用异步机制，因为异步机制可能导致消费者还没有消费好消息的时候，已经将成功的消息给mq了\n\n\n\n，如果此时消费者宕机了，那么返回给mq的消息就是假的，虽然返回的是储成功的消息，但是实际上并没有成功\n\n\n\n## 生产者\n\n\n\n### 同步发送消息\n\n\n\n发送消息给mq，等待mq返回结果，没有返回结果的话，就会卡在这里\n\n\n\n### 异步发送消息\n\n\n\n发送消息给mq，不等待mq返回结果，cpu去干别的事儿了，等到mq返回消息后，代码会继续执行下去\n\n\n\n### 单向发送消息\n\n\n\n发送消息给mq就可以了，不管mq是否返回信息\n\n\n\n### 保证消息发送成功\n\n\n\n- half消息对消费者不可见\n\n\n\n  一般一个消息到mq之后会写入对应的topic/messageque/consumerqueue中，但是rocketmq识别到消息为half消息后，会将消息写入rocketmq的内部topic中，所以消费者对于half来说是不可见的\n\n\n\n\n\n\n\n比如你买东西，已经付款到了订单系统，发了一次half发现mq没有返回消息，mq挂了，于是进行资金回退。\n\n\n\n如果本地事务失败了，会让订单系统给mq发送一个rollback，表示我这里失败了，无法接受你返回的消息\n\n\n\n如果rollback和commit失败了，由于mq里面的消息一直处于half状态，长时间没有回应之后就知道mq出现问题，这个时候需要判断下订单的状态是“已完成”吗 是的话，再次commit请求，不是的话，再次执行rollback请求，\n\n\n\n如何执行rollback\n\n\n\n将rollback记录写入到op_+topic,标记某个half消息是rollback的了\n\n\n\n假设一直没有执行rollback或者commit，mq最多会调用15次接口来判断half消息的状态，如果15次之后还是没有知道half消息的状态，就会自动将消息标记为rollback\n\n\n\n### half\n\n\n\n每次发送消息之前，就要发送half消息到mq，如果mq正常工作就会返回一个ok给生产者，生产者就可以发送真正的消息了，如果返回的不是ok，就表示mq有问题，此时就会进行消息回滚\n\n\n\n上面其实有三个步骤\n\n\n\n1. producer发half给mq\n\n\n\n2. mq给producer返回信息\n\n\n\n3. producer进行下一步处理\n\n\n\n上面三步其实都可能出现问题，那么如何保证不出现问题那，请继续往下看\n\n\n\n针对以上三个步骤进行下面三个回复\n\n\n\n1. 如果producer发送half消息失败，会调用一个本地线程来查看half消息在限定时间内有消息返回，如果没有则就按回滚处理\n\n\n\n2. 如果mq给producer返回信息失败，mq会调用一个本地线程来查看half消息在限定时间内有消息返回，如果没有则就按回滚处理\n\n\n\n3. \n\n\n\n如何确保half消息发送成功\n\n\n\n消息写入到RMQ_SYS_TRANS_HALF_TOPIC\n\n\n\n### 技巧\n\n\n\n可以将使用阿里的cannal的技术来同步mysql的binlog\n\n\n\n一个topic的数据放在多个messagequeue上，实现分布式存储\n\n\n\n## 持久化\n\n\n\n### broker\n\n\n\nbroker收到消息后会将所有消息顺序写入到磁盘中，叫做commitlog，会有一个参数来规定commitlog的最大容量，达到最大容量后会自动创建一个新的commitlog来进行写入\n\n\n\n磁盘顺序写+os cache写入+os异步刷盘\n\n\n\nbroker收到消息之后并不是直接写入磁盘的，是将消息写入到系统缓存中，然后系统缓存不定时将消息写入磁盘\n\n\n\n异步刷盘会有数据丢失的风险，比如将数据写入到系统缓存之后，系统突然宕机了，生产者以为将消息已经写入了，但是实际上并没有写入到磁盘中\n\n\n\n同步刷盘的意思就是每次必须将数据写入到磁盘中以后才叫做消息发送完成\n\n\n\n#### 优化\n\n\n\n文件预热\n\n\n\nmadvise系统调用，会尽可能能将数据从磁盘空间加载到内存中，减少数据从磁盘空间加载到内存的次数\n\n\n\n#### mmap\n\n\n\n普通的将数据存储在磁盘的过程如下\n\n\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e26fed33a45e4042a7398c58c0900fe0~tplv-k3u1fbpfcp-watermark.image)\n\n需要进行两次拷贝\n\n\n\nmmap只需要进行一次拷贝\n\n\n\n原因：就是把磁盘文件地址和线程私有空间做了一个映射，一旦写入到虚拟内存后，直接拷贝到磁盘空间中即可，不用二次拷贝了（即拷贝到线程私有空间，再拷贝到磁盘空间中）\n\n![](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0daa0696115344faa5326681596266c1~tplv-k3u1fbpfcp-watermark.image)\n\n### messagequeue\n\n\n\n一个topic下面有多个messagequeeu，一个messagequeeu下只有一个consumerqueue\n\n\n\nmessagequeue在broker的存储上是这样的\n\n\n\n会存储在相应topic/messagequeeu0/consumerqueue0\n\n\n\n每次broker收到消息之后，会将消息顺序写入磁盘，同时也会将这个消息的物理存储位置记录在topic/messagequeeu0/consumerqueue0中，这样方便消费者过来消费消息的时候，可以知道消息存放的位置\n\n\n\n## Dledger\n\n\n\n### what\n\n\n\n这个机制可以保证当leader broker失效的时候，可以自动切换到slave broker，\n\n\n\n### why\n\n\n\n采用的是raft算法，简单来讲就是 所有的broker每个人都会投票给自己，第一轮所有人都会投票给自己，然后进行随机休眠，比如broker1休眠2秒，broker2休眠3秒，broker3休眠4秒，从数据来看肯定是broker1先苏醒，他投票给自己，将自己的投票发给其他人，剩下两个发现别人已经投票过了，于是跟随投票，所以broker就被选举上了，成为了leader broker\n\n\n\n投票完成：机器数量/2+1，就表示大多数，就是说当有大多数人投票以后，不需要其他人发表意见，直接将大多人的意见作为最后的意见\n\n\n\nbroker投票机制\n\n\n\n1. 有人已经投票的话，会尊重他们的意见，跟随投票\n\n\n\n2. 会给自己投票\n\n\n\n上面的顺序也是优先级的顺序\n\n\n\n### 多副本同步\n\n\n\n分为两个阶段\n\n\n\n1. uncommitted阶段\n\n\n\n2. committed阶段\n\n\n\n#### uncommitted阶段\n\n\n\nleader broker收到数据后，会标记为uncommitted状态，然后通过他自己的dledger server组件把这个数据发送给slave broker的dledger server\n\n\n\n#### committed阶段\n\n\n\nslave broker的dledger server收到消息之后，会回复一个ack给leader broker的dledger server，当leader broker收到一半以上的slave broker之后，会将数据标记为committed的状态\n\n\n\n然后leader broker的slave broker将committed的状态发送给slave broker的dledger server消息同步完成\n\n\n\n## 网络通信架构模型\n\n![](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90cdb1095d54408f99941399d156c68e~tplv-k3u1fbpfcp-watermark.image)\n\nrocketmq的网络通信架构模型。首先生产者和服务端通过reactor主线程建立tcp长连接，客户端与服务端采用socketchannel进行通信，通过socketschannel发送消息，通过reactor线程池去监听socketchannel的消息到达。reactor线程池只负责把消息取出来，在消息被正式处理前需要加密验证，编码解码，网络连接管理通过worker线程池去做这些准备工作。再通过sendmessage线程池去发送消息。reactor主线程负责建立长连接reactor多线程并发监听消息请求达到。再通过worker多线程去处理消息，读写磁盘通过业务线程池处理，各个线程池执行时，不会影响其他线程池在其他环节处理请求。 reactor线程池采用aio多路复用\n\n\n\n## 消息丢失\n\n\n\n三种情况\n\n\n\n1. 生产者发送消息的时候，由于网络故障或者master broker宕机导致broker没有收到消息，可以通过重试机制和备忘录机制多次发送失败后进行消息补偿\n\n\n\n2. 消息到达mq,rocketmq丢消息,当使用异步刷盘时可能消息对于的commit log还在page cache中未刷新到磁盘此时broker的物理机宕机了重启导致page cache中数据丢失,如果选择了同步刷盘消息存储到磁盘后也可能存在丢失当磁盘故障时,此时我们可以通过冗余备份磁盘的方式保证尽量丢少的消息\n\n\n\n3. 消息保存到mq,消费者消费消息时未进行ack让mq以为消息消费成功了跳到了下一个offset此时通过ack机制来保证消息不丢失\n","source":"_posts/rocketmq.md","raw":"---\ntitle: rocketmq\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 3e7adddd\ndate: 2021-03-27 00:00:00\n---\n\n\n单机最多10万并发 阿里开发 \n\n\n\n<!-- more -->\n\n\n\n## 集群部署\n\n\n\n### 架构图\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5d27582a681480c9ed1870ba1d5c749~tplv-k3u1fbpfcp-watermark.image)\n\n### 原理\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f13fbb8e198e4adcba63578c2eb05122~tplv-k3u1fbpfcp-watermark.image)\n\n## 高可用\n\n\n\n主从架构及多副本策略\n\n\n\nBorker有主和副之分，master broker 主要负责写入\n\n\n\nmaster borker 收到消息之后会同步给slave broker ，保证一个机器宕机之后，另一个机器有数据\n\n\n\nslave broker固定时间会从master broker拉取数据，这就是所谓的主从同步\n\n\n\n每个broker启动都要向所有的nameserver进行注册。\n\n\n\n因为如果只是向个别nameserver进行注册的话，当一台nameserver宕机之后，就会丢失broker的信息\n\n\n\nnameserver和borker之间有个心跳机制，保证当broker宕机之后，nameserver会及时感知到\n\n\n\n> 每隔固定时间，broker会向nameserver发送心跳，nameserver会将这个最新心跳时间更新\n\n\n\nnameserver每隔固定时间来扫描所有broker的心跳时间，如果超过一个数据，将认为这个broker宕机\n\n\n\n心跳传输的时候，还会降\n\n\n\n#### 消息获取来源\n\n\n\n消息获取可能来自于master broker，也可能来自于slave broker\n\n\n\nbroker将消息返回给请求系统的时候，会向系统建议下一次消息请求要请求master broker或者slave broker，\n\n\n\n#### 重点\n\n\n\nrocketmq4.5之前不是完全的高可用模式，当master broker宕机之后，不会自动切换到slave broker，需要人手动修改\n\n\n\n4.5之后，采用一种Dledger的机制来支持master broker宕机之后自动切换到slaver broker\n\n\n\nDledger采用的是raft算法\n\n\n\n## 下载安装\n\n\n\n```java\n\n#下载rocketmq\n\nhttps://github.com/apache/rocketmq\n\n\n\n#下载dledger \n\nhttps://github.com/openmessaging/openmessaging-storage-dledger \n\n#可视化界面\n\nhttps://github.com/apache/rocketmq-externals \n\n```\n\n\n\n## 保证消息不丢失\n\n\n\n### 发送消息到mq零丢失\n\n\n\n1. 同步发送消息+反复多次重试\n\n\n\n2. rocketmq事务消息机制，这个整体效果会更好一点\n\n\n\n### mq收到消息之后零丢失\n\n\n\n开启同步刷盘+主从架构同步机制\n\n\n\n将数据写入磁盘后，并且将数据写入到slave broker的磁盘之后才返回给生产者，消息写入mq成功\n\n\n\n### 消费者收到消息之后零丢失\n\n\n\nrocketmq天然就保证了，因为rocketmq默认就是当消息处理之后才会返回给mq消息发送成功，而不是在执行消息处理逻辑之前就将成功的消息返回给mq了\n\n\n\n## 幂等性\n\n\n\n避免对同一\n\n\n\n1. 业务方法判断，当重试的时候，提前发送一条消息到mq中查询这个条消息是否已经发送过了，如果有则不再发送，没有则发送\n\n\n\n2. 状态查询 你写入到mq一条消息，将消息也写入到redis中，写入id和订单状态，当接口重复调用的时候，就去redis中年查询一下，根据id查询状态，成功则不再发送，失败则再次发送\n\n\n\nredis这种方案有缺陷，还有可能会重复消费\n\n\n\n就是你将消息发送到mq，没有来得及写redis，redis宕机了，重启之后会将重新发一次消息，这样就有两条消息了；所以一般来说推荐使用业务方法来进行判断\n\n\n\n## 重复消息\n\n\n\n会有专门的重试队列，最多重试16次，16次之后进入死信队列，死信队列的处理方式是自定义，看业务需求\n\n\n\n当业务由于某种原因故障不能消费消息时,可以返回reconsume_laster,将消息加入到延时消息consumerGroup中进行消息的重试最大15次阶梯型重试,15失败后放入到死信队列中消费者则专门开启线程进行消费\n\n\n\n## 消费者\n\n\n\n消费者消费消息的方式有两种，一种是push，broker主动向consumer不定时发送消息；一种是pull，consumer不定时从broker拉取消息\n\n\n\n### push\n\n\n\n本质上也是消费者不停向broker发送消息拉取数据\n\n\n\n消费者在处理完一批消息之后，会立马发送请求到broker拉取消息，看起来好像是broker不定时向消费者推送信息一样，其实是消费者不停向broker发送消息拉取数据\n\n\n\n当请求发送到broker的时候，发现没有消息可以消费，就会让这个请求线程挂起，默认挂起15秒，然后后台有一个线程不停地检查broker中是否有消息，有的话，会主动将请求线程唤醒，然后消费者拿到消息\n\n\n\n### pull\n\n\n\n### 保证消息不丢失\n\n\n\n消息如果发送到消费者了，但是可能消费者还没有真正消费消息，就宕机了，此时消息在系统缓存中，但是却返回给mq的消息是消费者消费消息成功了\n\n\n\n同步机制\n\n\n\n当消费者真正执行完消息的处理逻辑之后，再将成功的消息返回给mq\n\n\n\n不能用异步机制，因为异步机制可能导致消费者还没有消费好消息的时候，已经将成功的消息给mq了\n\n\n\n，如果此时消费者宕机了，那么返回给mq的消息就是假的，虽然返回的是储成功的消息，但是实际上并没有成功\n\n\n\n## 生产者\n\n\n\n### 同步发送消息\n\n\n\n发送消息给mq，等待mq返回结果，没有返回结果的话，就会卡在这里\n\n\n\n### 异步发送消息\n\n\n\n发送消息给mq，不等待mq返回结果，cpu去干别的事儿了，等到mq返回消息后，代码会继续执行下去\n\n\n\n### 单向发送消息\n\n\n\n发送消息给mq就可以了，不管mq是否返回信息\n\n\n\n### 保证消息发送成功\n\n\n\n- half消息对消费者不可见\n\n\n\n  一般一个消息到mq之后会写入对应的topic/messageque/consumerqueue中，但是rocketmq识别到消息为half消息后，会将消息写入rocketmq的内部topic中，所以消费者对于half来说是不可见的\n\n\n\n\n\n\n\n比如你买东西，已经付款到了订单系统，发了一次half发现mq没有返回消息，mq挂了，于是进行资金回退。\n\n\n\n如果本地事务失败了，会让订单系统给mq发送一个rollback，表示我这里失败了，无法接受你返回的消息\n\n\n\n如果rollback和commit失败了，由于mq里面的消息一直处于half状态，长时间没有回应之后就知道mq出现问题，这个时候需要判断下订单的状态是“已完成”吗 是的话，再次commit请求，不是的话，再次执行rollback请求，\n\n\n\n如何执行rollback\n\n\n\n将rollback记录写入到op_+topic,标记某个half消息是rollback的了\n\n\n\n假设一直没有执行rollback或者commit，mq最多会调用15次接口来判断half消息的状态，如果15次之后还是没有知道half消息的状态，就会自动将消息标记为rollback\n\n\n\n### half\n\n\n\n每次发送消息之前，就要发送half消息到mq，如果mq正常工作就会返回一个ok给生产者，生产者就可以发送真正的消息了，如果返回的不是ok，就表示mq有问题，此时就会进行消息回滚\n\n\n\n上面其实有三个步骤\n\n\n\n1. producer发half给mq\n\n\n\n2. mq给producer返回信息\n\n\n\n3. producer进行下一步处理\n\n\n\n上面三步其实都可能出现问题，那么如何保证不出现问题那，请继续往下看\n\n\n\n针对以上三个步骤进行下面三个回复\n\n\n\n1. 如果producer发送half消息失败，会调用一个本地线程来查看half消息在限定时间内有消息返回，如果没有则就按回滚处理\n\n\n\n2. 如果mq给producer返回信息失败，mq会调用一个本地线程来查看half消息在限定时间内有消息返回，如果没有则就按回滚处理\n\n\n\n3. \n\n\n\n如何确保half消息发送成功\n\n\n\n消息写入到RMQ_SYS_TRANS_HALF_TOPIC\n\n\n\n### 技巧\n\n\n\n可以将使用阿里的cannal的技术来同步mysql的binlog\n\n\n\n一个topic的数据放在多个messagequeue上，实现分布式存储\n\n\n\n## 持久化\n\n\n\n### broker\n\n\n\nbroker收到消息后会将所有消息顺序写入到磁盘中，叫做commitlog，会有一个参数来规定commitlog的最大容量，达到最大容量后会自动创建一个新的commitlog来进行写入\n\n\n\n磁盘顺序写+os cache写入+os异步刷盘\n\n\n\nbroker收到消息之后并不是直接写入磁盘的，是将消息写入到系统缓存中，然后系统缓存不定时将消息写入磁盘\n\n\n\n异步刷盘会有数据丢失的风险，比如将数据写入到系统缓存之后，系统突然宕机了，生产者以为将消息已经写入了，但是实际上并没有写入到磁盘中\n\n\n\n同步刷盘的意思就是每次必须将数据写入到磁盘中以后才叫做消息发送完成\n\n\n\n#### 优化\n\n\n\n文件预热\n\n\n\nmadvise系统调用，会尽可能能将数据从磁盘空间加载到内存中，减少数据从磁盘空间加载到内存的次数\n\n\n\n#### mmap\n\n\n\n普通的将数据存储在磁盘的过程如下\n\n\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e26fed33a45e4042a7398c58c0900fe0~tplv-k3u1fbpfcp-watermark.image)\n\n需要进行两次拷贝\n\n\n\nmmap只需要进行一次拷贝\n\n\n\n原因：就是把磁盘文件地址和线程私有空间做了一个映射，一旦写入到虚拟内存后，直接拷贝到磁盘空间中即可，不用二次拷贝了（即拷贝到线程私有空间，再拷贝到磁盘空间中）\n\n![](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0daa0696115344faa5326681596266c1~tplv-k3u1fbpfcp-watermark.image)\n\n### messagequeue\n\n\n\n一个topic下面有多个messagequeeu，一个messagequeeu下只有一个consumerqueue\n\n\n\nmessagequeue在broker的存储上是这样的\n\n\n\n会存储在相应topic/messagequeeu0/consumerqueue0\n\n\n\n每次broker收到消息之后，会将消息顺序写入磁盘，同时也会将这个消息的物理存储位置记录在topic/messagequeeu0/consumerqueue0中，这样方便消费者过来消费消息的时候，可以知道消息存放的位置\n\n\n\n## Dledger\n\n\n\n### what\n\n\n\n这个机制可以保证当leader broker失效的时候，可以自动切换到slave broker，\n\n\n\n### why\n\n\n\n采用的是raft算法，简单来讲就是 所有的broker每个人都会投票给自己，第一轮所有人都会投票给自己，然后进行随机休眠，比如broker1休眠2秒，broker2休眠3秒，broker3休眠4秒，从数据来看肯定是broker1先苏醒，他投票给自己，将自己的投票发给其他人，剩下两个发现别人已经投票过了，于是跟随投票，所以broker就被选举上了，成为了leader broker\n\n\n\n投票完成：机器数量/2+1，就表示大多数，就是说当有大多数人投票以后，不需要其他人发表意见，直接将大多人的意见作为最后的意见\n\n\n\nbroker投票机制\n\n\n\n1. 有人已经投票的话，会尊重他们的意见，跟随投票\n\n\n\n2. 会给自己投票\n\n\n\n上面的顺序也是优先级的顺序\n\n\n\n### 多副本同步\n\n\n\n分为两个阶段\n\n\n\n1. uncommitted阶段\n\n\n\n2. committed阶段\n\n\n\n#### uncommitted阶段\n\n\n\nleader broker收到数据后，会标记为uncommitted状态，然后通过他自己的dledger server组件把这个数据发送给slave broker的dledger server\n\n\n\n#### committed阶段\n\n\n\nslave broker的dledger server收到消息之后，会回复一个ack给leader broker的dledger server，当leader broker收到一半以上的slave broker之后，会将数据标记为committed的状态\n\n\n\n然后leader broker的slave broker将committed的状态发送给slave broker的dledger server消息同步完成\n\n\n\n## 网络通信架构模型\n\n![](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90cdb1095d54408f99941399d156c68e~tplv-k3u1fbpfcp-watermark.image)\n\nrocketmq的网络通信架构模型。首先生产者和服务端通过reactor主线程建立tcp长连接，客户端与服务端采用socketchannel进行通信，通过socketschannel发送消息，通过reactor线程池去监听socketchannel的消息到达。reactor线程池只负责把消息取出来，在消息被正式处理前需要加密验证，编码解码，网络连接管理通过worker线程池去做这些准备工作。再通过sendmessage线程池去发送消息。reactor主线程负责建立长连接reactor多线程并发监听消息请求达到。再通过worker多线程去处理消息，读写磁盘通过业务线程池处理，各个线程池执行时，不会影响其他线程池在其他环节处理请求。 reactor线程池采用aio多路复用\n\n\n\n## 消息丢失\n\n\n\n三种情况\n\n\n\n1. 生产者发送消息的时候，由于网络故障或者master broker宕机导致broker没有收到消息，可以通过重试机制和备忘录机制多次发送失败后进行消息补偿\n\n\n\n2. 消息到达mq,rocketmq丢消息,当使用异步刷盘时可能消息对于的commit log还在page cache中未刷新到磁盘此时broker的物理机宕机了重启导致page cache中数据丢失,如果选择了同步刷盘消息存储到磁盘后也可能存在丢失当磁盘故障时,此时我们可以通过冗余备份磁盘的方式保证尽量丢少的消息\n\n\n\n3. 消息保存到mq,消费者消费消息时未进行ack让mq以为消息消费成功了跳到了下一个offset此时通过ack机制来保证消息不丢失\n","slug":"rocketmq","published":1,"updated":"2025-03-02T03:37:34.405Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp4z003jn0ukegj3g6z4","content":"<p>单机最多10万并发 阿里开发 </p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"集群部署\"><a href=\"#集群部署\" class=\"headerlink\" title=\"集群部署\"></a>集群部署</h2><h3 id=\"架构图\"><a href=\"#架构图\" class=\"headerlink\" title=\"架构图\"></a>架构图</h3><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5d27582a681480c9ed1870ba1d5c749~tplv-k3u1fbpfcp-watermark.image\" loading=\"lazy\"></p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f13fbb8e198e4adcba63578c2eb05122~tplv-k3u1fbpfcp-watermark.image\" loading=\"lazy\"></p>\n<h2 id=\"高可用\"><a href=\"#高可用\" class=\"headerlink\" title=\"高可用\"></a>高可用</h2><p>主从架构及多副本策略</p>\n<p>Borker有主和副之分，master broker 主要负责写入</p>\n<p>master borker 收到消息之后会同步给slave broker ，保证一个机器宕机之后，另一个机器有数据</p>\n<p>slave broker固定时间会从master broker拉取数据，这就是所谓的主从同步</p>\n<p>每个broker启动都要向所有的nameserver进行注册。</p>\n<p>因为如果只是向个别nameserver进行注册的话，当一台nameserver宕机之后，就会丢失broker的信息</p>\n<p>nameserver和borker之间有个心跳机制，保证当broker宕机之后，nameserver会及时感知到</p>\n<blockquote>\n<p>每隔固定时间，broker会向nameserver发送心跳，nameserver会将这个最新心跳时间更新</p>\n</blockquote>\n<p>nameserver每隔固定时间来扫描所有broker的心跳时间，如果超过一个数据，将认为这个broker宕机</p>\n<p>心跳传输的时候，还会降</p>\n<h4 id=\"消息获取来源\"><a href=\"#消息获取来源\" class=\"headerlink\" title=\"消息获取来源\"></a>消息获取来源</h4><p>消息获取可能来自于master broker，也可能来自于slave broker</p>\n<p>broker将消息返回给请求系统的时候，会向系统建议下一次消息请求要请求master broker或者slave broker，</p>\n<h4 id=\"重点\"><a href=\"#重点\" class=\"headerlink\" title=\"重点\"></a>重点</h4><p>rocketmq4.5之前不是完全的高可用模式，当master broker宕机之后，不会自动切换到slave broker，需要人手动修改</p>\n<p>4.5之后，采用一种Dledger的机制来支持master broker宕机之后自动切换到slaver broker</p>\n<p>Dledger采用的是raft算法</p>\n<h2 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#下载rocketmq</span><br><span class=\"line\"></span><br><span class=\"line\">https:<span class=\"comment\">//github.com/apache/rocketmq</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#下载dledger </span><br><span class=\"line\"></span><br><span class=\"line\">https:<span class=\"comment\">//github.com/openmessaging/openmessaging-storage-dledger </span></span><br><span class=\"line\"></span><br><span class=\"line\">#可视化界面</span><br><span class=\"line\"></span><br><span class=\"line\">https:<span class=\"comment\">//github.com/apache/rocketmq-externals </span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"保证消息不丢失\"><a href=\"#保证消息不丢失\" class=\"headerlink\" title=\"保证消息不丢失\"></a>保证消息不丢失</h2><h3 id=\"发送消息到mq零丢失\"><a href=\"#发送消息到mq零丢失\" class=\"headerlink\" title=\"发送消息到mq零丢失\"></a>发送消息到mq零丢失</h3><ol>\n<li><p>同步发送消息+反复多次重试</p>\n</li>\n<li><p>rocketmq事务消息机制，这个整体效果会更好一点</p>\n</li>\n</ol>\n<h3 id=\"mq收到消息之后零丢失\"><a href=\"#mq收到消息之后零丢失\" class=\"headerlink\" title=\"mq收到消息之后零丢失\"></a>mq收到消息之后零丢失</h3><p>开启同步刷盘+主从架构同步机制</p>\n<p>将数据写入磁盘后，并且将数据写入到slave broker的磁盘之后才返回给生产者，消息写入mq成功</p>\n<h3 id=\"消费者收到消息之后零丢失\"><a href=\"#消费者收到消息之后零丢失\" class=\"headerlink\" title=\"消费者收到消息之后零丢失\"></a>消费者收到消息之后零丢失</h3><p>rocketmq天然就保证了，因为rocketmq默认就是当消息处理之后才会返回给mq消息发送成功，而不是在执行消息处理逻辑之前就将成功的消息返回给mq了</p>\n<h2 id=\"幂等性\"><a href=\"#幂等性\" class=\"headerlink\" title=\"幂等性\"></a>幂等性</h2><p>避免对同一</p>\n<ol>\n<li><p>业务方法判断，当重试的时候，提前发送一条消息到mq中查询这个条消息是否已经发送过了，如果有则不再发送，没有则发送</p>\n</li>\n<li><p>状态查询 你写入到mq一条消息，将消息也写入到redis中，写入id和订单状态，当接口重复调用的时候，就去redis中年查询一下，根据id查询状态，成功则不再发送，失败则再次发送</p>\n</li>\n</ol>\n<p>redis这种方案有缺陷，还有可能会重复消费</p>\n<p>就是你将消息发送到mq，没有来得及写redis，redis宕机了，重启之后会将重新发一次消息，这样就有两条消息了；所以一般来说推荐使用业务方法来进行判断</p>\n<h2 id=\"重复消息\"><a href=\"#重复消息\" class=\"headerlink\" title=\"重复消息\"></a>重复消息</h2><p>会有专门的重试队列，最多重试16次，16次之后进入死信队列，死信队列的处理方式是自定义，看业务需求</p>\n<p>当业务由于某种原因故障不能消费消息时,可以返回reconsume_laster,将消息加入到延时消息consumerGroup中进行消息的重试最大15次阶梯型重试,15失败后放入到死信队列中消费者则专门开启线程进行消费</p>\n<h2 id=\"消费者\"><a href=\"#消费者\" class=\"headerlink\" title=\"消费者\"></a>消费者</h2><p>消费者消费消息的方式有两种，一种是push，broker主动向consumer不定时发送消息；一种是pull，consumer不定时从broker拉取消息</p>\n<h3 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push\"></a>push</h3><p>本质上也是消费者不停向broker发送消息拉取数据</p>\n<p>消费者在处理完一批消息之后，会立马发送请求到broker拉取消息，看起来好像是broker不定时向消费者推送信息一样，其实是消费者不停向broker发送消息拉取数据</p>\n<p>当请求发送到broker的时候，发现没有消息可以消费，就会让这个请求线程挂起，默认挂起15秒，然后后台有一个线程不停地检查broker中是否有消息，有的话，会主动将请求线程唤醒，然后消费者拿到消息</p>\n<h3 id=\"pull\"><a href=\"#pull\" class=\"headerlink\" title=\"pull\"></a>pull</h3><h3 id=\"保证消息不丢失-1\"><a href=\"#保证消息不丢失-1\" class=\"headerlink\" title=\"保证消息不丢失\"></a>保证消息不丢失</h3><p>消息如果发送到消费者了，但是可能消费者还没有真正消费消息，就宕机了，此时消息在系统缓存中，但是却返回给mq的消息是消费者消费消息成功了</p>\n<p>同步机制</p>\n<p>当消费者真正执行完消息的处理逻辑之后，再将成功的消息返回给mq</p>\n<p>不能用异步机制，因为异步机制可能导致消费者还没有消费好消息的时候，已经将成功的消息给mq了</p>\n<p>，如果此时消费者宕机了，那么返回给mq的消息就是假的，虽然返回的是储成功的消息，但是实际上并没有成功</p>\n<h2 id=\"生产者\"><a href=\"#生产者\" class=\"headerlink\" title=\"生产者\"></a>生产者</h2><h3 id=\"同步发送消息\"><a href=\"#同步发送消息\" class=\"headerlink\" title=\"同步发送消息\"></a>同步发送消息</h3><p>发送消息给mq，等待mq返回结果，没有返回结果的话，就会卡在这里</p>\n<h3 id=\"异步发送消息\"><a href=\"#异步发送消息\" class=\"headerlink\" title=\"异步发送消息\"></a>异步发送消息</h3><p>发送消息给mq，不等待mq返回结果，cpu去干别的事儿了，等到mq返回消息后，代码会继续执行下去</p>\n<h3 id=\"单向发送消息\"><a href=\"#单向发送消息\" class=\"headerlink\" title=\"单向发送消息\"></a>单向发送消息</h3><p>发送消息给mq就可以了，不管mq是否返回信息</p>\n<h3 id=\"保证消息发送成功\"><a href=\"#保证消息发送成功\" class=\"headerlink\" title=\"保证消息发送成功\"></a>保证消息发送成功</h3><ul>\n<li><p>half消息对消费者不可见</p>\n<p>一般一个消息到mq之后会写入对应的topic&#x2F;messageque&#x2F;consumerqueue中，但是rocketmq识别到消息为half消息后，会将消息写入rocketmq的内部topic中，所以消费者对于half来说是不可见的</p>\n</li>\n</ul>\n<p>比如你买东西，已经付款到了订单系统，发了一次half发现mq没有返回消息，mq挂了，于是进行资金回退。</p>\n<p>如果本地事务失败了，会让订单系统给mq发送一个rollback，表示我这里失败了，无法接受你返回的消息</p>\n<p>如果rollback和commit失败了，由于mq里面的消息一直处于half状态，长时间没有回应之后就知道mq出现问题，这个时候需要判断下订单的状态是“已完成”吗 是的话，再次commit请求，不是的话，再次执行rollback请求，</p>\n<p>如何执行rollback</p>\n<p>将rollback记录写入到op_+topic,标记某个half消息是rollback的了</p>\n<p>假设一直没有执行rollback或者commit，mq最多会调用15次接口来判断half消息的状态，如果15次之后还是没有知道half消息的状态，就会自动将消息标记为rollback</p>\n<h3 id=\"half\"><a href=\"#half\" class=\"headerlink\" title=\"half\"></a>half</h3><p>每次发送消息之前，就要发送half消息到mq，如果mq正常工作就会返回一个ok给生产者，生产者就可以发送真正的消息了，如果返回的不是ok，就表示mq有问题，此时就会进行消息回滚</p>\n<p>上面其实有三个步骤</p>\n<ol>\n<li><p>producer发half给mq</p>\n</li>\n<li><p>mq给producer返回信息</p>\n</li>\n<li><p>producer进行下一步处理</p>\n</li>\n</ol>\n<p>上面三步其实都可能出现问题，那么如何保证不出现问题那，请继续往下看</p>\n<p>针对以上三个步骤进行下面三个回复</p>\n<ol>\n<li><p>如果producer发送half消息失败，会调用一个本地线程来查看half消息在限定时间内有消息返回，如果没有则就按回滚处理</p>\n</li>\n<li><p>如果mq给producer返回信息失败，mq会调用一个本地线程来查看half消息在限定时间内有消息返回，如果没有则就按回滚处理</p>\n</li>\n<li></li>\n</ol>\n<p>如何确保half消息发送成功</p>\n<p>消息写入到RMQ_SYS_TRANS_HALF_TOPIC</p>\n<h3 id=\"技巧\"><a href=\"#技巧\" class=\"headerlink\" title=\"技巧\"></a>技巧</h3><p>可以将使用阿里的cannal的技术来同步mysql的binlog</p>\n<p>一个topic的数据放在多个messagequeue上，实现分布式存储</p>\n<h2 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h2><h3 id=\"broker\"><a href=\"#broker\" class=\"headerlink\" title=\"broker\"></a>broker</h3><p>broker收到消息后会将所有消息顺序写入到磁盘中，叫做commitlog，会有一个参数来规定commitlog的最大容量，达到最大容量后会自动创建一个新的commitlog来进行写入</p>\n<p>磁盘顺序写+os cache写入+os异步刷盘</p>\n<p>broker收到消息之后并不是直接写入磁盘的，是将消息写入到系统缓存中，然后系统缓存不定时将消息写入磁盘</p>\n<p>异步刷盘会有数据丢失的风险，比如将数据写入到系统缓存之后，系统突然宕机了，生产者以为将消息已经写入了，但是实际上并没有写入到磁盘中</p>\n<p>同步刷盘的意思就是每次必须将数据写入到磁盘中以后才叫做消息发送完成</p>\n<h4 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h4><p>文件预热</p>\n<p>madvise系统调用，会尽可能能将数据从磁盘空间加载到内存中，减少数据从磁盘空间加载到内存的次数</p>\n<h4 id=\"mmap\"><a href=\"#mmap\" class=\"headerlink\" title=\"mmap\"></a>mmap</h4><p>普通的将数据存储在磁盘的过程如下</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e26fed33a45e4042a7398c58c0900fe0~tplv-k3u1fbpfcp-watermark.image\" loading=\"lazy\"></p>\n<p>需要进行两次拷贝</p>\n<p>mmap只需要进行一次拷贝</p>\n<p>原因：就是把磁盘文件地址和线程私有空间做了一个映射，一旦写入到虚拟内存后，直接拷贝到磁盘空间中即可，不用二次拷贝了（即拷贝到线程私有空间，再拷贝到磁盘空间中）</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0daa0696115344faa5326681596266c1~tplv-k3u1fbpfcp-watermark.image\" loading=\"lazy\"></p>\n<h3 id=\"messagequeue\"><a href=\"#messagequeue\" class=\"headerlink\" title=\"messagequeue\"></a>messagequeue</h3><p>一个topic下面有多个messagequeeu，一个messagequeeu下只有一个consumerqueue</p>\n<p>messagequeue在broker的存储上是这样的</p>\n<p>会存储在相应topic&#x2F;messagequeeu0&#x2F;consumerqueue0</p>\n<p>每次broker收到消息之后，会将消息顺序写入磁盘，同时也会将这个消息的物理存储位置记录在topic&#x2F;messagequeeu0&#x2F;consumerqueue0中，这样方便消费者过来消费消息的时候，可以知道消息存放的位置</p>\n<h2 id=\"Dledger\"><a href=\"#Dledger\" class=\"headerlink\" title=\"Dledger\"></a>Dledger</h2><h3 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h3><p>这个机制可以保证当leader broker失效的时候，可以自动切换到slave broker，</p>\n<h3 id=\"why\"><a href=\"#why\" class=\"headerlink\" title=\"why\"></a>why</h3><p>采用的是raft算法，简单来讲就是 所有的broker每个人都会投票给自己，第一轮所有人都会投票给自己，然后进行随机休眠，比如broker1休眠2秒，broker2休眠3秒，broker3休眠4秒，从数据来看肯定是broker1先苏醒，他投票给自己，将自己的投票发给其他人，剩下两个发现别人已经投票过了，于是跟随投票，所以broker就被选举上了，成为了leader broker</p>\n<p>投票完成：机器数量&#x2F;2+1，就表示大多数，就是说当有大多数人投票以后，不需要其他人发表意见，直接将大多人的意见作为最后的意见</p>\n<p>broker投票机制</p>\n<ol>\n<li><p>有人已经投票的话，会尊重他们的意见，跟随投票</p>\n</li>\n<li><p>会给自己投票</p>\n</li>\n</ol>\n<p>上面的顺序也是优先级的顺序</p>\n<h3 id=\"多副本同步\"><a href=\"#多副本同步\" class=\"headerlink\" title=\"多副本同步\"></a>多副本同步</h3><p>分为两个阶段</p>\n<ol>\n<li><p>uncommitted阶段</p>\n</li>\n<li><p>committed阶段</p>\n</li>\n</ol>\n<h4 id=\"uncommitted阶段\"><a href=\"#uncommitted阶段\" class=\"headerlink\" title=\"uncommitted阶段\"></a>uncommitted阶段</h4><p>leader broker收到数据后，会标记为uncommitted状态，然后通过他自己的dledger server组件把这个数据发送给slave broker的dledger server</p>\n<h4 id=\"committed阶段\"><a href=\"#committed阶段\" class=\"headerlink\" title=\"committed阶段\"></a>committed阶段</h4><p>slave broker的dledger server收到消息之后，会回复一个ack给leader broker的dledger server，当leader broker收到一半以上的slave broker之后，会将数据标记为committed的状态</p>\n<p>然后leader broker的slave broker将committed的状态发送给slave broker的dledger server消息同步完成</p>\n<h2 id=\"网络通信架构模型\"><a href=\"#网络通信架构模型\" class=\"headerlink\" title=\"网络通信架构模型\"></a>网络通信架构模型</h2><p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90cdb1095d54408f99941399d156c68e~tplv-k3u1fbpfcp-watermark.image\" loading=\"lazy\"></p>\n<p>rocketmq的网络通信架构模型。首先生产者和服务端通过reactor主线程建立tcp长连接，客户端与服务端采用socketchannel进行通信，通过socketschannel发送消息，通过reactor线程池去监听socketchannel的消息到达。reactor线程池只负责把消息取出来，在消息被正式处理前需要加密验证，编码解码，网络连接管理通过worker线程池去做这些准备工作。再通过sendmessage线程池去发送消息。reactor主线程负责建立长连接reactor多线程并发监听消息请求达到。再通过worker多线程去处理消息，读写磁盘通过业务线程池处理，各个线程池执行时，不会影响其他线程池在其他环节处理请求。 reactor线程池采用aio多路复用</p>\n<h2 id=\"消息丢失\"><a href=\"#消息丢失\" class=\"headerlink\" title=\"消息丢失\"></a>消息丢失</h2><p>三种情况</p>\n<ol>\n<li><p>生产者发送消息的时候，由于网络故障或者master broker宕机导致broker没有收到消息，可以通过重试机制和备忘录机制多次发送失败后进行消息补偿</p>\n</li>\n<li><p>消息到达mq,rocketmq丢消息,当使用异步刷盘时可能消息对于的commit log还在page cache中未刷新到磁盘此时broker的物理机宕机了重启导致page cache中数据丢失,如果选择了同步刷盘消息存储到磁盘后也可能存在丢失当磁盘故障时,此时我们可以通过冗余备份磁盘的方式保证尽量丢少的消息</p>\n</li>\n<li><p>消息保存到mq,消费者消费消息时未进行ack让mq以为消息消费成功了跳到了下一个offset此时通过ack机制来保证消息不丢失</p>\n</li>\n</ol>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"单机最多10万并发 阿里开发 \n\n集群部署\n架构图\n\n\n原理\n\n\n高可用\n主从架构及多副本策略\n\nBorker有主和副之分，master broker 主要负责写入\n\nmaster borker 收到消息之后会同步给slave broker ，保证一个机器宕机之后，另一个机器有数据\n\nslave broker固定时间会从master broker拉取数据，这就是所谓的主从同步\n\n每个broker启动都要向所有的nameserver进行注册。\n\n因为如果只是向个别nameserver进行注册的话，当一台nameserver宕机之后，就会丢失broker的信息\n\nnameserver和borker","more":"<h2 id=\"集群部署\"><a href=\"#集群部署\" class=\"headerlink\" title=\"集群部署\"></a>集群部署</h2><h3 id=\"架构图\"><a href=\"#架构图\" class=\"headerlink\" title=\"架构图\"></a>架构图</h3><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5d27582a681480c9ed1870ba1d5c749~tplv-k3u1fbpfcp-watermark.image\" loading=\"lazy\"></p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f13fbb8e198e4adcba63578c2eb05122~tplv-k3u1fbpfcp-watermark.image\" loading=\"lazy\"></p>\n<h2 id=\"高可用\"><a href=\"#高可用\" class=\"headerlink\" title=\"高可用\"></a>高可用</h2><p>主从架构及多副本策略</p>\n<p>Borker有主和副之分，master broker 主要负责写入</p>\n<p>master borker 收到消息之后会同步给slave broker ，保证一个机器宕机之后，另一个机器有数据</p>\n<p>slave broker固定时间会从master broker拉取数据，这就是所谓的主从同步</p>\n<p>每个broker启动都要向所有的nameserver进行注册。</p>\n<p>因为如果只是向个别nameserver进行注册的话，当一台nameserver宕机之后，就会丢失broker的信息</p>\n<p>nameserver和borker之间有个心跳机制，保证当broker宕机之后，nameserver会及时感知到</p>\n<blockquote>\n<p>每隔固定时间，broker会向nameserver发送心跳，nameserver会将这个最新心跳时间更新</p>\n</blockquote>\n<p>nameserver每隔固定时间来扫描所有broker的心跳时间，如果超过一个数据，将认为这个broker宕机</p>\n<p>心跳传输的时候，还会降</p>\n<h4 id=\"消息获取来源\"><a href=\"#消息获取来源\" class=\"headerlink\" title=\"消息获取来源\"></a>消息获取来源</h4><p>消息获取可能来自于master broker，也可能来自于slave broker</p>\n<p>broker将消息返回给请求系统的时候，会向系统建议下一次消息请求要请求master broker或者slave broker，</p>\n<h4 id=\"重点\"><a href=\"#重点\" class=\"headerlink\" title=\"重点\"></a>重点</h4><p>rocketmq4.5之前不是完全的高可用模式，当master broker宕机之后，不会自动切换到slave broker，需要人手动修改</p>\n<p>4.5之后，采用一种Dledger的机制来支持master broker宕机之后自动切换到slaver broker</p>\n<p>Dledger采用的是raft算法</p>\n<h2 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#下载rocketmq</span><br><span class=\"line\"></span><br><span class=\"line\">https:<span class=\"comment\">//github.com/apache/rocketmq</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#下载dledger </span><br><span class=\"line\"></span><br><span class=\"line\">https:<span class=\"comment\">//github.com/openmessaging/openmessaging-storage-dledger </span></span><br><span class=\"line\"></span><br><span class=\"line\">#可视化界面</span><br><span class=\"line\"></span><br><span class=\"line\">https:<span class=\"comment\">//github.com/apache/rocketmq-externals </span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"保证消息不丢失\"><a href=\"#保证消息不丢失\" class=\"headerlink\" title=\"保证消息不丢失\"></a>保证消息不丢失</h2><h3 id=\"发送消息到mq零丢失\"><a href=\"#发送消息到mq零丢失\" class=\"headerlink\" title=\"发送消息到mq零丢失\"></a>发送消息到mq零丢失</h3><ol>\n<li><p>同步发送消息+反复多次重试</p>\n</li>\n<li><p>rocketmq事务消息机制，这个整体效果会更好一点</p>\n</li>\n</ol>\n<h3 id=\"mq收到消息之后零丢失\"><a href=\"#mq收到消息之后零丢失\" class=\"headerlink\" title=\"mq收到消息之后零丢失\"></a>mq收到消息之后零丢失</h3><p>开启同步刷盘+主从架构同步机制</p>\n<p>将数据写入磁盘后，并且将数据写入到slave broker的磁盘之后才返回给生产者，消息写入mq成功</p>\n<h3 id=\"消费者收到消息之后零丢失\"><a href=\"#消费者收到消息之后零丢失\" class=\"headerlink\" title=\"消费者收到消息之后零丢失\"></a>消费者收到消息之后零丢失</h3><p>rocketmq天然就保证了，因为rocketmq默认就是当消息处理之后才会返回给mq消息发送成功，而不是在执行消息处理逻辑之前就将成功的消息返回给mq了</p>\n<h2 id=\"幂等性\"><a href=\"#幂等性\" class=\"headerlink\" title=\"幂等性\"></a>幂等性</h2><p>避免对同一</p>\n<ol>\n<li><p>业务方法判断，当重试的时候，提前发送一条消息到mq中查询这个条消息是否已经发送过了，如果有则不再发送，没有则发送</p>\n</li>\n<li><p>状态查询 你写入到mq一条消息，将消息也写入到redis中，写入id和订单状态，当接口重复调用的时候，就去redis中年查询一下，根据id查询状态，成功则不再发送，失败则再次发送</p>\n</li>\n</ol>\n<p>redis这种方案有缺陷，还有可能会重复消费</p>\n<p>就是你将消息发送到mq，没有来得及写redis，redis宕机了，重启之后会将重新发一次消息，这样就有两条消息了；所以一般来说推荐使用业务方法来进行判断</p>\n<h2 id=\"重复消息\"><a href=\"#重复消息\" class=\"headerlink\" title=\"重复消息\"></a>重复消息</h2><p>会有专门的重试队列，最多重试16次，16次之后进入死信队列，死信队列的处理方式是自定义，看业务需求</p>\n<p>当业务由于某种原因故障不能消费消息时,可以返回reconsume_laster,将消息加入到延时消息consumerGroup中进行消息的重试最大15次阶梯型重试,15失败后放入到死信队列中消费者则专门开启线程进行消费</p>\n<h2 id=\"消费者\"><a href=\"#消费者\" class=\"headerlink\" title=\"消费者\"></a>消费者</h2><p>消费者消费消息的方式有两种，一种是push，broker主动向consumer不定时发送消息；一种是pull，consumer不定时从broker拉取消息</p>\n<h3 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push\"></a>push</h3><p>本质上也是消费者不停向broker发送消息拉取数据</p>\n<p>消费者在处理完一批消息之后，会立马发送请求到broker拉取消息，看起来好像是broker不定时向消费者推送信息一样，其实是消费者不停向broker发送消息拉取数据</p>\n<p>当请求发送到broker的时候，发现没有消息可以消费，就会让这个请求线程挂起，默认挂起15秒，然后后台有一个线程不停地检查broker中是否有消息，有的话，会主动将请求线程唤醒，然后消费者拿到消息</p>\n<h3 id=\"pull\"><a href=\"#pull\" class=\"headerlink\" title=\"pull\"></a>pull</h3><h3 id=\"保证消息不丢失-1\"><a href=\"#保证消息不丢失-1\" class=\"headerlink\" title=\"保证消息不丢失\"></a>保证消息不丢失</h3><p>消息如果发送到消费者了，但是可能消费者还没有真正消费消息，就宕机了，此时消息在系统缓存中，但是却返回给mq的消息是消费者消费消息成功了</p>\n<p>同步机制</p>\n<p>当消费者真正执行完消息的处理逻辑之后，再将成功的消息返回给mq</p>\n<p>不能用异步机制，因为异步机制可能导致消费者还没有消费好消息的时候，已经将成功的消息给mq了</p>\n<p>，如果此时消费者宕机了，那么返回给mq的消息就是假的，虽然返回的是储成功的消息，但是实际上并没有成功</p>\n<h2 id=\"生产者\"><a href=\"#生产者\" class=\"headerlink\" title=\"生产者\"></a>生产者</h2><h3 id=\"同步发送消息\"><a href=\"#同步发送消息\" class=\"headerlink\" title=\"同步发送消息\"></a>同步发送消息</h3><p>发送消息给mq，等待mq返回结果，没有返回结果的话，就会卡在这里</p>\n<h3 id=\"异步发送消息\"><a href=\"#异步发送消息\" class=\"headerlink\" title=\"异步发送消息\"></a>异步发送消息</h3><p>发送消息给mq，不等待mq返回结果，cpu去干别的事儿了，等到mq返回消息后，代码会继续执行下去</p>\n<h3 id=\"单向发送消息\"><a href=\"#单向发送消息\" class=\"headerlink\" title=\"单向发送消息\"></a>单向发送消息</h3><p>发送消息给mq就可以了，不管mq是否返回信息</p>\n<h3 id=\"保证消息发送成功\"><a href=\"#保证消息发送成功\" class=\"headerlink\" title=\"保证消息发送成功\"></a>保证消息发送成功</h3><ul>\n<li><p>half消息对消费者不可见</p>\n<p>一般一个消息到mq之后会写入对应的topic&#x2F;messageque&#x2F;consumerqueue中，但是rocketmq识别到消息为half消息后，会将消息写入rocketmq的内部topic中，所以消费者对于half来说是不可见的</p>\n</li>\n</ul>\n<p>比如你买东西，已经付款到了订单系统，发了一次half发现mq没有返回消息，mq挂了，于是进行资金回退。</p>\n<p>如果本地事务失败了，会让订单系统给mq发送一个rollback，表示我这里失败了，无法接受你返回的消息</p>\n<p>如果rollback和commit失败了，由于mq里面的消息一直处于half状态，长时间没有回应之后就知道mq出现问题，这个时候需要判断下订单的状态是“已完成”吗 是的话，再次commit请求，不是的话，再次执行rollback请求，</p>\n<p>如何执行rollback</p>\n<p>将rollback记录写入到op_+topic,标记某个half消息是rollback的了</p>\n<p>假设一直没有执行rollback或者commit，mq最多会调用15次接口来判断half消息的状态，如果15次之后还是没有知道half消息的状态，就会自动将消息标记为rollback</p>\n<h3 id=\"half\"><a href=\"#half\" class=\"headerlink\" title=\"half\"></a>half</h3><p>每次发送消息之前，就要发送half消息到mq，如果mq正常工作就会返回一个ok给生产者，生产者就可以发送真正的消息了，如果返回的不是ok，就表示mq有问题，此时就会进行消息回滚</p>\n<p>上面其实有三个步骤</p>\n<ol>\n<li><p>producer发half给mq</p>\n</li>\n<li><p>mq给producer返回信息</p>\n</li>\n<li><p>producer进行下一步处理</p>\n</li>\n</ol>\n<p>上面三步其实都可能出现问题，那么如何保证不出现问题那，请继续往下看</p>\n<p>针对以上三个步骤进行下面三个回复</p>\n<ol>\n<li><p>如果producer发送half消息失败，会调用一个本地线程来查看half消息在限定时间内有消息返回，如果没有则就按回滚处理</p>\n</li>\n<li><p>如果mq给producer返回信息失败，mq会调用一个本地线程来查看half消息在限定时间内有消息返回，如果没有则就按回滚处理</p>\n</li>\n<li></li>\n</ol>\n<p>如何确保half消息发送成功</p>\n<p>消息写入到RMQ_SYS_TRANS_HALF_TOPIC</p>\n<h3 id=\"技巧\"><a href=\"#技巧\" class=\"headerlink\" title=\"技巧\"></a>技巧</h3><p>可以将使用阿里的cannal的技术来同步mysql的binlog</p>\n<p>一个topic的数据放在多个messagequeue上，实现分布式存储</p>\n<h2 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h2><h3 id=\"broker\"><a href=\"#broker\" class=\"headerlink\" title=\"broker\"></a>broker</h3><p>broker收到消息后会将所有消息顺序写入到磁盘中，叫做commitlog，会有一个参数来规定commitlog的最大容量，达到最大容量后会自动创建一个新的commitlog来进行写入</p>\n<p>磁盘顺序写+os cache写入+os异步刷盘</p>\n<p>broker收到消息之后并不是直接写入磁盘的，是将消息写入到系统缓存中，然后系统缓存不定时将消息写入磁盘</p>\n<p>异步刷盘会有数据丢失的风险，比如将数据写入到系统缓存之后，系统突然宕机了，生产者以为将消息已经写入了，但是实际上并没有写入到磁盘中</p>\n<p>同步刷盘的意思就是每次必须将数据写入到磁盘中以后才叫做消息发送完成</p>\n<h4 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h4><p>文件预热</p>\n<p>madvise系统调用，会尽可能能将数据从磁盘空间加载到内存中，减少数据从磁盘空间加载到内存的次数</p>\n<h4 id=\"mmap\"><a href=\"#mmap\" class=\"headerlink\" title=\"mmap\"></a>mmap</h4><p>普通的将数据存储在磁盘的过程如下</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e26fed33a45e4042a7398c58c0900fe0~tplv-k3u1fbpfcp-watermark.image\" loading=\"lazy\"></p>\n<p>需要进行两次拷贝</p>\n<p>mmap只需要进行一次拷贝</p>\n<p>原因：就是把磁盘文件地址和线程私有空间做了一个映射，一旦写入到虚拟内存后，直接拷贝到磁盘空间中即可，不用二次拷贝了（即拷贝到线程私有空间，再拷贝到磁盘空间中）</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0daa0696115344faa5326681596266c1~tplv-k3u1fbpfcp-watermark.image\" loading=\"lazy\"></p>\n<h3 id=\"messagequeue\"><a href=\"#messagequeue\" class=\"headerlink\" title=\"messagequeue\"></a>messagequeue</h3><p>一个topic下面有多个messagequeeu，一个messagequeeu下只有一个consumerqueue</p>\n<p>messagequeue在broker的存储上是这样的</p>\n<p>会存储在相应topic&#x2F;messagequeeu0&#x2F;consumerqueue0</p>\n<p>每次broker收到消息之后，会将消息顺序写入磁盘，同时也会将这个消息的物理存储位置记录在topic&#x2F;messagequeeu0&#x2F;consumerqueue0中，这样方便消费者过来消费消息的时候，可以知道消息存放的位置</p>\n<h2 id=\"Dledger\"><a href=\"#Dledger\" class=\"headerlink\" title=\"Dledger\"></a>Dledger</h2><h3 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h3><p>这个机制可以保证当leader broker失效的时候，可以自动切换到slave broker，</p>\n<h3 id=\"why\"><a href=\"#why\" class=\"headerlink\" title=\"why\"></a>why</h3><p>采用的是raft算法，简单来讲就是 所有的broker每个人都会投票给自己，第一轮所有人都会投票给自己，然后进行随机休眠，比如broker1休眠2秒，broker2休眠3秒，broker3休眠4秒，从数据来看肯定是broker1先苏醒，他投票给自己，将自己的投票发给其他人，剩下两个发现别人已经投票过了，于是跟随投票，所以broker就被选举上了，成为了leader broker</p>\n<p>投票完成：机器数量&#x2F;2+1，就表示大多数，就是说当有大多数人投票以后，不需要其他人发表意见，直接将大多人的意见作为最后的意见</p>\n<p>broker投票机制</p>\n<ol>\n<li><p>有人已经投票的话，会尊重他们的意见，跟随投票</p>\n</li>\n<li><p>会给自己投票</p>\n</li>\n</ol>\n<p>上面的顺序也是优先级的顺序</p>\n<h3 id=\"多副本同步\"><a href=\"#多副本同步\" class=\"headerlink\" title=\"多副本同步\"></a>多副本同步</h3><p>分为两个阶段</p>\n<ol>\n<li><p>uncommitted阶段</p>\n</li>\n<li><p>committed阶段</p>\n</li>\n</ol>\n<h4 id=\"uncommitted阶段\"><a href=\"#uncommitted阶段\" class=\"headerlink\" title=\"uncommitted阶段\"></a>uncommitted阶段</h4><p>leader broker收到数据后，会标记为uncommitted状态，然后通过他自己的dledger server组件把这个数据发送给slave broker的dledger server</p>\n<h4 id=\"committed阶段\"><a href=\"#committed阶段\" class=\"headerlink\" title=\"committed阶段\"></a>committed阶段</h4><p>slave broker的dledger server收到消息之后，会回复一个ack给leader broker的dledger server，当leader broker收到一半以上的slave broker之后，会将数据标记为committed的状态</p>\n<p>然后leader broker的slave broker将committed的状态发送给slave broker的dledger server消息同步完成</p>\n<h2 id=\"网络通信架构模型\"><a href=\"#网络通信架构模型\" class=\"headerlink\" title=\"网络通信架构模型\"></a>网络通信架构模型</h2><p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90cdb1095d54408f99941399d156c68e~tplv-k3u1fbpfcp-watermark.image\" loading=\"lazy\"></p>\n<p>rocketmq的网络通信架构模型。首先生产者和服务端通过reactor主线程建立tcp长连接，客户端与服务端采用socketchannel进行通信，通过socketschannel发送消息，通过reactor线程池去监听socketchannel的消息到达。reactor线程池只负责把消息取出来，在消息被正式处理前需要加密验证，编码解码，网络连接管理通过worker线程池去做这些准备工作。再通过sendmessage线程池去发送消息。reactor主线程负责建立长连接reactor多线程并发监听消息请求达到。再通过worker多线程去处理消息，读写磁盘通过业务线程池处理，各个线程池执行时，不会影响其他线程池在其他环节处理请求。 reactor线程池采用aio多路复用</p>\n<h2 id=\"消息丢失\"><a href=\"#消息丢失\" class=\"headerlink\" title=\"消息丢失\"></a>消息丢失</h2><p>三种情况</p>\n<ol>\n<li><p>生产者发送消息的时候，由于网络故障或者master broker宕机导致broker没有收到消息，可以通过重试机制和备忘录机制多次发送失败后进行消息补偿</p>\n</li>\n<li><p>消息到达mq,rocketmq丢消息,当使用异步刷盘时可能消息对于的commit log还在page cache中未刷新到磁盘此时broker的物理机宕机了重启导致page cache中数据丢失,如果选择了同步刷盘消息存储到磁盘后也可能存在丢失当磁盘故障时,此时我们可以通过冗余备份磁盘的方式保证尽量丢少的消息</p>\n</li>\n<li><p>消息保存到mq,消费者消费消息时未进行ack让mq以为消息消费成功了跳到了下一个offset此时通过ack机制来保证消息不丢失</p>\n</li>\n</ol>"},{"title":"spring事务","description":"","abbrlink":"7d41eccf","date":"2021-04-22T16:00:00.000Z","_content":"\n\n了解spring事务机制\n\n\n\n<!-- more -->\n\n\n\n# what\n\n\n\n简单来讲，就是操作要么一起成功，要么一起失败；主要的目的是为了保证数据的一致性\n\n\n\n## 事务传播机制\n\n\n\n|               |                                                              |\n\n| ------------- | ------------------------------------------------------------ |\n\n| required      | 如果当前没有事务，就自动创建一个新的事务，如果当前存在事务，就加入该事务 |\n\n| supports      | 支持当前事务，如果当前存在事务，就加入该事务，如果没有，就以非事务的方式来执行 |\n\n| mandatory     | 如果当前有事务执行事务，如果没有事务会报异常                 |\n\n| request_new   | 无论当前有没有事务都要创建一个新的事务                       |\n\n| not_supported | 以非事务的方式执行，如果存在事务，将该事务挂                 |\n\n| never         | 以非事务的方式执行，如果存在事务，就抛出异常                 |\n\n| nested        | 如果当前存在事务，会嵌套在事务内部执行（如果外层事务回滚，会导致内存层事务回滚，如果内层事务回滚，只会回滚自己的事务），相当于加入已经存在的事务当中，如果当前没有事务，则按required属性执行 |\n\n\n\n# how\n\n\n\n日常使用最多的应该就是@transactional 注解\n\n\n\n# 注意\n\n\n\n有一个使用！@transcational失效的情况\n\n\n\n[失效情况链接](https://mp.weixin.qq.com/s/4t_DWw-xQzeZBe139-OO6g)","source":"_posts/spring事务.md","raw":"---\ntitle: spring事务\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 7d41eccf\ndate: 2021-04-23 00:00:00\n---\n\n\n了解spring事务机制\n\n\n\n<!-- more -->\n\n\n\n# what\n\n\n\n简单来讲，就是操作要么一起成功，要么一起失败；主要的目的是为了保证数据的一致性\n\n\n\n## 事务传播机制\n\n\n\n|               |                                                              |\n\n| ------------- | ------------------------------------------------------------ |\n\n| required      | 如果当前没有事务，就自动创建一个新的事务，如果当前存在事务，就加入该事务 |\n\n| supports      | 支持当前事务，如果当前存在事务，就加入该事务，如果没有，就以非事务的方式来执行 |\n\n| mandatory     | 如果当前有事务执行事务，如果没有事务会报异常                 |\n\n| request_new   | 无论当前有没有事务都要创建一个新的事务                       |\n\n| not_supported | 以非事务的方式执行，如果存在事务，将该事务挂                 |\n\n| never         | 以非事务的方式执行，如果存在事务，就抛出异常                 |\n\n| nested        | 如果当前存在事务，会嵌套在事务内部执行（如果外层事务回滚，会导致内存层事务回滚，如果内层事务回滚，只会回滚自己的事务），相当于加入已经存在的事务当中，如果当前没有事务，则按required属性执行 |\n\n\n\n# how\n\n\n\n日常使用最多的应该就是@transactional 注解\n\n\n\n# 注意\n\n\n\n有一个使用！@transcational失效的情况\n\n\n\n[失效情况链接](https://mp.weixin.qq.com/s/4t_DWw-xQzeZBe139-OO6g)","slug":"spring事务","published":1,"updated":"2025-03-02T03:37:34.406Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp50003ln0uk6hpne5yr","content":"<p>了解spring事务机制</p>\n<span id=\"more\"></span>\n\n\n\n<h1 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h1><p>简单来讲，就是操作要么一起成功，要么一起失败；主要的目的是为了保证数据的一致性</p>\n<h2 id=\"事务传播机制\"><a href=\"#事务传播机制\" class=\"headerlink\" title=\"事务传播机制\"></a>事务传播机制</h2><p>|               |                                                              |</p>\n<p>| ------------- | ------------------------------------------------------------ |</p>\n<p>| required      | 如果当前没有事务，就自动创建一个新的事务，如果当前存在事务，就加入该事务 |</p>\n<p>| supports      | 支持当前事务，如果当前存在事务，就加入该事务，如果没有，就以非事务的方式来执行 |</p>\n<p>| mandatory     | 如果当前有事务执行事务，如果没有事务会报异常                 |</p>\n<p>| request_new   | 无论当前有没有事务都要创建一个新的事务                       |</p>\n<p>| not_supported | 以非事务的方式执行，如果存在事务，将该事务挂                 |</p>\n<p>| never         | 以非事务的方式执行，如果存在事务，就抛出异常                 |</p>\n<p>| nested        | 如果当前存在事务，会嵌套在事务内部执行（如果外层事务回滚，会导致内存层事务回滚，如果内层事务回滚，只会回滚自己的事务），相当于加入已经存在的事务当中，如果当前没有事务，则按required属性执行 |</p>\n<h1 id=\"how\"><a href=\"#how\" class=\"headerlink\" title=\"how\"></a>how</h1><p>日常使用最多的应该就是@transactional 注解</p>\n<h1 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h1><p>有一个使用！@transcational失效的情况</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvNHRfRFd3LXhRemVaQmUxMzktT082Zw==\">失效情况链接<i class=\"fa fa-external-link-alt\"></i></span></p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"了解spring事务机制\n\nwhat\n简单来讲，就是操作要么一起成功，要么一起失败；主要的目的是为了保证数据的一致性\n\n事务传播机制\n| | |\n\n| ------------- | ------------------------------------------------------------ |\n\n| required | 如果当前没有事务，就自动创建一个新的事务，如果当前存在事务，就加入该事务 |\n\n| supports | 支持当前事务，如果当前存在事务，就加入该事务，如果没有，就以非事务的方式来执行 |\n\n| mandatory | 如果当前有事务执行事务，如果没有事务会报异","more":"<h1 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h1><p>简单来讲，就是操作要么一起成功，要么一起失败；主要的目的是为了保证数据的一致性</p>\n<h2 id=\"事务传播机制\"><a href=\"#事务传播机制\" class=\"headerlink\" title=\"事务传播机制\"></a>事务传播机制</h2><p>|               |                                                              |</p>\n<p>| ------------- | ------------------------------------------------------------ |</p>\n<p>| required      | 如果当前没有事务，就自动创建一个新的事务，如果当前存在事务，就加入该事务 |</p>\n<p>| supports      | 支持当前事务，如果当前存在事务，就加入该事务，如果没有，就以非事务的方式来执行 |</p>\n<p>| mandatory     | 如果当前有事务执行事务，如果没有事务会报异常                 |</p>\n<p>| request_new   | 无论当前有没有事务都要创建一个新的事务                       |</p>\n<p>| not_supported | 以非事务的方式执行，如果存在事务，将该事务挂                 |</p>\n<p>| never         | 以非事务的方式执行，如果存在事务，就抛出异常                 |</p>\n<p>| nested        | 如果当前存在事务，会嵌套在事务内部执行（如果外层事务回滚，会导致内存层事务回滚，如果内层事务回滚，只会回滚自己的事务），相当于加入已经存在的事务当中，如果当前没有事务，则按required属性执行 |</p>\n<h1 id=\"how\"><a href=\"#how\" class=\"headerlink\" title=\"how\"></a>how</h1><p>日常使用最多的应该就是@transactional 注解</p>\n<h1 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h1><p>有一个使用！@transcational失效的情况</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvNHRfRFd3LXhRemVaQmUxMzktT082Zw==\">失效情况链接<i class=\"fa fa-external-link-alt\"></i></span></p>"},{"title":"Spring之AOP","description":"","abbrlink":"809659da","date":"2021-05-05T16:00:00.000Z","_content":"\n\n文章摘要\n\n\n\n<!-- more -->\n\n\n\n## 目的\n\n\n\nAOP能够将那些与业务无关，**却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来**，便于**减少系统的重复代码**，**降低模块间的耦合度**，并**有利于未来的可拓展性和可维护性**。\n\n\n\n## 概念\n\n\n\n- `切面(Aspect)`： Aspect 声明类似于 Java 中的类声明，事务管理是AOP一个最典型的应用。在AOP中，切面一般使用 `@Aspect` 注解来使用，在XML 中，可以使用 **`<aop:aspect>`** 来定义一个切面。\n\n- `连接点(Join Point)`: 一个在程序执行期间的某一个操作，就像是执行一个方法或者处理一个异常。在Spring AOP中，一个连接点就代表了一个方法的执行。\n\n- `通知(Advice):`在切面中(类)的某个连接点(方法出)采取的动作，会有四种不同的通知方式： **around(环绕通知)，before(前置通知)，after(后置通知)， exception(异常通知)，return(返回通知)**。许多AOP框架（包括Spring）将建议把通知作为为拦截器，并在连接点周围维护一系列拦截器。\n\n- `切入点(Pointcut):`表示一组连接点，通知与切入点表达式有关，并在切入点匹配的任何连接点处运行(例如执行具有特定名称的方法)。**由切入点表达式匹配的连接点的概念是AOP的核心，Spring默认使用AspectJ切入点表达式语言。**\n\n- `介绍(Introduction):` introduction可以为原有的对象增加新的属性和方法。例如，你可以使用introduction使bean实现IsModified接口，以简化缓存。\n\n- `目标对象(Target Object):` 由一个或者多个切面代理的对象。也被称为\"切面对象\"。由于Spring AOP是使用运行时代理实现的，因此该对象始终是代理对象。\n\n- `AOP代理(AOP proxy):` 由AOP框架创建的对象，在Spring框架中，AOP代理对象有两种：**JDK动态代理和CGLIB代理**\n\n- `织入(Weaving):` 是指把增强应用到目标对象来创建新的代理对象的过程，它(例如 AspectJ 编译器)可以在编译时期，加载时期或者运行时期完成。与其他纯Java AOP框架一样，Spring AOP在运行时进行织入。\n\n\n\n## 通知分类\n\n\n\n- 前置通知(Before Advice): 在目标方法被调用前调用通知功能；相关的类`org.springframework.aop.MethodBeforeAdvice`\n\n- 后置通知(After Advice): 在目标方法被调用之后调用通知功能；相关的类`org.springframework.aop.AfterReturningAdvice`\n\n- 返回通知(After-returning): 在目标方法成功执行之后调用通知功能；\n\n- 异常通知(After-throwing): 在目标方法抛出异常之后调用通知功能；相关的类`org.springframework.aop.ThrowsAdvice`\n\n- 环绕通知(Around): 把整个目标方法包裹起来，在**被调用前和调用之后分别调用通知功能**相关的类`org.aopalliance.intercept.MethodInterceptor`\n\n\n\n### 时期\n\n\n\n- `编译期:` 切面在目标类编译时被织入，这种方式需要特殊的编译器。**AspectJ 的织入编译器就是以这种方式织入切面的。**\n\n- `类加载期:` 切面在目标类加载到 JVM 时被织入，这种方式需要特殊的类加载器( ClassLoader )，它可以在目标类引入应用之前增强目标类的字节码。\n\n- `运行期:` 切面在应用运行的某个时期被织入。一般情况下，在织入切面时，AOP容器会为目标对象动态创建一个代理对象，**Spring AOP 采用的就是这种织入方式。**\n\n\n\n## 代理分类\n\n\n\n静态织入(AspectJ 实现)和动态代理(Spring AOP实现)\n\n\n\n### AspectJ\n\n\n\nApectJ 主要采用的是编译期静态织入的方式。在这个期间使用 AspectJ 的 acj 编译器(类似 javac)把 aspect 类编译成 class 字节码后，在 java 目标类编译时织入，即先编译 aspect 类再编译目标类。\n\n\n\n![image-20210506212300731](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210506212300731.png)\n\n\n\n#### 不足\n\n\n\n- **如果接口改了，代理的也要跟着改，很烦！**\n\n- **因为代理对象，需要与目标对象实现一样的接口。所以会有很多代理类，类太多。**\n\n\n\n### 动态代理\n\n\n\n![image-20210506212806324](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210506212806324.png)\n\n\n\n- JDK动态代理：Spring AOP的首选方法。 每当目标对象实现一个接口时，就会使用JDK动态代理。**目标对象必须实现接口**\n\n- CGLIB代理：如果目标对象没有实现接口，则可以使用CGLIB代理。\n\n\n\n#### 原理\n\n\n\n代理主要是使用JDK中的proxy类中的newProxyInstance方法来使用的\n\n\n\nnewProxyInstance方法的三个参数\n\n\n\n- 参数一：生成代理对象使用哪个类装载器【一般我们使用的是代理类的装载器】\n\n- 参数二：生成哪个对象的代理对象，通过接口指定【指定要代理类的接口】\n\n- 参数三：生成的代理对象的方法里干什么事【实现handler接口，我们想怎么实现就怎么实现】\n\n\n\n#### JDK动态代理\n\n\n\n\n\n\n\n#### CGLIB代理\n\n\n\n##### 代码示例\n\n\n\n###### 注解\n\n\n\naop实现\n\n\n\n```java\n\npackage cn.shiyujun.test;\n\n\n\nimport org.aspectj.lang.ProceedingJoinPoint;\n\nimport org.aspectj.lang.annotation.*;\n\nimport org.springframework.stereotype.Component;\n\n\n\n//将这个类注入到Spring容器中\n\n@Component\n\n//使用aOP\n\n@Aspect\n\npublic class broker {\n\n    \n\n    @Before(\"execution(* cn.shiyujun.test.test01.service())\")\n\n    public void before(){\n\n        System.out.println(\"带租客看房\");\n\n        System.out.println(\"谈价格\");\n\n    }\n\n\n\n    @After(\"execution(* cn.shiyujun.test.test01.service())\")\n\n    public void after(){\n\n        System.out.println(\"交钥匙\");\n\n    }\n\n\n\n    @Around(\"execution(* cn.shiyujun.test.test01.service())\")\n\n    public void sayAround(ProceedingJoinPoint pjp) throws Throwable {\n\n        System.out.println(\"注解类型环绕通知..环绕前\");\n\n        pjp.proceed();//执行方法\n\n        System.out.println(\"注解类型环绕通知..环绕后\");\n\n    }\n\n}\n\n```\n\n\n\n接口\n\n\n\n```java\n\npackage cn.shiyujun.test;\n\n\n\npublic interface hexin {\n\n    void service();\n\n}\n\n```\n\n\n\n接口实现类\n\n\n\n```java\n\npackage cn.shiyujun.test;\n\n\n\nimport org.springframework.stereotype.Component;\n\n\n\n//spring中bean的名字\n\n@Component(\"helloAOP\")\n\npublic class test01 implements hexin {\n\n\n\n    @Override\n\n    public void service() {\n\n        // 仅仅只是实现了核心的业务功能\n\n        System.out.println(\"签合同\");\n\n        System.out.println(\"收房租\");\n\n    }\n\n}\n\n```\n\n\n\nxml\n\n\n\n```xml\n\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n\n       http://www.springframework.org/schema/aop\n\n       http://www.springframework.org/schema/aop/spring-aop.xsd\n\n       http://www.springframework.org/schema/context\n\n       http://www.springframework.org/schema/context/spring-context-4.3.xsd\">\n\n\n\n\n\n\n\n    <!-- 开启注解扫描 -->\n\n    <context:component-scan base-package=\"cn.shiyujun.aop_cglib\"/>\n\n    <!-- 开启aop注解方式，此步骤s不能少，这样java类中的aop注解才会生效 -->\n\n    <aop:aspectj-autoproxy/>\n\n    <!-- 强制使用cglib代理，如果不设置，将默认使用jdk的代理，但是jdk的代理是基于接口的 -->\n\n    <aop:aspectj-autoproxy proxy-target-class=\"true\"/>\n\n\n\n</beans>\n\n```\n\n\n\nmain类\n\n\n\n```java\n\npackage cn.shiyujun.test;\n\n\n\nimport org.springframework.context.ApplicationContext;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\n\n\npublic class main {\n\n    public static void main(String[] args) {\n\n\n\n\n\n        //这个是application容器，所以就会去所有的已经加载的xml文件里面去找，包括jar包里面的xml文件\n\n        ApplicationContext context=new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\n        //通过ApplicationContext.getBean(beanName)动态加载数据（类）【获取Spring容器中已初始化的bean】。\n\n        test01 helloWorld=(test01) context.getBean(\"helloAOP\");\n\n\n\n        //执行动态加载到的类的方法\n\n        helloWorld.service();\n\n    }\n\n}\n\n```\n\n\n\n运行结果\n\n\n\n![image-20210508064751966](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210508064751966.png)\n\n\n\n###### xml\n\n\n","source":"_posts/spring之AOP.md","raw":"---\ntitle: Spring之AOP\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 809659da\ndate: 2021-05-06 00:00:00\n---\n\n\n文章摘要\n\n\n\n<!-- more -->\n\n\n\n## 目的\n\n\n\nAOP能够将那些与业务无关，**却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来**，便于**减少系统的重复代码**，**降低模块间的耦合度**，并**有利于未来的可拓展性和可维护性**。\n\n\n\n## 概念\n\n\n\n- `切面(Aspect)`： Aspect 声明类似于 Java 中的类声明，事务管理是AOP一个最典型的应用。在AOP中，切面一般使用 `@Aspect` 注解来使用，在XML 中，可以使用 **`<aop:aspect>`** 来定义一个切面。\n\n- `连接点(Join Point)`: 一个在程序执行期间的某一个操作，就像是执行一个方法或者处理一个异常。在Spring AOP中，一个连接点就代表了一个方法的执行。\n\n- `通知(Advice):`在切面中(类)的某个连接点(方法出)采取的动作，会有四种不同的通知方式： **around(环绕通知)，before(前置通知)，after(后置通知)， exception(异常通知)，return(返回通知)**。许多AOP框架（包括Spring）将建议把通知作为为拦截器，并在连接点周围维护一系列拦截器。\n\n- `切入点(Pointcut):`表示一组连接点，通知与切入点表达式有关，并在切入点匹配的任何连接点处运行(例如执行具有特定名称的方法)。**由切入点表达式匹配的连接点的概念是AOP的核心，Spring默认使用AspectJ切入点表达式语言。**\n\n- `介绍(Introduction):` introduction可以为原有的对象增加新的属性和方法。例如，你可以使用introduction使bean实现IsModified接口，以简化缓存。\n\n- `目标对象(Target Object):` 由一个或者多个切面代理的对象。也被称为\"切面对象\"。由于Spring AOP是使用运行时代理实现的，因此该对象始终是代理对象。\n\n- `AOP代理(AOP proxy):` 由AOP框架创建的对象，在Spring框架中，AOP代理对象有两种：**JDK动态代理和CGLIB代理**\n\n- `织入(Weaving):` 是指把增强应用到目标对象来创建新的代理对象的过程，它(例如 AspectJ 编译器)可以在编译时期，加载时期或者运行时期完成。与其他纯Java AOP框架一样，Spring AOP在运行时进行织入。\n\n\n\n## 通知分类\n\n\n\n- 前置通知(Before Advice): 在目标方法被调用前调用通知功能；相关的类`org.springframework.aop.MethodBeforeAdvice`\n\n- 后置通知(After Advice): 在目标方法被调用之后调用通知功能；相关的类`org.springframework.aop.AfterReturningAdvice`\n\n- 返回通知(After-returning): 在目标方法成功执行之后调用通知功能；\n\n- 异常通知(After-throwing): 在目标方法抛出异常之后调用通知功能；相关的类`org.springframework.aop.ThrowsAdvice`\n\n- 环绕通知(Around): 把整个目标方法包裹起来，在**被调用前和调用之后分别调用通知功能**相关的类`org.aopalliance.intercept.MethodInterceptor`\n\n\n\n### 时期\n\n\n\n- `编译期:` 切面在目标类编译时被织入，这种方式需要特殊的编译器。**AspectJ 的织入编译器就是以这种方式织入切面的。**\n\n- `类加载期:` 切面在目标类加载到 JVM 时被织入，这种方式需要特殊的类加载器( ClassLoader )，它可以在目标类引入应用之前增强目标类的字节码。\n\n- `运行期:` 切面在应用运行的某个时期被织入。一般情况下，在织入切面时，AOP容器会为目标对象动态创建一个代理对象，**Spring AOP 采用的就是这种织入方式。**\n\n\n\n## 代理分类\n\n\n\n静态织入(AspectJ 实现)和动态代理(Spring AOP实现)\n\n\n\n### AspectJ\n\n\n\nApectJ 主要采用的是编译期静态织入的方式。在这个期间使用 AspectJ 的 acj 编译器(类似 javac)把 aspect 类编译成 class 字节码后，在 java 目标类编译时织入，即先编译 aspect 类再编译目标类。\n\n\n\n![image-20210506212300731](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210506212300731.png)\n\n\n\n#### 不足\n\n\n\n- **如果接口改了，代理的也要跟着改，很烦！**\n\n- **因为代理对象，需要与目标对象实现一样的接口。所以会有很多代理类，类太多。**\n\n\n\n### 动态代理\n\n\n\n![image-20210506212806324](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210506212806324.png)\n\n\n\n- JDK动态代理：Spring AOP的首选方法。 每当目标对象实现一个接口时，就会使用JDK动态代理。**目标对象必须实现接口**\n\n- CGLIB代理：如果目标对象没有实现接口，则可以使用CGLIB代理。\n\n\n\n#### 原理\n\n\n\n代理主要是使用JDK中的proxy类中的newProxyInstance方法来使用的\n\n\n\nnewProxyInstance方法的三个参数\n\n\n\n- 参数一：生成代理对象使用哪个类装载器【一般我们使用的是代理类的装载器】\n\n- 参数二：生成哪个对象的代理对象，通过接口指定【指定要代理类的接口】\n\n- 参数三：生成的代理对象的方法里干什么事【实现handler接口，我们想怎么实现就怎么实现】\n\n\n\n#### JDK动态代理\n\n\n\n\n\n\n\n#### CGLIB代理\n\n\n\n##### 代码示例\n\n\n\n###### 注解\n\n\n\naop实现\n\n\n\n```java\n\npackage cn.shiyujun.test;\n\n\n\nimport org.aspectj.lang.ProceedingJoinPoint;\n\nimport org.aspectj.lang.annotation.*;\n\nimport org.springframework.stereotype.Component;\n\n\n\n//将这个类注入到Spring容器中\n\n@Component\n\n//使用aOP\n\n@Aspect\n\npublic class broker {\n\n    \n\n    @Before(\"execution(* cn.shiyujun.test.test01.service())\")\n\n    public void before(){\n\n        System.out.println(\"带租客看房\");\n\n        System.out.println(\"谈价格\");\n\n    }\n\n\n\n    @After(\"execution(* cn.shiyujun.test.test01.service())\")\n\n    public void after(){\n\n        System.out.println(\"交钥匙\");\n\n    }\n\n\n\n    @Around(\"execution(* cn.shiyujun.test.test01.service())\")\n\n    public void sayAround(ProceedingJoinPoint pjp) throws Throwable {\n\n        System.out.println(\"注解类型环绕通知..环绕前\");\n\n        pjp.proceed();//执行方法\n\n        System.out.println(\"注解类型环绕通知..环绕后\");\n\n    }\n\n}\n\n```\n\n\n\n接口\n\n\n\n```java\n\npackage cn.shiyujun.test;\n\n\n\npublic interface hexin {\n\n    void service();\n\n}\n\n```\n\n\n\n接口实现类\n\n\n\n```java\n\npackage cn.shiyujun.test;\n\n\n\nimport org.springframework.stereotype.Component;\n\n\n\n//spring中bean的名字\n\n@Component(\"helloAOP\")\n\npublic class test01 implements hexin {\n\n\n\n    @Override\n\n    public void service() {\n\n        // 仅仅只是实现了核心的业务功能\n\n        System.out.println(\"签合同\");\n\n        System.out.println(\"收房租\");\n\n    }\n\n}\n\n```\n\n\n\nxml\n\n\n\n```xml\n\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n\n       http://www.springframework.org/schema/aop\n\n       http://www.springframework.org/schema/aop/spring-aop.xsd\n\n       http://www.springframework.org/schema/context\n\n       http://www.springframework.org/schema/context/spring-context-4.3.xsd\">\n\n\n\n\n\n\n\n    <!-- 开启注解扫描 -->\n\n    <context:component-scan base-package=\"cn.shiyujun.aop_cglib\"/>\n\n    <!-- 开启aop注解方式，此步骤s不能少，这样java类中的aop注解才会生效 -->\n\n    <aop:aspectj-autoproxy/>\n\n    <!-- 强制使用cglib代理，如果不设置，将默认使用jdk的代理，但是jdk的代理是基于接口的 -->\n\n    <aop:aspectj-autoproxy proxy-target-class=\"true\"/>\n\n\n\n</beans>\n\n```\n\n\n\nmain类\n\n\n\n```java\n\npackage cn.shiyujun.test;\n\n\n\nimport org.springframework.context.ApplicationContext;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\n\n\npublic class main {\n\n    public static void main(String[] args) {\n\n\n\n\n\n        //这个是application容器，所以就会去所有的已经加载的xml文件里面去找，包括jar包里面的xml文件\n\n        ApplicationContext context=new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\n        //通过ApplicationContext.getBean(beanName)动态加载数据（类）【获取Spring容器中已初始化的bean】。\n\n        test01 helloWorld=(test01) context.getBean(\"helloAOP\");\n\n\n\n        //执行动态加载到的类的方法\n\n        helloWorld.service();\n\n    }\n\n}\n\n```\n\n\n\n运行结果\n\n\n\n![image-20210508064751966](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210508064751966.png)\n\n\n\n###### xml\n\n\n","slug":"spring之AOP","published":1,"updated":"2025-03-02T03:37:34.406Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp50003nn0ukhf7m7dvi","content":"<p>文章摘要</p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>AOP能够将那些与业务无关，<strong>却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来</strong>，便于<strong>减少系统的重复代码</strong>，<strong>降低模块间的耦合度</strong>，并<strong>有利于未来的可拓展性和可维护性</strong>。</p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><ul>\n<li><p><code>切面(Aspect)</code>： Aspect 声明类似于 Java 中的类声明，事务管理是AOP一个最典型的应用。在AOP中，切面一般使用 <code>@Aspect</code> 注解来使用，在XML 中，可以使用 <strong><code>&lt;aop:aspect&gt;</code></strong> 来定义一个切面。</p>\n</li>\n<li><p><code>连接点(Join Point)</code>: 一个在程序执行期间的某一个操作，就像是执行一个方法或者处理一个异常。在Spring AOP中，一个连接点就代表了一个方法的执行。</p>\n</li>\n<li><p><code>通知(Advice):</code>在切面中(类)的某个连接点(方法出)采取的动作，会有四种不同的通知方式： **around(环绕通知)，before(前置通知)，after(后置通知)， exception(异常通知)，return(返回通知)**。许多AOP框架（包括Spring）将建议把通知作为为拦截器，并在连接点周围维护一系列拦截器。</p>\n</li>\n<li><p><code>切入点(Pointcut):</code>表示一组连接点，通知与切入点表达式有关，并在切入点匹配的任何连接点处运行(例如执行具有特定名称的方法)。<strong>由切入点表达式匹配的连接点的概念是AOP的核心，Spring默认使用AspectJ切入点表达式语言。</strong></p>\n</li>\n<li><p><code>介绍(Introduction):</code> introduction可以为原有的对象增加新的属性和方法。例如，你可以使用introduction使bean实现IsModified接口，以简化缓存。</p>\n</li>\n<li><p><code>目标对象(Target Object):</code> 由一个或者多个切面代理的对象。也被称为&quot;切面对象&quot;。由于Spring AOP是使用运行时代理实现的，因此该对象始终是代理对象。</p>\n</li>\n<li><p><code>AOP代理(AOP proxy):</code> 由AOP框架创建的对象，在Spring框架中，AOP代理对象有两种：<strong>JDK动态代理和CGLIB代理</strong></p>\n</li>\n<li><p><code>织入(Weaving):</code> 是指把增强应用到目标对象来创建新的代理对象的过程，它(例如 AspectJ 编译器)可以在编译时期，加载时期或者运行时期完成。与其他纯Java AOP框架一样，Spring AOP在运行时进行织入。</p>\n</li>\n</ul>\n<h2 id=\"通知分类\"><a href=\"#通知分类\" class=\"headerlink\" title=\"通知分类\"></a>通知分类</h2><ul>\n<li><p>前置通知(Before Advice): 在目标方法被调用前调用通知功能；相关的类<code>org.springframework.aop.MethodBeforeAdvice</code></p>\n</li>\n<li><p>后置通知(After Advice): 在目标方法被调用之后调用通知功能；相关的类<code>org.springframework.aop.AfterReturningAdvice</code></p>\n</li>\n<li><p>返回通知(After-returning): 在目标方法成功执行之后调用通知功能；</p>\n</li>\n<li><p>异常通知(After-throwing): 在目标方法抛出异常之后调用通知功能；相关的类<code>org.springframework.aop.ThrowsAdvice</code></p>\n</li>\n<li><p>环绕通知(Around): 把整个目标方法包裹起来，在<strong>被调用前和调用之后分别调用通知功能</strong>相关的类<code>org.aopalliance.intercept.MethodInterceptor</code></p>\n</li>\n</ul>\n<h3 id=\"时期\"><a href=\"#时期\" class=\"headerlink\" title=\"时期\"></a>时期</h3><ul>\n<li><p><code>编译期:</code> 切面在目标类编译时被织入，这种方式需要特殊的编译器。<strong>AspectJ 的织入编译器就是以这种方式织入切面的。</strong></p>\n</li>\n<li><p><code>类加载期:</code> 切面在目标类加载到 JVM 时被织入，这种方式需要特殊的类加载器( ClassLoader )，它可以在目标类引入应用之前增强目标类的字节码。</p>\n</li>\n<li><p><code>运行期:</code> 切面在应用运行的某个时期被织入。一般情况下，在织入切面时，AOP容器会为目标对象动态创建一个代理对象，<strong>Spring AOP 采用的就是这种织入方式。</strong></p>\n</li>\n</ul>\n<h2 id=\"代理分类\"><a href=\"#代理分类\" class=\"headerlink\" title=\"代理分类\"></a>代理分类</h2><p>静态织入(AspectJ 实现)和动态代理(Spring AOP实现)</p>\n<h3 id=\"AspectJ\"><a href=\"#AspectJ\" class=\"headerlink\" title=\"AspectJ\"></a>AspectJ</h3><p>ApectJ 主要采用的是编译期静态织入的方式。在这个期间使用 AspectJ 的 acj 编译器(类似 javac)把 aspect 类编译成 class 字节码后，在 java 目标类编译时织入，即先编译 aspect 类再编译目标类。</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210506212300731.png\" alt=\"image-20210506212300731\" loading=\"lazy\"></p>\n<h4 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h4><ul>\n<li><p><strong>如果接口改了，代理的也要跟着改，很烦！</strong></p>\n</li>\n<li><p><strong>因为代理对象，需要与目标对象实现一样的接口。所以会有很多代理类，类太多。</strong></p>\n</li>\n</ul>\n<h3 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h3><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210506212806324.png\" alt=\"image-20210506212806324\" loading=\"lazy\"></p>\n<ul>\n<li><p>JDK动态代理：Spring AOP的首选方法。 每当目标对象实现一个接口时，就会使用JDK动态代理。<strong>目标对象必须实现接口</strong></p>\n</li>\n<li><p>CGLIB代理：如果目标对象没有实现接口，则可以使用CGLIB代理。</p>\n</li>\n</ul>\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>代理主要是使用JDK中的proxy类中的newProxyInstance方法来使用的</p>\n<p>newProxyInstance方法的三个参数</p>\n<ul>\n<li><p>参数一：生成代理对象使用哪个类装载器【一般我们使用的是代理类的装载器】</p>\n</li>\n<li><p>参数二：生成哪个对象的代理对象，通过接口指定【指定要代理类的接口】</p>\n</li>\n<li><p>参数三：生成的代理对象的方法里干什么事【实现handler接口，我们想怎么实现就怎么实现】</p>\n</li>\n</ul>\n<h4 id=\"JDK动态代理\"><a href=\"#JDK动态代理\" class=\"headerlink\" title=\"JDK动态代理\"></a>JDK动态代理</h4><h4 id=\"CGLIB代理\"><a href=\"#CGLIB代理\" class=\"headerlink\" title=\"CGLIB代理\"></a>CGLIB代理</h4><h5 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h5><h6 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h6><p>aop实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> cn.shiyujun.test;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将这个类注入到Spring容器中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用aOP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">broker</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;execution(* cn.shiyujun.test.test01.service())&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;带租客看房&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;谈价格&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@After(&quot;execution(* cn.shiyujun.test.test01.service())&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">after</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;交钥匙&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;execution(* cn.shiyujun.test.test01.service())&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sayAround</span><span class=\"params\">(ProceedingJoinPoint pjp)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;注解类型环绕通知..环绕前&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        pjp.proceed();<span class=\"comment\">//执行方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;注解类型环绕通知..环绕后&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> cn.shiyujun.test;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">hexin</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">service</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>接口实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> cn.shiyujun.test;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//spring中bean的名字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component(&quot;helloAOP&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test01</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">hexin</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">service</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 仅仅只是实现了核心的业务功能</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;签合同&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;收房租&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       http://www.springframework.org/schema/aop</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       http://www.springframework.org/schema/context/spring-context-4.3.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 开启注解扫描 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;cn.shiyujun.aop_cglib&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 开启aop注解方式，此步骤s不能少，这样java类中的aop注解才会生效 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 强制使用cglib代理，如果不设置，将默认使用jdk的代理，但是jdk的代理是基于接口的 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span> <span class=\"attr\">proxy-target-class</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>main类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> cn.shiyujun.test;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">main</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//这个是application容器，所以就会去所有的已经加载的xml文件里面去找，包括jar包里面的xml文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        ApplicationContext context=<span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;applicationContext.xml&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通过ApplicationContext.getBean(beanName)动态加载数据（类）【获取Spring容器中已初始化的bean】。</span></span><br><span class=\"line\"></span><br><span class=\"line\">        test01 helloWorld=(test01) context.getBean(<span class=\"string\">&quot;helloAOP&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//执行动态加载到的类的方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">        helloWorld.service();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>运行结果</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210508064751966.png\" alt=\"image-20210508064751966\" loading=\"lazy\"></p>\n<h6 id=\"xml\"><a href=\"#xml\" class=\"headerlink\" title=\"xml\"></a>xml</h6>","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"文章摘要\n\n目的\nAOP能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。\n\n概念\n * 切面(Aspect)： Aspect 声明类似于 Java 中的类声明，事务管理是AOP一个最典型的应用。在AOP中，切面一般使用 @Aspect 注解来使用，在XML 中，可以使用 <aop:aspect> 来定义一个切面。\n   \n   \n * 连接点(Join Point): 一个在程序执行期间的某一个操作，就像是执行一个方法或者处理一个异常。在Spring AOP中，","more":"<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>AOP能够将那些与业务无关，<strong>却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来</strong>，便于<strong>减少系统的重复代码</strong>，<strong>降低模块间的耦合度</strong>，并<strong>有利于未来的可拓展性和可维护性</strong>。</p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><ul>\n<li><p><code>切面(Aspect)</code>： Aspect 声明类似于 Java 中的类声明，事务管理是AOP一个最典型的应用。在AOP中，切面一般使用 <code>@Aspect</code> 注解来使用，在XML 中，可以使用 <strong><code>&lt;aop:aspect&gt;</code></strong> 来定义一个切面。</p>\n</li>\n<li><p><code>连接点(Join Point)</code>: 一个在程序执行期间的某一个操作，就像是执行一个方法或者处理一个异常。在Spring AOP中，一个连接点就代表了一个方法的执行。</p>\n</li>\n<li><p><code>通知(Advice):</code>在切面中(类)的某个连接点(方法出)采取的动作，会有四种不同的通知方式： **around(环绕通知)，before(前置通知)，after(后置通知)， exception(异常通知)，return(返回通知)**。许多AOP框架（包括Spring）将建议把通知作为为拦截器，并在连接点周围维护一系列拦截器。</p>\n</li>\n<li><p><code>切入点(Pointcut):</code>表示一组连接点，通知与切入点表达式有关，并在切入点匹配的任何连接点处运行(例如执行具有特定名称的方法)。<strong>由切入点表达式匹配的连接点的概念是AOP的核心，Spring默认使用AspectJ切入点表达式语言。</strong></p>\n</li>\n<li><p><code>介绍(Introduction):</code> introduction可以为原有的对象增加新的属性和方法。例如，你可以使用introduction使bean实现IsModified接口，以简化缓存。</p>\n</li>\n<li><p><code>目标对象(Target Object):</code> 由一个或者多个切面代理的对象。也被称为&quot;切面对象&quot;。由于Spring AOP是使用运行时代理实现的，因此该对象始终是代理对象。</p>\n</li>\n<li><p><code>AOP代理(AOP proxy):</code> 由AOP框架创建的对象，在Spring框架中，AOP代理对象有两种：<strong>JDK动态代理和CGLIB代理</strong></p>\n</li>\n<li><p><code>织入(Weaving):</code> 是指把增强应用到目标对象来创建新的代理对象的过程，它(例如 AspectJ 编译器)可以在编译时期，加载时期或者运行时期完成。与其他纯Java AOP框架一样，Spring AOP在运行时进行织入。</p>\n</li>\n</ul>\n<h2 id=\"通知分类\"><a href=\"#通知分类\" class=\"headerlink\" title=\"通知分类\"></a>通知分类</h2><ul>\n<li><p>前置通知(Before Advice): 在目标方法被调用前调用通知功能；相关的类<code>org.springframework.aop.MethodBeforeAdvice</code></p>\n</li>\n<li><p>后置通知(After Advice): 在目标方法被调用之后调用通知功能；相关的类<code>org.springframework.aop.AfterReturningAdvice</code></p>\n</li>\n<li><p>返回通知(After-returning): 在目标方法成功执行之后调用通知功能；</p>\n</li>\n<li><p>异常通知(After-throwing): 在目标方法抛出异常之后调用通知功能；相关的类<code>org.springframework.aop.ThrowsAdvice</code></p>\n</li>\n<li><p>环绕通知(Around): 把整个目标方法包裹起来，在<strong>被调用前和调用之后分别调用通知功能</strong>相关的类<code>org.aopalliance.intercept.MethodInterceptor</code></p>\n</li>\n</ul>\n<h3 id=\"时期\"><a href=\"#时期\" class=\"headerlink\" title=\"时期\"></a>时期</h3><ul>\n<li><p><code>编译期:</code> 切面在目标类编译时被织入，这种方式需要特殊的编译器。<strong>AspectJ 的织入编译器就是以这种方式织入切面的。</strong></p>\n</li>\n<li><p><code>类加载期:</code> 切面在目标类加载到 JVM 时被织入，这种方式需要特殊的类加载器( ClassLoader )，它可以在目标类引入应用之前增强目标类的字节码。</p>\n</li>\n<li><p><code>运行期:</code> 切面在应用运行的某个时期被织入。一般情况下，在织入切面时，AOP容器会为目标对象动态创建一个代理对象，<strong>Spring AOP 采用的就是这种织入方式。</strong></p>\n</li>\n</ul>\n<h2 id=\"代理分类\"><a href=\"#代理分类\" class=\"headerlink\" title=\"代理分类\"></a>代理分类</h2><p>静态织入(AspectJ 实现)和动态代理(Spring AOP实现)</p>\n<h3 id=\"AspectJ\"><a href=\"#AspectJ\" class=\"headerlink\" title=\"AspectJ\"></a>AspectJ</h3><p>ApectJ 主要采用的是编译期静态织入的方式。在这个期间使用 AspectJ 的 acj 编译器(类似 javac)把 aspect 类编译成 class 字节码后，在 java 目标类编译时织入，即先编译 aspect 类再编译目标类。</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210506212300731.png\" alt=\"image-20210506212300731\" loading=\"lazy\"></p>\n<h4 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h4><ul>\n<li><p><strong>如果接口改了，代理的也要跟着改，很烦！</strong></p>\n</li>\n<li><p><strong>因为代理对象，需要与目标对象实现一样的接口。所以会有很多代理类，类太多。</strong></p>\n</li>\n</ul>\n<h3 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h3><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210506212806324.png\" alt=\"image-20210506212806324\" loading=\"lazy\"></p>\n<ul>\n<li><p>JDK动态代理：Spring AOP的首选方法。 每当目标对象实现一个接口时，就会使用JDK动态代理。<strong>目标对象必须实现接口</strong></p>\n</li>\n<li><p>CGLIB代理：如果目标对象没有实现接口，则可以使用CGLIB代理。</p>\n</li>\n</ul>\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>代理主要是使用JDK中的proxy类中的newProxyInstance方法来使用的</p>\n<p>newProxyInstance方法的三个参数</p>\n<ul>\n<li><p>参数一：生成代理对象使用哪个类装载器【一般我们使用的是代理类的装载器】</p>\n</li>\n<li><p>参数二：生成哪个对象的代理对象，通过接口指定【指定要代理类的接口】</p>\n</li>\n<li><p>参数三：生成的代理对象的方法里干什么事【实现handler接口，我们想怎么实现就怎么实现】</p>\n</li>\n</ul>\n<h4 id=\"JDK动态代理\"><a href=\"#JDK动态代理\" class=\"headerlink\" title=\"JDK动态代理\"></a>JDK动态代理</h4><h4 id=\"CGLIB代理\"><a href=\"#CGLIB代理\" class=\"headerlink\" title=\"CGLIB代理\"></a>CGLIB代理</h4><h5 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h5><h6 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h6><p>aop实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> cn.shiyujun.test;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将这个类注入到Spring容器中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用aOP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">broker</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;execution(* cn.shiyujun.test.test01.service())&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;带租客看房&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;谈价格&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@After(&quot;execution(* cn.shiyujun.test.test01.service())&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">after</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;交钥匙&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;execution(* cn.shiyujun.test.test01.service())&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sayAround</span><span class=\"params\">(ProceedingJoinPoint pjp)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;注解类型环绕通知..环绕前&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        pjp.proceed();<span class=\"comment\">//执行方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;注解类型环绕通知..环绕后&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> cn.shiyujun.test;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">hexin</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">service</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>接口实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> cn.shiyujun.test;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//spring中bean的名字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component(&quot;helloAOP&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test01</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">hexin</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">service</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 仅仅只是实现了核心的业务功能</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;签合同&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;收房租&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       http://www.springframework.org/schema/aop</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       http://www.springframework.org/schema/context/spring-context-4.3.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 开启注解扫描 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;cn.shiyujun.aop_cglib&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 开启aop注解方式，此步骤s不能少，这样java类中的aop注解才会生效 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 强制使用cglib代理，如果不设置，将默认使用jdk的代理，但是jdk的代理是基于接口的 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span> <span class=\"attr\">proxy-target-class</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>main类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> cn.shiyujun.test;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">main</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//这个是application容器，所以就会去所有的已经加载的xml文件里面去找，包括jar包里面的xml文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        ApplicationContext context=<span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;applicationContext.xml&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通过ApplicationContext.getBean(beanName)动态加载数据（类）【获取Spring容器中已初始化的bean】。</span></span><br><span class=\"line\"></span><br><span class=\"line\">        test01 helloWorld=(test01) context.getBean(<span class=\"string\">&quot;helloAOP&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//执行动态加载到的类的方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">        helloWorld.service();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>运行结果</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210508064751966.png\" alt=\"image-20210508064751966\" loading=\"lazy\"></p>\n<h6 id=\"xml\"><a href=\"#xml\" class=\"headerlink\" title=\"xml\"></a>xml</h6>"},{"title":"spring源码的gradle配置","description":"","abbrlink":"6b38562a","date":"2021-04-25T16:00:00.000Z","_content":"\n\n主要是修改init.gradle文件配置\n\n\n\n<!-- more -->\n\n\n\n全部内容如下\n\n\n\n```java\n\nallprojects {\n\n    repositories {\n\n        maven { url \"https://maven.aliyun.com/repository/public\" }\n\n        //有一个依赖，public中没有，所以需要spring\n\n        maven { url \"https://maven.aliyun.com/repository/spring\" }\n\n        maven {\n\n            name \"ALIYUN_CENTRAL_URL\" // name 可以不需要\n\n            url 'https://maven.aliyun.com/nexus/content/repositories/central'\n\n        }\n\n        maven {\n\n            name \"ALIYUN_JCENTER_URL\"\n\n            url 'https://maven.aliyun.com/nexus/content/repositories/jcenter'\n\n        }\n\n        maven {\n\n            name \"ALIYUN_GOOGLE_URL\"\n\n            url 'https://maven.aliyun.com/nexus/content/repositories/google'\n\n        }\n\n    }\n\n}\n\n```\n\n\n","source":"_posts/spring源码的gradle配置.md","raw":"---\ntitle: spring源码的gradle配置\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 6b38562a\ndate: 2021-04-26 00:00:00\n---\n\n\n主要是修改init.gradle文件配置\n\n\n\n<!-- more -->\n\n\n\n全部内容如下\n\n\n\n```java\n\nallprojects {\n\n    repositories {\n\n        maven { url \"https://maven.aliyun.com/repository/public\" }\n\n        //有一个依赖，public中没有，所以需要spring\n\n        maven { url \"https://maven.aliyun.com/repository/spring\" }\n\n        maven {\n\n            name \"ALIYUN_CENTRAL_URL\" // name 可以不需要\n\n            url 'https://maven.aliyun.com/nexus/content/repositories/central'\n\n        }\n\n        maven {\n\n            name \"ALIYUN_JCENTER_URL\"\n\n            url 'https://maven.aliyun.com/nexus/content/repositories/jcenter'\n\n        }\n\n        maven {\n\n            name \"ALIYUN_GOOGLE_URL\"\n\n            url 'https://maven.aliyun.com/nexus/content/repositories/google'\n\n        }\n\n    }\n\n}\n\n```\n\n\n","slug":"spring源码的gradle配置","published":1,"updated":"2025-03-02T03:37:34.407Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp50003pn0ukd7yba2lg","content":"<p>主要是修改init.gradle文件配置</p>\n<span id=\"more\"></span>\n\n\n\n<p>全部内容如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">allprojects &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        maven &#123; url <span class=\"string\">&quot;https://maven.aliyun.com/repository/public&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//有一个依赖，public中没有，所以需要spring</span></span><br><span class=\"line\"></span><br><span class=\"line\">        maven &#123; url <span class=\"string\">&quot;https://maven.aliyun.com/repository/spring&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            name <span class=\"string\">&quot;ALIYUN_CENTRAL_URL&quot;</span> <span class=\"comment\">// name 可以不需要</span></span><br><span class=\"line\"></span><br><span class=\"line\">            url <span class=\"string\">&#x27;https://maven.aliyun.com/nexus/content/repositories/central&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            name <span class=\"string\">&quot;ALIYUN_JCENTER_URL&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            url <span class=\"string\">&#x27;https://maven.aliyun.com/nexus/content/repositories/jcenter&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            name <span class=\"string\">&quot;ALIYUN_GOOGLE_URL&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            url <span class=\"string\">&#x27;https://maven.aliyun.com/nexus/content/repositories/google&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"主要是修改init.gradle文件配置\n\n全部内容如下\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\n\nallprojects {\n\n    repositories {\n\n        maven { url \"https://maven.aliyun.com/repository/public\" }\n\n        //有一个依赖，public中没有，所以需要spring\n\n        maven { ur","more":"<p>全部内容如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">allprojects &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        maven &#123; url <span class=\"string\">&quot;https://maven.aliyun.com/repository/public&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//有一个依赖，public中没有，所以需要spring</span></span><br><span class=\"line\"></span><br><span class=\"line\">        maven &#123; url <span class=\"string\">&quot;https://maven.aliyun.com/repository/spring&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            name <span class=\"string\">&quot;ALIYUN_CENTRAL_URL&quot;</span> <span class=\"comment\">// name 可以不需要</span></span><br><span class=\"line\"></span><br><span class=\"line\">            url <span class=\"string\">&#x27;https://maven.aliyun.com/nexus/content/repositories/central&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            name <span class=\"string\">&quot;ALIYUN_JCENTER_URL&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            url <span class=\"string\">&#x27;https://maven.aliyun.com/nexus/content/repositories/jcenter&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            name <span class=\"string\">&quot;ALIYUN_GOOGLE_URL&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            url <span class=\"string\">&#x27;https://maven.aliyun.com/nexus/content/repositories/google&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"sql语句","description":"","abbrlink":"124cdf9","date":"2021-04-03T16:00:00.000Z","_content":"\n\n### DDL\n\n\n\n### 多表\n\n\n\n> 尽量让多个表中都有索引，否则查询速度会很慢\n\n\n\n#### inner join\n\n\n\n```sql\n\nselect * from a,b where a.id=b.id\n\n```\n\n\n\n要求两个表的数据可以完全关联起来\n\n\n\n> 连接可以放在where条件中\n\n\n\n#### outer join\n\n\n\n> 一般把连接条件放在on的后面\n\n\n\n##### left join\n\n\n\n左侧的全部数据返回，无论右侧表中是否有\n\n\n\n##### right join\n\n\n\n连接的全部数据返回，无论左侧表中是否有\n\n\n\n### nest-loop join\n\n\n\n嵌套循环关联\n\n\n\n## 删除\n\n\n\n\n\n\n","source":"_posts/sql语句.md","raw":"---\ntitle: sql语句\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 124cdf9\ndate: 2021-04-04 00:00:00\n---\n\n\n### DDL\n\n\n\n### 多表\n\n\n\n> 尽量让多个表中都有索引，否则查询速度会很慢\n\n\n\n#### inner join\n\n\n\n```sql\n\nselect * from a,b where a.id=b.id\n\n```\n\n\n\n要求两个表的数据可以完全关联起来\n\n\n\n> 连接可以放在where条件中\n\n\n\n#### outer join\n\n\n\n> 一般把连接条件放在on的后面\n\n\n\n##### left join\n\n\n\n左侧的全部数据返回，无论右侧表中是否有\n\n\n\n##### right join\n\n\n\n连接的全部数据返回，无论左侧表中是否有\n\n\n\n### nest-loop join\n\n\n\n嵌套循环关联\n\n\n\n## 删除\n\n\n\n\n\n\n","slug":"sql语句","published":1,"updated":"2025-03-02T03:37:34.408Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp51003rn0uk0hsa5fgl","content":"<h3 id=\"DDL\"><a href=\"#DDL\" class=\"headerlink\" title=\"DDL\"></a>DDL</h3><h3 id=\"多表\"><a href=\"#多表\" class=\"headerlink\" title=\"多表\"></a>多表</h3><blockquote>\n<p>尽量让多个表中都有索引，否则查询速度会很慢</p>\n</blockquote>\n<h4 id=\"inner-join\"><a href=\"#inner-join\" class=\"headerlink\" title=\"inner join\"></a>inner join</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> a,b <span class=\"keyword\">where</span> a.id<span class=\"operator\">=</span>b.id</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>要求两个表的数据可以完全关联起来</p>\n<blockquote>\n<p>连接可以放在where条件中</p>\n</blockquote>\n<h4 id=\"outer-join\"><a href=\"#outer-join\" class=\"headerlink\" title=\"outer join\"></a>outer join</h4><blockquote>\n<p>一般把连接条件放在on的后面</p>\n</blockquote>\n<h5 id=\"left-join\"><a href=\"#left-join\" class=\"headerlink\" title=\"left join\"></a>left join</h5><p>左侧的全部数据返回，无论右侧表中是否有</p>\n<h5 id=\"right-join\"><a href=\"#right-join\" class=\"headerlink\" title=\"right join\"></a>right join</h5><p>连接的全部数据返回，无论左侧表中是否有</p>\n<h3 id=\"nest-loop-join\"><a href=\"#nest-loop-join\" class=\"headerlink\" title=\"nest-loop join\"></a>nest-loop join</h3><p>嵌套循环关联</p>\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2>","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"DDL\n多表\n尽量让多个表中都有索引，否则查询速度会很慢\n\ninner join\n1\n2\n3\n\n\n\nselect * from a,b where a.id=b.id\n\n\n\n要求两个表的数据可以完全关联起来\n\n连接可以放在where条件中\n\nouter join\n一般把连接条件放在on的后面\n\nleft join\n左侧的全部数据返回，无论右侧表中是否有\n\nright join\n连接的全部数据返回，无论左侧表中是否有\n\nnest-loop join\n嵌套循环关联\n\n删除","more":"<h3 id=\"DDL\"><a href=\"#DDL\" class=\"headerlink\" title=\"DDL\"></a>DDL</h3><h3 id=\"多表\"><a href=\"#多表\" class=\"headerlink\" title=\"多表\"></a>多表</h3><blockquote>\n<p>尽量让多个表中都有索引，否则查询速度会很慢</p>\n</blockquote>\n<h4 id=\"inner-join\"><a href=\"#inner-join\" class=\"headerlink\" title=\"inner join\"></a>inner join</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> a,b <span class=\"keyword\">where</span> a.id<span class=\"operator\">=</span>b.id</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>要求两个表的数据可以完全关联起来</p>\n<blockquote>\n<p>连接可以放在where条件中</p>\n</blockquote>\n<h4 id=\"outer-join\"><a href=\"#outer-join\" class=\"headerlink\" title=\"outer join\"></a>outer join</h4><blockquote>\n<p>一般把连接条件放在on的后面</p>\n</blockquote>\n<h5 id=\"left-join\"><a href=\"#left-join\" class=\"headerlink\" title=\"left join\"></a>left join</h5><p>左侧的全部数据返回，无论右侧表中是否有</p>\n<h5 id=\"right-join\"><a href=\"#right-join\" class=\"headerlink\" title=\"right join\"></a>right join</h5><p>连接的全部数据返回，无论左侧表中是否有</p>\n<h3 id=\"nest-loop-join\"><a href=\"#nest-loop-join\" class=\"headerlink\" title=\"nest-loop join\"></a>nest-loop join</h3><p>嵌套循环关联</p>\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2>"},{"title":"vagrant使用","description":"","abbrlink":"fa81a9e8","date":"2021-03-21T16:00:00.000Z","_content":"\n\n简单介绍使用\n\n\n\n## 具体步骤\n\n\n\n1. 从这个地址下载centos7\n\n\n\n   https://github.com/tommy-muehle/puppet-vagrant-boxes/releases/download/1.1.0/centos-7.0-x86_64.box\n\n\n\n2. cmd，运行以下命令\n\n\n\n   ```bash\n\n   #CentOs7是自定义的名字\n\n   #E:/config/centos-7.0-x86_64.box是下载到本地的地址\n\n   vagrant box add CentOs7 E:/config/centos-7.0-x86_64.box\n\n   \n\n   ```\n\n\n\n   ![image-20200425192221398](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20200425192105128.png)\n\n\n\n3. 运行以下命令\n\n\n\n   ```bash\n\n   #CentOs7是上面自定义的名字\n\n   vagrant init CentOs7\n\n   ```\n\n\n\n   ![image-20200425192221398](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20201107180724201.png)\n\n\n\n>注意：如果你之间已经执行过vagrant init这个命令，会报错，需要把相应的文件删除即可，一般文件会在你操作的目录下，我的是C:\\Users\\lenovo，删除这个Vagrantfile，再次执行vagrant init CentOs7即可\n\n\n\n4. 至此，已经安装成功，直接vagrant up启动即可\n\n\n\n5. 打开xshell输入相应信息\n\n\n\n   ```bash\n\n   127.0.0.1\n\n   root vagrant\n\n   端口：2222\n\n   ```\n\n\n\n   \n\n\n\n6. 使用xshell连接即可\n\n\n\n> 若是要多个虚拟机做集群，需要在第4部之前修改Vagrantfile,然后下面vagrant up就可以了，下面是我的Vagrantfile配置，是三个虚拟机\n\n\n\n```bash\n\nVagrant.configure(\"2\") do |config|\n\n  \n\n  config.vm.define \"vagrant1\" do |vb|\n\n      config.vm.provider \"virtualbox\" do |v|\n\n      v.memory = 1024\n\n      v.cpus = 1\n\n    end\n\n  vb.vm.host_name = \"vagrant1\"\n\n  vb.vm.network :public_network, ip: \"192.168.1.21\"\n\n  vb.vm.box = \"Centos7\"\n\n  end\n\n\n\n  config.vm.define \"vagrant2\" do |vb|\n\n      config.vm.provider \"virtualbox\" do |v|\n\n      v.memory = 1024\n\n      v.cpus = 1\n\n    end\n\n  vb.vm.host_name = \"vagrant2\"\n\n  vb.vm.network :public_network, ip: \"192.168.1.22\"\n\n  vb.vm.box = \"Centos7\"\n\n  end\n\n\n\n  config.vm.define \"vagrant3\" do |vb|\n\n      config.vm.provider \"virtualbox\" do |v|\n\n      v.memory = 1024\n\n      v.cpus = 1\n\n    end\n\n  vb.vm.host_name = \"vagrant3\"\n\n  vb.vm.network :public_network, ip: \"192.168.1.23\"\n\n  vb.vm.box = \"Centos7\"\n\n  end\n\n\n\nend\n\n```\n\n\n\n账号是root 密码是 vagrant\n\n\n\n端口号每个不一样，非常好辨认\n\n\n\n![image-20201107180724201](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20200425192221398.png)\n\n\n\n## vagrant常用命令\n\n\n\n```bash\n\n#初始化配置；\n\nvagrant init\n\n#启动全部虚拟机；\n\nvagrant up：\n\n#启动单个虚拟机\n\nvagrant up 虚拟机名字\n\n#登录虚拟机；\n\nvagrant ssh：\n\n#挂起虚拟机；\n\nvagrant suspend：\n\n#：重启虚拟机；\n\nvagrant reload\n\n#关闭虚拟机；\n\nvagrant halt：\n\n#查看虚拟机状态；\n\nvagrant status：\n\n#删除虚拟机。\n\nvagrant destroy：\n\n```\n\n\n","source":"_posts/vagrant使用.md","raw":"---\ntitle: vagrant使用\ndescription: ''\ntags:\n  - 无标签\nabbrlink: fa81a9e8\ndate: 2021-03-22 00:00:00\n---\n\n\n简单介绍使用\n\n\n\n## 具体步骤\n\n\n\n1. 从这个地址下载centos7\n\n\n\n   https://github.com/tommy-muehle/puppet-vagrant-boxes/releases/download/1.1.0/centos-7.0-x86_64.box\n\n\n\n2. cmd，运行以下命令\n\n\n\n   ```bash\n\n   #CentOs7是自定义的名字\n\n   #E:/config/centos-7.0-x86_64.box是下载到本地的地址\n\n   vagrant box add CentOs7 E:/config/centos-7.0-x86_64.box\n\n   \n\n   ```\n\n\n\n   ![image-20200425192221398](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20200425192105128.png)\n\n\n\n3. 运行以下命令\n\n\n\n   ```bash\n\n   #CentOs7是上面自定义的名字\n\n   vagrant init CentOs7\n\n   ```\n\n\n\n   ![image-20200425192221398](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20201107180724201.png)\n\n\n\n>注意：如果你之间已经执行过vagrant init这个命令，会报错，需要把相应的文件删除即可，一般文件会在你操作的目录下，我的是C:\\Users\\lenovo，删除这个Vagrantfile，再次执行vagrant init CentOs7即可\n\n\n\n4. 至此，已经安装成功，直接vagrant up启动即可\n\n\n\n5. 打开xshell输入相应信息\n\n\n\n   ```bash\n\n   127.0.0.1\n\n   root vagrant\n\n   端口：2222\n\n   ```\n\n\n\n   \n\n\n\n6. 使用xshell连接即可\n\n\n\n> 若是要多个虚拟机做集群，需要在第4部之前修改Vagrantfile,然后下面vagrant up就可以了，下面是我的Vagrantfile配置，是三个虚拟机\n\n\n\n```bash\n\nVagrant.configure(\"2\") do |config|\n\n  \n\n  config.vm.define \"vagrant1\" do |vb|\n\n      config.vm.provider \"virtualbox\" do |v|\n\n      v.memory = 1024\n\n      v.cpus = 1\n\n    end\n\n  vb.vm.host_name = \"vagrant1\"\n\n  vb.vm.network :public_network, ip: \"192.168.1.21\"\n\n  vb.vm.box = \"Centos7\"\n\n  end\n\n\n\n  config.vm.define \"vagrant2\" do |vb|\n\n      config.vm.provider \"virtualbox\" do |v|\n\n      v.memory = 1024\n\n      v.cpus = 1\n\n    end\n\n  vb.vm.host_name = \"vagrant2\"\n\n  vb.vm.network :public_network, ip: \"192.168.1.22\"\n\n  vb.vm.box = \"Centos7\"\n\n  end\n\n\n\n  config.vm.define \"vagrant3\" do |vb|\n\n      config.vm.provider \"virtualbox\" do |v|\n\n      v.memory = 1024\n\n      v.cpus = 1\n\n    end\n\n  vb.vm.host_name = \"vagrant3\"\n\n  vb.vm.network :public_network, ip: \"192.168.1.23\"\n\n  vb.vm.box = \"Centos7\"\n\n  end\n\n\n\nend\n\n```\n\n\n\n账号是root 密码是 vagrant\n\n\n\n端口号每个不一样，非常好辨认\n\n\n\n![image-20201107180724201](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20200425192221398.png)\n\n\n\n## vagrant常用命令\n\n\n\n```bash\n\n#初始化配置；\n\nvagrant init\n\n#启动全部虚拟机；\n\nvagrant up：\n\n#启动单个虚拟机\n\nvagrant up 虚拟机名字\n\n#登录虚拟机；\n\nvagrant ssh：\n\n#挂起虚拟机；\n\nvagrant suspend：\n\n#：重启虚拟机；\n\nvagrant reload\n\n#关闭虚拟机；\n\nvagrant halt：\n\n#查看虚拟机状态；\n\nvagrant status：\n\n#删除虚拟机。\n\nvagrant destroy：\n\n```\n\n\n","slug":"vagrant使用","published":1,"updated":"2025-03-02T03:37:34.408Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp51003tn0uk8v560sp2","content":"<p>简单介绍使用</p>\n<h2 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h2><ol>\n<li><p>从这个地址下载centos7</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RvbW15LW11ZWhsZS9wdXBwZXQtdmFncmFudC1ib3hlcy9yZWxlYXNlcy9kb3dubG9hZC8xLjEuMC9jZW50b3MtNy4wLXg4Nl82NC5ib3g=\">https://github.com/tommy-muehle/puppet-vagrant-boxes/releases/download/1.1.0/centos-7.0-x86_64.box<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>cmd，运行以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#CentOs7是自定义的名字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#E:/config/centos-7.0-x86_64.box是下载到本地的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">vagrant box add CentOs7 E:/config/centos-7.0-x86_64.box</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20200425192105128.png\" alt=\"image-20200425192221398\" loading=\"lazy\"></p>\n</li>\n<li><p>运行以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#CentOs7是上面自定义的名字</span></span><br><span class=\"line\"></span><br><span class=\"line\">vagrant init CentOs7</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20201107180724201.png\" alt=\"image-20200425192221398\" loading=\"lazy\"></p>\n</li>\n</ol>\n<blockquote>\n<p>注意：如果你之间已经执行过vagrant init这个命令，会报错，需要把相应的文件删除即可，一般文件会在你操作的目录下，我的是C:\\Users\\lenovo，删除这个Vagrantfile，再次执行vagrant init CentOs7即可</p>\n</blockquote>\n<ol start=\"4\">\n<li><p>至此，已经安装成功，直接vagrant up启动即可</p>\n</li>\n<li><p>打开xshell输入相应信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">127.0.0.1</span><br><span class=\"line\"></span><br><span class=\"line\">root vagrant</span><br><span class=\"line\"></span><br><span class=\"line\">端口：2222</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n</li>\n<li><p>使用xshell连接即可</p>\n</li>\n</ol>\n<blockquote>\n<p>若是要多个虚拟机做集群，需要在第4部之前修改Vagrantfile,然后下面vagrant up就可以了，下面是我的Vagrantfile配置，是三个虚拟机</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vagrant.configure(<span class=\"string\">&quot;2&quot;</span>) <span class=\"keyword\">do</span> |config|</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">  config.vm.define <span class=\"string\">&quot;vagrant1&quot;</span> <span class=\"keyword\">do</span> |vb|</span><br><span class=\"line\"></span><br><span class=\"line\">      config.vm.provider <span class=\"string\">&quot;virtualbox&quot;</span> <span class=\"keyword\">do</span> |v|</span><br><span class=\"line\"></span><br><span class=\"line\">      v.memory = 1024</span><br><span class=\"line\"></span><br><span class=\"line\">      v.cpus = 1</span><br><span class=\"line\"></span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">  vb.vm.host_name = <span class=\"string\">&quot;vagrant1&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  vb.vm.network :public_network, ip: <span class=\"string\">&quot;192.168.1.21&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  vb.vm.box = <span class=\"string\">&quot;Centos7&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  config.vm.define <span class=\"string\">&quot;vagrant2&quot;</span> <span class=\"keyword\">do</span> |vb|</span><br><span class=\"line\"></span><br><span class=\"line\">      config.vm.provider <span class=\"string\">&quot;virtualbox&quot;</span> <span class=\"keyword\">do</span> |v|</span><br><span class=\"line\"></span><br><span class=\"line\">      v.memory = 1024</span><br><span class=\"line\"></span><br><span class=\"line\">      v.cpus = 1</span><br><span class=\"line\"></span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">  vb.vm.host_name = <span class=\"string\">&quot;vagrant2&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  vb.vm.network :public_network, ip: <span class=\"string\">&quot;192.168.1.22&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  vb.vm.box = <span class=\"string\">&quot;Centos7&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  config.vm.define <span class=\"string\">&quot;vagrant3&quot;</span> <span class=\"keyword\">do</span> |vb|</span><br><span class=\"line\"></span><br><span class=\"line\">      config.vm.provider <span class=\"string\">&quot;virtualbox&quot;</span> <span class=\"keyword\">do</span> |v|</span><br><span class=\"line\"></span><br><span class=\"line\">      v.memory = 1024</span><br><span class=\"line\"></span><br><span class=\"line\">      v.cpus = 1</span><br><span class=\"line\"></span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">  vb.vm.host_name = <span class=\"string\">&quot;vagrant3&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  vb.vm.network :public_network, ip: <span class=\"string\">&quot;192.168.1.23&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  vb.vm.box = <span class=\"string\">&quot;Centos7&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>账号是root 密码是 vagrant</p>\n<p>端口号每个不一样，非常好辨认</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20200425192221398.png\" alt=\"image-20201107180724201\" loading=\"lazy\"></p>\n<h2 id=\"vagrant常用命令\"><a href=\"#vagrant常用命令\" class=\"headerlink\" title=\"vagrant常用命令\"></a>vagrant常用命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#初始化配置；</span></span><br><span class=\"line\"></span><br><span class=\"line\">vagrant init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#启动全部虚拟机；</span></span><br><span class=\"line\"></span><br><span class=\"line\">vagrant up：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#启动单个虚拟机</span></span><br><span class=\"line\"></span><br><span class=\"line\">vagrant up 虚拟机名字</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#登录虚拟机；</span></span><br><span class=\"line\"></span><br><span class=\"line\">vagrant ssh：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#挂起虚拟机；</span></span><br><span class=\"line\"></span><br><span class=\"line\">vagrant <span class=\"built_in\">suspend</span>：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#：重启虚拟机；</span></span><br><span class=\"line\"></span><br><span class=\"line\">vagrant reload</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#关闭虚拟机；</span></span><br><span class=\"line\"></span><br><span class=\"line\">vagrant halt：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看虚拟机状态；</span></span><br><span class=\"line\"></span><br><span class=\"line\">vagrant status：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除虚拟机。</span></span><br><span class=\"line\"></span><br><span class=\"line\">vagrant destroy：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"简单介绍使用\n\n具体步骤\n 1. 从这个地址下载centos7\n    \n    https://github.com/tommy-muehle/puppet-vagrant-boxes/releases/download/1.1.0/centos-7.0-x86_64.box\n    \n    \n 2. cmd，运行以下命令\n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    \n    \n    \n    #CentOs7是自定义的名字\n    \n    #E:/config/centos-7.0-x86_64.box","more":"<p>简单介绍使用</p>\n<h2 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h2><ol>\n<li><p>从这个地址下载centos7</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RvbW15LW11ZWhsZS9wdXBwZXQtdmFncmFudC1ib3hlcy9yZWxlYXNlcy9kb3dubG9hZC8xLjEuMC9jZW50b3MtNy4wLXg4Nl82NC5ib3g=\">https://github.com/tommy-muehle/puppet-vagrant-boxes/releases/download/1.1.0/centos-7.0-x86_64.box<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>cmd，运行以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#CentOs7是自定义的名字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#E:/config/centos-7.0-x86_64.box是下载到本地的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">vagrant box add CentOs7 E:/config/centos-7.0-x86_64.box</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20200425192105128.png\" alt=\"image-20200425192221398\" loading=\"lazy\"></p>\n</li>\n<li><p>运行以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#CentOs7是上面自定义的名字</span></span><br><span class=\"line\"></span><br><span class=\"line\">vagrant init CentOs7</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20201107180724201.png\" alt=\"image-20200425192221398\" loading=\"lazy\"></p>\n</li>\n</ol>\n<blockquote>\n<p>注意：如果你之间已经执行过vagrant init这个命令，会报错，需要把相应的文件删除即可，一般文件会在你操作的目录下，我的是C:\\Users\\lenovo，删除这个Vagrantfile，再次执行vagrant init CentOs7即可</p>\n</blockquote>\n<ol start=\"4\">\n<li><p>至此，已经安装成功，直接vagrant up启动即可</p>\n</li>\n<li><p>打开xshell输入相应信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">127.0.0.1</span><br><span class=\"line\"></span><br><span class=\"line\">root vagrant</span><br><span class=\"line\"></span><br><span class=\"line\">端口：2222</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n</li>\n<li><p>使用xshell连接即可</p>\n</li>\n</ol>\n<blockquote>\n<p>若是要多个虚拟机做集群，需要在第4部之前修改Vagrantfile,然后下面vagrant up就可以了，下面是我的Vagrantfile配置，是三个虚拟机</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vagrant.configure(<span class=\"string\">&quot;2&quot;</span>) <span class=\"keyword\">do</span> |config|</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">  config.vm.define <span class=\"string\">&quot;vagrant1&quot;</span> <span class=\"keyword\">do</span> |vb|</span><br><span class=\"line\"></span><br><span class=\"line\">      config.vm.provider <span class=\"string\">&quot;virtualbox&quot;</span> <span class=\"keyword\">do</span> |v|</span><br><span class=\"line\"></span><br><span class=\"line\">      v.memory = 1024</span><br><span class=\"line\"></span><br><span class=\"line\">      v.cpus = 1</span><br><span class=\"line\"></span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">  vb.vm.host_name = <span class=\"string\">&quot;vagrant1&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  vb.vm.network :public_network, ip: <span class=\"string\">&quot;192.168.1.21&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  vb.vm.box = <span class=\"string\">&quot;Centos7&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  config.vm.define <span class=\"string\">&quot;vagrant2&quot;</span> <span class=\"keyword\">do</span> |vb|</span><br><span class=\"line\"></span><br><span class=\"line\">      config.vm.provider <span class=\"string\">&quot;virtualbox&quot;</span> <span class=\"keyword\">do</span> |v|</span><br><span class=\"line\"></span><br><span class=\"line\">      v.memory = 1024</span><br><span class=\"line\"></span><br><span class=\"line\">      v.cpus = 1</span><br><span class=\"line\"></span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">  vb.vm.host_name = <span class=\"string\">&quot;vagrant2&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  vb.vm.network :public_network, ip: <span class=\"string\">&quot;192.168.1.22&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  vb.vm.box = <span class=\"string\">&quot;Centos7&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  config.vm.define <span class=\"string\">&quot;vagrant3&quot;</span> <span class=\"keyword\">do</span> |vb|</span><br><span class=\"line\"></span><br><span class=\"line\">      config.vm.provider <span class=\"string\">&quot;virtualbox&quot;</span> <span class=\"keyword\">do</span> |v|</span><br><span class=\"line\"></span><br><span class=\"line\">      v.memory = 1024</span><br><span class=\"line\"></span><br><span class=\"line\">      v.cpus = 1</span><br><span class=\"line\"></span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">  vb.vm.host_name = <span class=\"string\">&quot;vagrant3&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  vb.vm.network :public_network, ip: <span class=\"string\">&quot;192.168.1.23&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  vb.vm.box = <span class=\"string\">&quot;Centos7&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>账号是root 密码是 vagrant</p>\n<p>端口号每个不一样，非常好辨认</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20200425192221398.png\" alt=\"image-20201107180724201\" loading=\"lazy\"></p>\n<h2 id=\"vagrant常用命令\"><a href=\"#vagrant常用命令\" class=\"headerlink\" title=\"vagrant常用命令\"></a>vagrant常用命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#初始化配置；</span></span><br><span class=\"line\"></span><br><span class=\"line\">vagrant init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#启动全部虚拟机；</span></span><br><span class=\"line\"></span><br><span class=\"line\">vagrant up：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#启动单个虚拟机</span></span><br><span class=\"line\"></span><br><span class=\"line\">vagrant up 虚拟机名字</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#登录虚拟机；</span></span><br><span class=\"line\"></span><br><span class=\"line\">vagrant ssh：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#挂起虚拟机；</span></span><br><span class=\"line\"></span><br><span class=\"line\">vagrant <span class=\"built_in\">suspend</span>：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#：重启虚拟机；</span></span><br><span class=\"line\"></span><br><span class=\"line\">vagrant reload</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#关闭虚拟机；</span></span><br><span class=\"line\"></span><br><span class=\"line\">vagrant halt：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看虚拟机状态；</span></span><br><span class=\"line\"></span><br><span class=\"line\">vagrant status：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除虚拟机。</span></span><br><span class=\"line\"></span><br><span class=\"line\">vagrant destroy：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"vercel项目如何跨域","description":"","abbrlink":"29a8bc63","date":"2024-07-03T16:00:00.000Z","_content":"\n\n其实很简单，在你的项目根目录下新建一个vercel.json\n\n\n\n```json\n\n{\n\n  \"headers\": [\n\n    {\n\n      \"source\": \"/(.*)\",\n\n      \"headers\": [\n\n        { \"key\": \"Access-Control-Allow-Credentials\", \"value\": \"true\" },\n\n        { \"key\": \"Access-Control-Allow-Origin\", \"value\": \"*\" },\n\n        { \"key\": \"Access-Control-Allow-Methods\", \"value\": \"GET,OPTIONS,PATCH,DELETE,POST,PUT\" },\n\n        { \"key\": \"Access-Control-Allow-Headers\", \"value\": \"X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version\" }\n\n      ]\n\n    }\n\n  ]\n\n}\n\n```\n\nsource 就是允许跨域的路径，我这边设置的是所有路径，即在这个网站上任何路径跨域都是可以的\n","source":"_posts/vercel项目如何跨域.md","raw":"---\ntitle: vercel项目如何跨域\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 29a8bc63\ndate: 2024-07-04 00:00:00\n---\n\n\n其实很简单，在你的项目根目录下新建一个vercel.json\n\n\n\n```json\n\n{\n\n  \"headers\": [\n\n    {\n\n      \"source\": \"/(.*)\",\n\n      \"headers\": [\n\n        { \"key\": \"Access-Control-Allow-Credentials\", \"value\": \"true\" },\n\n        { \"key\": \"Access-Control-Allow-Origin\", \"value\": \"*\" },\n\n        { \"key\": \"Access-Control-Allow-Methods\", \"value\": \"GET,OPTIONS,PATCH,DELETE,POST,PUT\" },\n\n        { \"key\": \"Access-Control-Allow-Headers\", \"value\": \"X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version\" }\n\n      ]\n\n    }\n\n  ]\n\n}\n\n```\n\nsource 就是允许跨域的路径，我这边设置的是所有路径，即在这个网站上任何路径跨域都是可以的\n","slug":"vercel项目如何跨域","published":1,"updated":"2025-03-02T03:37:34.409Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp51003vn0ukc6bkh8ji","content":"<p>其实很简单，在你的项目根目录下新建一个vercel.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">&quot;headers&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">&quot;source&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/(.*)&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">&quot;headers&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Access-Control-Allow-Credentials&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;true&quot;</span> <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;*&quot;</span> <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Access-Control-Allow-Methods&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;GET,OPTIONS,PATCH,DELETE,POST,PUT&quot;</span> <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version&quot;</span> <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>source 就是允许跨域的路径，我这边设置的是所有路径，即在这个网站上任何路径跨域都是可以的</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"其实很简单，在你的项目根目录下新建一个vercel.json\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n{\n\n  \"headers\": [\n\n    {\n\n      \"source\": \"/(.*)\",\n\n      \"headers\": [\n\n        { \"key\": \"Access-Control-Allow-Credentials\", \"value\": \"true\" },\n\n        { \"key\": \"Access-Control-Allow-Origin\", ","more":"<p>其实很简单，在你的项目根目录下新建一个vercel.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">&quot;headers&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">&quot;source&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/(.*)&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">&quot;headers&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Access-Control-Allow-Credentials&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;true&quot;</span> <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;*&quot;</span> <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Access-Control-Allow-Methods&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;GET,OPTIONS,PATCH,DELETE,POST,PUT&quot;</span> <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version&quot;</span> <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>source 就是允许跨域的路径，我这边设置的是所有路径，即在这个网站上任何路径跨域都是可以的</p>\n"},{"title":"volatile","description":"","abbrlink":"fe4c9cb6","date":"2021-03-26T16:00:00.000Z","_content":"\n\n三大特性：保证可见性，不保证原子性，禁止指令重排\n\n\n\n<!-- more -->\n\n\n\n### 不保证原子性测试\n\n\n\n```java\n\npublic class demo2 {\n\n    private volatile static  int num=0;\n\n    public  static  void add(){\n\n        num++;\n\n    }\n\n    public static void main(String[] args) {\n\n        for (int i = 0; i < 100; i++) {\n\n            new Thread(()->{\n\n                for (int j = 0; j <1000 ; j++) {\n\n                    add();\n\n                }\n\n            }).start();\n\n        }\n\n\n\n        while (Thread.activeCount()>2)\n\n        {\n\n            Thread.yield();\n\n        }\n\n        System.out.println(Thread.currentThread().getName()+\"---\"+num);\n\n    }\n\n}\n\n```\n\n\n\n### 不加lock和synchronized如何保证原子性\n\n\n\n使用原子类\n\n\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/16908aea3345438e8f5821e293403ab7~tplv-k3u1fbpfcp-watermark.image)\n\n\n\n代码示例\n\n\n\n```java\n\npublic class demo2 {\n\n    private  static AtomicInteger num=new AtomicInteger();\n\n    public  static  void add(){\n\n        num.getAndIncrement();\n\n    }\n\n    public static void main(String[] args) {\n\n        for (int i = 0; i < 100; i++) {\n\n            new Thread(()->{\n\n                for (int j = 0; j <1000 ; j++) {\n\n                    add();\n\n                }\n\n            }).start();\n\n        }\n\n        while (Thread.activeCount()>2)\n\n        {\n\n            Thread.yield();\n\n        }\n\n        System.out.println(Thread.currentThread().getName()+\"---\"+num);\n\n    }\n\n}\n\n```\n\n\n\n这些类的底层都和操作系统挂钩！在内存中修改值！unsafe类是一个很特殊的存在！\n\n\n\n### 指令重排\n\n\n\n#### 什么是指令重排\n\n\n\n指令重排：你写的程序，并不是按照你写的那样去执行的\n\n\n\n> 处理器在进行指令重排的时候，考虑：数据之间的依赖性\n\n\n\n源代码到代码执行的过程\n\n\n\n源代码->编译器优化重排->指令也可能重排->内部系统也会重排\n\n\n\n> 指令重排原理\n\n\n\n内存屏障，Cpu指令、作用：\n\n\n\n1. 保证特定的操作的执行顺序！\n\n2. 可以保证某些变量的内存可见性（利用这些特性volatile实现了可见性）\n\n\n\n### 可见性\n\n\n\n#### 作用\n\n\n\n下面会涉及几个CPU的术语\n\n\n\n- 内存屏障：用于实现用户操作排列顺序的CPU指令\n\n- 缓冲行：缓存的最小单位\n\n\n\n有volatile变量修饰的共享变量进行写操作的时候会多出第二行汇编代码，通过查IA-32架构软件开发者手册可知，Lock前缀的指令在多核处理器下会引发了两件事。\n\n\n\n1. 将当前处理器缓存行的数据写回到系统内存\n\n2. 这个写回内存的操作会使在其他CPU里缓存了该内存地址的数据无效\n\n\n\n其实很简单，各个线程会有一个**共享的主内存**，读取数据都要从主内存读取，每个线程都有自己的内存，线程读取数据的时候就是把主内存的数据读取到线程私有的内存里面，当线程修改自己内存中的变量之后，会将修改的值更新到主内存中，此时其他线程私有内存中所保留的值全部失效，必须重新从主内存读取该变量 \n\n\n\n> volatile中使用的是地址的引用，而非值的复制，因为如果是值的复制的话，当volatile中所修饰的值变得非常大之后，复制也是非常耗时的，可能就无法保证及时将修改后的数据及时协会到内存中\n\n\n\n线程\n\n\n\n> JMM是个虚拟概念，在实际中其实就是放在cache中\n\n>\n\n> \n\n>\n\n> 那其他线程是如何知道自己缓存的数据有变化了那？\n\n>\n\n> 这是通过硬件（处理器的嗅探机制）来实现的，不难猜出，所谓的嗅探机制就是当共享内存的变量被修改的时候，所有缓存该变量的线程中的值都将失效，必须要重新从共享内存读取才行\n\n\n\n### volatile优化\n\n\n\n缓存行数据为64字节，但是如果结点的数据不足64字节的话，自动填充到64字节可以提升效率\n\n\n\n不能使用volatile变量是都应该追加到64字节吗？两种情况不允许\n\n\n\n- 缓存行非64字节宽的处理器\n\n- 共享变量不会被频繁的写","source":"_posts/volatile.md","raw":"---\ntitle: volatile\ndescription: ''\ntags:\n  - 无标签\nabbrlink: fe4c9cb6\ndate: 2021-03-27 00:00:00\n---\n\n\n三大特性：保证可见性，不保证原子性，禁止指令重排\n\n\n\n<!-- more -->\n\n\n\n### 不保证原子性测试\n\n\n\n```java\n\npublic class demo2 {\n\n    private volatile static  int num=0;\n\n    public  static  void add(){\n\n        num++;\n\n    }\n\n    public static void main(String[] args) {\n\n        for (int i = 0; i < 100; i++) {\n\n            new Thread(()->{\n\n                for (int j = 0; j <1000 ; j++) {\n\n                    add();\n\n                }\n\n            }).start();\n\n        }\n\n\n\n        while (Thread.activeCount()>2)\n\n        {\n\n            Thread.yield();\n\n        }\n\n        System.out.println(Thread.currentThread().getName()+\"---\"+num);\n\n    }\n\n}\n\n```\n\n\n\n### 不加lock和synchronized如何保证原子性\n\n\n\n使用原子类\n\n\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/16908aea3345438e8f5821e293403ab7~tplv-k3u1fbpfcp-watermark.image)\n\n\n\n代码示例\n\n\n\n```java\n\npublic class demo2 {\n\n    private  static AtomicInteger num=new AtomicInteger();\n\n    public  static  void add(){\n\n        num.getAndIncrement();\n\n    }\n\n    public static void main(String[] args) {\n\n        for (int i = 0; i < 100; i++) {\n\n            new Thread(()->{\n\n                for (int j = 0; j <1000 ; j++) {\n\n                    add();\n\n                }\n\n            }).start();\n\n        }\n\n        while (Thread.activeCount()>2)\n\n        {\n\n            Thread.yield();\n\n        }\n\n        System.out.println(Thread.currentThread().getName()+\"---\"+num);\n\n    }\n\n}\n\n```\n\n\n\n这些类的底层都和操作系统挂钩！在内存中修改值！unsafe类是一个很特殊的存在！\n\n\n\n### 指令重排\n\n\n\n#### 什么是指令重排\n\n\n\n指令重排：你写的程序，并不是按照你写的那样去执行的\n\n\n\n> 处理器在进行指令重排的时候，考虑：数据之间的依赖性\n\n\n\n源代码到代码执行的过程\n\n\n\n源代码->编译器优化重排->指令也可能重排->内部系统也会重排\n\n\n\n> 指令重排原理\n\n\n\n内存屏障，Cpu指令、作用：\n\n\n\n1. 保证特定的操作的执行顺序！\n\n2. 可以保证某些变量的内存可见性（利用这些特性volatile实现了可见性）\n\n\n\n### 可见性\n\n\n\n#### 作用\n\n\n\n下面会涉及几个CPU的术语\n\n\n\n- 内存屏障：用于实现用户操作排列顺序的CPU指令\n\n- 缓冲行：缓存的最小单位\n\n\n\n有volatile变量修饰的共享变量进行写操作的时候会多出第二行汇编代码，通过查IA-32架构软件开发者手册可知，Lock前缀的指令在多核处理器下会引发了两件事。\n\n\n\n1. 将当前处理器缓存行的数据写回到系统内存\n\n2. 这个写回内存的操作会使在其他CPU里缓存了该内存地址的数据无效\n\n\n\n其实很简单，各个线程会有一个**共享的主内存**，读取数据都要从主内存读取，每个线程都有自己的内存，线程读取数据的时候就是把主内存的数据读取到线程私有的内存里面，当线程修改自己内存中的变量之后，会将修改的值更新到主内存中，此时其他线程私有内存中所保留的值全部失效，必须重新从主内存读取该变量 \n\n\n\n> volatile中使用的是地址的引用，而非值的复制，因为如果是值的复制的话，当volatile中所修饰的值变得非常大之后，复制也是非常耗时的，可能就无法保证及时将修改后的数据及时协会到内存中\n\n\n\n线程\n\n\n\n> JMM是个虚拟概念，在实际中其实就是放在cache中\n\n>\n\n> \n\n>\n\n> 那其他线程是如何知道自己缓存的数据有变化了那？\n\n>\n\n> 这是通过硬件（处理器的嗅探机制）来实现的，不难猜出，所谓的嗅探机制就是当共享内存的变量被修改的时候，所有缓存该变量的线程中的值都将失效，必须要重新从共享内存读取才行\n\n\n\n### volatile优化\n\n\n\n缓存行数据为64字节，但是如果结点的数据不足64字节的话，自动填充到64字节可以提升效率\n\n\n\n不能使用volatile变量是都应该追加到64字节吗？两种情况不允许\n\n\n\n- 缓存行非64字节宽的处理器\n\n- 共享变量不会被频繁的写","slug":"volatile","published":1,"updated":"2025-03-02T03:37:34.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp52003xn0ukb4x09ejk","content":"<p>三大特性：保证可见性，不保证原子性，禁止指令重排</p>\n<span id=\"more\"></span>\n\n\n\n<h3 id=\"不保证原子性测试\"><a href=\"#不保证原子性测试\" class=\"headerlink\" title=\"不保证原子性测试\"></a>不保证原子性测试</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span>  <span class=\"type\">int</span> num=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">static</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        num++;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt;<span class=\"number\">1000</span> ; j++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    add();</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (Thread.activeCount()&gt;<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            Thread.<span class=\"keyword\">yield</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;---&quot;</span>+num);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"不加lock和synchronized如何保证原子性\"><a href=\"#不加lock和synchronized如何保证原子性\" class=\"headerlink\" title=\"不加lock和synchronized如何保证原子性\"></a>不加lock和synchronized如何保证原子性</h3><p>使用原子类</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/16908aea3345438e8f5821e293403ab7~tplv-k3u1fbpfcp-watermark.image\" loading=\"lazy\"></p>\n<p>代码示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span>  <span class=\"keyword\">static</span> AtomicInteger num=<span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">static</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        num.getAndIncrement();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt;<span class=\"number\">1000</span> ; j++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    add();</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (Thread.activeCount()&gt;<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            Thread.<span class=\"keyword\">yield</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;---&quot;</span>+num);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这些类的底层都和操作系统挂钩！在内存中修改值！unsafe类是一个很特殊的存在！</p>\n<h3 id=\"指令重排\"><a href=\"#指令重排\" class=\"headerlink\" title=\"指令重排\"></a>指令重排</h3><h4 id=\"什么是指令重排\"><a href=\"#什么是指令重排\" class=\"headerlink\" title=\"什么是指令重排\"></a>什么是指令重排</h4><p>指令重排：你写的程序，并不是按照你写的那样去执行的</p>\n<blockquote>\n<p>处理器在进行指令重排的时候，考虑：数据之间的依赖性</p>\n</blockquote>\n<p>源代码到代码执行的过程</p>\n<p>源代码-&gt;编译器优化重排-&gt;指令也可能重排-&gt;内部系统也会重排</p>\n<blockquote>\n<p>指令重排原理</p>\n</blockquote>\n<p>内存屏障，Cpu指令、作用：</p>\n<ol>\n<li><p>保证特定的操作的执行顺序！</p>\n</li>\n<li><p>可以保证某些变量的内存可见性（利用这些特性volatile实现了可见性）</p>\n</li>\n</ol>\n<h3 id=\"可见性\"><a href=\"#可见性\" class=\"headerlink\" title=\"可见性\"></a>可见性</h3><h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p>下面会涉及几个CPU的术语</p>\n<ul>\n<li><p>内存屏障：用于实现用户操作排列顺序的CPU指令</p>\n</li>\n<li><p>缓冲行：缓存的最小单位</p>\n</li>\n</ul>\n<p>有volatile变量修饰的共享变量进行写操作的时候会多出第二行汇编代码，通过查IA-32架构软件开发者手册可知，Lock前缀的指令在多核处理器下会引发了两件事。</p>\n<ol>\n<li><p>将当前处理器缓存行的数据写回到系统内存</p>\n</li>\n<li><p>这个写回内存的操作会使在其他CPU里缓存了该内存地址的数据无效</p>\n</li>\n</ol>\n<p>其实很简单，各个线程会有一个<strong>共享的主内存</strong>，读取数据都要从主内存读取，每个线程都有自己的内存，线程读取数据的时候就是把主内存的数据读取到线程私有的内存里面，当线程修改自己内存中的变量之后，会将修改的值更新到主内存中，此时其他线程私有内存中所保留的值全部失效，必须重新从主内存读取该变量 </p>\n<blockquote>\n<p>volatile中使用的是地址的引用，而非值的复制，因为如果是值的复制的话，当volatile中所修饰的值变得非常大之后，复制也是非常耗时的，可能就无法保证及时将修改后的数据及时协会到内存中</p>\n</blockquote>\n<p>线程</p>\n<blockquote>\n<p>JMM是个虚拟概念，在实际中其实就是放在cache中</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>那其他线程是如何知道自己缓存的数据有变化了那？</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>这是通过硬件（处理器的嗅探机制）来实现的，不难猜出，所谓的嗅探机制就是当共享内存的变量被修改的时候，所有缓存该变量的线程中的值都将失效，必须要重新从共享内存读取才行</p>\n</blockquote>\n<h3 id=\"volatile优化\"><a href=\"#volatile优化\" class=\"headerlink\" title=\"volatile优化\"></a>volatile优化</h3><p>缓存行数据为64字节，但是如果结点的数据不足64字节的话，自动填充到64字节可以提升效率</p>\n<p>不能使用volatile变量是都应该追加到64字节吗？两种情况不允许</p>\n<ul>\n<li><p>缓存行非64字节宽的处理器</p>\n</li>\n<li><p>共享变量不会被频繁的写</p>\n</li>\n</ul>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"三大特性：保证可见性，不保证原子性，禁止指令重排\n\n不保证原子性测试\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n\n\n\npublic class demo2 {\n\n    private volatile static  int num=0;\n\n    public  static  void add(){\n\n        num++;\n\n    }\n\n    public static void ","more":"<h3 id=\"不保证原子性测试\"><a href=\"#不保证原子性测试\" class=\"headerlink\" title=\"不保证原子性测试\"></a>不保证原子性测试</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span>  <span class=\"type\">int</span> num=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">static</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        num++;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt;<span class=\"number\">1000</span> ; j++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    add();</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (Thread.activeCount()&gt;<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            Thread.<span class=\"keyword\">yield</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;---&quot;</span>+num);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"不加lock和synchronized如何保证原子性\"><a href=\"#不加lock和synchronized如何保证原子性\" class=\"headerlink\" title=\"不加lock和synchronized如何保证原子性\"></a>不加lock和synchronized如何保证原子性</h3><p>使用原子类</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/16908aea3345438e8f5821e293403ab7~tplv-k3u1fbpfcp-watermark.image\" loading=\"lazy\"></p>\n<p>代码示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span>  <span class=\"keyword\">static</span> AtomicInteger num=<span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">static</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        num.getAndIncrement();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt;<span class=\"number\">1000</span> ; j++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    add();</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (Thread.activeCount()&gt;<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            Thread.<span class=\"keyword\">yield</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;---&quot;</span>+num);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这些类的底层都和操作系统挂钩！在内存中修改值！unsafe类是一个很特殊的存在！</p>\n<h3 id=\"指令重排\"><a href=\"#指令重排\" class=\"headerlink\" title=\"指令重排\"></a>指令重排</h3><h4 id=\"什么是指令重排\"><a href=\"#什么是指令重排\" class=\"headerlink\" title=\"什么是指令重排\"></a>什么是指令重排</h4><p>指令重排：你写的程序，并不是按照你写的那样去执行的</p>\n<blockquote>\n<p>处理器在进行指令重排的时候，考虑：数据之间的依赖性</p>\n</blockquote>\n<p>源代码到代码执行的过程</p>\n<p>源代码-&gt;编译器优化重排-&gt;指令也可能重排-&gt;内部系统也会重排</p>\n<blockquote>\n<p>指令重排原理</p>\n</blockquote>\n<p>内存屏障，Cpu指令、作用：</p>\n<ol>\n<li><p>保证特定的操作的执行顺序！</p>\n</li>\n<li><p>可以保证某些变量的内存可见性（利用这些特性volatile实现了可见性）</p>\n</li>\n</ol>\n<h3 id=\"可见性\"><a href=\"#可见性\" class=\"headerlink\" title=\"可见性\"></a>可见性</h3><h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p>下面会涉及几个CPU的术语</p>\n<ul>\n<li><p>内存屏障：用于实现用户操作排列顺序的CPU指令</p>\n</li>\n<li><p>缓冲行：缓存的最小单位</p>\n</li>\n</ul>\n<p>有volatile变量修饰的共享变量进行写操作的时候会多出第二行汇编代码，通过查IA-32架构软件开发者手册可知，Lock前缀的指令在多核处理器下会引发了两件事。</p>\n<ol>\n<li><p>将当前处理器缓存行的数据写回到系统内存</p>\n</li>\n<li><p>这个写回内存的操作会使在其他CPU里缓存了该内存地址的数据无效</p>\n</li>\n</ol>\n<p>其实很简单，各个线程会有一个<strong>共享的主内存</strong>，读取数据都要从主内存读取，每个线程都有自己的内存，线程读取数据的时候就是把主内存的数据读取到线程私有的内存里面，当线程修改自己内存中的变量之后，会将修改的值更新到主内存中，此时其他线程私有内存中所保留的值全部失效，必须重新从主内存读取该变量 </p>\n<blockquote>\n<p>volatile中使用的是地址的引用，而非值的复制，因为如果是值的复制的话，当volatile中所修饰的值变得非常大之后，复制也是非常耗时的，可能就无法保证及时将修改后的数据及时协会到内存中</p>\n</blockquote>\n<p>线程</p>\n<blockquote>\n<p>JMM是个虚拟概念，在实际中其实就是放在cache中</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>那其他线程是如何知道自己缓存的数据有变化了那？</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>这是通过硬件（处理器的嗅探机制）来实现的，不难猜出，所谓的嗅探机制就是当共享内存的变量被修改的时候，所有缓存该变量的线程中的值都将失效，必须要重新从共享内存读取才行</p>\n</blockquote>\n<h3 id=\"volatile优化\"><a href=\"#volatile优化\" class=\"headerlink\" title=\"volatile优化\"></a>volatile优化</h3><p>缓存行数据为64字节，但是如果结点的数据不足64字节的话，自动填充到64字节可以提升效率</p>\n<p>不能使用volatile变量是都应该追加到64字节吗？两种情况不允许</p>\n<ul>\n<li><p>缓存行非64字节宽的处理器</p>\n</li>\n<li><p>共享变量不会被频繁的写</p>\n</li>\n</ul>"},{"title":"wsl2安装centos","description":"","abbrlink":"72fda5a3","date":"2024-03-27T16:00:00.000Z","_content":"\n\n## 前提\n\n\n\n> 已经装了wsl2\n\n\n\n## 下载centos镜像\n\n\n\n从[centos](https://github.com/mishamosher/CentOS-WSL)下载镜像，直接点击exe安装\n\n\n\n>一般推荐安装在其他盘当中，不是c（系统）盘\n\n\n\n![image-20240328095058822](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20240328095058822.png)\n\n\n\n![image-20240328095133146](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20240328095133146.png)\n\n\n\n![image-20240328095148773](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20240328095148773.png)\n\n\n\nvhdx是执行过exe文件之后会出现的\n\n\n\n> 基本上出现之后 然后重启 就可以直接进入了\n\n\n\n![image-20240328095326506](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20240328095326506.png)\n","source":"_posts/wsl2安装centos.md","raw":"---\ntitle: wsl2安装centos\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 72fda5a3\ndate: 2024-03-28 00:00:00\n---\n\n\n## 前提\n\n\n\n> 已经装了wsl2\n\n\n\n## 下载centos镜像\n\n\n\n从[centos](https://github.com/mishamosher/CentOS-WSL)下载镜像，直接点击exe安装\n\n\n\n>一般推荐安装在其他盘当中，不是c（系统）盘\n\n\n\n![image-20240328095058822](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20240328095058822.png)\n\n\n\n![image-20240328095133146](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20240328095133146.png)\n\n\n\n![image-20240328095148773](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20240328095148773.png)\n\n\n\nvhdx是执行过exe文件之后会出现的\n\n\n\n> 基本上出现之后 然后重启 就可以直接进入了\n\n\n\n![image-20240328095326506](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20240328095326506.png)\n","slug":"wsl2安装centos","published":1,"updated":"2025-03-02T03:37:34.411Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp52003zn0ukd2x416mj","content":"<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><blockquote>\n<p>已经装了wsl2</p>\n</blockquote>\n<h2 id=\"下载centos镜像\"><a href=\"#下载centos镜像\" class=\"headerlink\" title=\"下载centos镜像\"></a>下载centos镜像</h2><p>从<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21pc2hhbW9zaGVyL0NlbnRPUy1XU0w=\">centos<i class=\"fa fa-external-link-alt\"></i></span>下载镜像，直接点击exe安装</p>\n<blockquote>\n<p>一般推荐安装在其他盘当中，不是c（系统）盘</p>\n</blockquote>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20240328095058822.png\" alt=\"image-20240328095058822\" loading=\"lazy\"></p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20240328095133146.png\" alt=\"image-20240328095133146\" loading=\"lazy\"></p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20240328095148773.png\" alt=\"image-20240328095148773\" loading=\"lazy\"></p>\n<p>vhdx是执行过exe文件之后会出现的</p>\n<blockquote>\n<p>基本上出现之后 然后重启 就可以直接进入了</p>\n</blockquote>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20240328095326506.png\" alt=\"image-20240328095326506\" loading=\"lazy\"></p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"前提\n已经装了wsl2\n\n下载centos镜像\n从centos下载镜像，直接点击exe安装\n\n一般推荐安装在其他盘当中，不是c（系统）盘\n\n\n\n\n\n\n\nvhdx是执行过exe文件之后会出现的\n\n基本上出现之后 然后重启 就可以直接进入了","more":"<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><blockquote>\n<p>已经装了wsl2</p>\n</blockquote>\n<h2 id=\"下载centos镜像\"><a href=\"#下载centos镜像\" class=\"headerlink\" title=\"下载centos镜像\"></a>下载centos镜像</h2><p>从<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21pc2hhbW9zaGVyL0NlbnRPUy1XU0w=\">centos<i class=\"fa fa-external-link-alt\"></i></span>下载镜像，直接点击exe安装</p>\n<blockquote>\n<p>一般推荐安装在其他盘当中，不是c（系统）盘</p>\n</blockquote>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20240328095058822.png\" alt=\"image-20240328095058822\" loading=\"lazy\"></p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20240328095133146.png\" alt=\"image-20240328095133146\" loading=\"lazy\"></p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20240328095148773.png\" alt=\"image-20240328095148773\" loading=\"lazy\"></p>\n<p>vhdx是执行过exe文件之后会出现的</p>\n<blockquote>\n<p>基本上出现之后 然后重启 就可以直接进入了</p>\n</blockquote>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20240328095326506.png\" alt=\"image-20240328095326506\" loading=\"lazy\"></p>\n"},{"title":"session，cookie和token","description":"","abbrlink":"c62acc1f","date":"2021-05-14T16:00:00.000Z","_content":"\n\n## http\n\n\n\n什么是无状态呢？就是说这一次请求和上一次请求是没有任何关系的，互不认识的，没有关联的。这种无状态的的好处是快速。坏处是假如我们想要把`www.zhihu.com/login.html`和`www.zhihu.com/index.html`关联起来，必须使用某些手段和工具\n\n\n\n## cookie和session\n\n\n\ncookie是session的一种实现方案\n\n\n\n客户端访问服务器的流程如下：\n\n\n\n- 首先，客户端会发送一个http请求到服务器端。\n\n- 服务器端接受客户端请求后，建立一个session，并发送一个http响应到客户端，这个响应头，其中就包含Set-Cookie头部。该头部包含了sessionId。Set-Cookie格式如下，具体请看[Cookie详解](http://bubkoo.com/2014/04/21/http-cookies-explained/)\n\n  `Set-Cookie: value[; expires=pubDate][; domain=domain][; path=path][; secure]`\n\n- 在客户端发起的第二次请求，假如服务器给了set-Cookie，浏览器会自动在请求头中添加cookie\n\n- 服务器接收请求，分解cookie，验证信息，核对成功后返回response给客户端\n\n\n\n### 注意\n\n\n\n- cookie只是实现session的其中一种方案。虽然是最常用的，但并不是唯一的方法。禁用cookie后还有其他方法存储，比如放在url中\n\n- 现在大多都是Session + Cookie，但是只用session不用cookie，或是只用cookie，不用session在理论上都可以保持会话状态。可是实际中因为多种原因，一般不会单独使用\n\n- 用session只需要在客户端保存一个id，实际上大量数据都是保存在服务端。如果全部用cookie，数据量大的时候客户端是没有那么多空间的。\n\n- 如果只用cookie不用session，那么账户信息全部保存在客户端，一旦被劫持，全部信息都会泄露。并且客户端数据量变大，网络传输的数据量也会变大\n\n\n\n### 区别\n\n\n\n- session是保存在服务端的，cookie是保存在客户端的\n\n\n\n## token\n\n\n\ntoken 也称作令牌，由uid+time+sign[+固定参数]\n\ntoken 的认证方式类似于**临时的证书签名**, 并且是一种服务端无状态的认证方式, 非常适合于 REST API 的场景. 所谓无状态就是服务端并不会保存身份认证相关的数据。\n\n\n\n### 组成\n\n\n\n- uid: 用户唯一身份标识\n\n- time: 当前时间的时间戳\n\n- sign: 签名, 使用 hash/encrypt 压缩成定长的十六进制字符串，以防止第三方恶意拼接\n\n- 固定参数(可选): 将一些常用的固定参数加入到 token 中是为了避免重复查库\n\n\n\n### 存放\n\n\n\ntoken在客户端一般存放于localStorage，cookie，或sessionStorage中。在服务器一般存于数据库中\n\n\n\n> 参考链接：\n\n>\n\n> - https://segmentfault.com/a/1190000017831088","source":"_posts/“session，cookie和token”.md","raw":"---\ntitle: session，cookie和token\ndescription: ''\ntags:\n  - 无标签\nabbrlink: c62acc1f\ndate: 2021-05-15 00:00:00\n---\n\n\n## http\n\n\n\n什么是无状态呢？就是说这一次请求和上一次请求是没有任何关系的，互不认识的，没有关联的。这种无状态的的好处是快速。坏处是假如我们想要把`www.zhihu.com/login.html`和`www.zhihu.com/index.html`关联起来，必须使用某些手段和工具\n\n\n\n## cookie和session\n\n\n\ncookie是session的一种实现方案\n\n\n\n客户端访问服务器的流程如下：\n\n\n\n- 首先，客户端会发送一个http请求到服务器端。\n\n- 服务器端接受客户端请求后，建立一个session，并发送一个http响应到客户端，这个响应头，其中就包含Set-Cookie头部。该头部包含了sessionId。Set-Cookie格式如下，具体请看[Cookie详解](http://bubkoo.com/2014/04/21/http-cookies-explained/)\n\n  `Set-Cookie: value[; expires=pubDate][; domain=domain][; path=path][; secure]`\n\n- 在客户端发起的第二次请求，假如服务器给了set-Cookie，浏览器会自动在请求头中添加cookie\n\n- 服务器接收请求，分解cookie，验证信息，核对成功后返回response给客户端\n\n\n\n### 注意\n\n\n\n- cookie只是实现session的其中一种方案。虽然是最常用的，但并不是唯一的方法。禁用cookie后还有其他方法存储，比如放在url中\n\n- 现在大多都是Session + Cookie，但是只用session不用cookie，或是只用cookie，不用session在理论上都可以保持会话状态。可是实际中因为多种原因，一般不会单独使用\n\n- 用session只需要在客户端保存一个id，实际上大量数据都是保存在服务端。如果全部用cookie，数据量大的时候客户端是没有那么多空间的。\n\n- 如果只用cookie不用session，那么账户信息全部保存在客户端，一旦被劫持，全部信息都会泄露。并且客户端数据量变大，网络传输的数据量也会变大\n\n\n\n### 区别\n\n\n\n- session是保存在服务端的，cookie是保存在客户端的\n\n\n\n## token\n\n\n\ntoken 也称作令牌，由uid+time+sign[+固定参数]\n\ntoken 的认证方式类似于**临时的证书签名**, 并且是一种服务端无状态的认证方式, 非常适合于 REST API 的场景. 所谓无状态就是服务端并不会保存身份认证相关的数据。\n\n\n\n### 组成\n\n\n\n- uid: 用户唯一身份标识\n\n- time: 当前时间的时间戳\n\n- sign: 签名, 使用 hash/encrypt 压缩成定长的十六进制字符串，以防止第三方恶意拼接\n\n- 固定参数(可选): 将一些常用的固定参数加入到 token 中是为了避免重复查库\n\n\n\n### 存放\n\n\n\ntoken在客户端一般存放于localStorage，cookie，或sessionStorage中。在服务器一般存于数据库中\n\n\n\n> 参考链接：\n\n>\n\n> - https://segmentfault.com/a/1190000017831088","slug":"“session，cookie和token”","published":1,"updated":"2025-03-02T03:37:34.411Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp520041n0uk4wrz4yvn","content":"<h2 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"http\"></a>http</h2><p>什么是无状态呢？就是说这一次请求和上一次请求是没有任何关系的，互不认识的，没有关联的。这种无状态的的好处是快速。坏处是假如我们想要把<code>www.zhihu.com/login.html</code>和<code>www.zhihu.com/index.html</code>关联起来，必须使用某些手段和工具</p>\n<h2 id=\"cookie和session\"><a href=\"#cookie和session\" class=\"headerlink\" title=\"cookie和session\"></a>cookie和session</h2><p>cookie是session的一种实现方案</p>\n<p>客户端访问服务器的流程如下：</p>\n<ul>\n<li><p>首先，客户端会发送一个http请求到服务器端。</p>\n</li>\n<li><p>服务器端接受客户端请求后，建立一个session，并发送一个http响应到客户端，这个响应头，其中就包含Set-Cookie头部。该头部包含了sessionId。Set-Cookie格式如下，具体请看<span class=\"exturl\" data-url=\"aHR0cDovL2J1Ymtvby5jb20vMjAxNC8wNC8yMS9odHRwLWNvb2tpZXMtZXhwbGFpbmVkLw==\">Cookie详解<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><code>Set-Cookie: value[; expires=pubDate][; domain=domain][; path=path][; secure]</code></p>\n</li>\n<li><p>在客户端发起的第二次请求，假如服务器给了set-Cookie，浏览器会自动在请求头中添加cookie</p>\n</li>\n<li><p>服务器接收请求，分解cookie，验证信息，核对成功后返回response给客户端</p>\n</li>\n</ul>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ul>\n<li><p>cookie只是实现session的其中一种方案。虽然是最常用的，但并不是唯一的方法。禁用cookie后还有其他方法存储，比如放在url中</p>\n</li>\n<li><p>现在大多都是Session + Cookie，但是只用session不用cookie，或是只用cookie，不用session在理论上都可以保持会话状态。可是实际中因为多种原因，一般不会单独使用</p>\n</li>\n<li><p>用session只需要在客户端保存一个id，实际上大量数据都是保存在服务端。如果全部用cookie，数据量大的时候客户端是没有那么多空间的。</p>\n</li>\n<li><p>如果只用cookie不用session，那么账户信息全部保存在客户端，一旦被劫持，全部信息都会泄露。并且客户端数据量变大，网络传输的数据量也会变大</p>\n</li>\n</ul>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><ul>\n<li>session是保存在服务端的，cookie是保存在客户端的</li>\n</ul>\n<h2 id=\"token\"><a href=\"#token\" class=\"headerlink\" title=\"token\"></a>token</h2><p>token 也称作令牌，由uid+time+sign[+固定参数]</p>\n<p>token 的认证方式类似于<strong>临时的证书签名</strong>, 并且是一种服务端无状态的认证方式, 非常适合于 REST API 的场景. 所谓无状态就是服务端并不会保存身份认证相关的数据。</p>\n<h3 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h3><ul>\n<li><p>uid: 用户唯一身份标识</p>\n</li>\n<li><p>time: 当前时间的时间戳</p>\n</li>\n<li><p>sign: 签名, 使用 hash&#x2F;encrypt 压缩成定长的十六进制字符串，以防止第三方恶意拼接</p>\n</li>\n<li><p>固定参数(可选): 将一些常用的固定参数加入到 token 中是为了避免重复查库</p>\n</li>\n</ul>\n<h3 id=\"存放\"><a href=\"#存放\" class=\"headerlink\" title=\"存放\"></a>存放</h3><p>token在客户端一般存放于localStorage，cookie，或sessionStorage中。在服务器一般存于数据库中</p>\n<blockquote>\n<p>参考链接：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxNzgzMTA4OA==\">https://segmentfault.com/a/1190000017831088<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</blockquote>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"http\n什么是无状态呢？就是说这一次请求和上一次请求是没有任何关系的，互不认识的，没有关联的。这种无状态的的好处是快速。坏处是假如我们想要把www.zhihu.com/login.html和www.zhihu.com/index.html关联起来，必须使用某些手段和工具\n\ncookie和session\ncookie是session的一种实现方案\n\n客户端访问服务器的流程如下：\n\n * 首先，客户端会发送一个http请求到服务器端。\n   \n   \n * 服务器端接受客户端请求后，建立一个session，并发送一个http响应到客户端，这个响应头，其中就包含Set-Cookie头部。该头部包含","more":"<h2 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"http\"></a>http</h2><p>什么是无状态呢？就是说这一次请求和上一次请求是没有任何关系的，互不认识的，没有关联的。这种无状态的的好处是快速。坏处是假如我们想要把<code>www.zhihu.com/login.html</code>和<code>www.zhihu.com/index.html</code>关联起来，必须使用某些手段和工具</p>\n<h2 id=\"cookie和session\"><a href=\"#cookie和session\" class=\"headerlink\" title=\"cookie和session\"></a>cookie和session</h2><p>cookie是session的一种实现方案</p>\n<p>客户端访问服务器的流程如下：</p>\n<ul>\n<li><p>首先，客户端会发送一个http请求到服务器端。</p>\n</li>\n<li><p>服务器端接受客户端请求后，建立一个session，并发送一个http响应到客户端，这个响应头，其中就包含Set-Cookie头部。该头部包含了sessionId。Set-Cookie格式如下，具体请看<span class=\"exturl\" data-url=\"aHR0cDovL2J1Ymtvby5jb20vMjAxNC8wNC8yMS9odHRwLWNvb2tpZXMtZXhwbGFpbmVkLw==\">Cookie详解<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><code>Set-Cookie: value[; expires=pubDate][; domain=domain][; path=path][; secure]</code></p>\n</li>\n<li><p>在客户端发起的第二次请求，假如服务器给了set-Cookie，浏览器会自动在请求头中添加cookie</p>\n</li>\n<li><p>服务器接收请求，分解cookie，验证信息，核对成功后返回response给客户端</p>\n</li>\n</ul>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ul>\n<li><p>cookie只是实现session的其中一种方案。虽然是最常用的，但并不是唯一的方法。禁用cookie后还有其他方法存储，比如放在url中</p>\n</li>\n<li><p>现在大多都是Session + Cookie，但是只用session不用cookie，或是只用cookie，不用session在理论上都可以保持会话状态。可是实际中因为多种原因，一般不会单独使用</p>\n</li>\n<li><p>用session只需要在客户端保存一个id，实际上大量数据都是保存在服务端。如果全部用cookie，数据量大的时候客户端是没有那么多空间的。</p>\n</li>\n<li><p>如果只用cookie不用session，那么账户信息全部保存在客户端，一旦被劫持，全部信息都会泄露。并且客户端数据量变大，网络传输的数据量也会变大</p>\n</li>\n</ul>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><ul>\n<li>session是保存在服务端的，cookie是保存在客户端的</li>\n</ul>\n<h2 id=\"token\"><a href=\"#token\" class=\"headerlink\" title=\"token\"></a>token</h2><p>token 也称作令牌，由uid+time+sign[+固定参数]</p>\n<p>token 的认证方式类似于<strong>临时的证书签名</strong>, 并且是一种服务端无状态的认证方式, 非常适合于 REST API 的场景. 所谓无状态就是服务端并不会保存身份认证相关的数据。</p>\n<h3 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h3><ul>\n<li><p>uid: 用户唯一身份标识</p>\n</li>\n<li><p>time: 当前时间的时间戳</p>\n</li>\n<li><p>sign: 签名, 使用 hash&#x2F;encrypt 压缩成定长的十六进制字符串，以防止第三方恶意拼接</p>\n</li>\n<li><p>固定参数(可选): 将一些常用的固定参数加入到 token 中是为了避免重复查库</p>\n</li>\n</ul>\n<h3 id=\"存放\"><a href=\"#存放\" class=\"headerlink\" title=\"存放\"></a>存放</h3><p>token在客户端一般存放于localStorage，cookie，或sessionStorage中。在服务器一般存于数据库中</p>\n<blockquote>\n<p>参考链接：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxNzgzMTA4OA==\">https://segmentfault.com/a/1190000017831088<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</blockquote>\n"},{"title":"一个有序且元素重复的数组来进行去重排序","description":"","abbrlink":"d9bd5a32","date":"2021-05-06T16:00:00.000Z","_content":"\n\n一个有序数组，比如1 1 2 3 4 5 6 ，要拿到前五个不重复的长度\n\n\n\n<!-- more -->\n\n\n\n### 思路\n\n\n\n\n\n\n\n### 代码实现\n\n\n\n```java\n\npublic static int [] get(int [] res){\n\n    if (res.length < 1){\n\n        return res;\n\n    }\n\n    int i = 0, r = i+1;\n\n    while (r < res.length){\n\n        if (res[i]==res[r]){\n\n            r++;\n\n            continue;\n\n        }\n\n        i++;\n\n        res[i]=res[r];\n\n        r++;\n\n    }\n\n    int[] ints = Arrays.copyOf(res, i + 1);\n\n    return ints;\n\n}\n\n```","source":"_posts/一个有序且元素重复的数组来进行去重排序.md","raw":"---\ntitle: 一个有序且元素重复的数组来进行去重排序\ndescription: ''\ntags:\n  - 无标签\nabbrlink: d9bd5a32\ndate: 2021-05-07 00:00:00\n---\n\n\n一个有序数组，比如1 1 2 3 4 5 6 ，要拿到前五个不重复的长度\n\n\n\n<!-- more -->\n\n\n\n### 思路\n\n\n\n\n\n\n\n### 代码实现\n\n\n\n```java\n\npublic static int [] get(int [] res){\n\n    if (res.length < 1){\n\n        return res;\n\n    }\n\n    int i = 0, r = i+1;\n\n    while (r < res.length){\n\n        if (res[i]==res[r]){\n\n            r++;\n\n            continue;\n\n        }\n\n        i++;\n\n        res[i]=res[r];\n\n        r++;\n\n    }\n\n    int[] ints = Arrays.copyOf(res, i + 1);\n\n    return ints;\n\n}\n\n```","slug":"一个有序且元素重复的数组来进行去重排序","published":1,"updated":"2025-03-02T03:37:34.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp530043n0uk6lenhuie","content":"<p>一个有序数组，比如1 1 2 3 4 5 6 ，要拿到前五个不重复的长度</p>\n<span id=\"more\"></span>\n\n\n\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> [] get(<span class=\"type\">int</span> [] res)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res.length &lt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, r = i+<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (r &lt; res.length)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res[i]==res[r])&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            r++;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        i++;</span><br><span class=\"line\"></span><br><span class=\"line\">        res[i]=res[r];</span><br><span class=\"line\"></span><br><span class=\"line\">        r++;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span>[] ints = Arrays.copyOf(res, i + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ints;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"一个有序数组，比如1 1 2 3 4 5 6 ，要拿到前五个不重复的长度\n\n思路\n代码实现\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n\npublic static int [] get(int [] res){\n\n    if (res.length < 1){\n\n        return res;\n\n    }\n\n    int i = 0, r = i+1;\n\n    while (r < res.length){\n\n        ","more":"<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> [] get(<span class=\"type\">int</span> [] res)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res.length &lt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, r = i+<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (r &lt; res.length)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res[i]==res[r])&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            r++;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        i++;</span><br><span class=\"line\"></span><br><span class=\"line\">        res[i]=res[r];</span><br><span class=\"line\"></span><br><span class=\"line\">        r++;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span>[] ints = Arrays.copyOf(res, i + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ints;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"一致性hash","description":"","abbrlink":"5cd14851","date":"2021-05-02T16:00:00.000Z","_content":"\n\n文章摘要\n\n\n\n介绍一致性hash的来源和实现\n\n\n\n<!-- more -->\n\n\n\n### 来源\n\n\n\n为什么会出现这个东西那？\n\n\n\n主要是有了将数据均匀的分散到各个节点中，并且尽量的在加减节点时能使受影响的数据最少的这个需求，传统的hash满足不了，所以出现这个东西\n\n\n\n### 实现\n\n\n\n#### 范围\n\n\n\n首先是将所有的哈希值构成了一个环，其范围在 `0 ~ 2^32-1`，然后各个节点分布在这个环上\n\n\n\n![image-20210503210812429](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210503210812429.png)\n\n\n\n#### 容错性\n\n\n\n![image-20210503210949748](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210503210949748.png)\n\n\n\n比如在n1服务器宕机的时候，依然根据顺时针方向，k2 和 k3 保持不变，只有 k1 被重新映射到了 N3。这样就很好的保证了容错性，当一个节点宕机时只会影响到少少部分的数据。\n\n\n\n#### 拓展性\n\n\n\n![image-20210503211012751](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210503211012751.png)\n\n\n\n在 N2 和 N3 之间新增了一个节点 N4 ，这时会发现受印象的数据只有 k3，其余数据也是保持不变，所以这样也很好的保证了拓展性。\n\n\n\n#### 虚拟节点\n\n\n\n出现这个东西的原因是因为，当服务器数量比较少的时候，会出现数据分布不均匀的情况\n\n\n\n于是引入了虚拟节点\n\n\n\n虚拟节点的意思其实就是一个key进行多次hash，得到的值，都在hash环上，但是这几个都是虚拟的机器，实际上还是存储在实际的机器上\n\n\n\n> 参考文章：\n\n>\n\n> - https://crossoverjie.top/2018/01/08/Consistent-Hash/\n\n> - https://blog.csdn.net/suifeng629/article/details/81567777","source":"_posts/一致性hash.md","raw":"---\ntitle: 一致性hash\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 5cd14851\ndate: 2021-05-03 00:00:00\n---\n\n\n文章摘要\n\n\n\n介绍一致性hash的来源和实现\n\n\n\n<!-- more -->\n\n\n\n### 来源\n\n\n\n为什么会出现这个东西那？\n\n\n\n主要是有了将数据均匀的分散到各个节点中，并且尽量的在加减节点时能使受影响的数据最少的这个需求，传统的hash满足不了，所以出现这个东西\n\n\n\n### 实现\n\n\n\n#### 范围\n\n\n\n首先是将所有的哈希值构成了一个环，其范围在 `0 ~ 2^32-1`，然后各个节点分布在这个环上\n\n\n\n![image-20210503210812429](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210503210812429.png)\n\n\n\n#### 容错性\n\n\n\n![image-20210503210949748](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210503210949748.png)\n\n\n\n比如在n1服务器宕机的时候，依然根据顺时针方向，k2 和 k3 保持不变，只有 k1 被重新映射到了 N3。这样就很好的保证了容错性，当一个节点宕机时只会影响到少少部分的数据。\n\n\n\n#### 拓展性\n\n\n\n![image-20210503211012751](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210503211012751.png)\n\n\n\n在 N2 和 N3 之间新增了一个节点 N4 ，这时会发现受印象的数据只有 k3，其余数据也是保持不变，所以这样也很好的保证了拓展性。\n\n\n\n#### 虚拟节点\n\n\n\n出现这个东西的原因是因为，当服务器数量比较少的时候，会出现数据分布不均匀的情况\n\n\n\n于是引入了虚拟节点\n\n\n\n虚拟节点的意思其实就是一个key进行多次hash，得到的值，都在hash环上，但是这几个都是虚拟的机器，实际上还是存储在实际的机器上\n\n\n\n> 参考文章：\n\n>\n\n> - https://crossoverjie.top/2018/01/08/Consistent-Hash/\n\n> - https://blog.csdn.net/suifeng629/article/details/81567777","slug":"一致性hash","published":1,"updated":"2025-03-02T03:37:34.413Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp530045n0uk5np37a7o","content":"<p>文章摘要</p>\n<p>介绍一致性hash的来源和实现</p>\n<span id=\"more\"></span>\n\n\n\n<h3 id=\"来源\"><a href=\"#来源\" class=\"headerlink\" title=\"来源\"></a>来源</h3><p>为什么会出现这个东西那？</p>\n<p>主要是有了将数据均匀的分散到各个节点中，并且尽量的在加减节点时能使受影响的数据最少的这个需求，传统的hash满足不了，所以出现这个东西</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><h4 id=\"范围\"><a href=\"#范围\" class=\"headerlink\" title=\"范围\"></a>范围</h4><p>首先是将所有的哈希值构成了一个环，其范围在 <code>0 ~ 2^32-1</code>，然后各个节点分布在这个环上</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210503210812429.png\" alt=\"image-20210503210812429\" loading=\"lazy\"></p>\n<h4 id=\"容错性\"><a href=\"#容错性\" class=\"headerlink\" title=\"容错性\"></a>容错性</h4><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210503210949748.png\" alt=\"image-20210503210949748\" loading=\"lazy\"></p>\n<p>比如在n1服务器宕机的时候，依然根据顺时针方向，k2 和 k3 保持不变，只有 k1 被重新映射到了 N3。这样就很好的保证了容错性，当一个节点宕机时只会影响到少少部分的数据。</p>\n<h4 id=\"拓展性\"><a href=\"#拓展性\" class=\"headerlink\" title=\"拓展性\"></a>拓展性</h4><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210503211012751.png\" alt=\"image-20210503211012751\" loading=\"lazy\"></p>\n<p>在 N2 和 N3 之间新增了一个节点 N4 ，这时会发现受印象的数据只有 k3，其余数据也是保持不变，所以这样也很好的保证了拓展性。</p>\n<h4 id=\"虚拟节点\"><a href=\"#虚拟节点\" class=\"headerlink\" title=\"虚拟节点\"></a>虚拟节点</h4><p>出现这个东西的原因是因为，当服务器数量比较少的时候，会出现数据分布不均匀的情况</p>\n<p>于是引入了虚拟节点</p>\n<p>虚拟节点的意思其实就是一个key进行多次hash，得到的值，都在hash环上，但是这几个都是虚拟的机器，实际上还是存储在实际的机器上</p>\n<blockquote>\n<p>参考文章：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcm9zc292ZXJqaWUudG9wLzIwMTgvMDEvMDgvQ29uc2lzdGVudC1IYXNoLw==\">https://crossoverjie.top/2018/01/08/Consistent-Hash/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1aWZlbmc2MjkvYXJ0aWNsZS9kZXRhaWxzLzgxNTY3Nzc3\">https://blog.csdn.net/suifeng629/article/details/81567777<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</blockquote>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"文章摘要\n\n介绍一致性hash的来源和实现\n\n来源\n为什么会出现这个东西那？\n\n主要是有了将数据均匀的分散到各个节点中，并且尽量的在加减节点时能使受影响的数据最少的这个需求，传统的hash满足不了，所以出现这个东西\n\n实现\n范围\n首先是将所有的哈希值构成了一个环，其范围在 0 ~ 2^32-1，然后各个节点分布在这个环上\n\n\n\n容错性\n\n\n比如在n1服务器宕机的时候，依然根据顺时针方向，k2 和 k3 保持不变，只有 k1 被重新映射到了 N3。这样就很好的保证了容错性，当一个节点宕机时只会影响到少少部分的数据。\n\n拓展性\n\n\n在 N2 和 N3 之间新增了一个节点 N4 ，这时会发现受印象的","more":"<h3 id=\"来源\"><a href=\"#来源\" class=\"headerlink\" title=\"来源\"></a>来源</h3><p>为什么会出现这个东西那？</p>\n<p>主要是有了将数据均匀的分散到各个节点中，并且尽量的在加减节点时能使受影响的数据最少的这个需求，传统的hash满足不了，所以出现这个东西</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><h4 id=\"范围\"><a href=\"#范围\" class=\"headerlink\" title=\"范围\"></a>范围</h4><p>首先是将所有的哈希值构成了一个环，其范围在 <code>0 ~ 2^32-1</code>，然后各个节点分布在这个环上</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210503210812429.png\" alt=\"image-20210503210812429\" loading=\"lazy\"></p>\n<h4 id=\"容错性\"><a href=\"#容错性\" class=\"headerlink\" title=\"容错性\"></a>容错性</h4><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210503210949748.png\" alt=\"image-20210503210949748\" loading=\"lazy\"></p>\n<p>比如在n1服务器宕机的时候，依然根据顺时针方向，k2 和 k3 保持不变，只有 k1 被重新映射到了 N3。这样就很好的保证了容错性，当一个节点宕机时只会影响到少少部分的数据。</p>\n<h4 id=\"拓展性\"><a href=\"#拓展性\" class=\"headerlink\" title=\"拓展性\"></a>拓展性</h4><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210503211012751.png\" alt=\"image-20210503211012751\" loading=\"lazy\"></p>\n<p>在 N2 和 N3 之间新增了一个节点 N4 ，这时会发现受印象的数据只有 k3，其余数据也是保持不变，所以这样也很好的保证了拓展性。</p>\n<h4 id=\"虚拟节点\"><a href=\"#虚拟节点\" class=\"headerlink\" title=\"虚拟节点\"></a>虚拟节点</h4><p>出现这个东西的原因是因为，当服务器数量比较少的时候，会出现数据分布不均匀的情况</p>\n<p>于是引入了虚拟节点</p>\n<p>虚拟节点的意思其实就是一个key进行多次hash，得到的值，都在hash环上，但是这几个都是虚拟的机器，实际上还是存储在实际的机器上</p>\n<blockquote>\n<p>参考文章：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcm9zc292ZXJqaWUudG9wLzIwMTgvMDEvMDgvQ29uc2lzdGVudC1IYXNoLw==\">https://crossoverjie.top/2018/01/08/Consistent-Hash/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1aWZlbmc2MjkvYXJ0aWNsZS9kZXRhaWxzLzgxNTY3Nzc3\">https://blog.csdn.net/suifeng629/article/details/81567777<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</blockquote>"},{"title":"不是吧，不是吧，现在的女生都这么恋爱脑啊！！！","description":"","abbrlink":"8bca1990","date":"2023-05-07T16:00:00.000Z","_content":"\n\n简单说一下我最近看抖音一个情感博主直播的感想\n\n\n\n<!-- more -->\n\n\n\n最近无聊刷抖音的时候，突然刷到一个情感博主的直播，然后我就进去看了看，听了几个妹子的情感故事，笑死我了，昨天晚上更是离谱，一个男孩子的故事真是击碎了我的三观，没想到他这么能忍，真是绝啊！！！\n\n\n\n我简单回忆一下，那个男孩子的情感故事。\n\n\n\n他高中的时候和那个女生谈恋爱了，持续了几个月就分手了，期间东西没有少买，只要是女生喜欢的他都买了，然后男的和女的就断断嘘嘘复合分手，时间来到了现在，两个人都上了大学，目前是大一学期，女的上了大学之后，跟男的说是继续谈的，但是又说由于异地的原因，她孤单寂寞冷，于是又找了新的男朋友，但是中间还是跟男主联系，其实，这个女的在高中的时候都劈腿过，他们这段关系，持续了大概五年左右吧，期间女的劈腿少说五六七八次了，但是男主还是一直忍受，当时直播间都无语了，说这个男的真秀啊，这tm都能忍，而且男主还说自己跟这个女的谈了五年了，真笑死，实际也就几个月而已，其他时间女的都是找了其他的男人，真是史上最强备胎啊，有钱，也会给予陪伴和关怀，呼之即来挥之即去，真是太秀了！！ 更离谱的是男主最近也聊了几个月的新的女生，这个女主还不让男主和这个女孩联系，真是屁事儿多啊，问题是男主还在纠结，说五年了，要什么空窗期，博主直接都说，你可拉倒吧，你这tm都算五年的话，是个人都随随便便十年了，真笑死，人家女主也没有给你空窗期啊，一直在找新的，这个最强备胎真是实至名归啊。\n\n\n\n还有一些女孩子的情感故事，也是非常的绝！！！是我老了吗？怎么现在的年轻人的爱情都这么容易了，男生和女生见面第二次就走流程了，之后，女的发消息，男的不回复，女的还在想，这个男的怎么回事儿那，都想不到说，只是为了上床而已，真是秀啊，如今的恋爱脑真是有点夸张了，听到的都是类似于这样的故事，甚至还有人用一些很老的套路，说是要是继续谈的话，就要一起走流程，要不就算了，真是笑死了。\n\n\n\n怎么感觉这些女孩都这么容易骗啊，但是回到自己身上，好像并没有这样哎，是因为没有把握住大一的或者更年轻的机会吗？还是说那些男孩都是185的大帅哥，女孩子倒贴自己都很高兴？谁知道那，只是感觉现在的所谓的恋爱，或者这种男女朋友的亲密关系，大家都是玩玩而已。\n","source":"_posts/不是吧，不是吧，现在的女生都这么恋爱脑啊！！！.md","raw":"---\ntitle: 不是吧，不是吧，现在的女生都这么恋爱脑啊！！！\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 8bca1990\ndate: 2023-05-08 00:00:00\n---\n\n\n简单说一下我最近看抖音一个情感博主直播的感想\n\n\n\n<!-- more -->\n\n\n\n最近无聊刷抖音的时候，突然刷到一个情感博主的直播，然后我就进去看了看，听了几个妹子的情感故事，笑死我了，昨天晚上更是离谱，一个男孩子的故事真是击碎了我的三观，没想到他这么能忍，真是绝啊！！！\n\n\n\n我简单回忆一下，那个男孩子的情感故事。\n\n\n\n他高中的时候和那个女生谈恋爱了，持续了几个月就分手了，期间东西没有少买，只要是女生喜欢的他都买了，然后男的和女的就断断嘘嘘复合分手，时间来到了现在，两个人都上了大学，目前是大一学期，女的上了大学之后，跟男的说是继续谈的，但是又说由于异地的原因，她孤单寂寞冷，于是又找了新的男朋友，但是中间还是跟男主联系，其实，这个女的在高中的时候都劈腿过，他们这段关系，持续了大概五年左右吧，期间女的劈腿少说五六七八次了，但是男主还是一直忍受，当时直播间都无语了，说这个男的真秀啊，这tm都能忍，而且男主还说自己跟这个女的谈了五年了，真笑死，实际也就几个月而已，其他时间女的都是找了其他的男人，真是史上最强备胎啊，有钱，也会给予陪伴和关怀，呼之即来挥之即去，真是太秀了！！ 更离谱的是男主最近也聊了几个月的新的女生，这个女主还不让男主和这个女孩联系，真是屁事儿多啊，问题是男主还在纠结，说五年了，要什么空窗期，博主直接都说，你可拉倒吧，你这tm都算五年的话，是个人都随随便便十年了，真笑死，人家女主也没有给你空窗期啊，一直在找新的，这个最强备胎真是实至名归啊。\n\n\n\n还有一些女孩子的情感故事，也是非常的绝！！！是我老了吗？怎么现在的年轻人的爱情都这么容易了，男生和女生见面第二次就走流程了，之后，女的发消息，男的不回复，女的还在想，这个男的怎么回事儿那，都想不到说，只是为了上床而已，真是秀啊，如今的恋爱脑真是有点夸张了，听到的都是类似于这样的故事，甚至还有人用一些很老的套路，说是要是继续谈的话，就要一起走流程，要不就算了，真是笑死了。\n\n\n\n怎么感觉这些女孩都这么容易骗啊，但是回到自己身上，好像并没有这样哎，是因为没有把握住大一的或者更年轻的机会吗？还是说那些男孩都是185的大帅哥，女孩子倒贴自己都很高兴？谁知道那，只是感觉现在的所谓的恋爱，或者这种男女朋友的亲密关系，大家都是玩玩而已。\n","slug":"不是吧，不是吧，现在的女生都这么恋爱脑啊！！！","published":1,"updated":"2025-03-02T03:37:34.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp530047n0ukgzsi9e53","content":"<p>简单说一下我最近看抖音一个情感博主直播的感想</p>\n<span id=\"more\"></span>\n\n\n\n<p>最近无聊刷抖音的时候，突然刷到一个情感博主的直播，然后我就进去看了看，听了几个妹子的情感故事，笑死我了，昨天晚上更是离谱，一个男孩子的故事真是击碎了我的三观，没想到他这么能忍，真是绝啊！！！</p>\n<p>我简单回忆一下，那个男孩子的情感故事。</p>\n<p>他高中的时候和那个女生谈恋爱了，持续了几个月就分手了，期间东西没有少买，只要是女生喜欢的他都买了，然后男的和女的就断断嘘嘘复合分手，时间来到了现在，两个人都上了大学，目前是大一学期，女的上了大学之后，跟男的说是继续谈的，但是又说由于异地的原因，她孤单寂寞冷，于是又找了新的男朋友，但是中间还是跟男主联系，其实，这个女的在高中的时候都劈腿过，他们这段关系，持续了大概五年左右吧，期间女的劈腿少说五六七八次了，但是男主还是一直忍受，当时直播间都无语了，说这个男的真秀啊，这tm都能忍，而且男主还说自己跟这个女的谈了五年了，真笑死，实际也就几个月而已，其他时间女的都是找了其他的男人，真是史上最强备胎啊，有钱，也会给予陪伴和关怀，呼之即来挥之即去，真是太秀了！！ 更离谱的是男主最近也聊了几个月的新的女生，这个女主还不让男主和这个女孩联系，真是屁事儿多啊，问题是男主还在纠结，说五年了，要什么空窗期，博主直接都说，你可拉倒吧，你这tm都算五年的话，是个人都随随便便十年了，真笑死，人家女主也没有给你空窗期啊，一直在找新的，这个最强备胎真是实至名归啊。</p>\n<p>还有一些女孩子的情感故事，也是非常的绝！！！是我老了吗？怎么现在的年轻人的爱情都这么容易了，男生和女生见面第二次就走流程了，之后，女的发消息，男的不回复，女的还在想，这个男的怎么回事儿那，都想不到说，只是为了上床而已，真是秀啊，如今的恋爱脑真是有点夸张了，听到的都是类似于这样的故事，甚至还有人用一些很老的套路，说是要是继续谈的话，就要一起走流程，要不就算了，真是笑死了。</p>\n<p>怎么感觉这些女孩都这么容易骗啊，但是回到自己身上，好像并没有这样哎，是因为没有把握住大一的或者更年轻的机会吗？还是说那些男孩都是185的大帅哥，女孩子倒贴自己都很高兴？谁知道那，只是感觉现在的所谓的恋爱，或者这种男女朋友的亲密关系，大家都是玩玩而已。</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"简单说一下我最近看抖音一个情感博主直播的感想\n\n最近无聊刷抖音的时候，突然刷到一个情感博主的直播，然后我就进去看了看，听了几个妹子的情感故事，笑死我了，昨天晚上更是离谱，一个男孩子的故事真是击碎了我的三观，没想到他这么能忍，真是绝啊！！！\n\n我简单回忆一下，那个男孩子的情感故事。\n\n他高中的时候和那个女生谈恋爱了，持续了几个月就分手了，期间东西没有少买，只要是女生喜欢的他都买了，然后男的和女的就断断嘘嘘复合分手，时间来到了现在，两个人都上了大学，目前是大一学期，女的上了大学之后，跟男的说是继续谈的，但是又说由于异地的原因，她孤单寂寞冷，于是又找了新的男朋友，但是中间还是跟男主联系，其实，这个女","more":"<p>最近无聊刷抖音的时候，突然刷到一个情感博主的直播，然后我就进去看了看，听了几个妹子的情感故事，笑死我了，昨天晚上更是离谱，一个男孩子的故事真是击碎了我的三观，没想到他这么能忍，真是绝啊！！！</p>\n<p>我简单回忆一下，那个男孩子的情感故事。</p>\n<p>他高中的时候和那个女生谈恋爱了，持续了几个月就分手了，期间东西没有少买，只要是女生喜欢的他都买了，然后男的和女的就断断嘘嘘复合分手，时间来到了现在，两个人都上了大学，目前是大一学期，女的上了大学之后，跟男的说是继续谈的，但是又说由于异地的原因，她孤单寂寞冷，于是又找了新的男朋友，但是中间还是跟男主联系，其实，这个女的在高中的时候都劈腿过，他们这段关系，持续了大概五年左右吧，期间女的劈腿少说五六七八次了，但是男主还是一直忍受，当时直播间都无语了，说这个男的真秀啊，这tm都能忍，而且男主还说自己跟这个女的谈了五年了，真笑死，实际也就几个月而已，其他时间女的都是找了其他的男人，真是史上最强备胎啊，有钱，也会给予陪伴和关怀，呼之即来挥之即去，真是太秀了！！ 更离谱的是男主最近也聊了几个月的新的女生，这个女主还不让男主和这个女孩联系，真是屁事儿多啊，问题是男主还在纠结，说五年了，要什么空窗期，博主直接都说，你可拉倒吧，你这tm都算五年的话，是个人都随随便便十年了，真笑死，人家女主也没有给你空窗期啊，一直在找新的，这个最强备胎真是实至名归啊。</p>\n<p>还有一些女孩子的情感故事，也是非常的绝！！！是我老了吗？怎么现在的年轻人的爱情都这么容易了，男生和女生见面第二次就走流程了，之后，女的发消息，男的不回复，女的还在想，这个男的怎么回事儿那，都想不到说，只是为了上床而已，真是秀啊，如今的恋爱脑真是有点夸张了，听到的都是类似于这样的故事，甚至还有人用一些很老的套路，说是要是继续谈的话，就要一起走流程，要不就算了，真是笑死了。</p>\n<p>怎么感觉这些女孩都这么容易骗啊，但是回到自己身上，好像并没有这样哎，是因为没有把握住大一的或者更年轻的机会吗？还是说那些男孩都是185的大帅哥，女孩子倒贴自己都很高兴？谁知道那，只是感觉现在的所谓的恋爱，或者这种男女朋友的亲密关系，大家都是玩玩而已。</p>"},{"title":"为什么我要一个自己的博客？","description":"","abbrlink":"e99d2875","date":"2020-12-31T16:00:00.000Z","_content":"\n\n## 由来\n\n\n\n<!-- more -->\n\n\n\n&emsp;&emsp;其实我年初的时候就已经开启了一个博客，但是由于我在原来的那个电脑上胡乱折腾，导致用不了了，一度很伤心，当时就想着说有一天等我换电脑了，就重新运作起我的博客，这不一换电脑就立马折腾起来了。\n\n\n\n&emsp;&emsp;对于博客，不知道为什么自己有一种执念，虽然目前市面上的博客平台很多，比如博客园、掘进等等，但是我还是想要有自己的博客，我仔细想了想自己到底是为什么对拥有一个自己的博客这么有执念那?结果就是想要在网络平台上有一块自己的小地方，它也许不需要很大的流量，也不会有很多人关注，但它可能是我心里的那一道光，一个记录我自己成长的地方。\n\n\n","source":"_posts/为什么我要一个自己的博客？.md","raw":"---\ntitle: 为什么我要一个自己的博客？\ndescription: ''\ntags:\n  - 无标签\nabbrlink: e99d2875\ndate: 2021-01-01 00:00:00\n---\n\n\n## 由来\n\n\n\n<!-- more -->\n\n\n\n&emsp;&emsp;其实我年初的时候就已经开启了一个博客，但是由于我在原来的那个电脑上胡乱折腾，导致用不了了，一度很伤心，当时就想着说有一天等我换电脑了，就重新运作起我的博客，这不一换电脑就立马折腾起来了。\n\n\n\n&emsp;&emsp;对于博客，不知道为什么自己有一种执念，虽然目前市面上的博客平台很多，比如博客园、掘进等等，但是我还是想要有自己的博客，我仔细想了想自己到底是为什么对拥有一个自己的博客这么有执念那?结果就是想要在网络平台上有一块自己的小地方，它也许不需要很大的流量，也不会有很多人关注，但它可能是我心里的那一道光，一个记录我自己成长的地方。\n\n\n","slug":"为什么我要一个自己的博客？","published":1,"updated":"2025-03-02T03:37:34.415Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp540049n0ukcgxifbjf","content":"<h2 id=\"由来\"><a href=\"#由来\" class=\"headerlink\" title=\"由来\"></a>由来</h2><span id=\"more\"></span>\n\n\n\n<p>&emsp;&emsp;其实我年初的时候就已经开启了一个博客，但是由于我在原来的那个电脑上胡乱折腾，导致用不了了，一度很伤心，当时就想着说有一天等我换电脑了，就重新运作起我的博客，这不一换电脑就立马折腾起来了。</p>\n<p>&emsp;&emsp;对于博客，不知道为什么自己有一种执念，虽然目前市面上的博客平台很多，比如博客园、掘进等等，但是我还是想要有自己的博客，我仔细想了想自己到底是为什么对拥有一个自己的博客这么有执念那?结果就是想要在网络平台上有一块自己的小地方，它也许不需要很大的流量，也不会有很多人关注，但它可能是我心里的那一道光，一个记录我自己成长的地方。</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"由来\n其实我年初的时候就已经开启了一个博客，但是由于我在原来的那个电脑上胡乱折腾，导致用不了了，一度很伤心，当时就想着说有一天等我换电脑了，就重新运作起我的博客，这不一换电脑就立马折腾起来了。\n\n对于博客，不知道为什么自己有一种执念，虽然目前市面上的博客平台很多，比如博客园、掘进等等，但是我还是想要有自己的博客，我仔细想了想自己到底是为什么对拥有一个自己的博客这么有执念那?结果就是想要在网络平台上有一块自己的小地方，它也许不需要很大的流量，也不会有很多人关注，但它可能是我心里的那一道光，一个记录我自己成长的地方。","more":"<p>&emsp;&emsp;其实我年初的时候就已经开启了一个博客，但是由于我在原来的那个电脑上胡乱折腾，导致用不了了，一度很伤心，当时就想着说有一天等我换电脑了，就重新运作起我的博客，这不一换电脑就立马折腾起来了。</p>\n<p>&emsp;&emsp;对于博客，不知道为什么自己有一种执念，虽然目前市面上的博客平台很多，比如博客园、掘进等等，但是我还是想要有自己的博客，我仔细想了想自己到底是为什么对拥有一个自己的博客这么有执念那?结果就是想要在网络平台上有一块自己的小地方，它也许不需要很大的流量，也不会有很多人关注，但它可能是我心里的那一道光，一个记录我自己成长的地方。</p>"},{"title":"互联网公司开发流程","description":"","abbrlink":"b0b91c4e","date":"2021-04-17T16:00:00.000Z","_content":"\n\n## 部署方案\n\n\n\n### 滚动发布\n\n\n\n这是最常见的部署模式,一般就是说你一个服务/系统都会部署在多台机器上,部署的时候，要不然是手动依次部署，最low 的比如就是每台服务器上放一个tomcat，每台机器依次停布机 tomcat，然后把新的代码放进去，再重新启动tomcat，各个机器逐渐重启，这就是最low的的滚动发布\n\n\n\n<!-- more -->\n\n\n\n#### 手动部署\n\n\n\n1. 备份原来的代码\n\n2. 将新的代码部署上去\n\n\n\n#### 自动化部署\n\n\n\n一些自动化工具可以帮助我们自动化部署到机器上，比如Jenkins，它会从你指定的git仓库中拉取相应的代码，然后部署到指定的机器上\n\n\n\n> 无论是手动部署，还是自动化部署，都需要考虑如果部署失败，如何进行版本回退\n\n>\n\n> 那么如何来看是否部署成功那？\n\n>\n\n> 人工的话，就是去各个机器上看对应的日志就可以\n\n>\n\n> 使用jenkins的话，也会有日志打印，部署失败，会有相应提示\n\n\n\n### 灰度发布\n\n\n\n灰度发布，指的就是说，不要上线就滚动全部发布到所有机器，一般就是会部署在比如1台机器上，采用新版本，然后切比如10%的流量过去，观察那10%的流量在1台机器上运行-段时间，比如运行个几天时间，观察日志、异常、数据，是否一切正常，如果验证发现全部正常，那么此时就可以全量发布了\n\n\n\n全量发布还是采用的滚动发布的模式\n\n\n\n### 蓝绿发布\n\n\n\n蓝绿部署的意思是说，你得同时准备两个集群，一个集群放新版本代码，一个集群放老版本版权，然后新版本代码的集群准备好了过后，直接线上流量切到新版本集群上去，跑一段时间来验证，如果发现有问题，回滚就是立马把流量切回老的集群，回滚速度是很快的\n\n\n\n### 总结\n\n\n\n在进行一些bug修复，或是改动不大的小版本的话，建议使用灰度发布；\n\n\n\n如果是大版本的发版，建议使用蓝绿发布，防止部署失败，大规模服务失效的情况","source":"_posts/互联网公司开发流程.md","raw":"---\ntitle: 互联网公司开发流程\ndescription: ''\ntags:\n  - 无标签\nabbrlink: b0b91c4e\ndate: 2021-04-18 00:00:00\n---\n\n\n## 部署方案\n\n\n\n### 滚动发布\n\n\n\n这是最常见的部署模式,一般就是说你一个服务/系统都会部署在多台机器上,部署的时候，要不然是手动依次部署，最low 的比如就是每台服务器上放一个tomcat，每台机器依次停布机 tomcat，然后把新的代码放进去，再重新启动tomcat，各个机器逐渐重启，这就是最low的的滚动发布\n\n\n\n<!-- more -->\n\n\n\n#### 手动部署\n\n\n\n1. 备份原来的代码\n\n2. 将新的代码部署上去\n\n\n\n#### 自动化部署\n\n\n\n一些自动化工具可以帮助我们自动化部署到机器上，比如Jenkins，它会从你指定的git仓库中拉取相应的代码，然后部署到指定的机器上\n\n\n\n> 无论是手动部署，还是自动化部署，都需要考虑如果部署失败，如何进行版本回退\n\n>\n\n> 那么如何来看是否部署成功那？\n\n>\n\n> 人工的话，就是去各个机器上看对应的日志就可以\n\n>\n\n> 使用jenkins的话，也会有日志打印，部署失败，会有相应提示\n\n\n\n### 灰度发布\n\n\n\n灰度发布，指的就是说，不要上线就滚动全部发布到所有机器，一般就是会部署在比如1台机器上，采用新版本，然后切比如10%的流量过去，观察那10%的流量在1台机器上运行-段时间，比如运行个几天时间，观察日志、异常、数据，是否一切正常，如果验证发现全部正常，那么此时就可以全量发布了\n\n\n\n全量发布还是采用的滚动发布的模式\n\n\n\n### 蓝绿发布\n\n\n\n蓝绿部署的意思是说，你得同时准备两个集群，一个集群放新版本代码，一个集群放老版本版权，然后新版本代码的集群准备好了过后，直接线上流量切到新版本集群上去，跑一段时间来验证，如果发现有问题，回滚就是立马把流量切回老的集群，回滚速度是很快的\n\n\n\n### 总结\n\n\n\n在进行一些bug修复，或是改动不大的小版本的话，建议使用灰度发布；\n\n\n\n如果是大版本的发版，建议使用蓝绿发布，防止部署失败，大规模服务失效的情况","slug":"互联网公司开发流程","published":1,"updated":"2025-03-02T03:37:34.415Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp54004bn0uk8bzrb79o","content":"<h2 id=\"部署方案\"><a href=\"#部署方案\" class=\"headerlink\" title=\"部署方案\"></a>部署方案</h2><h3 id=\"滚动发布\"><a href=\"#滚动发布\" class=\"headerlink\" title=\"滚动发布\"></a>滚动发布</h3><p>这是最常见的部署模式,一般就是说你一个服务&#x2F;系统都会部署在多台机器上,部署的时候，要不然是手动依次部署，最low 的比如就是每台服务器上放一个tomcat，每台机器依次停布机 tomcat，然后把新的代码放进去，再重新启动tomcat，各个机器逐渐重启，这就是最low的的滚动发布</p>\n<span id=\"more\"></span>\n\n\n\n<h4 id=\"手动部署\"><a href=\"#手动部署\" class=\"headerlink\" title=\"手动部署\"></a>手动部署</h4><ol>\n<li><p>备份原来的代码</p>\n</li>\n<li><p>将新的代码部署上去</p>\n</li>\n</ol>\n<h4 id=\"自动化部署\"><a href=\"#自动化部署\" class=\"headerlink\" title=\"自动化部署\"></a>自动化部署</h4><p>一些自动化工具可以帮助我们自动化部署到机器上，比如Jenkins，它会从你指定的git仓库中拉取相应的代码，然后部署到指定的机器上</p>\n<blockquote>\n<p>无论是手动部署，还是自动化部署，都需要考虑如果部署失败，如何进行版本回退</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>那么如何来看是否部署成功那？</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>人工的话，就是去各个机器上看对应的日志就可以</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>使用jenkins的话，也会有日志打印，部署失败，会有相应提示</p>\n</blockquote>\n<h3 id=\"灰度发布\"><a href=\"#灰度发布\" class=\"headerlink\" title=\"灰度发布\"></a>灰度发布</h3><p>灰度发布，指的就是说，不要上线就滚动全部发布到所有机器，一般就是会部署在比如1台机器上，采用新版本，然后切比如10%的流量过去，观察那10%的流量在1台机器上运行-段时间，比如运行个几天时间，观察日志、异常、数据，是否一切正常，如果验证发现全部正常，那么此时就可以全量发布了</p>\n<p>全量发布还是采用的滚动发布的模式</p>\n<h3 id=\"蓝绿发布\"><a href=\"#蓝绿发布\" class=\"headerlink\" title=\"蓝绿发布\"></a>蓝绿发布</h3><p>蓝绿部署的意思是说，你得同时准备两个集群，一个集群放新版本代码，一个集群放老版本版权，然后新版本代码的集群准备好了过后，直接线上流量切到新版本集群上去，跑一段时间来验证，如果发现有问题，回滚就是立马把流量切回老的集群，回滚速度是很快的</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>在进行一些bug修复，或是改动不大的小版本的话，建议使用灰度发布；</p>\n<p>如果是大版本的发版，建议使用蓝绿发布，防止部署失败，大规模服务失效的情况</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"部署方案\n滚动发布\n这是最常见的部署模式,一般就是说你一个服务/系统都会部署在多台机器上,部署的时候，要不然是手动依次部署，最low 的比如就是每台服务器上放一个tomcat，每台机器依次停布机 tomcat，然后把新的代码放进去，再重新启动tomcat，各个机器逐渐重启，这就是最low的的滚动发布\n\n手动部署\n 1. 备份原来的代码\n    \n    \n 2. 将新的代码部署上去\n    \n    \n\n自动化部署\n一些自动化工具可以帮助我们自动化部署到机器上，比如Jenkins，它会从你指定的git仓库中拉取相应的代码，然后部署到指定的机器上\n\n无论是手动部署，还是自动化部署，都需要考虑如果","more":"<h4 id=\"手动部署\"><a href=\"#手动部署\" class=\"headerlink\" title=\"手动部署\"></a>手动部署</h4><ol>\n<li><p>备份原来的代码</p>\n</li>\n<li><p>将新的代码部署上去</p>\n</li>\n</ol>\n<h4 id=\"自动化部署\"><a href=\"#自动化部署\" class=\"headerlink\" title=\"自动化部署\"></a>自动化部署</h4><p>一些自动化工具可以帮助我们自动化部署到机器上，比如Jenkins，它会从你指定的git仓库中拉取相应的代码，然后部署到指定的机器上</p>\n<blockquote>\n<p>无论是手动部署，还是自动化部署，都需要考虑如果部署失败，如何进行版本回退</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>那么如何来看是否部署成功那？</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>人工的话，就是去各个机器上看对应的日志就可以</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>使用jenkins的话，也会有日志打印，部署失败，会有相应提示</p>\n</blockquote>\n<h3 id=\"灰度发布\"><a href=\"#灰度发布\" class=\"headerlink\" title=\"灰度发布\"></a>灰度发布</h3><p>灰度发布，指的就是说，不要上线就滚动全部发布到所有机器，一般就是会部署在比如1台机器上，采用新版本，然后切比如10%的流量过去，观察那10%的流量在1台机器上运行-段时间，比如运行个几天时间，观察日志、异常、数据，是否一切正常，如果验证发现全部正常，那么此时就可以全量发布了</p>\n<p>全量发布还是采用的滚动发布的模式</p>\n<h3 id=\"蓝绿发布\"><a href=\"#蓝绿发布\" class=\"headerlink\" title=\"蓝绿发布\"></a>蓝绿发布</h3><p>蓝绿部署的意思是说，你得同时准备两个集群，一个集群放新版本代码，一个集群放老版本版权，然后新版本代码的集群准备好了过后，直接线上流量切到新版本集群上去，跑一段时间来验证，如果发现有问题，回滚就是立马把流量切回老的集群，回滚速度是很快的</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>在进行一些bug修复，或是改动不大的小版本的话，建议使用灰度发布；</p>\n<p>如果是大版本的发版，建议使用蓝绿发布，防止部署失败，大规模服务失效的情况</p>"},{"title":"从源码层面理解AQS","description":"","abbrlink":"7e9f1d8e","date":"2021-07-16T16:00:00.000Z","_content":"了解一下\n\n\n\n<!-- more -->\n\n\n\n# 基本属性\n\n\n\n```java\n\n// 头结点，你直接把它当做 当前持有锁的线程 可能是最好理解的\n\nprivate transient volatile Node head;\n\n\n\n// 阻塞的尾节点，每个新的节点进来，都插入到最后，也就形成了一个链表\n\nprivate transient volatile Node tail;\n\n\n\n// 这个是最重要的，代表当前锁的状态，0代表没有被占用，大于 0 代表有线程持有当前锁\n\n// 这个值可以大于 1，是因为锁可以重入，每次重入都加上 1\n\nprivate volatile int state;\n\n\n\n// 代表当前持有独占锁的线程，举个最重要的使用例子，因为锁可以重入\n\n// reentrantLock.lock()可以嵌套调用多次，所以每次用这个来判断当前线程是否已经拥有了锁\n\n// if (currentThread == getExclusiveOwnerThread()) {state++}\n\nprivate transient Thread exclusiveOwnerThread; //继承自AbstractOwnableSynchronizer\n\n\n\n//\n\nNode nextWaiter;\n\n```\n\n# 常量\n\n```java\n\n//表示节点在共享模式下\n\nstatic final Node SHARED = new Node();\n\n//表示节点在独占模式下\n\nstatic final Node EXCLUSIVE = null;\n\n\n\n//下面的值是给waitState用的\n\n\n\n//代表此线程取消了争抢这个锁\n\nstatic final int CANCELLED =  1;\n\n//表示当前节点的后继节点需要被唤醒\n\nstatic final int SIGNAL    = -1;\n\n//waitStatus 值指示线程正在等待条件\n\nstatic final int CONDITION = -2;\n\n//指示下一个acquireShared 应无条件传播的waitStatus 值\n\nstatic final int PROPAGATE = -3;\n\n```\n\n# 方法\n\n## predecessor\n\n在node的结构当中有一个有一个有意思的方法\n\n```java\n\n//这个方法就是用来返回当前节点的前缀节点的，如果为空，就抛出异常，如果存在，就返回这个前缀节点\n\nfinal Node predecessor() throws NullPointerException {\n\n    Node p = prev;\n\n    if (p == null)\n\n        throw new NullPointerException();\n\n    else\n\n        return p;\n\n}\n\n```\n\n## FairSync-lock\n\n### lock\n\n```java\n\nfinal void lock() {\n\n    acquire(1);\n\n}\n\n```\n\n### acquire\n\n```java\n\n\n\npublic final void acquire(int arg) {\n\n    if (!tryAcquire(arg) &&\n\n        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n\n        selfInterrupt();\n\n}\n\n```\n\n可以清楚看到这个方法就是一个与条件，而想要这个方法成立     \n\n1. 要让tryAcquire返回的是false，而tryAcquire方法返回false的情况是 阻塞队列中有节点，或者cas竞争锁失败，并且当前线程没有锁。\n\n2. 这第二步就可以执行acquireQueued方法了,这个方法首先调用了addWaiter方法，addWaiter方法主要是就是将这个node加入阻塞队列当中，不过其中有个判断，就是如果队列不为空的话，就直接加入队列返回node，如果是为空的话，就初始化队列，然后返回node；acquireQueued方法只有一种情况会返回，就是获取到锁的时候，这个时候，返回的是false\n\n\n\n### tryAcquire\n\n```java\n\nprotected final boolean tryAcquire(int acquires) {\n\n    final Thread current = Thread.currentThread();\n\n    //state由于是int类型，而int类型在java中默认为0\n\n    int c = getState();\n\n    if (c == 0) {\n\n    //hasQueuedPredecessors这个方法就是用来判断是有线程在阻塞队列里面等待了，true是有，false是没有\n\n    //compareAndSetState很简单，就是cas，比较替换，如果前面判断是true的话，就说明是没有线程在等待的，于是就把当前线程的state的值从0替换为1\n\n    //前面两个都为true了，就将线程设置为独占模式\n\n        if (!hasQueuedPredecessors() &&\n\n            compareAndSetState(0, acquires)) {\n\n            setExclusiveOwnerThread(current);\n\n            return true;\n\n        }\n\n    }\n\n    //走到这里，说明有线程在阻塞队列当中等待或者cas替换失败，cas替换失败，说明此时并发地有两个或两个以上的线程在并发cas，而当前cas失败了\n\n    //判断当前线程是不是就是持有锁的这个线程，是的话，就是state+1\n\n    else if (current == getExclusiveOwnerThread()) {\n\n        int nextc = c + acquires;\n\n        if (nextc < 0)\n\n            throw new Error(\"Maximum lock count exceeded\");\n\n        setState(nextc);\n\n        return true;\n\n    }\n\n    //走到这里说明当前阻塞队列当中有节点或者cas失败，并且当前线程没有锁\n\n    return false;\n\n}\n\n```\n\n### hasQueuedPredecessors\n\n```java\n\npublic final boolean hasQueuedPredecessors() {\n\n//1. 判断这个队列不是空的\n\n//2. 判断当前线程和阻塞队列的第一个节点的线程是不是一个线程\n\n    Node t = tail; \n\n    Node h = head;\n\n    Node s;\n\n    return h != t &&\n\n        ((s = h.next) == null || s.thread != Thread.currentThread());\n\n}\n\n```\n\n### addWaiter\n\n```java\n\nprivate Node addWaiter(Node mode) {\n\n    Node node = new Node(Thread.currentThread(), mode);\n\n    // Try the fast path of enq; backup to full enq on failure\n\n    Node pred = tail;\n\n//tail!=null => 队列不为空(tail==head的时候，其实队列是空的)\n\n    if (pred != null) {\n\n        node.prev = pred;\n\n        if (compareAndSetTail(pred, node)) {\n\n            pred.next = node;\n\n            return node;\n\n        }\n\n    }\n\n        // 如果会到这里,说明 pred==null(队列是空的) 或者 CAS失败(有线程在竞争入队)\n\n    enq(node);\n\n    return node;\n\n}\n\n```\n\n\n\n### enq\n\n```java\n\n    // 采用自旋的方式入队\n\n    // 之前说过，到这个方法只有两种可能：等待队列为空，或者有线程竞争入队，\n\n    // 自旋在这边的语义是：CAS设置tail过程中，竞争一次竞争不到，我就多次竞争，总会排到的\n\nprivate Node enq(final Node node) {\n\n    for (;;) {\n\n        Node t = tail;\n\n        if (t == null) { // Must initialize\n\n            if (compareAndSetHead(new Node()))\n\n                tail = head;\n\n                //这里有点意思，在空队列中插入一个节点之后，没有直接返回，而是继续进行循环，第二次就走到了else中\n\n        } else {\n\n        //一直循环，目的就是将当前线程排到最后面\n\n            node.prev = t;\n\n            if (compareAndSetTail(t, node)) {\n\n                t.next = node;\n\n                return t;\n\n            }\n\n        }\n\n    }\n\n}\n\n```\n\n### acquireQueued\n\n```java\n\n    // 下面这个方法，参数node，经过addWaiter(Node.EXCLUSIVE)，此时已经进入阻塞队列\n\n    // 注意一下：如果acquireQueued(addWaiter(Node.EXCLUSIVE), arg))返回true的话，\n\n    // 意味着上面这段代码将进入selfInterrupt()，所以正常情况下，下面应该返回false\n\n    // 这个方法非常重要，应该说真正的线程挂起，然后被唤醒后去获取锁，都在这个方法里了\n\nfinal boolean acquireQueued(final Node node, int arg) {\n\n    boolean failed = true;\n\n    try {\n\n        boolean interrupted = false;\n\n        for (;;) {\n\n        //查看node的前驱结点是否为null，不是的话，返回前驱结点\n\n            final Node p = node.predecessor();\n\n// p == head 说明当前节点虽然进到了阻塞队列，但是是阻塞队列的第一个，因为它的前驱是head\n\n // 注意，阻塞队列不包含head节点，head一般指的是占有锁的线程，head后面的才称为阻塞队列\n\n// 所以当前节点可以去试抢一下锁\n\n// 这里我们说一下，为什么可以去试试：\n\n// 首先，它是队头，这个是第一个条件，其次，当前的head有可能是刚刚初始化的node，\n\n// enq(node) 方法里面有提到，head是延时初始化的，而且new Node()的时候没有设置任何线程\n\n // 也就是说，当前的head不属于任何一个线程，所以作为队头，可以去试一试，\n\n// tryAcquire已经分析过了, 忘记了请往前看一下，就是简单用CAS试操作一下state\n\n            if (p == head && tryAcquire(arg)) {\n\n//走到这里说明当前节点在阻塞队列中是队头，并且获取锁成功了\n\n//所以将当前节点从阻塞队列中弹出\n\n                setHead(node);\n\n                p.next = null; // help GC\n\n                failed = false;\n\n                return interrupted;\n\n            }\n\n// 到这里，说明上面的if分支没有成功，要么当前node本来就不是队头，\n\n // 要么就是tryAcquire(arg)没有抢赢别人\n\n //shouldParkAfterFailedAcquire方法返回ture的唯一条件就\n\n //是p也就是node的前驱结点的state值为-1，-1说明的是后驱节点需要被唤醒\n\n //parkAndCheckInterrupt这个方法的作用就是将线程的状态从阻塞转换到等待，\n\n //进入等待队列，等待被cpu唤醒\n\n            if (shouldParkAfterFailedAcquire(p, node) &&\n\n                parkAndCheckInterrupt())\n\n                interrupted = true;\n\n        }\n\n    } finally {\n\n    \n\n           // 什么时候 failed 会为 true???\n\n           // tryAcquire() 方法抛异常的情况\n\n        if (failed)\n\n            cancelAcquire(node);\n\n    }\n\n}\n\n```\n\n\n\n### shouldParkAfterFailedAcquire\n\n```java\n\n// 刚刚说过，会到这里就是没有抢到锁呗，这个方法说的是：\"当前线程没有抢到锁，是否需要挂起当前线程？\"\n\n // 第一个参数是前驱节点，第二个参数才是代表当前线程的节点\n\nprivate static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {\n\n    int ws = pred.waitStatus;\n\n//signal说明需要唤醒当前节点的后继节点\n\n    if (ws == Node.SIGNAL)\n\n        /*\n\n         * This node has already set status asking a release\n\n         * to signal it, so it can safely park.\n\n         */\n\n        return true;\n\n       // 大于0 说明前驱节点取消了排队。\n\n       //一直往前遍历，直到state>0\n\n    if (ws > 0) {\n\n        do {\n\n            node.prev = pred = pred.prev;\n\n        } while (pred.waitStatus > 0);\n\n        pred.next = node;\n\n    } else {\n\n    // 用CAS将前驱节点的waitStatus设置为Node.SIGNAL(也就是-1)\n\n        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n\n    }\n\n    return false;\n\n}\n\n```\n\n分析一下，这个方法最多几次之后可以返回true。\n\n从这个方法的判断条件可以看出，state的值应该是三种情况\n\n1. 0\n\n2. -1\n\n3. 大于0\n\n那么我们就一一来谈论，\n\n1. 如果是0，就会将变为-1，第二次进来直接返回（其实这种情况并不存在，因为每个进来阻塞队列的线程最终都会变成-1）\n\n2. 如果是-1，进来之后就直接返回\n\n3. 如果是大于0，那么要进入循环，直到前缀节点等于0或者等于-1的时候才会返回，如果是等于0，第二次进来就会走到第一种情况，总的来说就是到了第三次才会返回true。\n\n所以，这个方法最多三次可以返回true。\n\n### cancelAcquire\n\n```java\n\nprivate void cancelAcquire(Node node) {\n\n    // Ignore if node doesn't exist\n\n    if (node == null)\n\n        return;\n\n\n\n    node.thread = null;\n\n\n\n    // Skip cancelled predecessors\n\n    Node pred = node.prev;\n\n    while (pred.waitStatus > 0)\n\n        node.prev = pred = pred.prev;\n\n\n\n    // predNext is the apparent node to unsplice. CASes below will\n\n    // fail if not, in which case, we lost race vs another cancel\n\n    // or signal, so no further action is necessary.\n\n    Node predNext = pred.next;\n\n\n\n    // Can use unconditional write instead of CAS here.\n\n    // After this atomic step, other Nodes can skip past us.\n\n    // Before, we are free of interference from other threads.\n\n    node.waitStatus = Node.CANCELLED;\n\n\n\n    // If we are the tail, remove ourselves.\n\n    if (node == tail && compareAndSetTail(node, pred)) {\n\n        compareAndSetNext(pred, predNext, null);\n\n    } else {\n\n        // If successor needs signal, try to set pred's next-link\n\n        // so it will get one. Otherwise wake it up to propagate.\n\n        int ws;\n\n        if (pred != head &&\n\n            ((ws = pred.waitStatus) == Node.SIGNAL ||\n\n             (ws <= 0 && compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &&\n\n            pred.thread != null) {\n\n            Node next = node.next;\n\n            if (next != null && next.waitStatus <= 0)\n\n                compareAndSetNext(pred, predNext, next);\n\n        } else {\n\n            unparkSuccessor(node);\n\n        }\n\n\n\n        node.next = node; // help GC\n\n    }\n\n}\n\n```\n\n### parkAndCheckInterrupt\n\n```java\n\n\n\nprivate final boolean parkAndCheckInterrupt() {\n\n//挂起线程，其实就是就是进入到java六中线程状态的一种 等待状态\n\n//走到这里之后，就会等待线程被唤醒，等到线程被唤醒之后，才会retrun\n\n    LockSupport.park(this);\n\n    return Thread.interrupted();\n\n}\n\n```\n\n## FairSync-unlock\n\n### unlock\n\n```java\n\npublic void unlock() {\n\n    sync.release(1);\n\n}\n\n```\n\n### release\n\n```java\n\npublic final boolean release(int arg) {\n\n//如果尝试取消锁成功，会返回true\n\n    if (tryRelease(arg)) {\n\n        Node h = head;\n\n        if (h != null && h.waitStatus != 0)\n\n            unparkSuccessor(h);\n\n        return true;\n\n    }\n\n    return false;\n\n}\n\n```\n\n### tryRelease\n\n```java\n\nprotected final boolean tryRelease(int releases) {\n\n    int c = getState() - releases;\n\n    //判断当前线程是不是获取锁的那个线程，不是的话，抛出异常\n\n    if (Thread.currentThread() != getExclusiveOwnerThread())\n\n        throw new IllegalMonitorStateException();\n\n    boolean free = false;\n\n    if (c == 0) {\n\n        free = true;\n\n        setExclusiveOwnerThread(null);\n\n    }\n\n    setState(c);\n\n    return free;\n\n}\n\n```\n\n### unparkSuccessor\n\n```java\n\nprivate void unparkSuccessor(Node node) {\n\n    /*\n\n     * If status is negative (i.e., possibly needing signal) try\n\n     * to clear in anticipation of signalling.  It is OK if this\n\n     * fails or if status is changed by waiting thread.\n\n     */\n\n    int ws = node.waitStatus;\n\n    if (ws < 0)\n\n    // 如果head节点当前waitStatus<0, 将其修改为0\n\n        compareAndSetWaitStatus(node, ws, 0);\n\n\n\n    /*\n\n     * Thread to unpark is held in successor, which is normally\n\n     * just the next node.  But if cancelled or apparently null,\n\n     * traverse backwards from tail to find the actual\n\n     * non-cancelled successor.\n\n     */\n\n// 下面的代码就是唤醒后继节点，但是有可能后继节点取消了等待（waitStatus==1）\n\n    // 从队尾往前找，找到waitStatus<=0的所有节点中排在最前面的\n\n    Node s = node.next;\n\n    if (s == null || s.waitStatus > 0) {\n\n        s = null;\n\n// 从后往前找，仔细看代码，不必担心中间有节点取消(waitStatus==1)的情况\n\n        for (Node t = tail; t != null && t != node; t = t.prev)\n\n            if (t.waitStatus <= 0)\n\n                s = t;\n\n    }\n\n    if (s != null)\n\n        LockSupport.unpark(s.thread);\n\n}\n\n```\n\n> [AQS](https://javadoop.com/post/AbstractQueuedSynchronizer)","source":"_posts/从源码层面理解AQS.md","raw":"---\ntitle: 从源码层面理解AQS\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 7e9f1d8e\ndate: 2021-07-17 00:00:00\n---\n了解一下\n\n\n\n<!-- more -->\n\n\n\n# 基本属性\n\n\n\n```java\n\n// 头结点，你直接把它当做 当前持有锁的线程 可能是最好理解的\n\nprivate transient volatile Node head;\n\n\n\n// 阻塞的尾节点，每个新的节点进来，都插入到最后，也就形成了一个链表\n\nprivate transient volatile Node tail;\n\n\n\n// 这个是最重要的，代表当前锁的状态，0代表没有被占用，大于 0 代表有线程持有当前锁\n\n// 这个值可以大于 1，是因为锁可以重入，每次重入都加上 1\n\nprivate volatile int state;\n\n\n\n// 代表当前持有独占锁的线程，举个最重要的使用例子，因为锁可以重入\n\n// reentrantLock.lock()可以嵌套调用多次，所以每次用这个来判断当前线程是否已经拥有了锁\n\n// if (currentThread == getExclusiveOwnerThread()) {state++}\n\nprivate transient Thread exclusiveOwnerThread; //继承自AbstractOwnableSynchronizer\n\n\n\n//\n\nNode nextWaiter;\n\n```\n\n# 常量\n\n```java\n\n//表示节点在共享模式下\n\nstatic final Node SHARED = new Node();\n\n//表示节点在独占模式下\n\nstatic final Node EXCLUSIVE = null;\n\n\n\n//下面的值是给waitState用的\n\n\n\n//代表此线程取消了争抢这个锁\n\nstatic final int CANCELLED =  1;\n\n//表示当前节点的后继节点需要被唤醒\n\nstatic final int SIGNAL    = -1;\n\n//waitStatus 值指示线程正在等待条件\n\nstatic final int CONDITION = -2;\n\n//指示下一个acquireShared 应无条件传播的waitStatus 值\n\nstatic final int PROPAGATE = -3;\n\n```\n\n# 方法\n\n## predecessor\n\n在node的结构当中有一个有一个有意思的方法\n\n```java\n\n//这个方法就是用来返回当前节点的前缀节点的，如果为空，就抛出异常，如果存在，就返回这个前缀节点\n\nfinal Node predecessor() throws NullPointerException {\n\n    Node p = prev;\n\n    if (p == null)\n\n        throw new NullPointerException();\n\n    else\n\n        return p;\n\n}\n\n```\n\n## FairSync-lock\n\n### lock\n\n```java\n\nfinal void lock() {\n\n    acquire(1);\n\n}\n\n```\n\n### acquire\n\n```java\n\n\n\npublic final void acquire(int arg) {\n\n    if (!tryAcquire(arg) &&\n\n        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n\n        selfInterrupt();\n\n}\n\n```\n\n可以清楚看到这个方法就是一个与条件，而想要这个方法成立     \n\n1. 要让tryAcquire返回的是false，而tryAcquire方法返回false的情况是 阻塞队列中有节点，或者cas竞争锁失败，并且当前线程没有锁。\n\n2. 这第二步就可以执行acquireQueued方法了,这个方法首先调用了addWaiter方法，addWaiter方法主要是就是将这个node加入阻塞队列当中，不过其中有个判断，就是如果队列不为空的话，就直接加入队列返回node，如果是为空的话，就初始化队列，然后返回node；acquireQueued方法只有一种情况会返回，就是获取到锁的时候，这个时候，返回的是false\n\n\n\n### tryAcquire\n\n```java\n\nprotected final boolean tryAcquire(int acquires) {\n\n    final Thread current = Thread.currentThread();\n\n    //state由于是int类型，而int类型在java中默认为0\n\n    int c = getState();\n\n    if (c == 0) {\n\n    //hasQueuedPredecessors这个方法就是用来判断是有线程在阻塞队列里面等待了，true是有，false是没有\n\n    //compareAndSetState很简单，就是cas，比较替换，如果前面判断是true的话，就说明是没有线程在等待的，于是就把当前线程的state的值从0替换为1\n\n    //前面两个都为true了，就将线程设置为独占模式\n\n        if (!hasQueuedPredecessors() &&\n\n            compareAndSetState(0, acquires)) {\n\n            setExclusiveOwnerThread(current);\n\n            return true;\n\n        }\n\n    }\n\n    //走到这里，说明有线程在阻塞队列当中等待或者cas替换失败，cas替换失败，说明此时并发地有两个或两个以上的线程在并发cas，而当前cas失败了\n\n    //判断当前线程是不是就是持有锁的这个线程，是的话，就是state+1\n\n    else if (current == getExclusiveOwnerThread()) {\n\n        int nextc = c + acquires;\n\n        if (nextc < 0)\n\n            throw new Error(\"Maximum lock count exceeded\");\n\n        setState(nextc);\n\n        return true;\n\n    }\n\n    //走到这里说明当前阻塞队列当中有节点或者cas失败，并且当前线程没有锁\n\n    return false;\n\n}\n\n```\n\n### hasQueuedPredecessors\n\n```java\n\npublic final boolean hasQueuedPredecessors() {\n\n//1. 判断这个队列不是空的\n\n//2. 判断当前线程和阻塞队列的第一个节点的线程是不是一个线程\n\n    Node t = tail; \n\n    Node h = head;\n\n    Node s;\n\n    return h != t &&\n\n        ((s = h.next) == null || s.thread != Thread.currentThread());\n\n}\n\n```\n\n### addWaiter\n\n```java\n\nprivate Node addWaiter(Node mode) {\n\n    Node node = new Node(Thread.currentThread(), mode);\n\n    // Try the fast path of enq; backup to full enq on failure\n\n    Node pred = tail;\n\n//tail!=null => 队列不为空(tail==head的时候，其实队列是空的)\n\n    if (pred != null) {\n\n        node.prev = pred;\n\n        if (compareAndSetTail(pred, node)) {\n\n            pred.next = node;\n\n            return node;\n\n        }\n\n    }\n\n        // 如果会到这里,说明 pred==null(队列是空的) 或者 CAS失败(有线程在竞争入队)\n\n    enq(node);\n\n    return node;\n\n}\n\n```\n\n\n\n### enq\n\n```java\n\n    // 采用自旋的方式入队\n\n    // 之前说过，到这个方法只有两种可能：等待队列为空，或者有线程竞争入队，\n\n    // 自旋在这边的语义是：CAS设置tail过程中，竞争一次竞争不到，我就多次竞争，总会排到的\n\nprivate Node enq(final Node node) {\n\n    for (;;) {\n\n        Node t = tail;\n\n        if (t == null) { // Must initialize\n\n            if (compareAndSetHead(new Node()))\n\n                tail = head;\n\n                //这里有点意思，在空队列中插入一个节点之后，没有直接返回，而是继续进行循环，第二次就走到了else中\n\n        } else {\n\n        //一直循环，目的就是将当前线程排到最后面\n\n            node.prev = t;\n\n            if (compareAndSetTail(t, node)) {\n\n                t.next = node;\n\n                return t;\n\n            }\n\n        }\n\n    }\n\n}\n\n```\n\n### acquireQueued\n\n```java\n\n    // 下面这个方法，参数node，经过addWaiter(Node.EXCLUSIVE)，此时已经进入阻塞队列\n\n    // 注意一下：如果acquireQueued(addWaiter(Node.EXCLUSIVE), arg))返回true的话，\n\n    // 意味着上面这段代码将进入selfInterrupt()，所以正常情况下，下面应该返回false\n\n    // 这个方法非常重要，应该说真正的线程挂起，然后被唤醒后去获取锁，都在这个方法里了\n\nfinal boolean acquireQueued(final Node node, int arg) {\n\n    boolean failed = true;\n\n    try {\n\n        boolean interrupted = false;\n\n        for (;;) {\n\n        //查看node的前驱结点是否为null，不是的话，返回前驱结点\n\n            final Node p = node.predecessor();\n\n// p == head 说明当前节点虽然进到了阻塞队列，但是是阻塞队列的第一个，因为它的前驱是head\n\n // 注意，阻塞队列不包含head节点，head一般指的是占有锁的线程，head后面的才称为阻塞队列\n\n// 所以当前节点可以去试抢一下锁\n\n// 这里我们说一下，为什么可以去试试：\n\n// 首先，它是队头，这个是第一个条件，其次，当前的head有可能是刚刚初始化的node，\n\n// enq(node) 方法里面有提到，head是延时初始化的，而且new Node()的时候没有设置任何线程\n\n // 也就是说，当前的head不属于任何一个线程，所以作为队头，可以去试一试，\n\n// tryAcquire已经分析过了, 忘记了请往前看一下，就是简单用CAS试操作一下state\n\n            if (p == head && tryAcquire(arg)) {\n\n//走到这里说明当前节点在阻塞队列中是队头，并且获取锁成功了\n\n//所以将当前节点从阻塞队列中弹出\n\n                setHead(node);\n\n                p.next = null; // help GC\n\n                failed = false;\n\n                return interrupted;\n\n            }\n\n// 到这里，说明上面的if分支没有成功，要么当前node本来就不是队头，\n\n // 要么就是tryAcquire(arg)没有抢赢别人\n\n //shouldParkAfterFailedAcquire方法返回ture的唯一条件就\n\n //是p也就是node的前驱结点的state值为-1，-1说明的是后驱节点需要被唤醒\n\n //parkAndCheckInterrupt这个方法的作用就是将线程的状态从阻塞转换到等待，\n\n //进入等待队列，等待被cpu唤醒\n\n            if (shouldParkAfterFailedAcquire(p, node) &&\n\n                parkAndCheckInterrupt())\n\n                interrupted = true;\n\n        }\n\n    } finally {\n\n    \n\n           // 什么时候 failed 会为 true???\n\n           // tryAcquire() 方法抛异常的情况\n\n        if (failed)\n\n            cancelAcquire(node);\n\n    }\n\n}\n\n```\n\n\n\n### shouldParkAfterFailedAcquire\n\n```java\n\n// 刚刚说过，会到这里就是没有抢到锁呗，这个方法说的是：\"当前线程没有抢到锁，是否需要挂起当前线程？\"\n\n // 第一个参数是前驱节点，第二个参数才是代表当前线程的节点\n\nprivate static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {\n\n    int ws = pred.waitStatus;\n\n//signal说明需要唤醒当前节点的后继节点\n\n    if (ws == Node.SIGNAL)\n\n        /*\n\n         * This node has already set status asking a release\n\n         * to signal it, so it can safely park.\n\n         */\n\n        return true;\n\n       // 大于0 说明前驱节点取消了排队。\n\n       //一直往前遍历，直到state>0\n\n    if (ws > 0) {\n\n        do {\n\n            node.prev = pred = pred.prev;\n\n        } while (pred.waitStatus > 0);\n\n        pred.next = node;\n\n    } else {\n\n    // 用CAS将前驱节点的waitStatus设置为Node.SIGNAL(也就是-1)\n\n        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n\n    }\n\n    return false;\n\n}\n\n```\n\n分析一下，这个方法最多几次之后可以返回true。\n\n从这个方法的判断条件可以看出，state的值应该是三种情况\n\n1. 0\n\n2. -1\n\n3. 大于0\n\n那么我们就一一来谈论，\n\n1. 如果是0，就会将变为-1，第二次进来直接返回（其实这种情况并不存在，因为每个进来阻塞队列的线程最终都会变成-1）\n\n2. 如果是-1，进来之后就直接返回\n\n3. 如果是大于0，那么要进入循环，直到前缀节点等于0或者等于-1的时候才会返回，如果是等于0，第二次进来就会走到第一种情况，总的来说就是到了第三次才会返回true。\n\n所以，这个方法最多三次可以返回true。\n\n### cancelAcquire\n\n```java\n\nprivate void cancelAcquire(Node node) {\n\n    // Ignore if node doesn't exist\n\n    if (node == null)\n\n        return;\n\n\n\n    node.thread = null;\n\n\n\n    // Skip cancelled predecessors\n\n    Node pred = node.prev;\n\n    while (pred.waitStatus > 0)\n\n        node.prev = pred = pred.prev;\n\n\n\n    // predNext is the apparent node to unsplice. CASes below will\n\n    // fail if not, in which case, we lost race vs another cancel\n\n    // or signal, so no further action is necessary.\n\n    Node predNext = pred.next;\n\n\n\n    // Can use unconditional write instead of CAS here.\n\n    // After this atomic step, other Nodes can skip past us.\n\n    // Before, we are free of interference from other threads.\n\n    node.waitStatus = Node.CANCELLED;\n\n\n\n    // If we are the tail, remove ourselves.\n\n    if (node == tail && compareAndSetTail(node, pred)) {\n\n        compareAndSetNext(pred, predNext, null);\n\n    } else {\n\n        // If successor needs signal, try to set pred's next-link\n\n        // so it will get one. Otherwise wake it up to propagate.\n\n        int ws;\n\n        if (pred != head &&\n\n            ((ws = pred.waitStatus) == Node.SIGNAL ||\n\n             (ws <= 0 && compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &&\n\n            pred.thread != null) {\n\n            Node next = node.next;\n\n            if (next != null && next.waitStatus <= 0)\n\n                compareAndSetNext(pred, predNext, next);\n\n        } else {\n\n            unparkSuccessor(node);\n\n        }\n\n\n\n        node.next = node; // help GC\n\n    }\n\n}\n\n```\n\n### parkAndCheckInterrupt\n\n```java\n\n\n\nprivate final boolean parkAndCheckInterrupt() {\n\n//挂起线程，其实就是就是进入到java六中线程状态的一种 等待状态\n\n//走到这里之后，就会等待线程被唤醒，等到线程被唤醒之后，才会retrun\n\n    LockSupport.park(this);\n\n    return Thread.interrupted();\n\n}\n\n```\n\n## FairSync-unlock\n\n### unlock\n\n```java\n\npublic void unlock() {\n\n    sync.release(1);\n\n}\n\n```\n\n### release\n\n```java\n\npublic final boolean release(int arg) {\n\n//如果尝试取消锁成功，会返回true\n\n    if (tryRelease(arg)) {\n\n        Node h = head;\n\n        if (h != null && h.waitStatus != 0)\n\n            unparkSuccessor(h);\n\n        return true;\n\n    }\n\n    return false;\n\n}\n\n```\n\n### tryRelease\n\n```java\n\nprotected final boolean tryRelease(int releases) {\n\n    int c = getState() - releases;\n\n    //判断当前线程是不是获取锁的那个线程，不是的话，抛出异常\n\n    if (Thread.currentThread() != getExclusiveOwnerThread())\n\n        throw new IllegalMonitorStateException();\n\n    boolean free = false;\n\n    if (c == 0) {\n\n        free = true;\n\n        setExclusiveOwnerThread(null);\n\n    }\n\n    setState(c);\n\n    return free;\n\n}\n\n```\n\n### unparkSuccessor\n\n```java\n\nprivate void unparkSuccessor(Node node) {\n\n    /*\n\n     * If status is negative (i.e., possibly needing signal) try\n\n     * to clear in anticipation of signalling.  It is OK if this\n\n     * fails or if status is changed by waiting thread.\n\n     */\n\n    int ws = node.waitStatus;\n\n    if (ws < 0)\n\n    // 如果head节点当前waitStatus<0, 将其修改为0\n\n        compareAndSetWaitStatus(node, ws, 0);\n\n\n\n    /*\n\n     * Thread to unpark is held in successor, which is normally\n\n     * just the next node.  But if cancelled or apparently null,\n\n     * traverse backwards from tail to find the actual\n\n     * non-cancelled successor.\n\n     */\n\n// 下面的代码就是唤醒后继节点，但是有可能后继节点取消了等待（waitStatus==1）\n\n    // 从队尾往前找，找到waitStatus<=0的所有节点中排在最前面的\n\n    Node s = node.next;\n\n    if (s == null || s.waitStatus > 0) {\n\n        s = null;\n\n// 从后往前找，仔细看代码，不必担心中间有节点取消(waitStatus==1)的情况\n\n        for (Node t = tail; t != null && t != node; t = t.prev)\n\n            if (t.waitStatus <= 0)\n\n                s = t;\n\n    }\n\n    if (s != null)\n\n        LockSupport.unpark(s.thread);\n\n}\n\n```\n\n> [AQS](https://javadoop.com/post/AbstractQueuedSynchronizer)","slug":"从源码层面理解AQS","published":1,"updated":"2025-03-02T03:37:34.417Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp54004dn0ukggrqdchq","content":"<p>了解一下</p>\n<span id=\"more\"></span>\n\n\n\n<h1 id=\"基本属性\"><a href=\"#基本属性\" class=\"headerlink\" title=\"基本属性\"></a>基本属性</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 头结点，你直接把它当做 当前持有锁的线程 可能是最好理解的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Node head;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 阻塞的尾节点，每个新的节点进来，都插入到最后，也就形成了一个链表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Node tail;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个是最重要的，代表当前锁的状态，0代表没有被占用，大于 0 代表有线程持有当前锁</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个值可以大于 1，是因为锁可以重入，每次重入都加上 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"type\">int</span> state;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 代表当前持有独占锁的线程，举个最重要的使用例子，因为锁可以重入</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// reentrantLock.lock()可以嵌套调用多次，所以每次用这个来判断当前线程是否已经拥有了锁</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// if (currentThread == getExclusiveOwnerThread()) &#123;state++&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> Thread exclusiveOwnerThread; <span class=\"comment\">//继承自AbstractOwnableSynchronizer</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\">Node nextWaiter;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//表示节点在共享模式下</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">SHARED</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//表示节点在独占模式下</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">EXCLUSIVE</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//下面的值是给waitState用的</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//代表此线程取消了争抢这个锁</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">CANCELLED</span> <span class=\"operator\">=</span>  <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//表示当前节点的后继节点需要被唤醒</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">SIGNAL</span>    <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//waitStatus 值指示线程正在等待条件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">CONDITION</span> <span class=\"operator\">=</span> -<span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//指示下一个acquireShared 应无条件传播的waitStatus 值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">PROPAGATE</span> <span class=\"operator\">=</span> -<span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h1><h2 id=\"predecessor\"><a href=\"#predecessor\" class=\"headerlink\" title=\"predecessor\"></a>predecessor</h2><p>在node的结构当中有一个有一个有意思的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这个方法就是用来返回当前节点的前缀节点的，如果为空，就抛出异常，如果存在，就返回这个前缀节点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> Node <span class=\"title function_\">predecessor</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> NullPointerException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"FairSync-lock\"><a href=\"#FairSync-lock\" class=\"headerlink\" title=\"FairSync-lock\"></a>FairSync-lock</h2><h3 id=\"lock\"><a href=\"#lock\" class=\"headerlink\" title=\"lock\"></a>lock</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lock</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    acquire(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"acquire\"><a href=\"#acquire\" class=\"headerlink\" title=\"acquire\"></a>acquire</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">acquire</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class=\"line\"></span><br><span class=\"line\">        selfInterrupt();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以清楚看到这个方法就是一个与条件，而想要这个方法成立     </p>\n<ol>\n<li><p>要让tryAcquire返回的是false，而tryAcquire方法返回false的情况是 阻塞队列中有节点，或者cas竞争锁失败，并且当前线程没有锁。</p>\n</li>\n<li><p>这第二步就可以执行acquireQueued方法了,这个方法首先调用了addWaiter方法，addWaiter方法主要是就是将这个node加入阻塞队列当中，不过其中有个判断，就是如果队列不为空的话，就直接加入队列返回node，如果是为空的话，就初始化队列，然后返回node；acquireQueued方法只有一种情况会返回，就是获取到锁的时候，这个时候，返回的是false</p>\n</li>\n</ol>\n<h3 id=\"tryAcquire\"><a href=\"#tryAcquire\" class=\"headerlink\" title=\"tryAcquire\"></a>tryAcquire</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryAcquire</span><span class=\"params\">(<span class=\"type\">int</span> acquires)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Thread</span> <span class=\"variable\">current</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//state由于是int类型，而int类型在java中默认为0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> getState();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//hasQueuedPredecessors这个方法就是用来判断是有线程在阻塞队列里面等待了，true是有，false是没有</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//compareAndSetState很简单，就是cas，比较替换，如果前面判断是true的话，就说明是没有线程在等待的，于是就把当前线程的state的值从0替换为1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//前面两个都为true了，就将线程设置为独占模式</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">            compareAndSetState(<span class=\"number\">0</span>, acquires)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            setExclusiveOwnerThread(current);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//走到这里，说明有线程在阻塞队列当中等待或者cas替换失败，cas替换失败，说明此时并发地有两个或两个以上的线程在并发cas，而当前cas失败了</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断当前线程是不是就是持有锁的这个线程，是的话，就是state+1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">nextc</span> <span class=\"operator\">=</span> c + acquires;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextc &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        setState(nextc);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//走到这里说明当前阻塞队列当中有节点或者cas失败，并且当前线程没有锁</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hasQueuedPredecessors\"><a href=\"#hasQueuedPredecessors\" class=\"headerlink\" title=\"hasQueuedPredecessors\"></a>hasQueuedPredecessors</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasQueuedPredecessors</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1. 判断这个队列不是空的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2. 判断当前线程和阻塞队列的第一个节点的线程是不是一个线程</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> tail; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> h != t &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">        ((s = h.next) == <span class=\"literal\">null</span> || s.thread != Thread.currentThread());</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"addWaiter\"><a href=\"#addWaiter\" class=\"headerlink\" title=\"addWaiter\"></a>addWaiter</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> Node <span class=\"title function_\">addWaiter</span><span class=\"params\">(Node mode)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(Thread.currentThread(), mode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">pred</span> <span class=\"operator\">=</span> tail;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//tail!=null =&gt; 队列不为空(tail==head的时候，其实队列是空的)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pred != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        node.prev = pred;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            pred.next = node;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> node;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果会到这里,说明 pred==null(队列是空的) 或者 CAS失败(有线程在竞争入队)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    enq(node);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"enq\"><a href=\"#enq\" class=\"headerlink\" title=\"enq\"></a>enq</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 采用自旋的方式入队</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 之前说过，到这个方法只有两种可能：等待队列为空，或者有线程竞争入队，</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 自旋在这边的语义是：CAS设置tail过程中，竞争一次竞争不到，我就多次竞争，总会排到的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> Node <span class=\"title function_\">enq</span><span class=\"params\">(<span class=\"keyword\">final</span> Node node)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> tail;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t == <span class=\"literal\">null</span>) &#123; <span class=\"comment\">// Must initialize</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndSetHead(<span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>()))</span><br><span class=\"line\"></span><br><span class=\"line\">                tail = head;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//这里有点意思，在空队列中插入一个节点之后，没有直接返回，而是继续进行循环，第二次就走到了else中</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//一直循环，目的就是将当前线程排到最后面</span></span><br><span class=\"line\"></span><br><span class=\"line\">            node.prev = t;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                t.next = node;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> t;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"acquireQueued\"><a href=\"#acquireQueued\" class=\"headerlink\" title=\"acquireQueued\"></a>acquireQueued</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 下面这个方法，参数node，经过addWaiter(Node.EXCLUSIVE)，此时已经进入阻塞队列</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 注意一下：如果acquireQueued(addWaiter(Node.EXCLUSIVE), arg))返回true的话，</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 意味着上面这段代码将进入selfInterrupt()，所以正常情况下，下面应该返回false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这个方法非常重要，应该说真正的线程挂起，然后被唤醒后去获取锁，都在这个方法里了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">acquireQueued</span><span class=\"params\">(<span class=\"keyword\">final</span> Node node, <span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">failed</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">interrupted</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//查看node的前驱结点是否为null，不是的话，返回前驱结点</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> node.predecessor();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// p == head 说明当前节点虽然进到了阻塞队列，但是是阻塞队列的第一个，因为它的前驱是head</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 注意，阻塞队列不包含head节点，head一般指的是占有锁的线程，head后面的才称为阻塞队列</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 所以当前节点可以去试抢一下锁</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里我们说一下，为什么可以去试试：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 首先，它是队头，这个是第一个条件，其次，当前的head有可能是刚刚初始化的node，</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// enq(node) 方法里面有提到，head是延时初始化的，而且new Node()的时候没有设置任何线程</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 也就是说，当前的head不属于任何一个线程，所以作为队头，可以去试一试，</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// tryAcquire已经分析过了, 忘记了请往前看一下，就是简单用CAS试操作一下state</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//走到这里说明当前节点在阻塞队列中是队头，并且获取锁成功了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//所以将当前节点从阻塞队列中弹出</span></span><br><span class=\"line\"></span><br><span class=\"line\">                setHead(node);</span><br><span class=\"line\"></span><br><span class=\"line\">                p.next = <span class=\"literal\">null</span>; <span class=\"comment\">// help GC</span></span><br><span class=\"line\"></span><br><span class=\"line\">                failed = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> interrupted;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 到这里，说明上面的if分支没有成功，要么当前node本来就不是队头，</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 要么就是tryAcquire(arg)没有抢赢别人</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//shouldParkAfterFailedAcquire方法返回ture的唯一条件就</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//是p也就是node的前驱结点的state值为-1，-1说明的是后驱节点需要被唤醒</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//parkAndCheckInterrupt这个方法的作用就是将线程的状态从阻塞转换到等待，</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//进入等待队列，等待被cpu唤醒</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">                parkAndCheckInterrupt())</span><br><span class=\"line\"></span><br><span class=\"line\">                interrupted = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// 什么时候 failed 会为 true???</span></span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// tryAcquire() 方法抛异常的情况</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (failed)</span><br><span class=\"line\"></span><br><span class=\"line\">            cancelAcquire(node);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"shouldParkAfterFailedAcquire\"><a href=\"#shouldParkAfterFailedAcquire\" class=\"headerlink\" title=\"shouldParkAfterFailedAcquire\"></a>shouldParkAfterFailedAcquire</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 刚刚说过，会到这里就是没有抢到锁呗，这个方法说的是：&quot;当前线程没有抢到锁，是否需要挂起当前线程？&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 第一个参数是前驱节点，第二个参数才是代表当前线程的节点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">shouldParkAfterFailedAcquire</span><span class=\"params\">(Node pred, Node node)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">ws</span> <span class=\"operator\">=</span> pred.waitStatus;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//signal说明需要唤醒当前节点的后继节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws == Node.SIGNAL)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">         * This node has already set status asking a release</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">         * to signal it, so it can safely park.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 大于0 说明前驱节点取消了排队。</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//一直往前遍历，直到state&gt;0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            node.prev = pred = pred.prev;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (pred.waitStatus &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        pred.next = node;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用CAS将前驱节点的waitStatus设置为Node.SIGNAL(也就是-1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>分析一下，这个方法最多几次之后可以返回true。</p>\n<p>从这个方法的判断条件可以看出，state的值应该是三种情况</p>\n<ol>\n<li><p>0</p>\n</li>\n<li><p>-1</p>\n</li>\n<li><p>大于0</p>\n</li>\n</ol>\n<p>那么我们就一一来谈论，</p>\n<ol>\n<li><p>如果是0，就会将变为-1，第二次进来直接返回（其实这种情况并不存在，因为每个进来阻塞队列的线程最终都会变成-1）</p>\n</li>\n<li><p>如果是-1，进来之后就直接返回</p>\n</li>\n<li><p>如果是大于0，那么要进入循环，直到前缀节点等于0或者等于-1的时候才会返回，如果是等于0，第二次进来就会走到第一种情况，总的来说就是到了第三次才会返回true。</p>\n</li>\n</ol>\n<p>所以，这个方法最多三次可以返回true。</p>\n<h3 id=\"cancelAcquire\"><a href=\"#cancelAcquire\" class=\"headerlink\" title=\"cancelAcquire\"></a>cancelAcquire</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cancelAcquire</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Ignore if node doesn&#x27;t exist</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    node.thread = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Skip cancelled predecessors</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">pred</span> <span class=\"operator\">=</span> node.prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pred.waitStatus &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        node.prev = pred = pred.prev;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// predNext is the apparent node to unsplice. CASes below will</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// fail if not, in which case, we lost race vs another cancel</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// or signal, so no further action is necessary.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">predNext</span> <span class=\"operator\">=</span> pred.next;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Can use unconditional write instead of CAS here.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// After this atomic step, other Nodes can skip past us.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Before, we are free of interference from other threads.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    node.waitStatus = Node.CANCELLED;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If we are the tail, remove ourselves.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == tail &amp;&amp; compareAndSetTail(node, pred)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        compareAndSetNext(pred, predNext, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// If successor needs signal, try to set pred&#x27;s next-link</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// so it will get one. Otherwise wake it up to propagate.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> ws;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pred != head &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">            ((ws = pred.waitStatus) == Node.SIGNAL ||</span><br><span class=\"line\"></span><br><span class=\"line\">             (ws &lt;= <span class=\"number\">0</span> &amp;&amp; compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">            pred.thread != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">Node</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> node.next;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (next != <span class=\"literal\">null</span> &amp;&amp; next.waitStatus &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                compareAndSetNext(pred, predNext, next);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            unparkSuccessor(node);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        node.next = node; <span class=\"comment\">// help GC</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"parkAndCheckInterrupt\"><a href=\"#parkAndCheckInterrupt\" class=\"headerlink\" title=\"parkAndCheckInterrupt\"></a>parkAndCheckInterrupt</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">parkAndCheckInterrupt</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//挂起线程，其实就是就是进入到java六中线程状态的一种 等待状态</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//走到这里之后，就会等待线程被唤醒，等到线程被唤醒之后，才会retrun</span></span><br><span class=\"line\"></span><br><span class=\"line\">    LockSupport.park(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Thread.interrupted();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"FairSync-unlock\"><a href=\"#FairSync-unlock\" class=\"headerlink\" title=\"FairSync-unlock\"></a>FairSync-unlock</h2><h3 id=\"unlock\"><a href=\"#unlock\" class=\"headerlink\" title=\"unlock\"></a>unlock</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unlock</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    sync.release(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"release\"><a href=\"#release\" class=\"headerlink\" title=\"release\"></a>release</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">release</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果尝试取消锁成功，会返回true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tryRelease(arg)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h != <span class=\"literal\">null</span> &amp;&amp; h.waitStatus != <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            unparkSuccessor(h);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"tryRelease\"><a href=\"#tryRelease\" class=\"headerlink\" title=\"tryRelease\"></a>tryRelease</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryRelease</span><span class=\"params\">(<span class=\"type\">int</span> releases)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> getState() - releases;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断当前线程是不是获取锁的那个线程，不是的话，抛出异常</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalMonitorStateException</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">free</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        free = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        setExclusiveOwnerThread(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    setState(c);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> free;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"unparkSuccessor\"><a href=\"#unparkSuccessor\" class=\"headerlink\" title=\"unparkSuccessor\"></a>unparkSuccessor</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unparkSuccessor</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * If status is negative (i.e., possibly needing signal) try</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * to clear in anticipation of signalling.  It is OK if this</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * fails or if status is changed by waiting thread.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">ws</span> <span class=\"operator\">=</span> node.waitStatus;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果head节点当前waitStatus&lt;0, 将其修改为0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        compareAndSetWaitStatus(node, ws, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * Thread to unpark is held in successor, which is normally</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * just the next node.  But if cancelled or apparently null,</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * traverse backwards from tail to find the actual</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * non-cancelled successor.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面的代码就是唤醒后继节点，但是有可能后继节点取消了等待（waitStatus==1）</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从队尾往前找，找到waitStatus&lt;=0的所有节点中排在最前面的</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> node.next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"literal\">null</span> || s.waitStatus &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        s = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从后往前找，仔细看代码，不必担心中间有节点取消(waitStatus==1)的情况</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">Node</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> tail; t != <span class=\"literal\">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t.waitStatus &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                s = t;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s != <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        LockSupport.unpark(s.thread);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qYXZhZG9vcC5jb20vcG9zdC9BYnN0cmFjdFF1ZXVlZFN5bmNocm9uaXplcg==\">AQS<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"了解一下\n\n基本属性\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n\n// 头结点，你直接把它当做 当前持有锁的线程 可能是最好理解的\n\nprivate transient volatile Node head;\n\n\n\n// 阻塞的尾节点，每个新的节点进来，都插入到最后，也就形成了一个链表\n\nprivate transient volatile Node tail;\n\n\n\n// 这个是最重要的，代表当前锁的状态，0代表没有被占用，大于 0 代表有","more":"<h1 id=\"基本属性\"><a href=\"#基本属性\" class=\"headerlink\" title=\"基本属性\"></a>基本属性</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 头结点，你直接把它当做 当前持有锁的线程 可能是最好理解的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Node head;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 阻塞的尾节点，每个新的节点进来，都插入到最后，也就形成了一个链表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Node tail;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个是最重要的，代表当前锁的状态，0代表没有被占用，大于 0 代表有线程持有当前锁</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个值可以大于 1，是因为锁可以重入，每次重入都加上 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"type\">int</span> state;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 代表当前持有独占锁的线程，举个最重要的使用例子，因为锁可以重入</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// reentrantLock.lock()可以嵌套调用多次，所以每次用这个来判断当前线程是否已经拥有了锁</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// if (currentThread == getExclusiveOwnerThread()) &#123;state++&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> Thread exclusiveOwnerThread; <span class=\"comment\">//继承自AbstractOwnableSynchronizer</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\">Node nextWaiter;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//表示节点在共享模式下</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">SHARED</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//表示节点在独占模式下</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">EXCLUSIVE</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//下面的值是给waitState用的</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//代表此线程取消了争抢这个锁</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">CANCELLED</span> <span class=\"operator\">=</span>  <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//表示当前节点的后继节点需要被唤醒</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">SIGNAL</span>    <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//waitStatus 值指示线程正在等待条件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">CONDITION</span> <span class=\"operator\">=</span> -<span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//指示下一个acquireShared 应无条件传播的waitStatus 值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">PROPAGATE</span> <span class=\"operator\">=</span> -<span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h1><h2 id=\"predecessor\"><a href=\"#predecessor\" class=\"headerlink\" title=\"predecessor\"></a>predecessor</h2><p>在node的结构当中有一个有一个有意思的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这个方法就是用来返回当前节点的前缀节点的，如果为空，就抛出异常，如果存在，就返回这个前缀节点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> Node <span class=\"title function_\">predecessor</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> NullPointerException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"FairSync-lock\"><a href=\"#FairSync-lock\" class=\"headerlink\" title=\"FairSync-lock\"></a>FairSync-lock</h2><h3 id=\"lock\"><a href=\"#lock\" class=\"headerlink\" title=\"lock\"></a>lock</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lock</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    acquire(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"acquire\"><a href=\"#acquire\" class=\"headerlink\" title=\"acquire\"></a>acquire</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">acquire</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class=\"line\"></span><br><span class=\"line\">        selfInterrupt();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以清楚看到这个方法就是一个与条件，而想要这个方法成立     </p>\n<ol>\n<li><p>要让tryAcquire返回的是false，而tryAcquire方法返回false的情况是 阻塞队列中有节点，或者cas竞争锁失败，并且当前线程没有锁。</p>\n</li>\n<li><p>这第二步就可以执行acquireQueued方法了,这个方法首先调用了addWaiter方法，addWaiter方法主要是就是将这个node加入阻塞队列当中，不过其中有个判断，就是如果队列不为空的话，就直接加入队列返回node，如果是为空的话，就初始化队列，然后返回node；acquireQueued方法只有一种情况会返回，就是获取到锁的时候，这个时候，返回的是false</p>\n</li>\n</ol>\n<h3 id=\"tryAcquire\"><a href=\"#tryAcquire\" class=\"headerlink\" title=\"tryAcquire\"></a>tryAcquire</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryAcquire</span><span class=\"params\">(<span class=\"type\">int</span> acquires)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Thread</span> <span class=\"variable\">current</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//state由于是int类型，而int类型在java中默认为0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> getState();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//hasQueuedPredecessors这个方法就是用来判断是有线程在阻塞队列里面等待了，true是有，false是没有</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//compareAndSetState很简单，就是cas，比较替换，如果前面判断是true的话，就说明是没有线程在等待的，于是就把当前线程的state的值从0替换为1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//前面两个都为true了，就将线程设置为独占模式</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">            compareAndSetState(<span class=\"number\">0</span>, acquires)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            setExclusiveOwnerThread(current);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//走到这里，说明有线程在阻塞队列当中等待或者cas替换失败，cas替换失败，说明此时并发地有两个或两个以上的线程在并发cas，而当前cas失败了</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断当前线程是不是就是持有锁的这个线程，是的话，就是state+1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">nextc</span> <span class=\"operator\">=</span> c + acquires;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextc &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        setState(nextc);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//走到这里说明当前阻塞队列当中有节点或者cas失败，并且当前线程没有锁</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hasQueuedPredecessors\"><a href=\"#hasQueuedPredecessors\" class=\"headerlink\" title=\"hasQueuedPredecessors\"></a>hasQueuedPredecessors</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasQueuedPredecessors</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1. 判断这个队列不是空的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2. 判断当前线程和阻塞队列的第一个节点的线程是不是一个线程</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> tail; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> h != t &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">        ((s = h.next) == <span class=\"literal\">null</span> || s.thread != Thread.currentThread());</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"addWaiter\"><a href=\"#addWaiter\" class=\"headerlink\" title=\"addWaiter\"></a>addWaiter</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> Node <span class=\"title function_\">addWaiter</span><span class=\"params\">(Node mode)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(Thread.currentThread(), mode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">pred</span> <span class=\"operator\">=</span> tail;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//tail!=null =&gt; 队列不为空(tail==head的时候，其实队列是空的)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pred != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        node.prev = pred;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            pred.next = node;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> node;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果会到这里,说明 pred==null(队列是空的) 或者 CAS失败(有线程在竞争入队)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    enq(node);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"enq\"><a href=\"#enq\" class=\"headerlink\" title=\"enq\"></a>enq</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 采用自旋的方式入队</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 之前说过，到这个方法只有两种可能：等待队列为空，或者有线程竞争入队，</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 自旋在这边的语义是：CAS设置tail过程中，竞争一次竞争不到，我就多次竞争，总会排到的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> Node <span class=\"title function_\">enq</span><span class=\"params\">(<span class=\"keyword\">final</span> Node node)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> tail;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t == <span class=\"literal\">null</span>) &#123; <span class=\"comment\">// Must initialize</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndSetHead(<span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>()))</span><br><span class=\"line\"></span><br><span class=\"line\">                tail = head;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//这里有点意思，在空队列中插入一个节点之后，没有直接返回，而是继续进行循环，第二次就走到了else中</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//一直循环，目的就是将当前线程排到最后面</span></span><br><span class=\"line\"></span><br><span class=\"line\">            node.prev = t;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                t.next = node;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> t;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"acquireQueued\"><a href=\"#acquireQueued\" class=\"headerlink\" title=\"acquireQueued\"></a>acquireQueued</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 下面这个方法，参数node，经过addWaiter(Node.EXCLUSIVE)，此时已经进入阻塞队列</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 注意一下：如果acquireQueued(addWaiter(Node.EXCLUSIVE), arg))返回true的话，</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 意味着上面这段代码将进入selfInterrupt()，所以正常情况下，下面应该返回false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这个方法非常重要，应该说真正的线程挂起，然后被唤醒后去获取锁，都在这个方法里了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">acquireQueued</span><span class=\"params\">(<span class=\"keyword\">final</span> Node node, <span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">failed</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">interrupted</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//查看node的前驱结点是否为null，不是的话，返回前驱结点</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> node.predecessor();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// p == head 说明当前节点虽然进到了阻塞队列，但是是阻塞队列的第一个，因为它的前驱是head</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 注意，阻塞队列不包含head节点，head一般指的是占有锁的线程，head后面的才称为阻塞队列</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 所以当前节点可以去试抢一下锁</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里我们说一下，为什么可以去试试：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 首先，它是队头，这个是第一个条件，其次，当前的head有可能是刚刚初始化的node，</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// enq(node) 方法里面有提到，head是延时初始化的，而且new Node()的时候没有设置任何线程</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 也就是说，当前的head不属于任何一个线程，所以作为队头，可以去试一试，</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// tryAcquire已经分析过了, 忘记了请往前看一下，就是简单用CAS试操作一下state</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//走到这里说明当前节点在阻塞队列中是队头，并且获取锁成功了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//所以将当前节点从阻塞队列中弹出</span></span><br><span class=\"line\"></span><br><span class=\"line\">                setHead(node);</span><br><span class=\"line\"></span><br><span class=\"line\">                p.next = <span class=\"literal\">null</span>; <span class=\"comment\">// help GC</span></span><br><span class=\"line\"></span><br><span class=\"line\">                failed = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> interrupted;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 到这里，说明上面的if分支没有成功，要么当前node本来就不是队头，</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 要么就是tryAcquire(arg)没有抢赢别人</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//shouldParkAfterFailedAcquire方法返回ture的唯一条件就</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//是p也就是node的前驱结点的state值为-1，-1说明的是后驱节点需要被唤醒</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//parkAndCheckInterrupt这个方法的作用就是将线程的状态从阻塞转换到等待，</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//进入等待队列，等待被cpu唤醒</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">                parkAndCheckInterrupt())</span><br><span class=\"line\"></span><br><span class=\"line\">                interrupted = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// 什么时候 failed 会为 true???</span></span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// tryAcquire() 方法抛异常的情况</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (failed)</span><br><span class=\"line\"></span><br><span class=\"line\">            cancelAcquire(node);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"shouldParkAfterFailedAcquire\"><a href=\"#shouldParkAfterFailedAcquire\" class=\"headerlink\" title=\"shouldParkAfterFailedAcquire\"></a>shouldParkAfterFailedAcquire</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 刚刚说过，会到这里就是没有抢到锁呗，这个方法说的是：&quot;当前线程没有抢到锁，是否需要挂起当前线程？&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 第一个参数是前驱节点，第二个参数才是代表当前线程的节点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">shouldParkAfterFailedAcquire</span><span class=\"params\">(Node pred, Node node)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">ws</span> <span class=\"operator\">=</span> pred.waitStatus;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//signal说明需要唤醒当前节点的后继节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws == Node.SIGNAL)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">         * This node has already set status asking a release</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">         * to signal it, so it can safely park.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 大于0 说明前驱节点取消了排队。</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//一直往前遍历，直到state&gt;0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            node.prev = pred = pred.prev;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (pred.waitStatus &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        pred.next = node;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用CAS将前驱节点的waitStatus设置为Node.SIGNAL(也就是-1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>分析一下，这个方法最多几次之后可以返回true。</p>\n<p>从这个方法的判断条件可以看出，state的值应该是三种情况</p>\n<ol>\n<li><p>0</p>\n</li>\n<li><p>-1</p>\n</li>\n<li><p>大于0</p>\n</li>\n</ol>\n<p>那么我们就一一来谈论，</p>\n<ol>\n<li><p>如果是0，就会将变为-1，第二次进来直接返回（其实这种情况并不存在，因为每个进来阻塞队列的线程最终都会变成-1）</p>\n</li>\n<li><p>如果是-1，进来之后就直接返回</p>\n</li>\n<li><p>如果是大于0，那么要进入循环，直到前缀节点等于0或者等于-1的时候才会返回，如果是等于0，第二次进来就会走到第一种情况，总的来说就是到了第三次才会返回true。</p>\n</li>\n</ol>\n<p>所以，这个方法最多三次可以返回true。</p>\n<h3 id=\"cancelAcquire\"><a href=\"#cancelAcquire\" class=\"headerlink\" title=\"cancelAcquire\"></a>cancelAcquire</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cancelAcquire</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Ignore if node doesn&#x27;t exist</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    node.thread = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Skip cancelled predecessors</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">pred</span> <span class=\"operator\">=</span> node.prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pred.waitStatus &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        node.prev = pred = pred.prev;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// predNext is the apparent node to unsplice. CASes below will</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// fail if not, in which case, we lost race vs another cancel</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// or signal, so no further action is necessary.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">predNext</span> <span class=\"operator\">=</span> pred.next;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Can use unconditional write instead of CAS here.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// After this atomic step, other Nodes can skip past us.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Before, we are free of interference from other threads.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    node.waitStatus = Node.CANCELLED;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If we are the tail, remove ourselves.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == tail &amp;&amp; compareAndSetTail(node, pred)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        compareAndSetNext(pred, predNext, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// If successor needs signal, try to set pred&#x27;s next-link</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// so it will get one. Otherwise wake it up to propagate.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> ws;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pred != head &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">            ((ws = pred.waitStatus) == Node.SIGNAL ||</span><br><span class=\"line\"></span><br><span class=\"line\">             (ws &lt;= <span class=\"number\">0</span> &amp;&amp; compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">            pred.thread != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">Node</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> node.next;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (next != <span class=\"literal\">null</span> &amp;&amp; next.waitStatus &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                compareAndSetNext(pred, predNext, next);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            unparkSuccessor(node);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        node.next = node; <span class=\"comment\">// help GC</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"parkAndCheckInterrupt\"><a href=\"#parkAndCheckInterrupt\" class=\"headerlink\" title=\"parkAndCheckInterrupt\"></a>parkAndCheckInterrupt</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">parkAndCheckInterrupt</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//挂起线程，其实就是就是进入到java六中线程状态的一种 等待状态</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//走到这里之后，就会等待线程被唤醒，等到线程被唤醒之后，才会retrun</span></span><br><span class=\"line\"></span><br><span class=\"line\">    LockSupport.park(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Thread.interrupted();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"FairSync-unlock\"><a href=\"#FairSync-unlock\" class=\"headerlink\" title=\"FairSync-unlock\"></a>FairSync-unlock</h2><h3 id=\"unlock\"><a href=\"#unlock\" class=\"headerlink\" title=\"unlock\"></a>unlock</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unlock</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    sync.release(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"release\"><a href=\"#release\" class=\"headerlink\" title=\"release\"></a>release</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">release</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果尝试取消锁成功，会返回true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tryRelease(arg)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h != <span class=\"literal\">null</span> &amp;&amp; h.waitStatus != <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            unparkSuccessor(h);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"tryRelease\"><a href=\"#tryRelease\" class=\"headerlink\" title=\"tryRelease\"></a>tryRelease</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryRelease</span><span class=\"params\">(<span class=\"type\">int</span> releases)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> getState() - releases;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断当前线程是不是获取锁的那个线程，不是的话，抛出异常</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalMonitorStateException</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">free</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        free = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        setExclusiveOwnerThread(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    setState(c);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> free;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"unparkSuccessor\"><a href=\"#unparkSuccessor\" class=\"headerlink\" title=\"unparkSuccessor\"></a>unparkSuccessor</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unparkSuccessor</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * If status is negative (i.e., possibly needing signal) try</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * to clear in anticipation of signalling.  It is OK if this</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * fails or if status is changed by waiting thread.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">ws</span> <span class=\"operator\">=</span> node.waitStatus;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果head节点当前waitStatus&lt;0, 将其修改为0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        compareAndSetWaitStatus(node, ws, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * Thread to unpark is held in successor, which is normally</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * just the next node.  But if cancelled or apparently null,</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * traverse backwards from tail to find the actual</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     * non-cancelled successor.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面的代码就是唤醒后继节点，但是有可能后继节点取消了等待（waitStatus==1）</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从队尾往前找，找到waitStatus&lt;=0的所有节点中排在最前面的</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> node.next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"literal\">null</span> || s.waitStatus &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        s = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从后往前找，仔细看代码，不必担心中间有节点取消(waitStatus==1)的情况</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">Node</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> tail; t != <span class=\"literal\">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t.waitStatus &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                s = t;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s != <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        LockSupport.unpark(s.thread);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qYXZhZG9vcC5jb20vcG9zdC9BYnN0cmFjdFF1ZXVlZFN5bmNocm9uaXplcg==\">AQS<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>"},{"title":"几种通信方式的区别和联系","description":"","abbrlink":"8a615d9c","date":"2021-06-16T16:00:00.000Z","_content":"\n\nhttp websocket socket webservice这四种方式的区别和联系\n\n\n\n<!-- more -->\n\n\n\n## http\n\n\n\nHTTP 是基于请求响应式的，即通信只能由客户端发起，服务端做出响应，无状态，无连接的协议\n\n\n\nhttp是最初的产生的系统间进行通信的协议\n\n\n\n![image-20210617075159770](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210617075159770.png)\n\n\n\n## websocket\n\n\n\n### why\n\n\n\n为什么会出现这个东西？\n\n\n\n是因为在一些特定场景下，需要让服务端主动来发送请求，而不是只能让客户端进行轮询，比如我们想了解今天的天气，只能是客户端向服务器发出请求，服务器返回查询结果。HTTP 协议做不到服务器主动向客户端推送信息。\n\n\n\n这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。我们只能使用\"轮询\"：每隔一段时候，就发出一个询问，了解服务器有没有新的信息。最典型的场景就是聊天室。\n\n\n\n![image-20210617075211009](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210617075211009.png)\n\n\n\n## socket\n\n\n\n\n\n\n\n## service\n\n\n\n> 参考文章：\n\n>\n\n> - https://blog.csdn.net/miao_9/article/details/85286025","source":"_posts/几种通信方式的区别和联系.md","raw":"---\ntitle: 几种通信方式的区别和联系\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 8a615d9c\ndate: 2021-06-17 00:00:00\n---\n\n\nhttp websocket socket webservice这四种方式的区别和联系\n\n\n\n<!-- more -->\n\n\n\n## http\n\n\n\nHTTP 是基于请求响应式的，即通信只能由客户端发起，服务端做出响应，无状态，无连接的协议\n\n\n\nhttp是最初的产生的系统间进行通信的协议\n\n\n\n![image-20210617075159770](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210617075159770.png)\n\n\n\n## websocket\n\n\n\n### why\n\n\n\n为什么会出现这个东西？\n\n\n\n是因为在一些特定场景下，需要让服务端主动来发送请求，而不是只能让客户端进行轮询，比如我们想了解今天的天气，只能是客户端向服务器发出请求，服务器返回查询结果。HTTP 协议做不到服务器主动向客户端推送信息。\n\n\n\n这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。我们只能使用\"轮询\"：每隔一段时候，就发出一个询问，了解服务器有没有新的信息。最典型的场景就是聊天室。\n\n\n\n![image-20210617075211009](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210617075211009.png)\n\n\n\n## socket\n\n\n\n\n\n\n\n## service\n\n\n\n> 参考文章：\n\n>\n\n> - https://blog.csdn.net/miao_9/article/details/85286025","slug":"几种通信方式的区别和联系","published":1,"updated":"2025-03-02T03:37:34.416Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp55004fn0uk0cgl2zlw","content":"<p>http websocket socket webservice这四种方式的区别和联系</p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"http\"></a>http</h2><p>HTTP 是基于请求响应式的，即通信只能由客户端发起，服务端做出响应，无状态，无连接的协议</p>\n<p>http是最初的产生的系统间进行通信的协议</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210617075159770.png\" alt=\"image-20210617075159770\" loading=\"lazy\"></p>\n<h2 id=\"websocket\"><a href=\"#websocket\" class=\"headerlink\" title=\"websocket\"></a>websocket</h2><h3 id=\"why\"><a href=\"#why\" class=\"headerlink\" title=\"why\"></a>why</h3><p>为什么会出现这个东西？</p>\n<p>是因为在一些特定场景下，需要让服务端主动来发送请求，而不是只能让客户端进行轮询，比如我们想了解今天的天气，只能是客户端向服务器发出请求，服务器返回查询结果。HTTP 协议做不到服务器主动向客户端推送信息。</p>\n<p>这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。我们只能使用&quot;轮询&quot;：每隔一段时候，就发出一个询问，了解服务器有没有新的信息。最典型的场景就是聊天室。</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210617075211009.png\" alt=\"image-20210617075211009\" loading=\"lazy\"></p>\n<h2 id=\"socket\"><a href=\"#socket\" class=\"headerlink\" title=\"socket\"></a>socket</h2><h2 id=\"service\"><a href=\"#service\" class=\"headerlink\" title=\"service\"></a>service</h2><blockquote>\n<p>参考文章：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pYW9fOS9hcnRpY2xlL2RldGFpbHMvODUyODYwMjU=\">https://blog.csdn.net/miao_9/article/details/85286025<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</blockquote>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"http websocket socket webservice这四种方式的区别和联系\n\nhttp\nHTTP 是基于请求响应式的，即通信只能由客户端发起，服务端做出响应，无状态，无连接的协议\n\nhttp是最初的产生的系统间进行通信的协议\n\n\n\nwebsocket\nwhy\n为什么会出现这个东西？\n\n是因为在一些特定场景下，需要让服务端主动来发送请求，而不是只能让客户端进行轮询，比如我们想了解今天的天气，只能是客户端向服务器发出请求，服务器返回查询结果。HTTP 协议做不到服务器主动向客户端推送信息。\n\n这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。我们只能使用\"轮","more":"<h2 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"http\"></a>http</h2><p>HTTP 是基于请求响应式的，即通信只能由客户端发起，服务端做出响应，无状态，无连接的协议</p>\n<p>http是最初的产生的系统间进行通信的协议</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210617075159770.png\" alt=\"image-20210617075159770\" loading=\"lazy\"></p>\n<h2 id=\"websocket\"><a href=\"#websocket\" class=\"headerlink\" title=\"websocket\"></a>websocket</h2><h3 id=\"why\"><a href=\"#why\" class=\"headerlink\" title=\"why\"></a>why</h3><p>为什么会出现这个东西？</p>\n<p>是因为在一些特定场景下，需要让服务端主动来发送请求，而不是只能让客户端进行轮询，比如我们想了解今天的天气，只能是客户端向服务器发出请求，服务器返回查询结果。HTTP 协议做不到服务器主动向客户端推送信息。</p>\n<p>这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。我们只能使用&quot;轮询&quot;：每隔一段时候，就发出一个询问，了解服务器有没有新的信息。最典型的场景就是聊天室。</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210617075211009.png\" alt=\"image-20210617075211009\" loading=\"lazy\"></p>\n<h2 id=\"socket\"><a href=\"#socket\" class=\"headerlink\" title=\"socket\"></a>socket</h2><h2 id=\"service\"><a href=\"#service\" class=\"headerlink\" title=\"service\"></a>service</h2><blockquote>\n<p>参考文章：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pYW9fOS9hcnRpY2xlL2RldGFpbHMvODUyODYwMjU=\">https://blog.csdn.net/miao_9/article/details/85286025<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</blockquote>"},{"title":"分布式锁","description":"","abbrlink":"4eb3381c","date":"2021-05-12T16:00:00.000Z","_content":"## 来源\n\n\n\n为什么需要分布式锁？\n\n\n\n主要是由于在单服务器系统我们常用本地锁来避免并发带来的问题，但是，当服务采用集群方式部署时，本地锁无法在多个服务器之间生效，这时候保证数据的一致性就需要分布式锁来实现。\n\n\n\n## 特征\n\n\n\n一个相对安全的分布式锁具备什么特征？\n\n\n\n- 互斥性。互斥是锁的基本特征，同一时刻锁只能被一个线程持有，执行临界区操作。\n\n- 超时释放。通过超时释放，可以避免死锁，防止不必要的线程等待和资源浪费，类似于 MySQL 的 InnoDB 引擎中的 innodblockwait_timeout 参数配置。\n\n- 可重入性。一个线程在持有锁的情况可以对其再次请求加锁，防止锁在线程执行完临界区操作之前释放。\n\n- 高性能和高可用。加锁和释放锁的过程性能开销要尽可能的低，同时也要保证高可用，防止分布式锁意外失效。\n\n\n\n## 实现方式\n\n\n\n- **Memcached 分布式锁**\n\n- 利用 Memcached 的 add 命令。此命令是原子性操作，只有在 key 不存在的情况下，才能 add 成功，也就意味着线程得到了锁。\n\n- **Zookeeper 分布式锁**\n\n- 利用 Zookeeper 的顺序临时节点，来实现分布式锁和等待队列。ZooKeeper 作为一个专门为分布式应用提供方案的框架，它提供了一些非常好的特性，如 ephemeral 类型的 znode 自动删除的功能，同时 ZooKeeper 还提供 watch 机制，可以让分布式锁在客户端用起来就像一个本地的锁一样：加锁失败就阻塞住，直到获取到锁为止。\n\n- **Chubby**\n\n- Google 公司实现的粗粒度分布式锁服务，有点类似于 ZooKeeper，但也存在很多差异。Chubby 通过 sequencer 机制解决了请求延迟造成的锁失效的问题。\n\n- **Redis 分布式锁**\n\n- 基于 Redis 单机实现的分布式锁，其方式和 Memcached 的实现方式类似，利用 Redis 的 SETNX 命令，此命令同样是原子性操作，只有在 key 不存在的情况下，才能 set 成功。而基于 Redis 多机实现的分布式锁 Redlock，是 Redis 的作者 antirez 为了规范 Redis 分布式锁的实现，提出的一个更安全有效的实现机制。\n\n\n\n### redis分布式锁\n\n\n\n#### setnx\n\n\n\n最简单的加锁方式就是直接使用 Redis 的 SETNX 指令，该指令只在 key 不存在的情况下，将 key 的值设置为 value，若 key 已经存在，则 SETNX 命令不做任何动作。key 是锁的唯一标识，可以按照业务需要锁定的资源来命名。\n\n\n\n![image-20210513152055007](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210513152055007.png)\n\n\n\n为了防止资源被长期占用，所以需要设置一个过期时间\n\n\n\n![image-20210513152129848](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210513152129848.png)\n\n\n\n由于setnx和expire不是原子性的操作，所以还是存在这个过期时间没有加上的原因，资源还是被长期占用了\n\n\n\n所以可以用redis的扩展命令\n\n\n\n![image-20210513152721214](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210513152721214.png)\n\n\n\n> - NX 表示只有当 lock_resource_id 对应的 key 值不存在的时候才能 SET 成功。保证了只有第一个请求的客户端才能获得锁，而其它客户端在锁被释放之前都无法获得锁。\n\n> - EX 10 表示这个锁 10 秒钟后会自动过期，业务可以根据实际情况设置这个时间的大小。\n\n\n\n但是这种方式仍然不能彻底解决分布式锁超时问题：\n\n\n\n- 锁被提前释放。假如线程 A 在加锁和释放锁之间的逻辑执行的时间过长（或者线程 A 执行过程中被堵塞），以至于超出了锁的过期时间后进行了释放，但线程 A 在临界区的逻辑还没有执行完，那么这时候线程 B 就可以提前重新获取这把锁，导致临界区代码不能严格的串行执行。\n\n- 锁被误删。假如以上情形中的线程 A 执行完后，它并不知道此时的锁持有者是线程 B，线程 A 会继续执行 DEL 指令来释放锁，如果线程 B 在临界区的逻辑还没有执行完，线程 A 实际上释放了线程 B 的锁。\n\n\n\n锁被误删除的解决办法：\n\n\n\n就是在加锁时将 value 设置为一个唯一的随机数（或者线程 ID ），释放锁时先判断随机数是否一致，然后再执行释放操作，确保不会错误地释放其它线程持有的锁，除非是锁过期了被服务器自动释放。\n\n\n\n但是由于判断 value 和删除 key 是两个独立的操作，并不是原子性的，所以这个地方需要使用 Lua 脚本进行处理，因为 Lua 脚本可以保证连续多个指令的原子性执行。\n\n\n\n>但是，上面这个处理方法还是没有保证锁可能被提前释放的问题，所以有了下面的这种redisson的处理方式\n\n\n\n#### **Redisson** \n\n\n\n\n\n怎么能解决锁被提前释放这个问题呢？\n\n\n\n可以利用锁的可重入特性，让获得锁的线程开启一个定时器的守护线程，每 expireTime/3 执行一次，去检查该线程的锁是否存在，如果存在则对锁的过期时间重新设置为 expireTime，即利用守护线程对锁进行“续命”，防止锁由于过期提前释放。\n\n\n\n当然业务要实现这个守护进程的逻辑还是比较复杂的，可能还会出现一些未知的问题。\n\n\n\n目前互联网公司在生产环境用的比较广泛的开源框架 Redisson 很好地解决了这个问题，非常的简便易用，且支持 Redis 单实例、Redis M-S、Redis Sentinel、Redis Cluster 等多种部署架构。\n\n\n\n#### Redlock\n\n\n\n出现这个锁的原因是，上面两种的分布式锁都只是作用在了是加锁时只作用在一个 Redis 节点上，即使 Redis 通过 Sentinel 保证了高可用，但由于 Redis 的复制是异步的，Master 节点获取到锁后在未完成数据同步的情况下发生故障转移，此时其他客户端上的线程依然可以获取到锁，因此会丧失锁的安全性。\n\n\n\n\n\n\n\n> 参考文章：\n\n>\n\n> - https://www.infoq.cn/article/dvaaj71f4fbqsxmgvdce","source":"_posts/分布式锁.md","raw":"---\ntitle: 分布式锁\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 4eb3381c\ndate: 2021-05-13 00:00:00\n---\n## 来源\n\n\n\n为什么需要分布式锁？\n\n\n\n主要是由于在单服务器系统我们常用本地锁来避免并发带来的问题，但是，当服务采用集群方式部署时，本地锁无法在多个服务器之间生效，这时候保证数据的一致性就需要分布式锁来实现。\n\n\n\n## 特征\n\n\n\n一个相对安全的分布式锁具备什么特征？\n\n\n\n- 互斥性。互斥是锁的基本特征，同一时刻锁只能被一个线程持有，执行临界区操作。\n\n- 超时释放。通过超时释放，可以避免死锁，防止不必要的线程等待和资源浪费，类似于 MySQL 的 InnoDB 引擎中的 innodblockwait_timeout 参数配置。\n\n- 可重入性。一个线程在持有锁的情况可以对其再次请求加锁，防止锁在线程执行完临界区操作之前释放。\n\n- 高性能和高可用。加锁和释放锁的过程性能开销要尽可能的低，同时也要保证高可用，防止分布式锁意外失效。\n\n\n\n## 实现方式\n\n\n\n- **Memcached 分布式锁**\n\n- 利用 Memcached 的 add 命令。此命令是原子性操作，只有在 key 不存在的情况下，才能 add 成功，也就意味着线程得到了锁。\n\n- **Zookeeper 分布式锁**\n\n- 利用 Zookeeper 的顺序临时节点，来实现分布式锁和等待队列。ZooKeeper 作为一个专门为分布式应用提供方案的框架，它提供了一些非常好的特性，如 ephemeral 类型的 znode 自动删除的功能，同时 ZooKeeper 还提供 watch 机制，可以让分布式锁在客户端用起来就像一个本地的锁一样：加锁失败就阻塞住，直到获取到锁为止。\n\n- **Chubby**\n\n- Google 公司实现的粗粒度分布式锁服务，有点类似于 ZooKeeper，但也存在很多差异。Chubby 通过 sequencer 机制解决了请求延迟造成的锁失效的问题。\n\n- **Redis 分布式锁**\n\n- 基于 Redis 单机实现的分布式锁，其方式和 Memcached 的实现方式类似，利用 Redis 的 SETNX 命令，此命令同样是原子性操作，只有在 key 不存在的情况下，才能 set 成功。而基于 Redis 多机实现的分布式锁 Redlock，是 Redis 的作者 antirez 为了规范 Redis 分布式锁的实现，提出的一个更安全有效的实现机制。\n\n\n\n### redis分布式锁\n\n\n\n#### setnx\n\n\n\n最简单的加锁方式就是直接使用 Redis 的 SETNX 指令，该指令只在 key 不存在的情况下，将 key 的值设置为 value，若 key 已经存在，则 SETNX 命令不做任何动作。key 是锁的唯一标识，可以按照业务需要锁定的资源来命名。\n\n\n\n![image-20210513152055007](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210513152055007.png)\n\n\n\n为了防止资源被长期占用，所以需要设置一个过期时间\n\n\n\n![image-20210513152129848](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210513152129848.png)\n\n\n\n由于setnx和expire不是原子性的操作，所以还是存在这个过期时间没有加上的原因，资源还是被长期占用了\n\n\n\n所以可以用redis的扩展命令\n\n\n\n![image-20210513152721214](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210513152721214.png)\n\n\n\n> - NX 表示只有当 lock_resource_id 对应的 key 值不存在的时候才能 SET 成功。保证了只有第一个请求的客户端才能获得锁，而其它客户端在锁被释放之前都无法获得锁。\n\n> - EX 10 表示这个锁 10 秒钟后会自动过期，业务可以根据实际情况设置这个时间的大小。\n\n\n\n但是这种方式仍然不能彻底解决分布式锁超时问题：\n\n\n\n- 锁被提前释放。假如线程 A 在加锁和释放锁之间的逻辑执行的时间过长（或者线程 A 执行过程中被堵塞），以至于超出了锁的过期时间后进行了释放，但线程 A 在临界区的逻辑还没有执行完，那么这时候线程 B 就可以提前重新获取这把锁，导致临界区代码不能严格的串行执行。\n\n- 锁被误删。假如以上情形中的线程 A 执行完后，它并不知道此时的锁持有者是线程 B，线程 A 会继续执行 DEL 指令来释放锁，如果线程 B 在临界区的逻辑还没有执行完，线程 A 实际上释放了线程 B 的锁。\n\n\n\n锁被误删除的解决办法：\n\n\n\n就是在加锁时将 value 设置为一个唯一的随机数（或者线程 ID ），释放锁时先判断随机数是否一致，然后再执行释放操作，确保不会错误地释放其它线程持有的锁，除非是锁过期了被服务器自动释放。\n\n\n\n但是由于判断 value 和删除 key 是两个独立的操作，并不是原子性的，所以这个地方需要使用 Lua 脚本进行处理，因为 Lua 脚本可以保证连续多个指令的原子性执行。\n\n\n\n>但是，上面这个处理方法还是没有保证锁可能被提前释放的问题，所以有了下面的这种redisson的处理方式\n\n\n\n#### **Redisson** \n\n\n\n\n\n怎么能解决锁被提前释放这个问题呢？\n\n\n\n可以利用锁的可重入特性，让获得锁的线程开启一个定时器的守护线程，每 expireTime/3 执行一次，去检查该线程的锁是否存在，如果存在则对锁的过期时间重新设置为 expireTime，即利用守护线程对锁进行“续命”，防止锁由于过期提前释放。\n\n\n\n当然业务要实现这个守护进程的逻辑还是比较复杂的，可能还会出现一些未知的问题。\n\n\n\n目前互联网公司在生产环境用的比较广泛的开源框架 Redisson 很好地解决了这个问题，非常的简便易用，且支持 Redis 单实例、Redis M-S、Redis Sentinel、Redis Cluster 等多种部署架构。\n\n\n\n#### Redlock\n\n\n\n出现这个锁的原因是，上面两种的分布式锁都只是作用在了是加锁时只作用在一个 Redis 节点上，即使 Redis 通过 Sentinel 保证了高可用，但由于 Redis 的复制是异步的，Master 节点获取到锁后在未完成数据同步的情况下发生故障转移，此时其他客户端上的线程依然可以获取到锁，因此会丧失锁的安全性。\n\n\n\n\n\n\n\n> 参考文章：\n\n>\n\n> - https://www.infoq.cn/article/dvaaj71f4fbqsxmgvdce","slug":"分布式锁","published":1,"updated":"2025-03-02T03:37:34.417Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp55004hn0uk1yrcc23b","content":"<h2 id=\"来源\"><a href=\"#来源\" class=\"headerlink\" title=\"来源\"></a>来源</h2><p>为什么需要分布式锁？</p>\n<p>主要是由于在单服务器系统我们常用本地锁来避免并发带来的问题，但是，当服务采用集群方式部署时，本地锁无法在多个服务器之间生效，这时候保证数据的一致性就需要分布式锁来实现。</p>\n<h2 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h2><p>一个相对安全的分布式锁具备什么特征？</p>\n<ul>\n<li><p>互斥性。互斥是锁的基本特征，同一时刻锁只能被一个线程持有，执行临界区操作。</p>\n</li>\n<li><p>超时释放。通过超时释放，可以避免死锁，防止不必要的线程等待和资源浪费，类似于 MySQL 的 InnoDB 引擎中的 innodblockwait_timeout 参数配置。</p>\n</li>\n<li><p>可重入性。一个线程在持有锁的情况可以对其再次请求加锁，防止锁在线程执行完临界区操作之前释放。</p>\n</li>\n<li><p>高性能和高可用。加锁和释放锁的过程性能开销要尽可能的低，同时也要保证高可用，防止分布式锁意外失效。</p>\n</li>\n</ul>\n<h2 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h2><ul>\n<li><p><strong>Memcached 分布式锁</strong></p>\n</li>\n<li><p>利用 Memcached 的 add 命令。此命令是原子性操作，只有在 key 不存在的情况下，才能 add 成功，也就意味着线程得到了锁。</p>\n</li>\n<li><p><strong>Zookeeper 分布式锁</strong></p>\n</li>\n<li><p>利用 Zookeeper 的顺序临时节点，来实现分布式锁和等待队列。ZooKeeper 作为一个专门为分布式应用提供方案的框架，它提供了一些非常好的特性，如 ephemeral 类型的 znode 自动删除的功能，同时 ZooKeeper 还提供 watch 机制，可以让分布式锁在客户端用起来就像一个本地的锁一样：加锁失败就阻塞住，直到获取到锁为止。</p>\n</li>\n<li><p><strong>Chubby</strong></p>\n</li>\n<li><p>Google 公司实现的粗粒度分布式锁服务，有点类似于 ZooKeeper，但也存在很多差异。Chubby 通过 sequencer 机制解决了请求延迟造成的锁失效的问题。</p>\n</li>\n<li><p><strong>Redis 分布式锁</strong></p>\n</li>\n<li><p>基于 Redis 单机实现的分布式锁，其方式和 Memcached 的实现方式类似，利用 Redis 的 SETNX 命令，此命令同样是原子性操作，只有在 key 不存在的情况下，才能 set 成功。而基于 Redis 多机实现的分布式锁 Redlock，是 Redis 的作者 antirez 为了规范 Redis 分布式锁的实现，提出的一个更安全有效的实现机制。</p>\n</li>\n</ul>\n<h3 id=\"redis分布式锁\"><a href=\"#redis分布式锁\" class=\"headerlink\" title=\"redis分布式锁\"></a>redis分布式锁</h3><h4 id=\"setnx\"><a href=\"#setnx\" class=\"headerlink\" title=\"setnx\"></a>setnx</h4><p>最简单的加锁方式就是直接使用 Redis 的 SETNX 指令，该指令只在 key 不存在的情况下，将 key 的值设置为 value，若 key 已经存在，则 SETNX 命令不做任何动作。key 是锁的唯一标识，可以按照业务需要锁定的资源来命名。</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210513152055007.png\" alt=\"image-20210513152055007\" loading=\"lazy\"></p>\n<p>为了防止资源被长期占用，所以需要设置一个过期时间</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210513152129848.png\" alt=\"image-20210513152129848\" loading=\"lazy\"></p>\n<p>由于setnx和expire不是原子性的操作，所以还是存在这个过期时间没有加上的原因，资源还是被长期占用了</p>\n<p>所以可以用redis的扩展命令</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210513152721214.png\" alt=\"image-20210513152721214\" loading=\"lazy\"></p>\n<blockquote>\n<ul>\n<li>NX 表示只有当 lock_resource_id 对应的 key 值不存在的时候才能 SET 成功。保证了只有第一个请求的客户端才能获得锁，而其它客户端在锁被释放之前都无法获得锁。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>EX 10 表示这个锁 10 秒钟后会自动过期，业务可以根据实际情况设置这个时间的大小。</li>\n</ul>\n</blockquote>\n<p>但是这种方式仍然不能彻底解决分布式锁超时问题：</p>\n<ul>\n<li><p>锁被提前释放。假如线程 A 在加锁和释放锁之间的逻辑执行的时间过长（或者线程 A 执行过程中被堵塞），以至于超出了锁的过期时间后进行了释放，但线程 A 在临界区的逻辑还没有执行完，那么这时候线程 B 就可以提前重新获取这把锁，导致临界区代码不能严格的串行执行。</p>\n</li>\n<li><p>锁被误删。假如以上情形中的线程 A 执行完后，它并不知道此时的锁持有者是线程 B，线程 A 会继续执行 DEL 指令来释放锁，如果线程 B 在临界区的逻辑还没有执行完，线程 A 实际上释放了线程 B 的锁。</p>\n</li>\n</ul>\n<p>锁被误删除的解决办法：</p>\n<p>就是在加锁时将 value 设置为一个唯一的随机数（或者线程 ID ），释放锁时先判断随机数是否一致，然后再执行释放操作，确保不会错误地释放其它线程持有的锁，除非是锁过期了被服务器自动释放。</p>\n<p>但是由于判断 value 和删除 key 是两个独立的操作，并不是原子性的，所以这个地方需要使用 Lua 脚本进行处理，因为 Lua 脚本可以保证连续多个指令的原子性执行。</p>\n<blockquote>\n<p>但是，上面这个处理方法还是没有保证锁可能被提前释放的问题，所以有了下面的这种redisson的处理方式</p>\n</blockquote>\n<h4 id=\"Redisson\"><a href=\"#Redisson\" class=\"headerlink\" title=\"Redisson\"></a><strong>Redisson</strong></h4><p>怎么能解决锁被提前释放这个问题呢？</p>\n<p>可以利用锁的可重入特性，让获得锁的线程开启一个定时器的守护线程，每 expireTime&#x2F;3 执行一次，去检查该线程的锁是否存在，如果存在则对锁的过期时间重新设置为 expireTime，即利用守护线程对锁进行“续命”，防止锁由于过期提前释放。</p>\n<p>当然业务要实现这个守护进程的逻辑还是比较复杂的，可能还会出现一些未知的问题。</p>\n<p>目前互联网公司在生产环境用的比较广泛的开源框架 Redisson 很好地解决了这个问题，非常的简便易用，且支持 Redis 单实例、Redis M-S、Redis Sentinel、Redis Cluster 等多种部署架构。</p>\n<h4 id=\"Redlock\"><a href=\"#Redlock\" class=\"headerlink\" title=\"Redlock\"></a>Redlock</h4><p>出现这个锁的原因是，上面两种的分布式锁都只是作用在了是加锁时只作用在一个 Redis 节点上，即使 Redis 通过 Sentinel 保证了高可用，但由于 Redis 的复制是异步的，Master 节点获取到锁后在未完成数据同步的情况下发生故障转移，此时其他客户端上的线程依然可以获取到锁，因此会丧失锁的安全性。</p>\n<blockquote>\n<p>参考文章：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaW5mb3EuY24vYXJ0aWNsZS9kdmFhajcxZjRmYnFzeG1ndmRjZQ==\">https://www.infoq.cn/article/dvaaj71f4fbqsxmgvdce<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</blockquote>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"来源\n为什么需要分布式锁？\n\n主要是由于在单服务器系统我们常用本地锁来避免并发带来的问题，但是，当服务采用集群方式部署时，本地锁无法在多个服务器之间生效，这时候保证数据的一致性就需要分布式锁来实现。\n\n特征\n一个相对安全的分布式锁具备什么特征？\n\n * 互斥性。互斥是锁的基本特征，同一时刻锁只能被一个线程持有，执行临界区操作。\n   \n   \n * 超时释放。通过超时释放，可以避免死锁，防止不必要的线程等待和资源浪费，类似于 MySQL 的 InnoDB 引擎中的 innodblockwait_timeout 参数配置。\n   \n   \n * 可重入性。一个线程在持有锁的情况可以对其再次请求加","more":"<h2 id=\"来源\"><a href=\"#来源\" class=\"headerlink\" title=\"来源\"></a>来源</h2><p>为什么需要分布式锁？</p>\n<p>主要是由于在单服务器系统我们常用本地锁来避免并发带来的问题，但是，当服务采用集群方式部署时，本地锁无法在多个服务器之间生效，这时候保证数据的一致性就需要分布式锁来实现。</p>\n<h2 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h2><p>一个相对安全的分布式锁具备什么特征？</p>\n<ul>\n<li><p>互斥性。互斥是锁的基本特征，同一时刻锁只能被一个线程持有，执行临界区操作。</p>\n</li>\n<li><p>超时释放。通过超时释放，可以避免死锁，防止不必要的线程等待和资源浪费，类似于 MySQL 的 InnoDB 引擎中的 innodblockwait_timeout 参数配置。</p>\n</li>\n<li><p>可重入性。一个线程在持有锁的情况可以对其再次请求加锁，防止锁在线程执行完临界区操作之前释放。</p>\n</li>\n<li><p>高性能和高可用。加锁和释放锁的过程性能开销要尽可能的低，同时也要保证高可用，防止分布式锁意外失效。</p>\n</li>\n</ul>\n<h2 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h2><ul>\n<li><p><strong>Memcached 分布式锁</strong></p>\n</li>\n<li><p>利用 Memcached 的 add 命令。此命令是原子性操作，只有在 key 不存在的情况下，才能 add 成功，也就意味着线程得到了锁。</p>\n</li>\n<li><p><strong>Zookeeper 分布式锁</strong></p>\n</li>\n<li><p>利用 Zookeeper 的顺序临时节点，来实现分布式锁和等待队列。ZooKeeper 作为一个专门为分布式应用提供方案的框架，它提供了一些非常好的特性，如 ephemeral 类型的 znode 自动删除的功能，同时 ZooKeeper 还提供 watch 机制，可以让分布式锁在客户端用起来就像一个本地的锁一样：加锁失败就阻塞住，直到获取到锁为止。</p>\n</li>\n<li><p><strong>Chubby</strong></p>\n</li>\n<li><p>Google 公司实现的粗粒度分布式锁服务，有点类似于 ZooKeeper，但也存在很多差异。Chubby 通过 sequencer 机制解决了请求延迟造成的锁失效的问题。</p>\n</li>\n<li><p><strong>Redis 分布式锁</strong></p>\n</li>\n<li><p>基于 Redis 单机实现的分布式锁，其方式和 Memcached 的实现方式类似，利用 Redis 的 SETNX 命令，此命令同样是原子性操作，只有在 key 不存在的情况下，才能 set 成功。而基于 Redis 多机实现的分布式锁 Redlock，是 Redis 的作者 antirez 为了规范 Redis 分布式锁的实现，提出的一个更安全有效的实现机制。</p>\n</li>\n</ul>\n<h3 id=\"redis分布式锁\"><a href=\"#redis分布式锁\" class=\"headerlink\" title=\"redis分布式锁\"></a>redis分布式锁</h3><h4 id=\"setnx\"><a href=\"#setnx\" class=\"headerlink\" title=\"setnx\"></a>setnx</h4><p>最简单的加锁方式就是直接使用 Redis 的 SETNX 指令，该指令只在 key 不存在的情况下，将 key 的值设置为 value，若 key 已经存在，则 SETNX 命令不做任何动作。key 是锁的唯一标识，可以按照业务需要锁定的资源来命名。</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210513152055007.png\" alt=\"image-20210513152055007\" loading=\"lazy\"></p>\n<p>为了防止资源被长期占用，所以需要设置一个过期时间</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210513152129848.png\" alt=\"image-20210513152129848\" loading=\"lazy\"></p>\n<p>由于setnx和expire不是原子性的操作，所以还是存在这个过期时间没有加上的原因，资源还是被长期占用了</p>\n<p>所以可以用redis的扩展命令</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210513152721214.png\" alt=\"image-20210513152721214\" loading=\"lazy\"></p>\n<blockquote>\n<ul>\n<li>NX 表示只有当 lock_resource_id 对应的 key 值不存在的时候才能 SET 成功。保证了只有第一个请求的客户端才能获得锁，而其它客户端在锁被释放之前都无法获得锁。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>EX 10 表示这个锁 10 秒钟后会自动过期，业务可以根据实际情况设置这个时间的大小。</li>\n</ul>\n</blockquote>\n<p>但是这种方式仍然不能彻底解决分布式锁超时问题：</p>\n<ul>\n<li><p>锁被提前释放。假如线程 A 在加锁和释放锁之间的逻辑执行的时间过长（或者线程 A 执行过程中被堵塞），以至于超出了锁的过期时间后进行了释放，但线程 A 在临界区的逻辑还没有执行完，那么这时候线程 B 就可以提前重新获取这把锁，导致临界区代码不能严格的串行执行。</p>\n</li>\n<li><p>锁被误删。假如以上情形中的线程 A 执行完后，它并不知道此时的锁持有者是线程 B，线程 A 会继续执行 DEL 指令来释放锁，如果线程 B 在临界区的逻辑还没有执行完，线程 A 实际上释放了线程 B 的锁。</p>\n</li>\n</ul>\n<p>锁被误删除的解决办法：</p>\n<p>就是在加锁时将 value 设置为一个唯一的随机数（或者线程 ID ），释放锁时先判断随机数是否一致，然后再执行释放操作，确保不会错误地释放其它线程持有的锁，除非是锁过期了被服务器自动释放。</p>\n<p>但是由于判断 value 和删除 key 是两个独立的操作，并不是原子性的，所以这个地方需要使用 Lua 脚本进行处理，因为 Lua 脚本可以保证连续多个指令的原子性执行。</p>\n<blockquote>\n<p>但是，上面这个处理方法还是没有保证锁可能被提前释放的问题，所以有了下面的这种redisson的处理方式</p>\n</blockquote>\n<h4 id=\"Redisson\"><a href=\"#Redisson\" class=\"headerlink\" title=\"Redisson\"></a><strong>Redisson</strong></h4><p>怎么能解决锁被提前释放这个问题呢？</p>\n<p>可以利用锁的可重入特性，让获得锁的线程开启一个定时器的守护线程，每 expireTime&#x2F;3 执行一次，去检查该线程的锁是否存在，如果存在则对锁的过期时间重新设置为 expireTime，即利用守护线程对锁进行“续命”，防止锁由于过期提前释放。</p>\n<p>当然业务要实现这个守护进程的逻辑还是比较复杂的，可能还会出现一些未知的问题。</p>\n<p>目前互联网公司在生产环境用的比较广泛的开源框架 Redisson 很好地解决了这个问题，非常的简便易用，且支持 Redis 单实例、Redis M-S、Redis Sentinel、Redis Cluster 等多种部署架构。</p>\n<h4 id=\"Redlock\"><a href=\"#Redlock\" class=\"headerlink\" title=\"Redlock\"></a>Redlock</h4><p>出现这个锁的原因是，上面两种的分布式锁都只是作用在了是加锁时只作用在一个 Redis 节点上，即使 Redis 通过 Sentinel 保证了高可用，但由于 Redis 的复制是异步的，Master 节点获取到锁后在未完成数据同步的情况下发生故障转移，此时其他客户端上的线程依然可以获取到锁，因此会丧失锁的安全性。</p>\n<blockquote>\n<p>参考文章：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaW5mb3EuY24vYXJ0aWNsZS9kdmFhajcxZjRmYnFzeG1ndmRjZQ==\">https://www.infoq.cn/article/dvaaj71f4fbqsxmgvdce<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</blockquote>\n"},{"title":"到底要不要买房","description":"","abbrlink":"e6c47730","date":"2023-12-03T16:00:00.000Z","_content":"\n\n## 为啥要买房\n\n\n\n### 传统\n\n\n\n一般普通人会在什么时候买房那，大部分都是结婚的时候，女方要房子的时候。站在女方的立场上，想要在结婚之后有一个稳定的居所没啥问题，要求房子其实也没啥问题。但是要考虑到当前世界是什么样子的，如今的房价是个人都知道太贵了，基本上要掏空六个钱包才行，确实是要好好考虑一下才行。\n\n\n\n那么房子提供给我们的到底是什么那？一个稳定的居所，内心的安定，以及周围的配套设置，还有经典的学区房。所以其实买的不仅仅是一个房子，更多的是这一系列的东西和它捆绑在一起了，那么我们就一个一个来分析，这到底是真的都捆绑在一起吗？还是说是我们观念导致的\n\n\n\n稳定的居所，这个确实有，但是问题是你的工作稳定吗？如果没有一个稳定的工作，那么要一个稳定居所有啥用？稳定的居所适合有稳定工作的人，如果你还没有一份稳定的工作，那么抱歉，这个可能你没啥体验。当你换了一份工作的时候，通勤时间比较久的时候，你是否还会感觉开心，而且还不敢休息，不敢失去工作每个月都要还贷款\n\n\n\n内心的安定，这个确实是我们深受国家传统观念的影响，即使是我说的可以一直租房，但是其实我内心还是希望拥有一套自己的房子，可是这是在自己的承受范围内，如果拥有这个需要我背负巨额的负债，不敢失去工作，不敢消费，只能做牛马，那其实我感觉租房也可以\n\n\n\n周围配套设施，这个确实，但是你要事先考察好周围才行，如果你之后不满意，你也无法改变，只能接受，反倒是租房如果住了一段时间，觉得厌倦了，就可以换个地方，只是搬家比较麻烦，但是现在这个时代，只要你愿意付钱，就会有专门的公司来承接这种服务，直接找房子即可\n\n\n\n学区房，在国内好多人买房子的一大重要原因就是房子是和附近学校绑定的，但是从目前大趋势来看，未来随着国内出生率不断下降，人口越来越少，很多东西就会变化，其实目前已经有一些地方来提供**租售同权**的政策了。那什么是租售同权的？其实就是你租房子和买房子拥有一样的权利了，你租房子的孩子也可以在附近的学校上学了，那么这样一旦放开的话，对房地产又是一个很大的打击，所以说未来来看学区房也是一个伪概念了\n\n\n\n### 房子\n\n\n\n最近看b站视频有个很有意思的观点，就是在讨论房子属性的时候，女方说 目前提供建议：以投资为目的的时候可以买房，但是你如果以投资为目的不建议。男方就立马反驳道：**房子这个东西本来就是有两种属性的，投资和消费属性的，而且金额还很大，你是无法把他当做一个日常的消费品的，你只要是买房子，那么这就必然是一种投资行为**\n\n\n\n我听到之后非常认同，房子这东西你但凡是买了，那就必然是一种投资行为，这是无法避免的，即使你嘴上不承认。其实过去的几十年中，那么多人为啥有了钱都买了房子，他们都觉得稳定，稳定的什么？稳定增值啊，但是到如今这个时间点就不太行了，房价大部分都在下跌，好多人都在降价出手了，这明显可以反应出来目前大家都对未来预期不好，都想把握好自己的现金流。\n\n\n\n## 国外\n\n\n\n国外其实很多地方也是房价很高的，大部分都是选择租房的，而且他们没有我们中国传统观念的束缚，不是说非要买一套房子才行，只要有地方住就可以了。这才回归到房子的本质，居住。由于国外基本上都实现了租售同权的，所以基本上都是选择租房了，这也就是国内未来发展的一个大趋势。\n\n\n\n## 总结\n\n\n\n- 刚需房，学区房都是伪概念\n\n- 房子这个东西本来就是有两种属性的，投资和消费属性的，而且金额还很大，你是无法把他当做一个日常的消费品的，你只要是买房子，那么这就必然是一种投资行为\n\n- 随着国内人口增长率进一步下降，房价大幅涨上基本不太可能，核心城市核心地区当然还是很吃香，但是三四线以及以下城市最好还是不要买房了，否则可能不太好转手卖出去了\n\n- 如果真的是决定定居在一个城市了，女朋友还非要房子才行，你们也都想清楚了，那我只能说尊重个人选择了\n\n- 除非你是真的很有钱，可以全款之类的，否则都不建议买房！！！\n","source":"_posts/到底要不要买房.md","raw":"---\ntitle: 到底要不要买房\ndescription: ''\ntags:\n  - 无标签\nabbrlink: e6c47730\ndate: 2023-12-04 00:00:00\n---\n\n\n## 为啥要买房\n\n\n\n### 传统\n\n\n\n一般普通人会在什么时候买房那，大部分都是结婚的时候，女方要房子的时候。站在女方的立场上，想要在结婚之后有一个稳定的居所没啥问题，要求房子其实也没啥问题。但是要考虑到当前世界是什么样子的，如今的房价是个人都知道太贵了，基本上要掏空六个钱包才行，确实是要好好考虑一下才行。\n\n\n\n那么房子提供给我们的到底是什么那？一个稳定的居所，内心的安定，以及周围的配套设置，还有经典的学区房。所以其实买的不仅仅是一个房子，更多的是这一系列的东西和它捆绑在一起了，那么我们就一个一个来分析，这到底是真的都捆绑在一起吗？还是说是我们观念导致的\n\n\n\n稳定的居所，这个确实有，但是问题是你的工作稳定吗？如果没有一个稳定的工作，那么要一个稳定居所有啥用？稳定的居所适合有稳定工作的人，如果你还没有一份稳定的工作，那么抱歉，这个可能你没啥体验。当你换了一份工作的时候，通勤时间比较久的时候，你是否还会感觉开心，而且还不敢休息，不敢失去工作每个月都要还贷款\n\n\n\n内心的安定，这个确实是我们深受国家传统观念的影响，即使是我说的可以一直租房，但是其实我内心还是希望拥有一套自己的房子，可是这是在自己的承受范围内，如果拥有这个需要我背负巨额的负债，不敢失去工作，不敢消费，只能做牛马，那其实我感觉租房也可以\n\n\n\n周围配套设施，这个确实，但是你要事先考察好周围才行，如果你之后不满意，你也无法改变，只能接受，反倒是租房如果住了一段时间，觉得厌倦了，就可以换个地方，只是搬家比较麻烦，但是现在这个时代，只要你愿意付钱，就会有专门的公司来承接这种服务，直接找房子即可\n\n\n\n学区房，在国内好多人买房子的一大重要原因就是房子是和附近学校绑定的，但是从目前大趋势来看，未来随着国内出生率不断下降，人口越来越少，很多东西就会变化，其实目前已经有一些地方来提供**租售同权**的政策了。那什么是租售同权的？其实就是你租房子和买房子拥有一样的权利了，你租房子的孩子也可以在附近的学校上学了，那么这样一旦放开的话，对房地产又是一个很大的打击，所以说未来来看学区房也是一个伪概念了\n\n\n\n### 房子\n\n\n\n最近看b站视频有个很有意思的观点，就是在讨论房子属性的时候，女方说 目前提供建议：以投资为目的的时候可以买房，但是你如果以投资为目的不建议。男方就立马反驳道：**房子这个东西本来就是有两种属性的，投资和消费属性的，而且金额还很大，你是无法把他当做一个日常的消费品的，你只要是买房子，那么这就必然是一种投资行为**\n\n\n\n我听到之后非常认同，房子这东西你但凡是买了，那就必然是一种投资行为，这是无法避免的，即使你嘴上不承认。其实过去的几十年中，那么多人为啥有了钱都买了房子，他们都觉得稳定，稳定的什么？稳定增值啊，但是到如今这个时间点就不太行了，房价大部分都在下跌，好多人都在降价出手了，这明显可以反应出来目前大家都对未来预期不好，都想把握好自己的现金流。\n\n\n\n## 国外\n\n\n\n国外其实很多地方也是房价很高的，大部分都是选择租房的，而且他们没有我们中国传统观念的束缚，不是说非要买一套房子才行，只要有地方住就可以了。这才回归到房子的本质，居住。由于国外基本上都实现了租售同权的，所以基本上都是选择租房了，这也就是国内未来发展的一个大趋势。\n\n\n\n## 总结\n\n\n\n- 刚需房，学区房都是伪概念\n\n- 房子这个东西本来就是有两种属性的，投资和消费属性的，而且金额还很大，你是无法把他当做一个日常的消费品的，你只要是买房子，那么这就必然是一种投资行为\n\n- 随着国内人口增长率进一步下降，房价大幅涨上基本不太可能，核心城市核心地区当然还是很吃香，但是三四线以及以下城市最好还是不要买房了，否则可能不太好转手卖出去了\n\n- 如果真的是决定定居在一个城市了，女朋友还非要房子才行，你们也都想清楚了，那我只能说尊重个人选择了\n\n- 除非你是真的很有钱，可以全款之类的，否则都不建议买房！！！\n","slug":"到底要不要买房","published":1,"updated":"2025-03-02T03:37:34.418Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp55004jn0uk4m8521sc","content":"<h2 id=\"为啥要买房\"><a href=\"#为啥要买房\" class=\"headerlink\" title=\"为啥要买房\"></a>为啥要买房</h2><h3 id=\"传统\"><a href=\"#传统\" class=\"headerlink\" title=\"传统\"></a>传统</h3><p>一般普通人会在什么时候买房那，大部分都是结婚的时候，女方要房子的时候。站在女方的立场上，想要在结婚之后有一个稳定的居所没啥问题，要求房子其实也没啥问题。但是要考虑到当前世界是什么样子的，如今的房价是个人都知道太贵了，基本上要掏空六个钱包才行，确实是要好好考虑一下才行。</p>\n<p>那么房子提供给我们的到底是什么那？一个稳定的居所，内心的安定，以及周围的配套设置，还有经典的学区房。所以其实买的不仅仅是一个房子，更多的是这一系列的东西和它捆绑在一起了，那么我们就一个一个来分析，这到底是真的都捆绑在一起吗？还是说是我们观念导致的</p>\n<p>稳定的居所，这个确实有，但是问题是你的工作稳定吗？如果没有一个稳定的工作，那么要一个稳定居所有啥用？稳定的居所适合有稳定工作的人，如果你还没有一份稳定的工作，那么抱歉，这个可能你没啥体验。当你换了一份工作的时候，通勤时间比较久的时候，你是否还会感觉开心，而且还不敢休息，不敢失去工作每个月都要还贷款</p>\n<p>内心的安定，这个确实是我们深受国家传统观念的影响，即使是我说的可以一直租房，但是其实我内心还是希望拥有一套自己的房子，可是这是在自己的承受范围内，如果拥有这个需要我背负巨额的负债，不敢失去工作，不敢消费，只能做牛马，那其实我感觉租房也可以</p>\n<p>周围配套设施，这个确实，但是你要事先考察好周围才行，如果你之后不满意，你也无法改变，只能接受，反倒是租房如果住了一段时间，觉得厌倦了，就可以换个地方，只是搬家比较麻烦，但是现在这个时代，只要你愿意付钱，就会有专门的公司来承接这种服务，直接找房子即可</p>\n<p>学区房，在国内好多人买房子的一大重要原因就是房子是和附近学校绑定的，但是从目前大趋势来看，未来随着国内出生率不断下降，人口越来越少，很多东西就会变化，其实目前已经有一些地方来提供<strong>租售同权</strong>的政策了。那什么是租售同权的？其实就是你租房子和买房子拥有一样的权利了，你租房子的孩子也可以在附近的学校上学了，那么这样一旦放开的话，对房地产又是一个很大的打击，所以说未来来看学区房也是一个伪概念了</p>\n<h3 id=\"房子\"><a href=\"#房子\" class=\"headerlink\" title=\"房子\"></a>房子</h3><p>最近看b站视频有个很有意思的观点，就是在讨论房子属性的时候，女方说 目前提供建议：以投资为目的的时候可以买房，但是你如果以投资为目的不建议。男方就立马反驳道：<strong>房子这个东西本来就是有两种属性的，投资和消费属性的，而且金额还很大，你是无法把他当做一个日常的消费品的，你只要是买房子，那么这就必然是一种投资行为</strong></p>\n<p>我听到之后非常认同，房子这东西你但凡是买了，那就必然是一种投资行为，这是无法避免的，即使你嘴上不承认。其实过去的几十年中，那么多人为啥有了钱都买了房子，他们都觉得稳定，稳定的什么？稳定增值啊，但是到如今这个时间点就不太行了，房价大部分都在下跌，好多人都在降价出手了，这明显可以反应出来目前大家都对未来预期不好，都想把握好自己的现金流。</p>\n<h2 id=\"国外\"><a href=\"#国外\" class=\"headerlink\" title=\"国外\"></a>国外</h2><p>国外其实很多地方也是房价很高的，大部分都是选择租房的，而且他们没有我们中国传统观念的束缚，不是说非要买一套房子才行，只要有地方住就可以了。这才回归到房子的本质，居住。由于国外基本上都实现了租售同权的，所以基本上都是选择租房了，这也就是国内未来发展的一个大趋势。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>刚需房，学区房都是伪概念</p>\n</li>\n<li><p>房子这个东西本来就是有两种属性的，投资和消费属性的，而且金额还很大，你是无法把他当做一个日常的消费品的，你只要是买房子，那么这就必然是一种投资行为</p>\n</li>\n<li><p>随着国内人口增长率进一步下降，房价大幅涨上基本不太可能，核心城市核心地区当然还是很吃香，但是三四线以及以下城市最好还是不要买房了，否则可能不太好转手卖出去了</p>\n</li>\n<li><p>如果真的是决定定居在一个城市了，女朋友还非要房子才行，你们也都想清楚了，那我只能说尊重个人选择了</p>\n</li>\n<li><p>除非你是真的很有钱，可以全款之类的，否则都不建议买房！！！</p>\n</li>\n</ul>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"为啥要买房\n传统\n一般普通人会在什么时候买房那，大部分都是结婚的时候，女方要房子的时候。站在女方的立场上，想要在结婚之后有一个稳定的居所没啥问题，要求房子其实也没啥问题。但是要考虑到当前世界是什么样子的，如今的房价是个人都知道太贵了，基本上要掏空六个钱包才行，确实是要好好考虑一下才行。\n\n那么房子提供给我们的到底是什么那？一个稳定的居所，内心的安定，以及周围的配套设置，还有经典的学区房。所以其实买的不仅仅是一个房子，更多的是这一系列的东西和它捆绑在一起了，那么我们就一个一个来分析，这到底是真的都捆绑在一起吗？还是说是我们观念导致的\n\n稳定的居所，这个确实有，但是问题是你的工作稳定吗？如果没有一","more":"<h2 id=\"为啥要买房\"><a href=\"#为啥要买房\" class=\"headerlink\" title=\"为啥要买房\"></a>为啥要买房</h2><h3 id=\"传统\"><a href=\"#传统\" class=\"headerlink\" title=\"传统\"></a>传统</h3><p>一般普通人会在什么时候买房那，大部分都是结婚的时候，女方要房子的时候。站在女方的立场上，想要在结婚之后有一个稳定的居所没啥问题，要求房子其实也没啥问题。但是要考虑到当前世界是什么样子的，如今的房价是个人都知道太贵了，基本上要掏空六个钱包才行，确实是要好好考虑一下才行。</p>\n<p>那么房子提供给我们的到底是什么那？一个稳定的居所，内心的安定，以及周围的配套设置，还有经典的学区房。所以其实买的不仅仅是一个房子，更多的是这一系列的东西和它捆绑在一起了，那么我们就一个一个来分析，这到底是真的都捆绑在一起吗？还是说是我们观念导致的</p>\n<p>稳定的居所，这个确实有，但是问题是你的工作稳定吗？如果没有一个稳定的工作，那么要一个稳定居所有啥用？稳定的居所适合有稳定工作的人，如果你还没有一份稳定的工作，那么抱歉，这个可能你没啥体验。当你换了一份工作的时候，通勤时间比较久的时候，你是否还会感觉开心，而且还不敢休息，不敢失去工作每个月都要还贷款</p>\n<p>内心的安定，这个确实是我们深受国家传统观念的影响，即使是我说的可以一直租房，但是其实我内心还是希望拥有一套自己的房子，可是这是在自己的承受范围内，如果拥有这个需要我背负巨额的负债，不敢失去工作，不敢消费，只能做牛马，那其实我感觉租房也可以</p>\n<p>周围配套设施，这个确实，但是你要事先考察好周围才行，如果你之后不满意，你也无法改变，只能接受，反倒是租房如果住了一段时间，觉得厌倦了，就可以换个地方，只是搬家比较麻烦，但是现在这个时代，只要你愿意付钱，就会有专门的公司来承接这种服务，直接找房子即可</p>\n<p>学区房，在国内好多人买房子的一大重要原因就是房子是和附近学校绑定的，但是从目前大趋势来看，未来随着国内出生率不断下降，人口越来越少，很多东西就会变化，其实目前已经有一些地方来提供<strong>租售同权</strong>的政策了。那什么是租售同权的？其实就是你租房子和买房子拥有一样的权利了，你租房子的孩子也可以在附近的学校上学了，那么这样一旦放开的话，对房地产又是一个很大的打击，所以说未来来看学区房也是一个伪概念了</p>\n<h3 id=\"房子\"><a href=\"#房子\" class=\"headerlink\" title=\"房子\"></a>房子</h3><p>最近看b站视频有个很有意思的观点，就是在讨论房子属性的时候，女方说 目前提供建议：以投资为目的的时候可以买房，但是你如果以投资为目的不建议。男方就立马反驳道：<strong>房子这个东西本来就是有两种属性的，投资和消费属性的，而且金额还很大，你是无法把他当做一个日常的消费品的，你只要是买房子，那么这就必然是一种投资行为</strong></p>\n<p>我听到之后非常认同，房子这东西你但凡是买了，那就必然是一种投资行为，这是无法避免的，即使你嘴上不承认。其实过去的几十年中，那么多人为啥有了钱都买了房子，他们都觉得稳定，稳定的什么？稳定增值啊，但是到如今这个时间点就不太行了，房价大部分都在下跌，好多人都在降价出手了，这明显可以反应出来目前大家都对未来预期不好，都想把握好自己的现金流。</p>\n<h2 id=\"国外\"><a href=\"#国外\" class=\"headerlink\" title=\"国外\"></a>国外</h2><p>国外其实很多地方也是房价很高的，大部分都是选择租房的，而且他们没有我们中国传统观念的束缚，不是说非要买一套房子才行，只要有地方住就可以了。这才回归到房子的本质，居住。由于国外基本上都实现了租售同权的，所以基本上都是选择租房了，这也就是国内未来发展的一个大趋势。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>刚需房，学区房都是伪概念</p>\n</li>\n<li><p>房子这个东西本来就是有两种属性的，投资和消费属性的，而且金额还很大，你是无法把他当做一个日常的消费品的，你只要是买房子，那么这就必然是一种投资行为</p>\n</li>\n<li><p>随着国内人口增长率进一步下降，房价大幅涨上基本不太可能，核心城市核心地区当然还是很吃香，但是三四线以及以下城市最好还是不要买房了，否则可能不太好转手卖出去了</p>\n</li>\n<li><p>如果真的是决定定居在一个城市了，女朋友还非要房子才行，你们也都想清楚了，那我只能说尊重个人选择了</p>\n</li>\n<li><p>除非你是真的很有钱，可以全款之类的，否则都不建议买房！！！</p>\n</li>\n</ul>\n"},{"title":"动态规划","description":"","abbrlink":"a80d0031","date":"2021-06-11T16:00:00.000Z","_content":"了解一下\n\n\n\n<!-- more -->\n\n\n\n## 零钱兑换\n\n\n\n### 题目\n\n\n\n![image-20210613100037414](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210613100037414.png)\n\n\n\n### 答案\n\n\n\n```java\n\n    public static int change(int amount, int[] coins) {\n\n        // \n\n        int[] dp = new int[amount+1];\n\n        dp[0] = 1;\n\n        for (int coin : coins) {\n\n            for (int i = coin; i <= amount; i++) {\n\n                dp[i] += dp[i - coin];\n\n            }\n\n        }\n\n        return dp[amount];\n\n    }\n\n```\n\n\n\n## 如何列出正确的状态转移方程\n\n\n\n1.  确定基础的例子\n\n2. 确定【状态】，也就是原问题和子问题中会变化的变量\n\n3. 确定【选择】，也就是导致【状态】产生变化的行为\n\n4. 明确dp函数/数组的定义。自定向下\n\n\n\n## 备忘录\n\n\n","source":"_posts/动态规划.md","raw":"---\ntitle: 动态规划\ndescription: ''\ntags:\n  - 无标签\nabbrlink: a80d0031\ndate: 2021-06-12 00:00:00\n---\n了解一下\n\n\n\n<!-- more -->\n\n\n\n## 零钱兑换\n\n\n\n### 题目\n\n\n\n![image-20210613100037414](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210613100037414.png)\n\n\n\n### 答案\n\n\n\n```java\n\n    public static int change(int amount, int[] coins) {\n\n        // \n\n        int[] dp = new int[amount+1];\n\n        dp[0] = 1;\n\n        for (int coin : coins) {\n\n            for (int i = coin; i <= amount; i++) {\n\n                dp[i] += dp[i - coin];\n\n            }\n\n        }\n\n        return dp[amount];\n\n    }\n\n```\n\n\n\n## 如何列出正确的状态转移方程\n\n\n\n1.  确定基础的例子\n\n2. 确定【状态】，也就是原问题和子问题中会变化的变量\n\n3. 确定【选择】，也就是导致【状态】产生变化的行为\n\n4. 明确dp函数/数组的定义。自定向下\n\n\n\n## 备忘录\n\n\n","slug":"动态规划","published":1,"updated":"2025-03-02T03:37:34.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp56004ln0uk663a6xh4","content":"<p>了解一下</p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"零钱兑换\"><a href=\"#零钱兑换\" class=\"headerlink\" title=\"零钱兑换\"></a>零钱兑换</h2><h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210613100037414.png\" alt=\"image-20210613100037414\" loading=\"lazy\"></p>\n<h3 id=\"答案\"><a href=\"#答案\" class=\"headerlink\" title=\"答案\"></a>答案</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">change</span><span class=\"params\">(<span class=\"type\">int</span> amount, <span class=\"type\">int</span>[] coins)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[amount+<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> coin : coins) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> coin; i &lt;= amount; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            dp[i] += dp[i - coin];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[amount];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"如何列出正确的状态转移方程\"><a href=\"#如何列出正确的状态转移方程\" class=\"headerlink\" title=\"如何列出正确的状态转移方程\"></a>如何列出正确的状态转移方程</h2><ol>\n<li><p>确定基础的例子</p>\n</li>\n<li><p>确定【状态】，也就是原问题和子问题中会变化的变量</p>\n</li>\n<li><p>确定【选择】，也就是导致【状态】产生变化的行为</p>\n</li>\n<li><p>明确dp函数&#x2F;数组的定义。自定向下</p>\n</li>\n</ol>\n<h2 id=\"备忘录\"><a href=\"#备忘录\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h2>","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"了解一下\n\n零钱兑换\n题目\n\n\n答案\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\npublic static int change(int amount, int[] coins) {\n\n    // \n\n    int[] dp = new int[amount+1];\n\n    dp[0] = 1;\n\n    for (int coin : coins) {\n\n        for (int i = coin; i <= amount; i++) {\n\n            dp[i] += dp[i -","more":"<h2 id=\"零钱兑换\"><a href=\"#零钱兑换\" class=\"headerlink\" title=\"零钱兑换\"></a>零钱兑换</h2><h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210613100037414.png\" alt=\"image-20210613100037414\" loading=\"lazy\"></p>\n<h3 id=\"答案\"><a href=\"#答案\" class=\"headerlink\" title=\"答案\"></a>答案</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">change</span><span class=\"params\">(<span class=\"type\">int</span> amount, <span class=\"type\">int</span>[] coins)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[amount+<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> coin : coins) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> coin; i &lt;= amount; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            dp[i] += dp[i - coin];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[amount];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"如何列出正确的状态转移方程\"><a href=\"#如何列出正确的状态转移方程\" class=\"headerlink\" title=\"如何列出正确的状态转移方程\"></a>如何列出正确的状态转移方程</h2><ol>\n<li><p>确定基础的例子</p>\n</li>\n<li><p>确定【状态】，也就是原问题和子问题中会变化的变量</p>\n</li>\n<li><p>确定【选择】，也就是导致【状态】产生变化的行为</p>\n</li>\n<li><p>明确dp函数&#x2F;数组的定义。自定向下</p>\n</li>\n</ol>\n<h2 id=\"备忘录\"><a href=\"#备忘录\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h2>"},{"title":"单例模式","description":"","abbrlink":"f1601c3e","date":"2021-06-19T16:00:00.000Z","_content":"了解一下\n\n\n\n<!-- more -->\n\n\n\n## 核心作用\n\n\n\n保证一个类只有一个实例，并且提供一个访问该实例的全局访问点\n\n\n\n常见的五种单例模式的是实现方式\n\n\n\n- 饿汉式（线程安全，调用效率高，不能延时加载）\n\n- 懒汉式（线程安全，调用效率不高，可以延时加载）\n\n- DCL懒汉式（由于JVM底层内部模型原因，偶尔会出现问题，不推荐使用）\n\n- 饿汉式改进（静态内部类，线程安全，调用效率高，可以延时加载）\n\n- 枚举单例（线程安全，调用效率高，不能延时加载）\n\n\n\n## 饿汉式\n\n\n\n```java\n\n//饿汉式单例模式\n\npublic class demo1 {\n\n    //1. 私有化构造器\n\n    private demo1(){\n\n    }\n\n//    2. 类初始化的时候，立即加载该对象；由于用了static关键字，在类装载的时候就初始化对象，\n\n//    不存在并发问题，因为一加载就出来了\n\n    private static demo1 instance=new demo1();\n\n    //3. 提供获取该对象的方法;由于不存在并发问题，所以没有加synchronized关键字，效率高；如果考虑到并发情况，是要加synchronized关键字的；\n\n    public static  demo1 getInstance(){\n\n        return instance;\n\n    }\n\n}\n\n//问题：如果在这个类中，加了一些开辟空间的方法，那么不管我用不用这个类，这个块空间都被占用了，\n\n//浪费了资源，理想情况应该是在调用getInstance方法的时候，再去开辟空间；\n\nclass demo1Test{\n\n    public static void main(String[] args) {\n\n        demo1 instance=demo1.getInstance();\n\n        demo1 instance1=demo1.getInstance();\n\n        System.out.println(instance==instance1);\n\n    }\n\n}\n\n```\n\n\n\n## 懒汉式\n\n\n\n```java\n\npublic class demo2 {\n\n    //1. 私有化构造器\n\n    private demo2(){\n\n    }\n\n    //2. 类初始化的时候，不立即加载该对象\n\n    private static demo2 instance;\n\n    //3. 提供获取该对象的方法，由于可能会出现有多个线程来进来的话，需要让他们排队，否则都有问题\n\n    // 所以有synchronized同步这个关键字，效率低！\n\n    public static synchronized demo2 getInstance(){\n\n        if(instance==null)\n\n        {\n\n            instance=new demo2();\n\n        }\n\n        return instance;\n\n    }\n\n}\n\nclass demo2Test{\n\n    public static void main(String[] args) {\n\n        demo2 instance=demo2.getInstance();\n\n        demo2 instance1=demo2.getInstance();\n\n        System.out.println(instance==instance1);\n\n    }\n\n}\n\n```\n\n\n\n## DCL懒汉式\n\n\n\n```java\n\n//DCL懒汉式\n\npublic class demo3 {\n\n    private demo3(){\n\n    }\n\n    //2. 类初始化的时候，不立即加载该对象\n\n    private volatile static demo3 instance;\n\n    //volatile是后来加的\n\n    //3. 提供获取该对象的方法，由于可能会出现有多个线程来进来的话，需要让他们排队，否则都有问题\n\n    // 所以有synchronized同步这个关键字，效率低！\n\n    //不用synchronized可以用synchronized代码块，锁demo3这个类本身；双重检测\n\n    //分析：现在不需要对整个方法进行同步了，将锁的范围变得更精细了，如果有个进程进来了，发现\n\n    //这个instance对象没有被创建，有一个锁，他首先要和其他进程竞争本类的锁，获得锁之后，再次检查，\n\n    //如果还是null，说明他是第一个竞争到这个锁的，于是他这个线程就负责创建这个对象，其他的线程\n\n    //进来之后，直接调用即可\n\n    public static  demo3 getInstance(){\n\n        if(instance==null)\n\n        {\n\n            synchronized (demo3.class){\n\n                if(instance==null)\n\n                {\n\n                    instance=new demo3();\n\n                }\n\n            }\n\n        }\n\n        return instance;\n\n    }\n\n}\n\n//由于这个操作不是原子性操作，所以他会经过下面几个步骤\n\n//1.分配内存\n\n//2. 执行构造方法\n\n//3. 执行地址\n\n//可能会出现的问题：极端情况，一个线程进来了，走到instance=new demo3()，还没有出去方法，\n\n//结果另一个线程进来了，就会直接走到 return instance;，这样instance就是一个新的对象，\n\n//破环了单例模式，可能会发生一些意想不到的问题；在这种情况下加volatile关键字；\n\n//volatile可以保证一个线程在对这个变量进行修改的时候，另一个线程，该变量的缓存就失效了，直接读内存中的值\n\nclass demo3Test{\n\n    public static void main(String[] args) {\n\n        demo3 instance=demo3.getInstance();\n\n        demo3 instance1=demo3.getInstance();\n\n        System.out.println(instance==instance1);\n\n    }\n\n}\n\n```\n\n\n\n## 静态内部类实现\n\n\n\n```java\n\n//静态内部类实现\n\npublic class demo4 {\n\n    private demo4(){\n\n    }\n\n    private static class InnerClass{\n\n        private static final demo4 instance=new demo4();\n\n    }\n\n    public static demo4 getInstance(){\n\n        return InnerClass.instance;\n\n    }\n\n}\n\n//反射机制可以破坏private\n\nclass demo4Test{\n\n    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\n\n        demo4 instance=demo4.getInstance();\n\n        //通过反射拿到instance\n\n        Constructor<demo4> demo4Constructor=demo4.class.getDeclaredConstructor(null);\n\n        demo4Constructor.setAccessible(true);\n\n        demo4 instance1=demo4Constructor.newInstance();\n\n        System.out.println(instance==instance1);\n\n        System.out.println(instance.hashCode());\n\n        System.out.println(instance1.hashCode());\n\n    }\n\n}\n\n```\n\n\n\n## 优化静态内部类\n\n\n\n```java\n\npublic class demo5 {\n\n    private demo5(){\n\n        synchronized (demo5.class){\n\n            if(instance!=null)\n\n            {\n\n                throw new RuntimeException(\"不要试图用反射破坏单例模式！\");\n\n            }\n\n        }\n\n    }\n\n    //2. 类初始化的时候，不立即加载该对象\n\n    private volatile static demo5 instance;\n\n    public static  demo5 getInstance(){\n\n        if(instance==null)\n\n        {\n\n            synchronized (demo5.class){\n\n                if(instance==null)\n\n                {\n\n                    instance=new demo5();\n\n                }\n\n            }\n\n        }\n\n        return instance;\n\n    }\n\n}\n\nclass demo5Test{\n\n    public static void main(String[] args) throws Exception {\n\n        demo5 instance=demo5.getInstance();\n\n        //通过反射拿到instance\n\n        Constructor<demo5> demo4Constructor=demo5.class.getDeclaredConstructor(null);\n\n        demo4Constructor.setAccessible(true);\n\n        demo5 instance1=demo4Constructor.newInstance();\n\n        System.out.println(instance==instance1);\n\n        System.out.println(instance.hashCode());\n\n        System.out.println(instance1.hashCode());\n\n    }\n\n}\n\n```\n\n\n\n## 枚举\n\n\n\n```java\n\n//枚举\n\n//反射不能够破坏枚举\n\npublic enum demo6 {\n\n    INTERFACE;\n\n    public demo6 getInstance(){\n\n        return INTERFACE;\n\n    }\n\n}\n\nclass demo6Test{\n\n    public static void main(String[] args) {\n\n        demo6 anInterface = demo6.INTERFACE;\n\n        demo6 anInterface2 = demo6.INTERFACE;\n\n        System.out.println(anInterface==anInterface2);\n\n    }\n\n}\n\n```\n","source":"_posts/单例模式.md","raw":"---\ntitle: 单例模式\ndescription: ''\ntags:\n  - 无标签\nabbrlink: f1601c3e\ndate: 2021-06-20 00:00:00\n---\n了解一下\n\n\n\n<!-- more -->\n\n\n\n## 核心作用\n\n\n\n保证一个类只有一个实例，并且提供一个访问该实例的全局访问点\n\n\n\n常见的五种单例模式的是实现方式\n\n\n\n- 饿汉式（线程安全，调用效率高，不能延时加载）\n\n- 懒汉式（线程安全，调用效率不高，可以延时加载）\n\n- DCL懒汉式（由于JVM底层内部模型原因，偶尔会出现问题，不推荐使用）\n\n- 饿汉式改进（静态内部类，线程安全，调用效率高，可以延时加载）\n\n- 枚举单例（线程安全，调用效率高，不能延时加载）\n\n\n\n## 饿汉式\n\n\n\n```java\n\n//饿汉式单例模式\n\npublic class demo1 {\n\n    //1. 私有化构造器\n\n    private demo1(){\n\n    }\n\n//    2. 类初始化的时候，立即加载该对象；由于用了static关键字，在类装载的时候就初始化对象，\n\n//    不存在并发问题，因为一加载就出来了\n\n    private static demo1 instance=new demo1();\n\n    //3. 提供获取该对象的方法;由于不存在并发问题，所以没有加synchronized关键字，效率高；如果考虑到并发情况，是要加synchronized关键字的；\n\n    public static  demo1 getInstance(){\n\n        return instance;\n\n    }\n\n}\n\n//问题：如果在这个类中，加了一些开辟空间的方法，那么不管我用不用这个类，这个块空间都被占用了，\n\n//浪费了资源，理想情况应该是在调用getInstance方法的时候，再去开辟空间；\n\nclass demo1Test{\n\n    public static void main(String[] args) {\n\n        demo1 instance=demo1.getInstance();\n\n        demo1 instance1=demo1.getInstance();\n\n        System.out.println(instance==instance1);\n\n    }\n\n}\n\n```\n\n\n\n## 懒汉式\n\n\n\n```java\n\npublic class demo2 {\n\n    //1. 私有化构造器\n\n    private demo2(){\n\n    }\n\n    //2. 类初始化的时候，不立即加载该对象\n\n    private static demo2 instance;\n\n    //3. 提供获取该对象的方法，由于可能会出现有多个线程来进来的话，需要让他们排队，否则都有问题\n\n    // 所以有synchronized同步这个关键字，效率低！\n\n    public static synchronized demo2 getInstance(){\n\n        if(instance==null)\n\n        {\n\n            instance=new demo2();\n\n        }\n\n        return instance;\n\n    }\n\n}\n\nclass demo2Test{\n\n    public static void main(String[] args) {\n\n        demo2 instance=demo2.getInstance();\n\n        demo2 instance1=demo2.getInstance();\n\n        System.out.println(instance==instance1);\n\n    }\n\n}\n\n```\n\n\n\n## DCL懒汉式\n\n\n\n```java\n\n//DCL懒汉式\n\npublic class demo3 {\n\n    private demo3(){\n\n    }\n\n    //2. 类初始化的时候，不立即加载该对象\n\n    private volatile static demo3 instance;\n\n    //volatile是后来加的\n\n    //3. 提供获取该对象的方法，由于可能会出现有多个线程来进来的话，需要让他们排队，否则都有问题\n\n    // 所以有synchronized同步这个关键字，效率低！\n\n    //不用synchronized可以用synchronized代码块，锁demo3这个类本身；双重检测\n\n    //分析：现在不需要对整个方法进行同步了，将锁的范围变得更精细了，如果有个进程进来了，发现\n\n    //这个instance对象没有被创建，有一个锁，他首先要和其他进程竞争本类的锁，获得锁之后，再次检查，\n\n    //如果还是null，说明他是第一个竞争到这个锁的，于是他这个线程就负责创建这个对象，其他的线程\n\n    //进来之后，直接调用即可\n\n    public static  demo3 getInstance(){\n\n        if(instance==null)\n\n        {\n\n            synchronized (demo3.class){\n\n                if(instance==null)\n\n                {\n\n                    instance=new demo3();\n\n                }\n\n            }\n\n        }\n\n        return instance;\n\n    }\n\n}\n\n//由于这个操作不是原子性操作，所以他会经过下面几个步骤\n\n//1.分配内存\n\n//2. 执行构造方法\n\n//3. 执行地址\n\n//可能会出现的问题：极端情况，一个线程进来了，走到instance=new demo3()，还没有出去方法，\n\n//结果另一个线程进来了，就会直接走到 return instance;，这样instance就是一个新的对象，\n\n//破环了单例模式，可能会发生一些意想不到的问题；在这种情况下加volatile关键字；\n\n//volatile可以保证一个线程在对这个变量进行修改的时候，另一个线程，该变量的缓存就失效了，直接读内存中的值\n\nclass demo3Test{\n\n    public static void main(String[] args) {\n\n        demo3 instance=demo3.getInstance();\n\n        demo3 instance1=demo3.getInstance();\n\n        System.out.println(instance==instance1);\n\n    }\n\n}\n\n```\n\n\n\n## 静态内部类实现\n\n\n\n```java\n\n//静态内部类实现\n\npublic class demo4 {\n\n    private demo4(){\n\n    }\n\n    private static class InnerClass{\n\n        private static final demo4 instance=new demo4();\n\n    }\n\n    public static demo4 getInstance(){\n\n        return InnerClass.instance;\n\n    }\n\n}\n\n//反射机制可以破坏private\n\nclass demo4Test{\n\n    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\n\n        demo4 instance=demo4.getInstance();\n\n        //通过反射拿到instance\n\n        Constructor<demo4> demo4Constructor=demo4.class.getDeclaredConstructor(null);\n\n        demo4Constructor.setAccessible(true);\n\n        demo4 instance1=demo4Constructor.newInstance();\n\n        System.out.println(instance==instance1);\n\n        System.out.println(instance.hashCode());\n\n        System.out.println(instance1.hashCode());\n\n    }\n\n}\n\n```\n\n\n\n## 优化静态内部类\n\n\n\n```java\n\npublic class demo5 {\n\n    private demo5(){\n\n        synchronized (demo5.class){\n\n            if(instance!=null)\n\n            {\n\n                throw new RuntimeException(\"不要试图用反射破坏单例模式！\");\n\n            }\n\n        }\n\n    }\n\n    //2. 类初始化的时候，不立即加载该对象\n\n    private volatile static demo5 instance;\n\n    public static  demo5 getInstance(){\n\n        if(instance==null)\n\n        {\n\n            synchronized (demo5.class){\n\n                if(instance==null)\n\n                {\n\n                    instance=new demo5();\n\n                }\n\n            }\n\n        }\n\n        return instance;\n\n    }\n\n}\n\nclass demo5Test{\n\n    public static void main(String[] args) throws Exception {\n\n        demo5 instance=demo5.getInstance();\n\n        //通过反射拿到instance\n\n        Constructor<demo5> demo4Constructor=demo5.class.getDeclaredConstructor(null);\n\n        demo4Constructor.setAccessible(true);\n\n        demo5 instance1=demo4Constructor.newInstance();\n\n        System.out.println(instance==instance1);\n\n        System.out.println(instance.hashCode());\n\n        System.out.println(instance1.hashCode());\n\n    }\n\n}\n\n```\n\n\n\n## 枚举\n\n\n\n```java\n\n//枚举\n\n//反射不能够破坏枚举\n\npublic enum demo6 {\n\n    INTERFACE;\n\n    public demo6 getInstance(){\n\n        return INTERFACE;\n\n    }\n\n}\n\nclass demo6Test{\n\n    public static void main(String[] args) {\n\n        demo6 anInterface = demo6.INTERFACE;\n\n        demo6 anInterface2 = demo6.INTERFACE;\n\n        System.out.println(anInterface==anInterface2);\n\n    }\n\n}\n\n```\n","slug":"单例模式","published":1,"updated":"2025-03-02T03:37:34.420Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp56004nn0ukb94rch6d","content":"<p>了解一下</p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"核心作用\"><a href=\"#核心作用\" class=\"headerlink\" title=\"核心作用\"></a>核心作用</h2><p>保证一个类只有一个实例，并且提供一个访问该实例的全局访问点</p>\n<p>常见的五种单例模式的是实现方式</p>\n<ul>\n<li><p>饿汉式（线程安全，调用效率高，不能延时加载）</p>\n</li>\n<li><p>懒汉式（线程安全，调用效率不高，可以延时加载）</p>\n</li>\n<li><p>DCL懒汉式（由于JVM底层内部模型原因，偶尔会出现问题，不推荐使用）</p>\n</li>\n<li><p>饿汉式改进（静态内部类，线程安全，调用效率高，可以延时加载）</p>\n</li>\n<li><p>枚举单例（线程安全，调用效率高，不能延时加载）</p>\n</li>\n</ul>\n<h2 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//饿汉式单例模式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo1</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//1. 私有化构造器</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">demo1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    2. 类初始化的时候，立即加载该对象；由于用了static关键字，在类装载的时候就初始化对象，</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    不存在并发问题，因为一加载就出来了</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> demo1 instance=<span class=\"keyword\">new</span> <span class=\"title class_\">demo1</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3. 提供获取该对象的方法;由于不存在并发问题，所以没有加synchronized关键字，效率高；如果考虑到并发情况，是要加synchronized关键字的；</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span>  demo1 <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//问题：如果在这个类中，加了一些开辟空间的方法，那么不管我用不用这个类，这个块空间都被占用了，</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//浪费了资源，理想情况应该是在调用getInstance方法的时候，再去开辟空间；</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">demo1Test</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        demo1 instance=demo1.getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        demo1 instance1=demo1.getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(instance==instance1);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"懒汉式\"><a href=\"#懒汉式\" class=\"headerlink\" title=\"懒汉式\"></a>懒汉式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//1. 私有化构造器</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">demo2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2. 类初始化的时候，不立即加载该对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> demo2 instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3. 提供获取该对象的方法，由于可能会出现有多个线程来进来的话，需要让他们排队，否则都有问题</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 所以有synchronized同步这个关键字，效率低！</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> demo2 <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance==<span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            instance=<span class=\"keyword\">new</span> <span class=\"title class_\">demo2</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">demo2Test</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        demo2 instance=demo2.getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        demo2 instance1=demo2.getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(instance==instance1);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"DCL懒汉式\"><a href=\"#DCL懒汉式\" class=\"headerlink\" title=\"DCL懒汉式\"></a>DCL懒汉式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//DCL懒汉式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo3</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">demo3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2. 类初始化的时候，不立即加载该对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> demo3 instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//volatile是后来加的</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3. 提供获取该对象的方法，由于可能会出现有多个线程来进来的话，需要让他们排队，否则都有问题</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 所以有synchronized同步这个关键字，效率低！</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//不用synchronized可以用synchronized代码块，锁demo3这个类本身；双重检测</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//分析：现在不需要对整个方法进行同步了，将锁的范围变得更精细了，如果有个进程进来了，发现</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这个instance对象没有被创建，有一个锁，他首先要和其他进程竞争本类的锁，获得锁之后，再次检查，</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果还是null，说明他是第一个竞争到这个锁的，于是他这个线程就负责创建这个对象，其他的线程</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//进来之后，直接调用即可</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span>  demo3 <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance==<span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (demo3.class)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(instance==<span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    instance=<span class=\"keyword\">new</span> <span class=\"title class_\">demo3</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//由于这个操作不是原子性操作，所以他会经过下面几个步骤</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1.分配内存</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2. 执行构造方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3. 执行地址</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可能会出现的问题：极端情况，一个线程进来了，走到instance=new demo3()，还没有出去方法，</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//结果另一个线程进来了，就会直接走到 return instance;，这样instance就是一个新的对象，</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//破环了单例模式，可能会发生一些意想不到的问题；在这种情况下加volatile关键字；</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//volatile可以保证一个线程在对这个变量进行修改的时候，另一个线程，该变量的缓存就失效了，直接读内存中的值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">demo3Test</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        demo3 instance=demo3.getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        demo3 instance1=demo3.getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(instance==instance1);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"静态内部类实现\"><a href=\"#静态内部类实现\" class=\"headerlink\" title=\"静态内部类实现\"></a>静态内部类实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//静态内部类实现</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo4</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">demo4</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InnerClass</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> demo4 instance=<span class=\"keyword\">new</span> <span class=\"title class_\">demo4</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> demo4 <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> InnerClass.instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//反射机制可以破坏private</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">demo4Test</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        demo4 instance=demo4.getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通过反射拿到instance</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Constructor&lt;demo4&gt; demo4Constructor=demo4.class.getDeclaredConstructor(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        demo4Constructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        demo4 instance1=demo4Constructor.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(instance==instance1);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(instance.hashCode());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(instance1.hashCode());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"优化静态内部类\"><a href=\"#优化静态内部类\" class=\"headerlink\" title=\"优化静态内部类\"></a>优化静态内部类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo5</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">demo5</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (demo5.class)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(instance!=<span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;不要试图用反射破坏单例模式！&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2. 类初始化的时候，不立即加载该对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> demo5 instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span>  demo5 <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance==<span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (demo5.class)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(instance==<span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    instance=<span class=\"keyword\">new</span> <span class=\"title class_\">demo5</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">demo5Test</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        demo5 instance=demo5.getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通过反射拿到instance</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Constructor&lt;demo5&gt; demo4Constructor=demo5.class.getDeclaredConstructor(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        demo4Constructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        demo5 instance1=demo4Constructor.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(instance==instance1);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(instance.hashCode());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(instance1.hashCode());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//枚举</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//反射不能够破坏枚举</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">demo6</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    INTERFACE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> demo6 <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> INTERFACE;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">demo6Test</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">demo6</span> <span class=\"variable\">anInterface</span> <span class=\"operator\">=</span> demo6.INTERFACE;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">demo6</span> <span class=\"variable\">anInterface2</span> <span class=\"operator\">=</span> demo6.INTERFACE;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(anInterface==anInterface2);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"了解一下\n\n核心作用\n保证一个类只有一个实例，并且提供一个访问该实例的全局访问点\n\n常见的五种单例模式的是实现方式\n\n * 饿汉式（线程安全，调用效率高，不能延时加载）\n   \n   \n * 懒汉式（线程安全，调用效率不高，可以延时加载）\n   \n   \n * DCL懒汉式（由于JVM底层内部模型原因，偶尔会出现问题，不推荐使用）\n   \n   \n * 饿汉式改进（静态内部类，线程安全，调用效率高，可以延时加载）\n   \n   \n * 枚举单例（线程安全，调用效率高，不能延时加载）\n   \n   \n\n饿汉式\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n1","more":"<h2 id=\"核心作用\"><a href=\"#核心作用\" class=\"headerlink\" title=\"核心作用\"></a>核心作用</h2><p>保证一个类只有一个实例，并且提供一个访问该实例的全局访问点</p>\n<p>常见的五种单例模式的是实现方式</p>\n<ul>\n<li><p>饿汉式（线程安全，调用效率高，不能延时加载）</p>\n</li>\n<li><p>懒汉式（线程安全，调用效率不高，可以延时加载）</p>\n</li>\n<li><p>DCL懒汉式（由于JVM底层内部模型原因，偶尔会出现问题，不推荐使用）</p>\n</li>\n<li><p>饿汉式改进（静态内部类，线程安全，调用效率高，可以延时加载）</p>\n</li>\n<li><p>枚举单例（线程安全，调用效率高，不能延时加载）</p>\n</li>\n</ul>\n<h2 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//饿汉式单例模式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo1</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//1. 私有化构造器</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">demo1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    2. 类初始化的时候，立即加载该对象；由于用了static关键字，在类装载的时候就初始化对象，</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    不存在并发问题，因为一加载就出来了</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> demo1 instance=<span class=\"keyword\">new</span> <span class=\"title class_\">demo1</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3. 提供获取该对象的方法;由于不存在并发问题，所以没有加synchronized关键字，效率高；如果考虑到并发情况，是要加synchronized关键字的；</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span>  demo1 <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//问题：如果在这个类中，加了一些开辟空间的方法，那么不管我用不用这个类，这个块空间都被占用了，</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//浪费了资源，理想情况应该是在调用getInstance方法的时候，再去开辟空间；</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">demo1Test</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        demo1 instance=demo1.getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        demo1 instance1=demo1.getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(instance==instance1);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"懒汉式\"><a href=\"#懒汉式\" class=\"headerlink\" title=\"懒汉式\"></a>懒汉式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//1. 私有化构造器</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">demo2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2. 类初始化的时候，不立即加载该对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> demo2 instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3. 提供获取该对象的方法，由于可能会出现有多个线程来进来的话，需要让他们排队，否则都有问题</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 所以有synchronized同步这个关键字，效率低！</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> demo2 <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance==<span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            instance=<span class=\"keyword\">new</span> <span class=\"title class_\">demo2</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">demo2Test</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        demo2 instance=demo2.getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        demo2 instance1=demo2.getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(instance==instance1);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"DCL懒汉式\"><a href=\"#DCL懒汉式\" class=\"headerlink\" title=\"DCL懒汉式\"></a>DCL懒汉式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//DCL懒汉式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo3</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">demo3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2. 类初始化的时候，不立即加载该对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> demo3 instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//volatile是后来加的</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3. 提供获取该对象的方法，由于可能会出现有多个线程来进来的话，需要让他们排队，否则都有问题</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 所以有synchronized同步这个关键字，效率低！</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//不用synchronized可以用synchronized代码块，锁demo3这个类本身；双重检测</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//分析：现在不需要对整个方法进行同步了，将锁的范围变得更精细了，如果有个进程进来了，发现</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这个instance对象没有被创建，有一个锁，他首先要和其他进程竞争本类的锁，获得锁之后，再次检查，</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果还是null，说明他是第一个竞争到这个锁的，于是他这个线程就负责创建这个对象，其他的线程</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//进来之后，直接调用即可</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span>  demo3 <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance==<span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (demo3.class)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(instance==<span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    instance=<span class=\"keyword\">new</span> <span class=\"title class_\">demo3</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//由于这个操作不是原子性操作，所以他会经过下面几个步骤</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1.分配内存</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2. 执行构造方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3. 执行地址</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可能会出现的问题：极端情况，一个线程进来了，走到instance=new demo3()，还没有出去方法，</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//结果另一个线程进来了，就会直接走到 return instance;，这样instance就是一个新的对象，</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//破环了单例模式，可能会发生一些意想不到的问题；在这种情况下加volatile关键字；</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//volatile可以保证一个线程在对这个变量进行修改的时候，另一个线程，该变量的缓存就失效了，直接读内存中的值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">demo3Test</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        demo3 instance=demo3.getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        demo3 instance1=demo3.getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(instance==instance1);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"静态内部类实现\"><a href=\"#静态内部类实现\" class=\"headerlink\" title=\"静态内部类实现\"></a>静态内部类实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//静态内部类实现</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo4</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">demo4</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InnerClass</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> demo4 instance=<span class=\"keyword\">new</span> <span class=\"title class_\">demo4</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> demo4 <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> InnerClass.instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//反射机制可以破坏private</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">demo4Test</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        demo4 instance=demo4.getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通过反射拿到instance</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Constructor&lt;demo4&gt; demo4Constructor=demo4.class.getDeclaredConstructor(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        demo4Constructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        demo4 instance1=demo4Constructor.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(instance==instance1);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(instance.hashCode());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(instance1.hashCode());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"优化静态内部类\"><a href=\"#优化静态内部类\" class=\"headerlink\" title=\"优化静态内部类\"></a>优化静态内部类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo5</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">demo5</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (demo5.class)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(instance!=<span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;不要试图用反射破坏单例模式！&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2. 类初始化的时候，不立即加载该对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> demo5 instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span>  demo5 <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance==<span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (demo5.class)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(instance==<span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    instance=<span class=\"keyword\">new</span> <span class=\"title class_\">demo5</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">demo5Test</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        demo5 instance=demo5.getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通过反射拿到instance</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Constructor&lt;demo5&gt; demo4Constructor=demo5.class.getDeclaredConstructor(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        demo4Constructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        demo5 instance1=demo4Constructor.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(instance==instance1);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(instance.hashCode());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(instance1.hashCode());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//枚举</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//反射不能够破坏枚举</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">demo6</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    INTERFACE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> demo6 <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> INTERFACE;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">demo6Test</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">demo6</span> <span class=\"variable\">anInterface</span> <span class=\"operator\">=</span> demo6.INTERFACE;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">demo6</span> <span class=\"variable\">anInterface2</span> <span class=\"operator\">=</span> demo6.INTERFACE;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(anInterface==anInterface2);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"域名供应商查找","description":"","abbrlink":"b8ea9272","date":"2023-08-24T16:00:00.000Z","_content":"\n\n# 域名供应商查找\n\n\n\n## 前言\n\n\n\n[之前我总是在找我的一个域名sunheyi.top](http://之前我总是在找我的一个域名sunheyi.top) 是在哪里购买的，忘记那个购买域名的地址了，我搜了半天总是找不到如何去查找这个购买域名地址，今天早上我又查了一个小时吧，终于找到了，在此记录一下\n\n\n\n## 正文\n\n\n\n直接访问这个[网址](https://www.dynadot.com/domain/whois?)，输入自己的域名即可，例如下图\n\n\n\n![img](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-ngit.png)\n\n\n\n红色部分就是那个购买域名的地址了，登录进去就可以看到自己购买的域名了\n\n\n\n![img](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-yiyn.png)\n","source":"_posts/域名供应商查找.md","raw":"---\ntitle: 域名供应商查找\ndescription: ''\ntags:\n  - 无标签\nabbrlink: b8ea9272\ndate: 2023-08-25 00:00:00\n---\n\n\n# 域名供应商查找\n\n\n\n## 前言\n\n\n\n[之前我总是在找我的一个域名sunheyi.top](http://之前我总是在找我的一个域名sunheyi.top) 是在哪里购买的，忘记那个购买域名的地址了，我搜了半天总是找不到如何去查找这个购买域名地址，今天早上我又查了一个小时吧，终于找到了，在此记录一下\n\n\n\n## 正文\n\n\n\n直接访问这个[网址](https://www.dynadot.com/domain/whois?)，输入自己的域名即可，例如下图\n\n\n\n![img](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-ngit.png)\n\n\n\n红色部分就是那个购买域名的地址了，登录进去就可以看到自己购买的域名了\n\n\n\n![img](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-yiyn.png)\n","slug":"域名供应商查找","published":1,"updated":"2025-03-02T03:37:34.420Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp56004pn0ukhpz3hwti","content":"<h1 id=\"域名供应商查找\"><a href=\"#域名供应商查找\" class=\"headerlink\" title=\"域名供应商查找\"></a>域名供应商查找</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><span class=\"exturl\" data-url=\"aHR0cDovL+S5i+WJjeaIkeaAu+aYr+WcqOaJvuaIkeeahOS4gOS4quWfn+WQjXN1bmhleWkudG9wLw==\">之前我总是在找我的一个域名sunheyi.top<i class=\"fa fa-external-link-alt\"></i></span> 是在哪里购买的，忘记那个购买域名的地址了，我搜了半天总是找不到如何去查找这个购买域名地址，今天早上我又查了一个小时吧，终于找到了，在此记录一下</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>直接访问这个<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZHluYWRvdC5jb20vZG9tYWluL3dob2lz\">网址<i class=\"fa fa-external-link-alt\"></i></span>，输入自己的域名即可，例如下图</p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-ngit.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>红色部分就是那个购买域名的地址了，登录进去就可以看到自己购买的域名了</p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-yiyn.png\" alt=\"img\" loading=\"lazy\"></p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"域名供应商查找\n前言\n之前我总是在找我的一个域名sunheyi.top 是在哪里购买的，忘记那个购买域名的地址了，我搜了半天总是找不到如何去查找这个购买域名地址，今天早上我又查了一个小时吧，终于找到了，在此记录一下\n\n正文\n直接访问这个网址，输入自己的域名即可，例如下图\n\n\n\n红色部分就是那个购买域名的地址了，登录进去就可以看到自己购买的域名了","more":"<h1 id=\"域名供应商查找\"><a href=\"#域名供应商查找\" class=\"headerlink\" title=\"域名供应商查找\"></a>域名供应商查找</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><span class=\"exturl\" data-url=\"aHR0cDovL+S5i+WJjeaIkeaAu+aYr+WcqOaJvuaIkeeahOS4gOS4quWfn+WQjXN1bmhleWkudG9wLw==\">之前我总是在找我的一个域名sunheyi.top<i class=\"fa fa-external-link-alt\"></i></span> 是在哪里购买的，忘记那个购买域名的地址了，我搜了半天总是找不到如何去查找这个购买域名地址，今天早上我又查了一个小时吧，终于找到了，在此记录一下</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>直接访问这个<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZHluYWRvdC5jb20vZG9tYWluL3dob2lz\">网址<i class=\"fa fa-external-link-alt\"></i></span>，输入自己的域名即可，例如下图</p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-ngit.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>红色部分就是那个购买域名的地址了，登录进去就可以看到自己购买的域名了</p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-yiyn.png\" alt=\"img\" loading=\"lazy\"></p>\n"},{"title":"基金投资","description":"简单记录下我对于基金投资的一些思考","abbrlink":"9b4fb7e8","date":"2025-02-13T16:00:00.000Z","_content":"## 纳斯达克认知\n\n   我毕业于2020年，自从工作开始都陆陆续续开始玩基金了，今年是玩投资的第五年，中间陆陆续续在支付宝上投过不少基金，都是有赢有亏吧，然后在去年一年的时候，就开始定投纳斯达克100了，定投一年一万，还真是和我当初估计的那样，一年能大概十几个点左右\n\n\n\n   <img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/f7a7bf02bb2ade7db52f5cf31222423.jpg\" alt=\"alt text\" style=\"zoom: 50%;\" />\n\n\n\n\n\n我为啥对于纳斯达克觉得可以，是我觉得纳斯达克100的原理就是选取美纳斯达克证券交易所上市的 100 家最大的非金融类公司，成分股通常是具有高成长潜力和创新能力的企业，许多都是全球知名的科技巨头，像苹果、微软、亚马逊、谷歌母公司 Alphabet 等。这些公司凭借其在技术创新、市场份额、盈利能力等方面的优势，在全球经济和金融市场中具有重要影响力。而且在过去几十年中基本上都是每年十几个点左右，因此我相信未来应该还是的，虽然确实经济相对来说不会像过去几十年的迅猛发展了，但是这些公司的技术创新和市场份额还是有一定的优势的，所以我觉得应该还是的。\n\n## 幻想\n\n  我的老家是一个小县城，平均工资3k到4k，如果我有个五十万放在纳斯达克中，按照一年百分之10的盈利来算，一年5w，而平均一个月4k的工资的，一年能有多少那？四万八千元，那是不是我有了五十万放在基金里面就相当于老家一年一个人工资了，我知道对于大城市的人来说一年5w没有什么，但是如果对于我家的小县城来说，已经可以满足一个人一年的工资了，恐怖如斯\n\n## 未来\n\n目前的计划是如果有钱的话还是要定投纳斯达克的，投资一辈子看看，我这个决策是否正确，这个东西其实我和家人朋友都说了，但是没有人相信，哎，我能怎么办那，只能说人和人最大的差距就是认知，他们也确实挣不了这个钱。\n","source":"_posts/基金投资.md","raw":"---\ntitle: 基金投资\ndescription: 简单记录下我对于基金投资的一些思考\ntags:\n  - 投资\nabbrlink: 9b4fb7e8\ndate: 2025-02-14 00:00:00\n---\n## 纳斯达克认知\n\n   我毕业于2020年，自从工作开始都陆陆续续开始玩基金了，今年是玩投资的第五年，中间陆陆续续在支付宝上投过不少基金，都是有赢有亏吧，然后在去年一年的时候，就开始定投纳斯达克100了，定投一年一万，还真是和我当初估计的那样，一年能大概十几个点左右\n\n\n\n   <img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/f7a7bf02bb2ade7db52f5cf31222423.jpg\" alt=\"alt text\" style=\"zoom: 50%;\" />\n\n\n\n\n\n我为啥对于纳斯达克觉得可以，是我觉得纳斯达克100的原理就是选取美纳斯达克证券交易所上市的 100 家最大的非金融类公司，成分股通常是具有高成长潜力和创新能力的企业，许多都是全球知名的科技巨头，像苹果、微软、亚马逊、谷歌母公司 Alphabet 等。这些公司凭借其在技术创新、市场份额、盈利能力等方面的优势，在全球经济和金融市场中具有重要影响力。而且在过去几十年中基本上都是每年十几个点左右，因此我相信未来应该还是的，虽然确实经济相对来说不会像过去几十年的迅猛发展了，但是这些公司的技术创新和市场份额还是有一定的优势的，所以我觉得应该还是的。\n\n## 幻想\n\n  我的老家是一个小县城，平均工资3k到4k，如果我有个五十万放在纳斯达克中，按照一年百分之10的盈利来算，一年5w，而平均一个月4k的工资的，一年能有多少那？四万八千元，那是不是我有了五十万放在基金里面就相当于老家一年一个人工资了，我知道对于大城市的人来说一年5w没有什么，但是如果对于我家的小县城来说，已经可以满足一个人一年的工资了，恐怖如斯\n\n## 未来\n\n目前的计划是如果有钱的话还是要定投纳斯达克的，投资一辈子看看，我这个决策是否正确，这个东西其实我和家人朋友都说了，但是没有人相信，哎，我能怎么办那，只能说人和人最大的差距就是认知，他们也确实挣不了这个钱。\n","slug":"基金投资","published":1,"updated":"2025-03-02T03:37:34.422Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp57004rn0uk34z919k5","content":"<h2 id=\"纳斯达克认知\"><a href=\"#纳斯达克认知\" class=\"headerlink\" title=\"纳斯达克认知\"></a>纳斯达克认知</h2><p>   我毕业于2020年，自从工作开始都陆陆续续开始玩基金了，今年是玩投资的第五年，中间陆陆续续在支付宝上投过不少基金，都是有赢有亏吧，然后在去年一年的时候，就开始定投纳斯达克100了，定投一年一万，还真是和我当初估计的那样，一年能大概十几个点左右</p>\n   <img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/f7a7bf02bb2ade7db52f5cf31222423.jpg\" alt=\"alt text\" style=\"zoom: 50%;\" />\n\n\n\n\n\n<p>我为啥对于纳斯达克觉得可以，是我觉得纳斯达克100的原理就是选取美纳斯达克证券交易所上市的 100 家最大的非金融类公司，成分股通常是具有高成长潜力和创新能力的企业，许多都是全球知名的科技巨头，像苹果、微软、亚马逊、谷歌母公司 Alphabet 等。这些公司凭借其在技术创新、市场份额、盈利能力等方面的优势，在全球经济和金融市场中具有重要影响力。而且在过去几十年中基本上都是每年十几个点左右，因此我相信未来应该还是的，虽然确实经济相对来说不会像过去几十年的迅猛发展了，但是这些公司的技术创新和市场份额还是有一定的优势的，所以我觉得应该还是的。</p>\n<h2 id=\"幻想\"><a href=\"#幻想\" class=\"headerlink\" title=\"幻想\"></a>幻想</h2><p>  我的老家是一个小县城，平均工资3k到4k，如果我有个五十万放在纳斯达克中，按照一年百分之10的盈利来算，一年5w，而平均一个月4k的工资的，一年能有多少那？四万八千元，那是不是我有了五十万放在基金里面就相当于老家一年一个人工资了，我知道对于大城市的人来说一年5w没有什么，但是如果对于我家的小县城来说，已经可以满足一个人一年的工资了，恐怖如斯</p>\n<h2 id=\"未来\"><a href=\"#未来\" class=\"headerlink\" title=\"未来\"></a>未来</h2><p>目前的计划是如果有钱的话还是要定投纳斯达克的，投资一辈子看看，我这个决策是否正确，这个东西其实我和家人朋友都说了，但是没有人相信，哎，我能怎么办那，只能说人和人最大的差距就是认知，他们也确实挣不了这个钱。</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"纳斯达克认知\n 我毕业于2020年，自从工作开始都陆陆续续开始玩基金了，今年是玩投资的第五年，中间陆陆续续在支付宝上投过不少基金，都是有赢有亏吧，然后在去年一年的时候，就开始定投纳斯达克100了，定投一年一万，还真是和我当初估计的那样，一年能大概十几个点左右\n\n我为啥对于纳斯达克觉得可以，是我觉得纳斯达克100的原理就是选取美纳斯达克证券交易所上市的 100 家最大的非金融类公司，成分股通常是具有高成长潜力和创新能力的企业，许多都是全球知名的科技巨头，像苹果、微软、亚马逊、谷歌母公司 Alphabet 等。这些公司凭借其在技术创新、市场份额、盈利能力等方面的优势，在全球经济和金融市场中具有重要","more":"<h2 id=\"纳斯达克认知\"><a href=\"#纳斯达克认知\" class=\"headerlink\" title=\"纳斯达克认知\"></a>纳斯达克认知</h2><p>   我毕业于2020年，自从工作开始都陆陆续续开始玩基金了，今年是玩投资的第五年，中间陆陆续续在支付宝上投过不少基金，都是有赢有亏吧，然后在去年一年的时候，就开始定投纳斯达克100了，定投一年一万，还真是和我当初估计的那样，一年能大概十几个点左右</p>\n   <img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/f7a7bf02bb2ade7db52f5cf31222423.jpg\" alt=\"alt text\" style=\"zoom: 50%;\" />\n\n\n\n\n\n<p>我为啥对于纳斯达克觉得可以，是我觉得纳斯达克100的原理就是选取美纳斯达克证券交易所上市的 100 家最大的非金融类公司，成分股通常是具有高成长潜力和创新能力的企业，许多都是全球知名的科技巨头，像苹果、微软、亚马逊、谷歌母公司 Alphabet 等。这些公司凭借其在技术创新、市场份额、盈利能力等方面的优势，在全球经济和金融市场中具有重要影响力。而且在过去几十年中基本上都是每年十几个点左右，因此我相信未来应该还是的，虽然确实经济相对来说不会像过去几十年的迅猛发展了，但是这些公司的技术创新和市场份额还是有一定的优势的，所以我觉得应该还是的。</p>\n<h2 id=\"幻想\"><a href=\"#幻想\" class=\"headerlink\" title=\"幻想\"></a>幻想</h2><p>  我的老家是一个小县城，平均工资3k到4k，如果我有个五十万放在纳斯达克中，按照一年百分之10的盈利来算，一年5w，而平均一个月4k的工资的，一年能有多少那？四万八千元，那是不是我有了五十万放在基金里面就相当于老家一年一个人工资了，我知道对于大城市的人来说一年5w没有什么，但是如果对于我家的小县城来说，已经可以满足一个人一年的工资了，恐怖如斯</p>\n<h2 id=\"未来\"><a href=\"#未来\" class=\"headerlink\" title=\"未来\"></a>未来</h2><p>目前的计划是如果有钱的话还是要定投纳斯达克的，投资一辈子看看，我这个决策是否正确，这个东西其实我和家人朋友都说了，但是没有人相信，哎，我能怎么办那，只能说人和人最大的差距就是认知，他们也确实挣不了这个钱。</p>\n"},{"title":"实现一个简单的计算器","description":"","abbrlink":"f52cda1d","date":"2021-05-22T16:00:00.000Z","_content":"\n\n文章摘要\n\n\n\n<!-- more -->\n\n\n\n## 两个栈\n\n\n\n```java\n\npublic int calculate(String s) {\n\n    Deque<Integer> stack = new LinkedList<Integer>();\n\n    char preSign = '+';\n\n    int num = 0;\n\n    int n = s.length();\n\n    for (int i = 0; i < n; ++i) {\n\n        //判断这个字符是否是数字\n\n        if (Character.isDigit(s.charAt(i))) {\n\n            //字符和字符的加减法都是用的对应的ASCII来进行的，由于字符对应的ASCII码也是按照数字的大小来的，所以直接就相当于字符直接相加减\n\n            num = num * 10 + s.charAt(i) - '0';\n\n        }\n\n        if (!Character.isDigit(s.charAt(i)) && s.charAt(i) != ' ' || i == n - 1) {\n\n            switch (preSign) {\n\n                case '+':\n\n                    stack.push(num);\n\n                    break;\n\n                case '-':\n\n                    stack.push(-num);\n\n                    break;\n\n                case '*':\n\n                    stack.push(stack.pop() * num);\n\n                    break;\n\n                default:\n\n                    stack.push(stack.pop() / num);\n\n            }\n\n            preSign = s.charAt(i);\n\n            num = 0;\n\n        }\n\n    }\n\n    int ans = 0;\n\n    while (!stack.isEmpty()) {\n\n        ans += stack.pop();\n\n    }\n\n    return ans;\n\n}\n\n```\n\n\n\n## 一个栈\n\n\n\n```java\n\npublic static  double calculate(String s)\n\n{\n\n    int len=s.length();\n\n    char[] str=s.toCharArray();\n\n    Stack<Integer> st_num=new Stack<>();\n\n    char op='#';         //记录乘除符号\n\n    int ans=0,sign=1;    //记录加减符号\n\n    for(int i=0;i<len;i++){\n\n        if(str[i]==' ') continue;\n\n        if(str[i]>='0'&&str[i]<='9'){\n\n            int num=str[i]-'0';\n\n            while(i<len-1&&str[i+1]>='0'&&str[i+1]<='9')  //找完这个数\n\n                num=num*10+(str[++i]-'0');\n\n            if(op!='#'){                                //如果之前有乘除符号\n\n                if(op=='*')num*=st_num.pop();           //则将这个数运算之后，再重新进栈\n\n                else num=st_num.pop()/num;\n\n                op='#';                                //重置乘除符号\n\n            }\n\n            st_num.push(num);\n\n        }\n\n        else if(str[i]=='*'||str[i]=='/') op=str[i];  //更新乘除符号\n\n        else{                                         //遇到加减符号则可以直接更新ans了\n\n            ans+=st_num.pop()*sign;\n\n            sign=str[i]=='+'?1:-1;   //更新加减符号\n\n        }\n\n    }\n\n    return ans+st_num.pop()*sign;   //sign更新后，还有一次未计算\n\n}\n\n```","source":"_posts/实现一个简单的计算器.md","raw":"---\ntitle: 实现一个简单的计算器\ndescription: ''\ntags:\n  - 无标签\nabbrlink: f52cda1d\ndate: 2021-05-23 00:00:00\n---\n\n\n文章摘要\n\n\n\n<!-- more -->\n\n\n\n## 两个栈\n\n\n\n```java\n\npublic int calculate(String s) {\n\n    Deque<Integer> stack = new LinkedList<Integer>();\n\n    char preSign = '+';\n\n    int num = 0;\n\n    int n = s.length();\n\n    for (int i = 0; i < n; ++i) {\n\n        //判断这个字符是否是数字\n\n        if (Character.isDigit(s.charAt(i))) {\n\n            //字符和字符的加减法都是用的对应的ASCII来进行的，由于字符对应的ASCII码也是按照数字的大小来的，所以直接就相当于字符直接相加减\n\n            num = num * 10 + s.charAt(i) - '0';\n\n        }\n\n        if (!Character.isDigit(s.charAt(i)) && s.charAt(i) != ' ' || i == n - 1) {\n\n            switch (preSign) {\n\n                case '+':\n\n                    stack.push(num);\n\n                    break;\n\n                case '-':\n\n                    stack.push(-num);\n\n                    break;\n\n                case '*':\n\n                    stack.push(stack.pop() * num);\n\n                    break;\n\n                default:\n\n                    stack.push(stack.pop() / num);\n\n            }\n\n            preSign = s.charAt(i);\n\n            num = 0;\n\n        }\n\n    }\n\n    int ans = 0;\n\n    while (!stack.isEmpty()) {\n\n        ans += stack.pop();\n\n    }\n\n    return ans;\n\n}\n\n```\n\n\n\n## 一个栈\n\n\n\n```java\n\npublic static  double calculate(String s)\n\n{\n\n    int len=s.length();\n\n    char[] str=s.toCharArray();\n\n    Stack<Integer> st_num=new Stack<>();\n\n    char op='#';         //记录乘除符号\n\n    int ans=0,sign=1;    //记录加减符号\n\n    for(int i=0;i<len;i++){\n\n        if(str[i]==' ') continue;\n\n        if(str[i]>='0'&&str[i]<='9'){\n\n            int num=str[i]-'0';\n\n            while(i<len-1&&str[i+1]>='0'&&str[i+1]<='9')  //找完这个数\n\n                num=num*10+(str[++i]-'0');\n\n            if(op!='#'){                                //如果之前有乘除符号\n\n                if(op=='*')num*=st_num.pop();           //则将这个数运算之后，再重新进栈\n\n                else num=st_num.pop()/num;\n\n                op='#';                                //重置乘除符号\n\n            }\n\n            st_num.push(num);\n\n        }\n\n        else if(str[i]=='*'||str[i]=='/') op=str[i];  //更新乘除符号\n\n        else{                                         //遇到加减符号则可以直接更新ans了\n\n            ans+=st_num.pop()*sign;\n\n            sign=str[i]=='+'?1:-1;   //更新加减符号\n\n        }\n\n    }\n\n    return ans+st_num.pop()*sign;   //sign更新后，还有一次未计算\n\n}\n\n```","slug":"实现一个简单的计算器","published":1,"updated":"2025-03-02T03:37:34.423Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp57004tn0uke68n5dmv","content":"<p>文章摘要</p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"两个栈\"><a href=\"#两个栈\" class=\"headerlink\" title=\"两个栈\"></a>两个栈</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">calculate</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Deque&lt;Integer&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> <span class=\"variable\">preSign</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;+&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> s.length();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断这个字符是否是数字</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Character.isDigit(s.charAt(i))) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//字符和字符的加减法都是用的对应的ASCII来进行的，由于字符对应的ASCII码也是按照数字的大小来的，所以直接就相当于字符直接相加减</span></span><br><span class=\"line\"></span><br><span class=\"line\">            num = num * <span class=\"number\">10</span> + s.charAt(i) - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Character.isDigit(s.charAt(i)) &amp;&amp; s.charAt(i) != <span class=\"string\">&#x27; &#x27;</span> || i == n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (preSign) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;+&#x27;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">                    stack.push(num);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;-&#x27;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">                    stack.push(-num);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;*&#x27;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">                    stack.push(stack.pop() * num);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">                    stack.push(stack.pop() / num);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            preSign = s.charAt(i);</span><br><span class=\"line\"></span><br><span class=\"line\">            num = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!stack.isEmpty()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ans += stack.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"一个栈\"><a href=\"#一个栈\" class=\"headerlink\" title=\"一个栈\"></a>一个栈</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span>  <span class=\"type\">double</span> <span class=\"title function_\">calculate</span><span class=\"params\">(String s)</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> len=s.length();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span>[] str=s.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">    Stack&lt;Integer&gt; st_num=<span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> op=<span class=\"string\">&#x27;#&#x27;</span>;         <span class=\"comment\">//记录乘除符号</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> ans=<span class=\"number\">0</span>,sign=<span class=\"number\">1</span>;    <span class=\"comment\">//记录加减符号</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str[i]==<span class=\"string\">&#x27; &#x27;</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str[i]&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;str[i]&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> num=str[i]-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(i&lt;len-<span class=\"number\">1</span>&amp;&amp;str[i+<span class=\"number\">1</span>]&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;str[i+<span class=\"number\">1</span>]&lt;=<span class=\"string\">&#x27;9&#x27;</span>)  <span class=\"comment\">//找完这个数</span></span><br><span class=\"line\"></span><br><span class=\"line\">                num=num*<span class=\"number\">10</span>+(str[++i]-<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(op!=<span class=\"string\">&#x27;#&#x27;</span>)&#123;                                <span class=\"comment\">//如果之前有乘除符号</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(op==<span class=\"string\">&#x27;*&#x27;</span>)num*=st_num.pop();           <span class=\"comment\">//则将这个数运算之后，再重新进栈</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">else</span> num=st_num.pop()/num;</span><br><span class=\"line\"></span><br><span class=\"line\">                op=<span class=\"string\">&#x27;#&#x27;</span>;                                <span class=\"comment\">//重置乘除符号</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            st_num.push(num);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(str[i]==<span class=\"string\">&#x27;*&#x27;</span>||str[i]==<span class=\"string\">&#x27;/&#x27;</span>) op=str[i];  <span class=\"comment\">//更新乘除符号</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;                                         <span class=\"comment\">//遇到加减符号则可以直接更新ans了</span></span><br><span class=\"line\"></span><br><span class=\"line\">            ans+=st_num.pop()*sign;</span><br><span class=\"line\"></span><br><span class=\"line\">            sign=str[i]==<span class=\"string\">&#x27;+&#x27;</span>?<span class=\"number\">1</span>:-<span class=\"number\">1</span>;   <span class=\"comment\">//更新加减符号</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans+st_num.pop()*sign;   <span class=\"comment\">//sign更新后，还有一次未计算</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"文章摘要\n\n两个栈\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n\n\n\npublic int calculate(String s) {\n\n    Deque<Integer> stack = new LinkedList<Integer","more":"<h2 id=\"两个栈\"><a href=\"#两个栈\" class=\"headerlink\" title=\"两个栈\"></a>两个栈</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">calculate</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Deque&lt;Integer&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> <span class=\"variable\">preSign</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;+&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> s.length();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断这个字符是否是数字</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Character.isDigit(s.charAt(i))) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//字符和字符的加减法都是用的对应的ASCII来进行的，由于字符对应的ASCII码也是按照数字的大小来的，所以直接就相当于字符直接相加减</span></span><br><span class=\"line\"></span><br><span class=\"line\">            num = num * <span class=\"number\">10</span> + s.charAt(i) - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Character.isDigit(s.charAt(i)) &amp;&amp; s.charAt(i) != <span class=\"string\">&#x27; &#x27;</span> || i == n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (preSign) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;+&#x27;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">                    stack.push(num);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;-&#x27;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">                    stack.push(-num);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;*&#x27;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">                    stack.push(stack.pop() * num);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">                    stack.push(stack.pop() / num);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            preSign = s.charAt(i);</span><br><span class=\"line\"></span><br><span class=\"line\">            num = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!stack.isEmpty()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ans += stack.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"一个栈\"><a href=\"#一个栈\" class=\"headerlink\" title=\"一个栈\"></a>一个栈</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span>  <span class=\"type\">double</span> <span class=\"title function_\">calculate</span><span class=\"params\">(String s)</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> len=s.length();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span>[] str=s.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">    Stack&lt;Integer&gt; st_num=<span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> op=<span class=\"string\">&#x27;#&#x27;</span>;         <span class=\"comment\">//记录乘除符号</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> ans=<span class=\"number\">0</span>,sign=<span class=\"number\">1</span>;    <span class=\"comment\">//记录加减符号</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str[i]==<span class=\"string\">&#x27; &#x27;</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str[i]&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;str[i]&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> num=str[i]-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(i&lt;len-<span class=\"number\">1</span>&amp;&amp;str[i+<span class=\"number\">1</span>]&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;str[i+<span class=\"number\">1</span>]&lt;=<span class=\"string\">&#x27;9&#x27;</span>)  <span class=\"comment\">//找完这个数</span></span><br><span class=\"line\"></span><br><span class=\"line\">                num=num*<span class=\"number\">10</span>+(str[++i]-<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(op!=<span class=\"string\">&#x27;#&#x27;</span>)&#123;                                <span class=\"comment\">//如果之前有乘除符号</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(op==<span class=\"string\">&#x27;*&#x27;</span>)num*=st_num.pop();           <span class=\"comment\">//则将这个数运算之后，再重新进栈</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">else</span> num=st_num.pop()/num;</span><br><span class=\"line\"></span><br><span class=\"line\">                op=<span class=\"string\">&#x27;#&#x27;</span>;                                <span class=\"comment\">//重置乘除符号</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            st_num.push(num);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(str[i]==<span class=\"string\">&#x27;*&#x27;</span>||str[i]==<span class=\"string\">&#x27;/&#x27;</span>) op=str[i];  <span class=\"comment\">//更新乘除符号</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;                                         <span class=\"comment\">//遇到加减符号则可以直接更新ans了</span></span><br><span class=\"line\"></span><br><span class=\"line\">            ans+=st_num.pop()*sign;</span><br><span class=\"line\"></span><br><span class=\"line\">            sign=str[i]==<span class=\"string\">&#x27;+&#x27;</span>?<span class=\"number\">1</span>:-<span class=\"number\">1</span>;   <span class=\"comment\">//更新加减符号</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans+st_num.pop()*sign;   <span class=\"comment\">//sign更新后，还有一次未计算</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"对于学历造假问题的思考","description":"","abbrlink":"8d203e4f","date":"2021-04-22T16:00:00.000Z","_content":"\n\n今天在地铁上刷脉脉的时候，发现脉脉热点第一的话题就是这个，看了下面的各种评论，我有些认同，有些不认同，各种思维在我的脑海中不停的碰撞，所以我决定写下这篇文章来总结我的观点。\n\n\n\n<!-- more -->\n\n\n\n下面我从下面几点进行讨论。\n\n\n\n### 学历\n\n\n\n首先我们来思考一下\n\n\n\n学历是什么？\n\n\n\n学历是我们从哪所学校毕业的证明，是我们入职公司所必须要的一个东西。\n\n\n\n学历可以证明什么？\n\n\n\n我认为学历是你过去在上学阶段的重要成果，可以证明你在过去的二十几年里，学习能力非常出色，理解能力很到位，从而可以在优秀的学校毕业。\n\n\n\n那么问题来了，学历低或者甚至没有学历的同学，是否所有的人都是智商不行？是否所有的人都是学习能力不行？是否所有的人理解能力都很差，高学历就可以学会，而低学历却需要两三遍。\n\n\n\n不是的，事实上，只是从概率来说，是从好学校毕业的学生整体素质比其他学校的高而已，仅此而已。\n\n\n\n### 企业\n\n\n\n首先要思考的是，企业招聘人员的目的在哪里？毫无疑问，肯定是要帮助企业成长的人才。那么什么才算是人才那？在社会普遍认知来说，在学历高的人群中，优秀的人才相对来说概率更大。事实上也确实是如此，那么企业是否要把高学历作为招聘人才时候的唯一标准那？\n\n\n\n这个当然不对，因为这样的话，就表示了你传递了一个价值观，就是我只招聘那些在学生时代付出过努力并取得优秀结果的同学，这样就否认了人在工作时代的努力。\n\n\n\n但是这就存在一个问题，就是如果企业我放开学历要求，那么招聘成本会急剧上升，一个企业招收的人也不多，可能一年光985毕业的学生都招收不过来，又怎么会要你低学历的人那？\n\n\n\n其实我想了一个折中方案，就是你如果确实对学校有要求，那么你可以写  比如  985,211学校优先，这个是一个加分点，但是不是一个必要条件，这样就既减少了招聘成本，又尊重了个人工作之后的努力。\n\n\n\n所以，最终企业招人是有以下三个选择的\n\n\n\n1. 将高学历作为招聘人才的最低要求，硬性条件，不可跨越。这个选择相对来说招聘成本最低\n\n2. 将高学历作为招聘人才的加分项，而不是必要条件\n\n3. 不限制学历，一切以面试结果为准\n\n\n\n### 造假\n\n\n\n其实我在脉脉上还看到一个种言论，就是说  他如果简历都能造假，那他工作之后那，如果还有许多类似的行为，要如果处理？\n\n\n\n其实我想说，这种言论，上刚上线，下面我们一条一条来分析。\n\n\n\n1. 首先，这个简历造假肯定是个不诚信的行为，这没有什么好说的，但是这没有必要上升到攻击人的层面\n\n2. 这个其实也是社会形式所逼迫的，因为很多公司你如果不学历造假，就没有面试的机会\n\n\n\n### 能力\n\n\n\n有人说，面试的并不能证明能力，只能证明他背得多，学习的多，但是工作中不一定可以。\n\n\n\n针对这种言论，我想说，那他起码愿意花时间在这个上面，对于这个面试有足够的重视，那么我就有理由相信他的实践能力。\n\n\n\n> 通过面试一般来说是可以看出能力的，但是这也考验面试管的水平，因为如果面试官只是对理论知识进行提问，而忽视了实践环节，那么确实有很大可能会出现  面试可以，但是工作的时候却很差劲。\n\n\n\n### 人性\n\n\n\n在脉脉上还有一种言论是 那些成天把985 211挂在嘴上的人，其实都是为了夯实一道围墙，为了让自己的行业加上门槛，好让自己活的更加舒服，不用那么卷？\n\n\n\n看到这个言论的时候，我很赞同。原因如下：\n\n\n\n经常把自己的学校挂在嘴边的，一般都是不太自信的人，或者说是想要以此来形成自己的护城河的人，他和普通学校毕业的人的关系有点像资本家和打工人的关系。\n\n\n\n资本家总是想榨干打工人的剩余价值，让打工人辛辛苦苦的加班，熬夜，就是为了给资本家买车买房，成为一个亿万富翁。资本家这种行为的其实也是想要为自己增加护城河，最终目的就是不要让我的员工之后和我一样有钱，优秀。但是这其实并不是资本家的主要目的，资本家的主要目的就是盈利，也就是俗称的赚钱。 所以说这种资本家给自己添加护城河的言论，并不真实，而是一种资本家主要目的的一个附加的结果。\n\n\n\n> 为什么说是一个附件的结果那？\n\n>\n\n> 很简单， 因为如果你每天的时间都在工作上面，那么你就不会时间来提升自己，那也就是说 你的市场竞争力在不断的下降，从而将来会面对，一旦一离开这家公司，可能就比较难找工作，当然如果你的业务有非常多优秀的地方，也是可以的，但是这仍然是需要你去总结和消化的，而不是做过了，就忘记了\n\n\n\n还有人说，我要是一个二本毕业的，去了一个都是985毕业的公司，我一定会好好努力，要是去了都是专科毕业的公司，就直接走了。\n\n\n\n这其实也是有问题的，就是说你的思维定性了，认为学校好的就是什么都好，而学校不好的则都不好。\n\n\n","source":"_posts/对于学历造假问题的思考.md","raw":"---\ntitle: 对于学历造假问题的思考\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 8d203e4f\ndate: 2021-04-23 00:00:00\n---\n\n\n今天在地铁上刷脉脉的时候，发现脉脉热点第一的话题就是这个，看了下面的各种评论，我有些认同，有些不认同，各种思维在我的脑海中不停的碰撞，所以我决定写下这篇文章来总结我的观点。\n\n\n\n<!-- more -->\n\n\n\n下面我从下面几点进行讨论。\n\n\n\n### 学历\n\n\n\n首先我们来思考一下\n\n\n\n学历是什么？\n\n\n\n学历是我们从哪所学校毕业的证明，是我们入职公司所必须要的一个东西。\n\n\n\n学历可以证明什么？\n\n\n\n我认为学历是你过去在上学阶段的重要成果，可以证明你在过去的二十几年里，学习能力非常出色，理解能力很到位，从而可以在优秀的学校毕业。\n\n\n\n那么问题来了，学历低或者甚至没有学历的同学，是否所有的人都是智商不行？是否所有的人都是学习能力不行？是否所有的人理解能力都很差，高学历就可以学会，而低学历却需要两三遍。\n\n\n\n不是的，事实上，只是从概率来说，是从好学校毕业的学生整体素质比其他学校的高而已，仅此而已。\n\n\n\n### 企业\n\n\n\n首先要思考的是，企业招聘人员的目的在哪里？毫无疑问，肯定是要帮助企业成长的人才。那么什么才算是人才那？在社会普遍认知来说，在学历高的人群中，优秀的人才相对来说概率更大。事实上也确实是如此，那么企业是否要把高学历作为招聘人才时候的唯一标准那？\n\n\n\n这个当然不对，因为这样的话，就表示了你传递了一个价值观，就是我只招聘那些在学生时代付出过努力并取得优秀结果的同学，这样就否认了人在工作时代的努力。\n\n\n\n但是这就存在一个问题，就是如果企业我放开学历要求，那么招聘成本会急剧上升，一个企业招收的人也不多，可能一年光985毕业的学生都招收不过来，又怎么会要你低学历的人那？\n\n\n\n其实我想了一个折中方案，就是你如果确实对学校有要求，那么你可以写  比如  985,211学校优先，这个是一个加分点，但是不是一个必要条件，这样就既减少了招聘成本，又尊重了个人工作之后的努力。\n\n\n\n所以，最终企业招人是有以下三个选择的\n\n\n\n1. 将高学历作为招聘人才的最低要求，硬性条件，不可跨越。这个选择相对来说招聘成本最低\n\n2. 将高学历作为招聘人才的加分项，而不是必要条件\n\n3. 不限制学历，一切以面试结果为准\n\n\n\n### 造假\n\n\n\n其实我在脉脉上还看到一个种言论，就是说  他如果简历都能造假，那他工作之后那，如果还有许多类似的行为，要如果处理？\n\n\n\n其实我想说，这种言论，上刚上线，下面我们一条一条来分析。\n\n\n\n1. 首先，这个简历造假肯定是个不诚信的行为，这没有什么好说的，但是这没有必要上升到攻击人的层面\n\n2. 这个其实也是社会形式所逼迫的，因为很多公司你如果不学历造假，就没有面试的机会\n\n\n\n### 能力\n\n\n\n有人说，面试的并不能证明能力，只能证明他背得多，学习的多，但是工作中不一定可以。\n\n\n\n针对这种言论，我想说，那他起码愿意花时间在这个上面，对于这个面试有足够的重视，那么我就有理由相信他的实践能力。\n\n\n\n> 通过面试一般来说是可以看出能力的，但是这也考验面试管的水平，因为如果面试官只是对理论知识进行提问，而忽视了实践环节，那么确实有很大可能会出现  面试可以，但是工作的时候却很差劲。\n\n\n\n### 人性\n\n\n\n在脉脉上还有一种言论是 那些成天把985 211挂在嘴上的人，其实都是为了夯实一道围墙，为了让自己的行业加上门槛，好让自己活的更加舒服，不用那么卷？\n\n\n\n看到这个言论的时候，我很赞同。原因如下：\n\n\n\n经常把自己的学校挂在嘴边的，一般都是不太自信的人，或者说是想要以此来形成自己的护城河的人，他和普通学校毕业的人的关系有点像资本家和打工人的关系。\n\n\n\n资本家总是想榨干打工人的剩余价值，让打工人辛辛苦苦的加班，熬夜，就是为了给资本家买车买房，成为一个亿万富翁。资本家这种行为的其实也是想要为自己增加护城河，最终目的就是不要让我的员工之后和我一样有钱，优秀。但是这其实并不是资本家的主要目的，资本家的主要目的就是盈利，也就是俗称的赚钱。 所以说这种资本家给自己添加护城河的言论，并不真实，而是一种资本家主要目的的一个附加的结果。\n\n\n\n> 为什么说是一个附件的结果那？\n\n>\n\n> 很简单， 因为如果你每天的时间都在工作上面，那么你就不会时间来提升自己，那也就是说 你的市场竞争力在不断的下降，从而将来会面对，一旦一离开这家公司，可能就比较难找工作，当然如果你的业务有非常多优秀的地方，也是可以的，但是这仍然是需要你去总结和消化的，而不是做过了，就忘记了\n\n\n\n还有人说，我要是一个二本毕业的，去了一个都是985毕业的公司，我一定会好好努力，要是去了都是专科毕业的公司，就直接走了。\n\n\n\n这其实也是有问题的，就是说你的思维定性了，认为学校好的就是什么都好，而学校不好的则都不好。\n\n\n","slug":"对于学历造假问题的思考","published":1,"updated":"2025-03-02T03:37:34.423Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp57004wn0uk95ahbozl","content":"<p>今天在地铁上刷脉脉的时候，发现脉脉热点第一的话题就是这个，看了下面的各种评论，我有些认同，有些不认同，各种思维在我的脑海中不停的碰撞，所以我决定写下这篇文章来总结我的观点。</p>\n<span id=\"more\"></span>\n\n\n\n<p>下面我从下面几点进行讨论。</p>\n<h3 id=\"学历\"><a href=\"#学历\" class=\"headerlink\" title=\"学历\"></a>学历</h3><p>首先我们来思考一下</p>\n<p>学历是什么？</p>\n<p>学历是我们从哪所学校毕业的证明，是我们入职公司所必须要的一个东西。</p>\n<p>学历可以证明什么？</p>\n<p>我认为学历是你过去在上学阶段的重要成果，可以证明你在过去的二十几年里，学习能力非常出色，理解能力很到位，从而可以在优秀的学校毕业。</p>\n<p>那么问题来了，学历低或者甚至没有学历的同学，是否所有的人都是智商不行？是否所有的人都是学习能力不行？是否所有的人理解能力都很差，高学历就可以学会，而低学历却需要两三遍。</p>\n<p>不是的，事实上，只是从概率来说，是从好学校毕业的学生整体素质比其他学校的高而已，仅此而已。</p>\n<h3 id=\"企业\"><a href=\"#企业\" class=\"headerlink\" title=\"企业\"></a>企业</h3><p>首先要思考的是，企业招聘人员的目的在哪里？毫无疑问，肯定是要帮助企业成长的人才。那么什么才算是人才那？在社会普遍认知来说，在学历高的人群中，优秀的人才相对来说概率更大。事实上也确实是如此，那么企业是否要把高学历作为招聘人才时候的唯一标准那？</p>\n<p>这个当然不对，因为这样的话，就表示了你传递了一个价值观，就是我只招聘那些在学生时代付出过努力并取得优秀结果的同学，这样就否认了人在工作时代的努力。</p>\n<p>但是这就存在一个问题，就是如果企业我放开学历要求，那么招聘成本会急剧上升，一个企业招收的人也不多，可能一年光985毕业的学生都招收不过来，又怎么会要你低学历的人那？</p>\n<p>其实我想了一个折中方案，就是你如果确实对学校有要求，那么你可以写  比如  985,211学校优先，这个是一个加分点，但是不是一个必要条件，这样就既减少了招聘成本，又尊重了个人工作之后的努力。</p>\n<p>所以，最终企业招人是有以下三个选择的</p>\n<ol>\n<li><p>将高学历作为招聘人才的最低要求，硬性条件，不可跨越。这个选择相对来说招聘成本最低</p>\n</li>\n<li><p>将高学历作为招聘人才的加分项，而不是必要条件</p>\n</li>\n<li><p>不限制学历，一切以面试结果为准</p>\n</li>\n</ol>\n<h3 id=\"造假\"><a href=\"#造假\" class=\"headerlink\" title=\"造假\"></a>造假</h3><p>其实我在脉脉上还看到一个种言论，就是说  他如果简历都能造假，那他工作之后那，如果还有许多类似的行为，要如果处理？</p>\n<p>其实我想说，这种言论，上刚上线，下面我们一条一条来分析。</p>\n<ol>\n<li><p>首先，这个简历造假肯定是个不诚信的行为，这没有什么好说的，但是这没有必要上升到攻击人的层面</p>\n</li>\n<li><p>这个其实也是社会形式所逼迫的，因为很多公司你如果不学历造假，就没有面试的机会</p>\n</li>\n</ol>\n<h3 id=\"能力\"><a href=\"#能力\" class=\"headerlink\" title=\"能力\"></a>能力</h3><p>有人说，面试的并不能证明能力，只能证明他背得多，学习的多，但是工作中不一定可以。</p>\n<p>针对这种言论，我想说，那他起码愿意花时间在这个上面，对于这个面试有足够的重视，那么我就有理由相信他的实践能力。</p>\n<blockquote>\n<p>通过面试一般来说是可以看出能力的，但是这也考验面试管的水平，因为如果面试官只是对理论知识进行提问，而忽视了实践环节，那么确实有很大可能会出现  面试可以，但是工作的时候却很差劲。</p>\n</blockquote>\n<h3 id=\"人性\"><a href=\"#人性\" class=\"headerlink\" title=\"人性\"></a>人性</h3><p>在脉脉上还有一种言论是 那些成天把985 211挂在嘴上的人，其实都是为了夯实一道围墙，为了让自己的行业加上门槛，好让自己活的更加舒服，不用那么卷？</p>\n<p>看到这个言论的时候，我很赞同。原因如下：</p>\n<p>经常把自己的学校挂在嘴边的，一般都是不太自信的人，或者说是想要以此来形成自己的护城河的人，他和普通学校毕业的人的关系有点像资本家和打工人的关系。</p>\n<p>资本家总是想榨干打工人的剩余价值，让打工人辛辛苦苦的加班，熬夜，就是为了给资本家买车买房，成为一个亿万富翁。资本家这种行为的其实也是想要为自己增加护城河，最终目的就是不要让我的员工之后和我一样有钱，优秀。但是这其实并不是资本家的主要目的，资本家的主要目的就是盈利，也就是俗称的赚钱。 所以说这种资本家给自己添加护城河的言论，并不真实，而是一种资本家主要目的的一个附加的结果。</p>\n<blockquote>\n<p>为什么说是一个附件的结果那？</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>很简单， 因为如果你每天的时间都在工作上面，那么你就不会时间来提升自己，那也就是说 你的市场竞争力在不断的下降，从而将来会面对，一旦一离开这家公司，可能就比较难找工作，当然如果你的业务有非常多优秀的地方，也是可以的，但是这仍然是需要你去总结和消化的，而不是做过了，就忘记了</p>\n</blockquote>\n<p>还有人说，我要是一个二本毕业的，去了一个都是985毕业的公司，我一定会好好努力，要是去了都是专科毕业的公司，就直接走了。</p>\n<p>这其实也是有问题的，就是说你的思维定性了，认为学校好的就是什么都好，而学校不好的则都不好。</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"今天在地铁上刷脉脉的时候，发现脉脉热点第一的话题就是这个，看了下面的各种评论，我有些认同，有些不认同，各种思维在我的脑海中不停的碰撞，所以我决定写下这篇文章来总结我的观点。\n\n下面我从下面几点进行讨论。\n\n学历\n首先我们来思考一下\n\n学历是什么？\n\n学历是我们从哪所学校毕业的证明，是我们入职公司所必须要的一个东西。\n\n学历可以证明什么？\n\n我认为学历是你过去在上学阶段的重要成果，可以证明你在过去的二十几年里，学习能力非常出色，理解能力很到位，从而可以在优秀的学校毕业。\n\n那么问题来了，学历低或者甚至没有学历的同学，是否所有的人都是智商不行？是否所有的人都是学习能力不行？是否所有的人理解能力都很","more":"<p>下面我从下面几点进行讨论。</p>\n<h3 id=\"学历\"><a href=\"#学历\" class=\"headerlink\" title=\"学历\"></a>学历</h3><p>首先我们来思考一下</p>\n<p>学历是什么？</p>\n<p>学历是我们从哪所学校毕业的证明，是我们入职公司所必须要的一个东西。</p>\n<p>学历可以证明什么？</p>\n<p>我认为学历是你过去在上学阶段的重要成果，可以证明你在过去的二十几年里，学习能力非常出色，理解能力很到位，从而可以在优秀的学校毕业。</p>\n<p>那么问题来了，学历低或者甚至没有学历的同学，是否所有的人都是智商不行？是否所有的人都是学习能力不行？是否所有的人理解能力都很差，高学历就可以学会，而低学历却需要两三遍。</p>\n<p>不是的，事实上，只是从概率来说，是从好学校毕业的学生整体素质比其他学校的高而已，仅此而已。</p>\n<h3 id=\"企业\"><a href=\"#企业\" class=\"headerlink\" title=\"企业\"></a>企业</h3><p>首先要思考的是，企业招聘人员的目的在哪里？毫无疑问，肯定是要帮助企业成长的人才。那么什么才算是人才那？在社会普遍认知来说，在学历高的人群中，优秀的人才相对来说概率更大。事实上也确实是如此，那么企业是否要把高学历作为招聘人才时候的唯一标准那？</p>\n<p>这个当然不对，因为这样的话，就表示了你传递了一个价值观，就是我只招聘那些在学生时代付出过努力并取得优秀结果的同学，这样就否认了人在工作时代的努力。</p>\n<p>但是这就存在一个问题，就是如果企业我放开学历要求，那么招聘成本会急剧上升，一个企业招收的人也不多，可能一年光985毕业的学生都招收不过来，又怎么会要你低学历的人那？</p>\n<p>其实我想了一个折中方案，就是你如果确实对学校有要求，那么你可以写  比如  985,211学校优先，这个是一个加分点，但是不是一个必要条件，这样就既减少了招聘成本，又尊重了个人工作之后的努力。</p>\n<p>所以，最终企业招人是有以下三个选择的</p>\n<ol>\n<li><p>将高学历作为招聘人才的最低要求，硬性条件，不可跨越。这个选择相对来说招聘成本最低</p>\n</li>\n<li><p>将高学历作为招聘人才的加分项，而不是必要条件</p>\n</li>\n<li><p>不限制学历，一切以面试结果为准</p>\n</li>\n</ol>\n<h3 id=\"造假\"><a href=\"#造假\" class=\"headerlink\" title=\"造假\"></a>造假</h3><p>其实我在脉脉上还看到一个种言论，就是说  他如果简历都能造假，那他工作之后那，如果还有许多类似的行为，要如果处理？</p>\n<p>其实我想说，这种言论，上刚上线，下面我们一条一条来分析。</p>\n<ol>\n<li><p>首先，这个简历造假肯定是个不诚信的行为，这没有什么好说的，但是这没有必要上升到攻击人的层面</p>\n</li>\n<li><p>这个其实也是社会形式所逼迫的，因为很多公司你如果不学历造假，就没有面试的机会</p>\n</li>\n</ol>\n<h3 id=\"能力\"><a href=\"#能力\" class=\"headerlink\" title=\"能力\"></a>能力</h3><p>有人说，面试的并不能证明能力，只能证明他背得多，学习的多，但是工作中不一定可以。</p>\n<p>针对这种言论，我想说，那他起码愿意花时间在这个上面，对于这个面试有足够的重视，那么我就有理由相信他的实践能力。</p>\n<blockquote>\n<p>通过面试一般来说是可以看出能力的，但是这也考验面试管的水平，因为如果面试官只是对理论知识进行提问，而忽视了实践环节，那么确实有很大可能会出现  面试可以，但是工作的时候却很差劲。</p>\n</blockquote>\n<h3 id=\"人性\"><a href=\"#人性\" class=\"headerlink\" title=\"人性\"></a>人性</h3><p>在脉脉上还有一种言论是 那些成天把985 211挂在嘴上的人，其实都是为了夯实一道围墙，为了让自己的行业加上门槛，好让自己活的更加舒服，不用那么卷？</p>\n<p>看到这个言论的时候，我很赞同。原因如下：</p>\n<p>经常把自己的学校挂在嘴边的，一般都是不太自信的人，或者说是想要以此来形成自己的护城河的人，他和普通学校毕业的人的关系有点像资本家和打工人的关系。</p>\n<p>资本家总是想榨干打工人的剩余价值，让打工人辛辛苦苦的加班，熬夜，就是为了给资本家买车买房，成为一个亿万富翁。资本家这种行为的其实也是想要为自己增加护城河，最终目的就是不要让我的员工之后和我一样有钱，优秀。但是这其实并不是资本家的主要目的，资本家的主要目的就是盈利，也就是俗称的赚钱。 所以说这种资本家给自己添加护城河的言论，并不真实，而是一种资本家主要目的的一个附加的结果。</p>\n<blockquote>\n<p>为什么说是一个附件的结果那？</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>很简单， 因为如果你每天的时间都在工作上面，那么你就不会时间来提升自己，那也就是说 你的市场竞争力在不断的下降，从而将来会面对，一旦一离开这家公司，可能就比较难找工作，当然如果你的业务有非常多优秀的地方，也是可以的，但是这仍然是需要你去总结和消化的，而不是做过了，就忘记了</p>\n</blockquote>\n<p>还有人说，我要是一个二本毕业的，去了一个都是985毕业的公司，我一定会好好努力，要是去了都是专科毕业的公司，就直接走了。</p>\n<p>这其实也是有问题的，就是说你的思维定性了，认为学校好的就是什么都好，而学校不好的则都不好。</p>"},{"title":"开闭原则","description":"","abbrlink":"f50731fc","date":"2021-06-19T16:00:00.000Z","_content":"\n\n开闭原则\n\n\n\n<!-- more -->\n\n\n\n### 定义\n\n\n\n软件实体应该对扩展开放，对修改关闭，其含义是说一个软件实体应该通过扩展来实现变化，而不是通过修改已有的代码来实现变化\n\n\n\n## 原则\n\n\n","source":"_posts/开闭原则.md","raw":"---\ntitle: 开闭原则\ndescription: ''\ntags:\n  - 无标签\nabbrlink: f50731fc\ndate: 2021-06-20 00:00:00\n---\n\n\n开闭原则\n\n\n\n<!-- more -->\n\n\n\n### 定义\n\n\n\n软件实体应该对扩展开放，对修改关闭，其含义是说一个软件实体应该通过扩展来实现变化，而不是通过修改已有的代码来实现变化\n\n\n\n## 原则\n\n\n","slug":"开闭原则","published":1,"updated":"2025-03-02T03:37:34.424Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp58004yn0uk93cne8ca","content":"<p>开闭原则</p>\n<span id=\"more\"></span>\n\n\n\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>软件实体应该对扩展开放，对修改关闭，其含义是说一个软件实体应该通过扩展来实现变化，而不是通过修改已有的代码来实现变化</p>\n<h2 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h2>","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"开闭原则\n\n定义\n软件实体应该对扩展开放，对修改关闭，其含义是说一个软件实体应该通过扩展来实现变化，而不是通过修改已有的代码来实现变化\n\n原则","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>软件实体应该对扩展开放，对修改关闭，其含义是说一个软件实体应该通过扩展来实现变化，而不是通过修改已有的代码来实现变化</p>\n<h2 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h2>"},{"title":"彻底理解IOC","description":"","abbrlink":"6758abc6","date":"2021-07-14T16:00:00.000Z","_content":"\n\n彻底理解\n\n\n\n<!-- more -->\n\n\n\n# 前言\n\n\n\nIOC 这个词估计是估计接触过spirng的人都知道的，就是所谓的控制反转，主要思想其实就是软件设计思想中的依赖倒置，讲真，我学了java一年多，spring的这个主要特点，ioc看了不少，但是还是没有太明白，就是一直不晓得，在没有ioc之前是怎么会回事儿，没有对比，也不太知道它的优点在哪里。终于在这篇文章中给到我想要的答案。\n\n# what\n\n在我的理解中，IOC的核心思想其实就是它的中文翻译过来的意思，控制反转，那么是谁的控制在反转那？     \n\n 是在new一个对象的时候的反转，用一个非常简单的例子来讲解，你就会明白了。\n\n 比如说一台汽车，他是如何设计的那？首先肯定是要画出他的模型，那么一台汽车都有什么部件那？\n\n 1. 车身\n\n 2. 底盘\n\n 3. 轮子\n\n在这里只是将车分为这三部分进行讨论，就这样最终形成一个完整的汽车，这中就有依赖关系，也就是默认的依赖关系是 \n\n\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a6c0468d6fcd4b6ab2bfad89c8ebe1df~tplv-k3u1fbpfcp-watermark.image)\n\n这就是所谓的上层依赖下层，下层控制上层的意思。\n\n\n\n但是使用了IOC之后那，这类比汽车就是说，给了你一个零件，需要你自己来找其他的零件来组成汽车。步骤应该是：\n\n1. 首先肯定是考虑自己有了轮胎，那么轮胎要装在哪里那？应该是放在汽车底盘的下方\n\n2. 有了底盘，汽车肯定是要字载人的，所以要有车身\n\n3. 有了轮胎 底盘 车身，就可以组装成一辆汽车了\n\n\n\n\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d0fdc9c3a354ec8968fff169f056d15~tplv-k3u1fbpfcp-watermark.image)\n\n# 代码\n\n上面的例子其实我觉得不是特别的恰当，必须要落实到代码当中才可以。\n\n具体的代码，可以到下方的参考链接中进行查看，我这里这是简单的描述IOC前后的差异。\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18167f99d4954b74b26c35a189512e0e~tplv-k3u1fbpfcp-watermark.image)\n\n仔细查看上图，就会发现，其实IOC前后的差距，无非就是你写的是无参构造还是有参构造，看起来是非常细微的差别，但是其实作用相差很多。       \n\n当你使用的无参构造的时候，你其实调用的是下面一层的方法，然后每一层都是调用下一层的方法，这样就会出现一个问题，就是当你修改最底层的方法的时候，就需要把涉及到的所有方法都要进行修改，很麻烦。     \n\n但是当你使用的是有参构造的时候，你每次一调用的是实例化的对象的方法，所以当你修改最底层的方法的时候，只需要修改那一行代码就可以了，其实就是代码之间的耦合性降低了，使得代码更加易于适应于需求变化的场景。\n\n\n\n# 和new的关系\n\n我的理解是当你使用了ioc之后，你所创建的对象，需要依赖别的对象实现的话（并且这个对象已经注入到sping容器中），就可以进行直接调用，而不是要将所有依赖的对象都new出来。\n\n> 其实从这里，也可以看出spring中单例模式的作用，其实它就是为这个IOC来进行服务的，因为如果不是因为单例模式，一个对象只有一个实例化，那么spirng容器在调用对应对象的时候就会不知道如何选择，不知道选择哪个对象比较好。\n\n# 总结\n\nIOC的作用：      \n\n1. 降低耦合度，代码维护更加方便\n\n2. 资源集中管理，实现资源的可配置和易管理\n\n\n\n> 参考:\n\n>\n\n>  - [知乎回答](https://www.zhihu.com/question/23277575)","source":"_posts/彻底理解IOC.md","raw":"---\ntitle: 彻底理解IOC\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 6758abc6\ndate: 2021-07-15 00:00:00\n---\n\n\n彻底理解\n\n\n\n<!-- more -->\n\n\n\n# 前言\n\n\n\nIOC 这个词估计是估计接触过spirng的人都知道的，就是所谓的控制反转，主要思想其实就是软件设计思想中的依赖倒置，讲真，我学了java一年多，spring的这个主要特点，ioc看了不少，但是还是没有太明白，就是一直不晓得，在没有ioc之前是怎么会回事儿，没有对比，也不太知道它的优点在哪里。终于在这篇文章中给到我想要的答案。\n\n# what\n\n在我的理解中，IOC的核心思想其实就是它的中文翻译过来的意思，控制反转，那么是谁的控制在反转那？     \n\n 是在new一个对象的时候的反转，用一个非常简单的例子来讲解，你就会明白了。\n\n 比如说一台汽车，他是如何设计的那？首先肯定是要画出他的模型，那么一台汽车都有什么部件那？\n\n 1. 车身\n\n 2. 底盘\n\n 3. 轮子\n\n在这里只是将车分为这三部分进行讨论，就这样最终形成一个完整的汽车，这中就有依赖关系，也就是默认的依赖关系是 \n\n\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a6c0468d6fcd4b6ab2bfad89c8ebe1df~tplv-k3u1fbpfcp-watermark.image)\n\n这就是所谓的上层依赖下层，下层控制上层的意思。\n\n\n\n但是使用了IOC之后那，这类比汽车就是说，给了你一个零件，需要你自己来找其他的零件来组成汽车。步骤应该是：\n\n1. 首先肯定是考虑自己有了轮胎，那么轮胎要装在哪里那？应该是放在汽车底盘的下方\n\n2. 有了底盘，汽车肯定是要字载人的，所以要有车身\n\n3. 有了轮胎 底盘 车身，就可以组装成一辆汽车了\n\n\n\n\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d0fdc9c3a354ec8968fff169f056d15~tplv-k3u1fbpfcp-watermark.image)\n\n# 代码\n\n上面的例子其实我觉得不是特别的恰当，必须要落实到代码当中才可以。\n\n具体的代码，可以到下方的参考链接中进行查看，我这里这是简单的描述IOC前后的差异。\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18167f99d4954b74b26c35a189512e0e~tplv-k3u1fbpfcp-watermark.image)\n\n仔细查看上图，就会发现，其实IOC前后的差距，无非就是你写的是无参构造还是有参构造，看起来是非常细微的差别，但是其实作用相差很多。       \n\n当你使用的无参构造的时候，你其实调用的是下面一层的方法，然后每一层都是调用下一层的方法，这样就会出现一个问题，就是当你修改最底层的方法的时候，就需要把涉及到的所有方法都要进行修改，很麻烦。     \n\n但是当你使用的是有参构造的时候，你每次一调用的是实例化的对象的方法，所以当你修改最底层的方法的时候，只需要修改那一行代码就可以了，其实就是代码之间的耦合性降低了，使得代码更加易于适应于需求变化的场景。\n\n\n\n# 和new的关系\n\n我的理解是当你使用了ioc之后，你所创建的对象，需要依赖别的对象实现的话（并且这个对象已经注入到sping容器中），就可以进行直接调用，而不是要将所有依赖的对象都new出来。\n\n> 其实从这里，也可以看出spring中单例模式的作用，其实它就是为这个IOC来进行服务的，因为如果不是因为单例模式，一个对象只有一个实例化，那么spirng容器在调用对应对象的时候就会不知道如何选择，不知道选择哪个对象比较好。\n\n# 总结\n\nIOC的作用：      \n\n1. 降低耦合度，代码维护更加方便\n\n2. 资源集中管理，实现资源的可配置和易管理\n\n\n\n> 参考:\n\n>\n\n>  - [知乎回答](https://www.zhihu.com/question/23277575)","slug":"彻底理解IOC","published":1,"updated":"2025-03-02T03:37:34.425Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp580050n0uk9fn9bqs4","content":"<p>彻底理解</p>\n<span id=\"more\"></span>\n\n\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>IOC 这个词估计是估计接触过spirng的人都知道的，就是所谓的控制反转，主要思想其实就是软件设计思想中的依赖倒置，讲真，我学了java一年多，spring的这个主要特点，ioc看了不少，但是还是没有太明白，就是一直不晓得，在没有ioc之前是怎么会回事儿，没有对比，也不太知道它的优点在哪里。终于在这篇文章中给到我想要的答案。</p>\n<h1 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h1><p>在我的理解中，IOC的核心思想其实就是它的中文翻译过来的意思，控制反转，那么是谁的控制在反转那？     </p>\n<p> 是在new一个对象的时候的反转，用一个非常简单的例子来讲解，你就会明白了。</p>\n<p> 比如说一台汽车，他是如何设计的那？首先肯定是要画出他的模型，那么一台汽车都有什么部件那？</p>\n<ol>\n<li><p>车身</p>\n</li>\n<li><p>底盘</p>\n</li>\n<li><p>轮子</p>\n</li>\n</ol>\n<p>在这里只是将车分为这三部分进行讨论，就这样最终形成一个完整的汽车，这中就有依赖关系，也就是默认的依赖关系是 </p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a6c0468d6fcd4b6ab2bfad89c8ebe1df~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\"></p>\n<p>这就是所谓的上层依赖下层，下层控制上层的意思。</p>\n<p>但是使用了IOC之后那，这类比汽车就是说，给了你一个零件，需要你自己来找其他的零件来组成汽车。步骤应该是：</p>\n<ol>\n<li><p>首先肯定是考虑自己有了轮胎，那么轮胎要装在哪里那？应该是放在汽车底盘的下方</p>\n</li>\n<li><p>有了底盘，汽车肯定是要字载人的，所以要有车身</p>\n</li>\n<li><p>有了轮胎 底盘 车身，就可以组装成一辆汽车了</p>\n</li>\n</ol>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d0fdc9c3a354ec8968fff169f056d15~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\"></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>上面的例子其实我觉得不是特别的恰当，必须要落实到代码当中才可以。</p>\n<p>具体的代码，可以到下方的参考链接中进行查看，我这里这是简单的描述IOC前后的差异。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18167f99d4954b74b26c35a189512e0e~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\"></p>\n<p>仔细查看上图，就会发现，其实IOC前后的差距，无非就是你写的是无参构造还是有参构造，看起来是非常细微的差别，但是其实作用相差很多。       </p>\n<p>当你使用的无参构造的时候，你其实调用的是下面一层的方法，然后每一层都是调用下一层的方法，这样就会出现一个问题，就是当你修改最底层的方法的时候，就需要把涉及到的所有方法都要进行修改，很麻烦。     </p>\n<p>但是当你使用的是有参构造的时候，你每次一调用的是实例化的对象的方法，所以当你修改最底层的方法的时候，只需要修改那一行代码就可以了，其实就是代码之间的耦合性降低了，使得代码更加易于适应于需求变化的场景。</p>\n<h1 id=\"和new的关系\"><a href=\"#和new的关系\" class=\"headerlink\" title=\"和new的关系\"></a>和new的关系</h1><p>我的理解是当你使用了ioc之后，你所创建的对象，需要依赖别的对象实现的话（并且这个对象已经注入到sping容器中），就可以进行直接调用，而不是要将所有依赖的对象都new出来。</p>\n<blockquote>\n<p>其实从这里，也可以看出spring中单例模式的作用，其实它就是为这个IOC来进行服务的，因为如果不是因为单例模式，一个对象只有一个实例化，那么spirng容器在调用对应对象的时候就会不知道如何选择，不知道选择哪个对象比较好。</p>\n</blockquote>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>IOC的作用：      </p>\n<ol>\n<li><p>降低耦合度，代码维护更加方便</p>\n</li>\n<li><p>资源集中管理，实现资源的可配置和易管理</p>\n</li>\n</ol>\n<blockquote>\n<p>参考:</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIzMjc3NTc1\">知乎回答<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</blockquote>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"彻底理解\n\n前言\nIOC 这个词估计是估计接触过spirng的人都知道的，就是所谓的控制反转，主要思想其实就是软件设计思想中的依赖倒置，讲真，我学了java一年多，spring的这个主要特点，ioc看了不少，但是还是没有太明白，就是一直不晓得，在没有ioc之前是怎么会回事儿，没有对比，也不太知道它的优点在哪里。终于在这篇文章中给到我想要的答案。\n\nwhat\n在我的理解中，IOC的核心思想其实就是它的中文翻译过来的意思，控制反转，那么是谁的控制在反转那？ \n\n 是在new一个对象的时候的反转，用一个非常简单的例子来讲解，你就会明白了。\n\n 比如说一台汽车，他是如何设计的那？首先肯定是要画出他的模","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>IOC 这个词估计是估计接触过spirng的人都知道的，就是所谓的控制反转，主要思想其实就是软件设计思想中的依赖倒置，讲真，我学了java一年多，spring的这个主要特点，ioc看了不少，但是还是没有太明白，就是一直不晓得，在没有ioc之前是怎么会回事儿，没有对比，也不太知道它的优点在哪里。终于在这篇文章中给到我想要的答案。</p>\n<h1 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h1><p>在我的理解中，IOC的核心思想其实就是它的中文翻译过来的意思，控制反转，那么是谁的控制在反转那？     </p>\n<p> 是在new一个对象的时候的反转，用一个非常简单的例子来讲解，你就会明白了。</p>\n<p> 比如说一台汽车，他是如何设计的那？首先肯定是要画出他的模型，那么一台汽车都有什么部件那？</p>\n<ol>\n<li><p>车身</p>\n</li>\n<li><p>底盘</p>\n</li>\n<li><p>轮子</p>\n</li>\n</ol>\n<p>在这里只是将车分为这三部分进行讨论，就这样最终形成一个完整的汽车，这中就有依赖关系，也就是默认的依赖关系是 </p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a6c0468d6fcd4b6ab2bfad89c8ebe1df~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\"></p>\n<p>这就是所谓的上层依赖下层，下层控制上层的意思。</p>\n<p>但是使用了IOC之后那，这类比汽车就是说，给了你一个零件，需要你自己来找其他的零件来组成汽车。步骤应该是：</p>\n<ol>\n<li><p>首先肯定是考虑自己有了轮胎，那么轮胎要装在哪里那？应该是放在汽车底盘的下方</p>\n</li>\n<li><p>有了底盘，汽车肯定是要字载人的，所以要有车身</p>\n</li>\n<li><p>有了轮胎 底盘 车身，就可以组装成一辆汽车了</p>\n</li>\n</ol>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d0fdc9c3a354ec8968fff169f056d15~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\"></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>上面的例子其实我觉得不是特别的恰当，必须要落实到代码当中才可以。</p>\n<p>具体的代码，可以到下方的参考链接中进行查看，我这里这是简单的描述IOC前后的差异。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18167f99d4954b74b26c35a189512e0e~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\"></p>\n<p>仔细查看上图，就会发现，其实IOC前后的差距，无非就是你写的是无参构造还是有参构造，看起来是非常细微的差别，但是其实作用相差很多。       </p>\n<p>当你使用的无参构造的时候，你其实调用的是下面一层的方法，然后每一层都是调用下一层的方法，这样就会出现一个问题，就是当你修改最底层的方法的时候，就需要把涉及到的所有方法都要进行修改，很麻烦。     </p>\n<p>但是当你使用的是有参构造的时候，你每次一调用的是实例化的对象的方法，所以当你修改最底层的方法的时候，只需要修改那一行代码就可以了，其实就是代码之间的耦合性降低了，使得代码更加易于适应于需求变化的场景。</p>\n<h1 id=\"和new的关系\"><a href=\"#和new的关系\" class=\"headerlink\" title=\"和new的关系\"></a>和new的关系</h1><p>我的理解是当你使用了ioc之后，你所创建的对象，需要依赖别的对象实现的话（并且这个对象已经注入到sping容器中），就可以进行直接调用，而不是要将所有依赖的对象都new出来。</p>\n<blockquote>\n<p>其实从这里，也可以看出spring中单例模式的作用，其实它就是为这个IOC来进行服务的，因为如果不是因为单例模式，一个对象只有一个实例化，那么spirng容器在调用对应对象的时候就会不知道如何选择，不知道选择哪个对象比较好。</p>\n</blockquote>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>IOC的作用：      </p>\n<ol>\n<li><p>降低耦合度，代码维护更加方便</p>\n</li>\n<li><p>资源集中管理，实现资源的可配置和易管理</p>\n</li>\n</ol>\n<blockquote>\n<p>参考:</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIzMjc3NTc1\">知乎回答<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</blockquote>"},{"title":"情绪自由","description":"","abbrlink":"daa35d62","date":"2021-07-09T16:00:00.000Z","_content":"\n\n主要是来聊一下我对于情绪自由的看法。\n\n\n\n<!-- more -->\n\n\n\n# 今日唠叨\n\n\n\n 今天是周六，无聊的我又在家自己待了一天，三餐外卖，说是要学习spring源码的，但是总是看了一小会，就去看视频了，看看b站，看看LPL比赛，看看向往的生活，看看爱奇艺的自制节目《姐妹俱乐部》。    \n\n 其实我感觉我和其他的男生有点不太一样，因为他们好像是都不太喜欢综艺节目，我还是比较喜欢综艺节目的，比如我最喜欢的一些语言类节目《脱口秀大会》、《奇葩说》、《吐槽大会》等。    \n\n 这个《姐妹俱乐部》是我最近追的综艺之一，主要就是来讲述一些关于女性在生活中的困境的。从节目的名字来讲，明显是针对于女性用户来开放的，但是也并没有限制男性观众观看，一开始时出于好奇心，看到这个节目，后来发现，挺有意思的，小小小小情景剧一些场景非常的夸张，最后也可以有一个小小的思考，于是我就开始追这个综艺了，几乎每期都看。\n\n\n\n# 主要内容\n\n\n\n这周是第七期，讲的主题是“她的笑，她的哭”，注意了，朋友们，女字旁的她，强调女性，内容主要还是以三位老板为主，讲解了在生活中一些想要自由的哭和笑的时候，却遭到了他人的阻拦，或者说在这个社会 的压力或者这个场景的压力下，而不得不压抑自己的情绪。\n\n\n\n> 如果想要了解这个视频的朋友，可以自己去看下，有些东西可能是需要看视频来自己体会的\n\n\n\n下面主要是来谈谈我的理解。\n\n\n\n情绪自由这个主题我认为还是挺有意思的，有句话说的好，既然我们都很难达到财富自由了，难道连情绪自由都要放弃吗？\n\n\n\n其实这个问题恒久存在，一直是在对我们自己的情绪进行限制，尤其是我们中国人，饱受传统思想的熏陶，经常性的压抑自己的情绪，比如说在家庭中，父母看起来总是很坚强，似乎没有见过父母哭的样子，或者说是父母不想把自己脆弱的一面留给孩子。\n\n\n\n## 母亲的哭泣\n\n\n\n写到这里，突然想起来了，我似乎见过我母亲哭泣的样子，如果我记忆没有错的话，应该还是我把我的母亲弄哭的。\n\n\n\n> 本来想写，我妈的，但是感觉太过口语化，于是改成了母亲\n\n\n\n在我记忆不太清晰的样子中，似乎是在我初中回家的一个下午，我当时饥肠辘辘的回到家中，急忙需要食物来填满我的肚子，但是我的母亲，不太记得是因为什么原因了，没有做我想吃的饭，又或者是根本没有做饭，在我请求了我的母亲很长的时间之后，她还是不去为我做饭。\n\n\n\n而我直到现在都还清晰的记得，那时的我，经历了饿的不同阶段，一开始是有点饿，慢慢越来越饿，直到这个饿的感觉达到一个顶峰，那个顶峰是真的难受，确实是有种饿到肚子疼的感觉，而那个时候，我的饭还迟迟没有着落，我也只能硬生生扛过那个时间，过了那个顶峰之后，慢慢的就越来越感觉到，似乎自己没有那么饿了。\n\n\n\n当我终于辛苦的扛过自己的最饿的时候，我的母亲又过了一会才做好饭，端上来给我，而那个时候的我傲娇的很，由于自己比较恨母亲没有早点做好饭，于是就一直在拒绝母亲的喂饭，我已经记不清楚母亲是喂了我自己饭，而当时的我却是一直在拒绝，可能是因为担心我没有吃饭饿着，又或者是因为其他，那是我人生中第一次看到我的母亲在我的面前流泪了，我突然就慌了，不知道该如何自处，只是记得我最后好像流着泪吃完了那个饭，记忆非常的深刻。\n\n\n\n>  这段母亲的哭泣，是在写文章的时候，临时起意，希望大家不要介意。\n\n\n\n## 正文\n\n\n\n情绪自由，我认为对于很多人还是有思考的意义的，比如说我自己吧，由于小的时候，不知道因为一次什么原因，就给自己定了一个小的目标，就是以后不再哭泣。当时可能是觉得哭没有用吧，所以就不想要自己遇到事情再哭了，那并不能解决问题啊。虽然是不知道什么时候制定的目标，但是我自己回想过去的几年中，似乎确实不太有哭泣，不知道是不会了，还是说已经习惯了这种没有哭泣的生活。说起来，还有点小悲伤，一个正常的人竟然不会哭泣了，哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈。我仔细的回想，发现我好像虽然不会因为生活中的事情而哭泣了，但是不知道是因为年龄大了(但是一想，我97年，今天2021年，算一下也就24岁)，变得更加感性了，还是说其他什么原因，我竟然有一次看的一个动作戏哭了，真是发现自己确实比以前感性了，看待事情也确实比以前更加柔和了，不知道这是好是坏。\n\n\n\n> 从那个时候，貌似我给自己的座右铭就定位了，用微笑面对生活\n\n\n\n我对于情绪自由的理解其实很简单，就是接纳我们自己，接纳自己的这些正常的情绪，如果你可以允许自己笑，当然也可以允许自己哭泣，这都是我们身为一个正常的人类所拥有的一个正常的反应。\n\n\n\n说起来很简单，接纳我们自己的情绪，但是我们常常因为社会的环境，或者我们的传统思想而不自觉地去限制自己的情绪，这是需要我们意识到的，慢慢的来学会接纳自己，学会释放自己的情绪，而不是过分的压抑。\n\n\n\n### 朋友\n\n\n\n有一个非常经典的俗语是“爱笑的女孩运气都不会太差”，这个我是听过非常多次了，本来以为就是觉得大家都喜欢爱笑的女孩，但是看了今天的视频才知道，原来这也有另外一层意思啊，就是说爱哭的女孩运气比较差喽，我也是醉了，在如今思想解放的今天，女性的思想也越来越开放，这本应该是一个好的事情，但是什么事情都有一个度，这个度没有把握好，就出现了所谓的女权了。来继续爱笑的女孩这个话题，在朋友的关系中，我们可以喜欢看到女孩的笑容，但是不应该去强迫女孩露出笑容，这其实干涉到了女孩的情绪自由，比较过分，而且当女孩意识过来的时候，可能已经没有做朋友了，因为她不想再压抑自己的情绪了。\n\n\n\n### 父母\n\n\n\n按照我们中国传统思想来说，作为子女的我们，都是认为父母已经为我们操心的很多了，当我们长大的时候，遇到困难或者说是困难的时候，总是喜欢报喜不报忧。不想要将自己的压力转移到父母的身上，而且他们可能对于这个问题的解决也并不能提供什么帮助。这种情况怎么说那，比较复杂，请听我分析一下。\n\n\n\n这种情况对于我们子女自身而言，一方面不用给父母增加压力，报的都是开心的事儿，但是父母也不是傻子，不会那么容易就相信你生活中不会遇到什么困境，只是觉得你不给他们分享，另一方面，这种压力过大的时候，你自己可能控制不住，无意间泄漏或者父母从你的举止行为间看出来了，但是这种时候，父母通常都会问一下，你要真是不说，父母也没办法，其实我感觉遇到这种情况，讲一下，比较好，有句俗话话说的好，堵不如疏，将事情将讲清楚之后，父母才没有那么担心，虽然他们可能并不能提供一些具体的解决办法。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/情绪自由.md","raw":"---\ntitle: 情绪自由\ndescription: ''\ntags:\n  - 无标签\nabbrlink: daa35d62\ndate: 2021-07-10 00:00:00\n---\n\n\n主要是来聊一下我对于情绪自由的看法。\n\n\n\n<!-- more -->\n\n\n\n# 今日唠叨\n\n\n\n 今天是周六，无聊的我又在家自己待了一天，三餐外卖，说是要学习spring源码的，但是总是看了一小会，就去看视频了，看看b站，看看LPL比赛，看看向往的生活，看看爱奇艺的自制节目《姐妹俱乐部》。    \n\n 其实我感觉我和其他的男生有点不太一样，因为他们好像是都不太喜欢综艺节目，我还是比较喜欢综艺节目的，比如我最喜欢的一些语言类节目《脱口秀大会》、《奇葩说》、《吐槽大会》等。    \n\n 这个《姐妹俱乐部》是我最近追的综艺之一，主要就是来讲述一些关于女性在生活中的困境的。从节目的名字来讲，明显是针对于女性用户来开放的，但是也并没有限制男性观众观看，一开始时出于好奇心，看到这个节目，后来发现，挺有意思的，小小小小情景剧一些场景非常的夸张，最后也可以有一个小小的思考，于是我就开始追这个综艺了，几乎每期都看。\n\n\n\n# 主要内容\n\n\n\n这周是第七期，讲的主题是“她的笑，她的哭”，注意了，朋友们，女字旁的她，强调女性，内容主要还是以三位老板为主，讲解了在生活中一些想要自由的哭和笑的时候，却遭到了他人的阻拦，或者说在这个社会 的压力或者这个场景的压力下，而不得不压抑自己的情绪。\n\n\n\n> 如果想要了解这个视频的朋友，可以自己去看下，有些东西可能是需要看视频来自己体会的\n\n\n\n下面主要是来谈谈我的理解。\n\n\n\n情绪自由这个主题我认为还是挺有意思的，有句话说的好，既然我们都很难达到财富自由了，难道连情绪自由都要放弃吗？\n\n\n\n其实这个问题恒久存在，一直是在对我们自己的情绪进行限制，尤其是我们中国人，饱受传统思想的熏陶，经常性的压抑自己的情绪，比如说在家庭中，父母看起来总是很坚强，似乎没有见过父母哭的样子，或者说是父母不想把自己脆弱的一面留给孩子。\n\n\n\n## 母亲的哭泣\n\n\n\n写到这里，突然想起来了，我似乎见过我母亲哭泣的样子，如果我记忆没有错的话，应该还是我把我的母亲弄哭的。\n\n\n\n> 本来想写，我妈的，但是感觉太过口语化，于是改成了母亲\n\n\n\n在我记忆不太清晰的样子中，似乎是在我初中回家的一个下午，我当时饥肠辘辘的回到家中，急忙需要食物来填满我的肚子，但是我的母亲，不太记得是因为什么原因了，没有做我想吃的饭，又或者是根本没有做饭，在我请求了我的母亲很长的时间之后，她还是不去为我做饭。\n\n\n\n而我直到现在都还清晰的记得，那时的我，经历了饿的不同阶段，一开始是有点饿，慢慢越来越饿，直到这个饿的感觉达到一个顶峰，那个顶峰是真的难受，确实是有种饿到肚子疼的感觉，而那个时候，我的饭还迟迟没有着落，我也只能硬生生扛过那个时间，过了那个顶峰之后，慢慢的就越来越感觉到，似乎自己没有那么饿了。\n\n\n\n当我终于辛苦的扛过自己的最饿的时候，我的母亲又过了一会才做好饭，端上来给我，而那个时候的我傲娇的很，由于自己比较恨母亲没有早点做好饭，于是就一直在拒绝母亲的喂饭，我已经记不清楚母亲是喂了我自己饭，而当时的我却是一直在拒绝，可能是因为担心我没有吃饭饿着，又或者是因为其他，那是我人生中第一次看到我的母亲在我的面前流泪了，我突然就慌了，不知道该如何自处，只是记得我最后好像流着泪吃完了那个饭，记忆非常的深刻。\n\n\n\n>  这段母亲的哭泣，是在写文章的时候，临时起意，希望大家不要介意。\n\n\n\n## 正文\n\n\n\n情绪自由，我认为对于很多人还是有思考的意义的，比如说我自己吧，由于小的时候，不知道因为一次什么原因，就给自己定了一个小的目标，就是以后不再哭泣。当时可能是觉得哭没有用吧，所以就不想要自己遇到事情再哭了，那并不能解决问题啊。虽然是不知道什么时候制定的目标，但是我自己回想过去的几年中，似乎确实不太有哭泣，不知道是不会了，还是说已经习惯了这种没有哭泣的生活。说起来，还有点小悲伤，一个正常的人竟然不会哭泣了，哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈。我仔细的回想，发现我好像虽然不会因为生活中的事情而哭泣了，但是不知道是因为年龄大了(但是一想，我97年，今天2021年，算一下也就24岁)，变得更加感性了，还是说其他什么原因，我竟然有一次看的一个动作戏哭了，真是发现自己确实比以前感性了，看待事情也确实比以前更加柔和了，不知道这是好是坏。\n\n\n\n> 从那个时候，貌似我给自己的座右铭就定位了，用微笑面对生活\n\n\n\n我对于情绪自由的理解其实很简单，就是接纳我们自己，接纳自己的这些正常的情绪，如果你可以允许自己笑，当然也可以允许自己哭泣，这都是我们身为一个正常的人类所拥有的一个正常的反应。\n\n\n\n说起来很简单，接纳我们自己的情绪，但是我们常常因为社会的环境，或者我们的传统思想而不自觉地去限制自己的情绪，这是需要我们意识到的，慢慢的来学会接纳自己，学会释放自己的情绪，而不是过分的压抑。\n\n\n\n### 朋友\n\n\n\n有一个非常经典的俗语是“爱笑的女孩运气都不会太差”，这个我是听过非常多次了，本来以为就是觉得大家都喜欢爱笑的女孩，但是看了今天的视频才知道，原来这也有另外一层意思啊，就是说爱哭的女孩运气比较差喽，我也是醉了，在如今思想解放的今天，女性的思想也越来越开放，这本应该是一个好的事情，但是什么事情都有一个度，这个度没有把握好，就出现了所谓的女权了。来继续爱笑的女孩这个话题，在朋友的关系中，我们可以喜欢看到女孩的笑容，但是不应该去强迫女孩露出笑容，这其实干涉到了女孩的情绪自由，比较过分，而且当女孩意识过来的时候，可能已经没有做朋友了，因为她不想再压抑自己的情绪了。\n\n\n\n### 父母\n\n\n\n按照我们中国传统思想来说，作为子女的我们，都是认为父母已经为我们操心的很多了，当我们长大的时候，遇到困难或者说是困难的时候，总是喜欢报喜不报忧。不想要将自己的压力转移到父母的身上，而且他们可能对于这个问题的解决也并不能提供什么帮助。这种情况怎么说那，比较复杂，请听我分析一下。\n\n\n\n这种情况对于我们子女自身而言，一方面不用给父母增加压力，报的都是开心的事儿，但是父母也不是傻子，不会那么容易就相信你生活中不会遇到什么困境，只是觉得你不给他们分享，另一方面，这种压力过大的时候，你自己可能控制不住，无意间泄漏或者父母从你的举止行为间看出来了，但是这种时候，父母通常都会问一下，你要真是不说，父母也没办法，其实我感觉遇到这种情况，讲一下，比较好，有句俗话话说的好，堵不如疏，将事情将讲清楚之后，父母才没有那么担心，虽然他们可能并不能提供一些具体的解决办法。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"情绪自由","published":1,"updated":"2025-03-02T03:37:34.426Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp590052n0uk5yy7d5if","content":"<p>主要是来聊一下我对于情绪自由的看法。</p>\n<span id=\"more\"></span>\n\n\n\n<h1 id=\"今日唠叨\"><a href=\"#今日唠叨\" class=\"headerlink\" title=\"今日唠叨\"></a>今日唠叨</h1><p> 今天是周六，无聊的我又在家自己待了一天，三餐外卖，说是要学习spring源码的，但是总是看了一小会，就去看视频了，看看b站，看看LPL比赛，看看向往的生活，看看爱奇艺的自制节目《姐妹俱乐部》。    </p>\n<p> 其实我感觉我和其他的男生有点不太一样，因为他们好像是都不太喜欢综艺节目，我还是比较喜欢综艺节目的，比如我最喜欢的一些语言类节目《脱口秀大会》、《奇葩说》、《吐槽大会》等。    </p>\n<p> 这个《姐妹俱乐部》是我最近追的综艺之一，主要就是来讲述一些关于女性在生活中的困境的。从节目的名字来讲，明显是针对于女性用户来开放的，但是也并没有限制男性观众观看，一开始时出于好奇心，看到这个节目，后来发现，挺有意思的，小小小小情景剧一些场景非常的夸张，最后也可以有一个小小的思考，于是我就开始追这个综艺了，几乎每期都看。</p>\n<h1 id=\"主要内容\"><a href=\"#主要内容\" class=\"headerlink\" title=\"主要内容\"></a>主要内容</h1><p>这周是第七期，讲的主题是“她的笑，她的哭”，注意了，朋友们，女字旁的她，强调女性，内容主要还是以三位老板为主，讲解了在生活中一些想要自由的哭和笑的时候，却遭到了他人的阻拦，或者说在这个社会 的压力或者这个场景的压力下，而不得不压抑自己的情绪。</p>\n<blockquote>\n<p>如果想要了解这个视频的朋友，可以自己去看下，有些东西可能是需要看视频来自己体会的</p>\n</blockquote>\n<p>下面主要是来谈谈我的理解。</p>\n<p>情绪自由这个主题我认为还是挺有意思的，有句话说的好，既然我们都很难达到财富自由了，难道连情绪自由都要放弃吗？</p>\n<p>其实这个问题恒久存在，一直是在对我们自己的情绪进行限制，尤其是我们中国人，饱受传统思想的熏陶，经常性的压抑自己的情绪，比如说在家庭中，父母看起来总是很坚强，似乎没有见过父母哭的样子，或者说是父母不想把自己脆弱的一面留给孩子。</p>\n<h2 id=\"母亲的哭泣\"><a href=\"#母亲的哭泣\" class=\"headerlink\" title=\"母亲的哭泣\"></a>母亲的哭泣</h2><p>写到这里，突然想起来了，我似乎见过我母亲哭泣的样子，如果我记忆没有错的话，应该还是我把我的母亲弄哭的。</p>\n<blockquote>\n<p>本来想写，我妈的，但是感觉太过口语化，于是改成了母亲</p>\n</blockquote>\n<p>在我记忆不太清晰的样子中，似乎是在我初中回家的一个下午，我当时饥肠辘辘的回到家中，急忙需要食物来填满我的肚子，但是我的母亲，不太记得是因为什么原因了，没有做我想吃的饭，又或者是根本没有做饭，在我请求了我的母亲很长的时间之后，她还是不去为我做饭。</p>\n<p>而我直到现在都还清晰的记得，那时的我，经历了饿的不同阶段，一开始是有点饿，慢慢越来越饿，直到这个饿的感觉达到一个顶峰，那个顶峰是真的难受，确实是有种饿到肚子疼的感觉，而那个时候，我的饭还迟迟没有着落，我也只能硬生生扛过那个时间，过了那个顶峰之后，慢慢的就越来越感觉到，似乎自己没有那么饿了。</p>\n<p>当我终于辛苦的扛过自己的最饿的时候，我的母亲又过了一会才做好饭，端上来给我，而那个时候的我傲娇的很，由于自己比较恨母亲没有早点做好饭，于是就一直在拒绝母亲的喂饭，我已经记不清楚母亲是喂了我自己饭，而当时的我却是一直在拒绝，可能是因为担心我没有吃饭饿着，又或者是因为其他，那是我人生中第一次看到我的母亲在我的面前流泪了，我突然就慌了，不知道该如何自处，只是记得我最后好像流着泪吃完了那个饭，记忆非常的深刻。</p>\n<blockquote>\n<p> 这段母亲的哭泣，是在写文章的时候，临时起意，希望大家不要介意。</p>\n</blockquote>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>情绪自由，我认为对于很多人还是有思考的意义的，比如说我自己吧，由于小的时候，不知道因为一次什么原因，就给自己定了一个小的目标，就是以后不再哭泣。当时可能是觉得哭没有用吧，所以就不想要自己遇到事情再哭了，那并不能解决问题啊。虽然是不知道什么时候制定的目标，但是我自己回想过去的几年中，似乎确实不太有哭泣，不知道是不会了，还是说已经习惯了这种没有哭泣的生活。说起来，还有点小悲伤，一个正常的人竟然不会哭泣了，哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈。我仔细的回想，发现我好像虽然不会因为生活中的事情而哭泣了，但是不知道是因为年龄大了(但是一想，我97年，今天2021年，算一下也就24岁)，变得更加感性了，还是说其他什么原因，我竟然有一次看的一个动作戏哭了，真是发现自己确实比以前感性了，看待事情也确实比以前更加柔和了，不知道这是好是坏。</p>\n<blockquote>\n<p>从那个时候，貌似我给自己的座右铭就定位了，用微笑面对生活</p>\n</blockquote>\n<p>我对于情绪自由的理解其实很简单，就是接纳我们自己，接纳自己的这些正常的情绪，如果你可以允许自己笑，当然也可以允许自己哭泣，这都是我们身为一个正常的人类所拥有的一个正常的反应。</p>\n<p>说起来很简单，接纳我们自己的情绪，但是我们常常因为社会的环境，或者我们的传统思想而不自觉地去限制自己的情绪，这是需要我们意识到的，慢慢的来学会接纳自己，学会释放自己的情绪，而不是过分的压抑。</p>\n<h3 id=\"朋友\"><a href=\"#朋友\" class=\"headerlink\" title=\"朋友\"></a>朋友</h3><p>有一个非常经典的俗语是“爱笑的女孩运气都不会太差”，这个我是听过非常多次了，本来以为就是觉得大家都喜欢爱笑的女孩，但是看了今天的视频才知道，原来这也有另外一层意思啊，就是说爱哭的女孩运气比较差喽，我也是醉了，在如今思想解放的今天，女性的思想也越来越开放，这本应该是一个好的事情，但是什么事情都有一个度，这个度没有把握好，就出现了所谓的女权了。来继续爱笑的女孩这个话题，在朋友的关系中，我们可以喜欢看到女孩的笑容，但是不应该去强迫女孩露出笑容，这其实干涉到了女孩的情绪自由，比较过分，而且当女孩意识过来的时候，可能已经没有做朋友了，因为她不想再压抑自己的情绪了。</p>\n<h3 id=\"父母\"><a href=\"#父母\" class=\"headerlink\" title=\"父母\"></a>父母</h3><p>按照我们中国传统思想来说，作为子女的我们，都是认为父母已经为我们操心的很多了，当我们长大的时候，遇到困难或者说是困难的时候，总是喜欢报喜不报忧。不想要将自己的压力转移到父母的身上，而且他们可能对于这个问题的解决也并不能提供什么帮助。这种情况怎么说那，比较复杂，请听我分析一下。</p>\n<p>这种情况对于我们子女自身而言，一方面不用给父母增加压力，报的都是开心的事儿，但是父母也不是傻子，不会那么容易就相信你生活中不会遇到什么困境，只是觉得你不给他们分享，另一方面，这种压力过大的时候，你自己可能控制不住，无意间泄漏或者父母从你的举止行为间看出来了，但是这种时候，父母通常都会问一下，你要真是不说，父母也没办法，其实我感觉遇到这种情况，讲一下，比较好，有句俗话话说的好，堵不如疏，将事情将讲清楚之后，父母才没有那么担心，虽然他们可能并不能提供一些具体的解决办法。</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"主要是来聊一下我对于情绪自由的看法。\n\n今日唠叨\n 今天是周六，无聊的我又在家自己待了一天，三餐外卖，说是要学习spring源码的，但是总是看了一小会，就去看视频了，看看b站，看看LPL比赛，看看向往的生活，看看爱奇艺的自制节目《姐妹俱乐部》。 \n\n 其实我感觉我和其他的男生有点不太一样，因为他们好像是都不太喜欢综艺节目，我还是比较喜欢综艺节目的，比如我最喜欢的一些语言类节目《脱口秀大会》、《奇葩说》、《吐槽大会》等。 \n\n 这个《姐妹俱乐部》是我最近追的综艺之一，主要就是来讲述一些关于女性在生活中的困境的。从节目的名字来讲，明显是针对于女性用户来开放的，但是也并没有限制男性观众观看，一开始时","more":"<h1 id=\"今日唠叨\"><a href=\"#今日唠叨\" class=\"headerlink\" title=\"今日唠叨\"></a>今日唠叨</h1><p> 今天是周六，无聊的我又在家自己待了一天，三餐外卖，说是要学习spring源码的，但是总是看了一小会，就去看视频了，看看b站，看看LPL比赛，看看向往的生活，看看爱奇艺的自制节目《姐妹俱乐部》。    </p>\n<p> 其实我感觉我和其他的男生有点不太一样，因为他们好像是都不太喜欢综艺节目，我还是比较喜欢综艺节目的，比如我最喜欢的一些语言类节目《脱口秀大会》、《奇葩说》、《吐槽大会》等。    </p>\n<p> 这个《姐妹俱乐部》是我最近追的综艺之一，主要就是来讲述一些关于女性在生活中的困境的。从节目的名字来讲，明显是针对于女性用户来开放的，但是也并没有限制男性观众观看，一开始时出于好奇心，看到这个节目，后来发现，挺有意思的，小小小小情景剧一些场景非常的夸张，最后也可以有一个小小的思考，于是我就开始追这个综艺了，几乎每期都看。</p>\n<h1 id=\"主要内容\"><a href=\"#主要内容\" class=\"headerlink\" title=\"主要内容\"></a>主要内容</h1><p>这周是第七期，讲的主题是“她的笑，她的哭”，注意了，朋友们，女字旁的她，强调女性，内容主要还是以三位老板为主，讲解了在生活中一些想要自由的哭和笑的时候，却遭到了他人的阻拦，或者说在这个社会 的压力或者这个场景的压力下，而不得不压抑自己的情绪。</p>\n<blockquote>\n<p>如果想要了解这个视频的朋友，可以自己去看下，有些东西可能是需要看视频来自己体会的</p>\n</blockquote>\n<p>下面主要是来谈谈我的理解。</p>\n<p>情绪自由这个主题我认为还是挺有意思的，有句话说的好，既然我们都很难达到财富自由了，难道连情绪自由都要放弃吗？</p>\n<p>其实这个问题恒久存在，一直是在对我们自己的情绪进行限制，尤其是我们中国人，饱受传统思想的熏陶，经常性的压抑自己的情绪，比如说在家庭中，父母看起来总是很坚强，似乎没有见过父母哭的样子，或者说是父母不想把自己脆弱的一面留给孩子。</p>\n<h2 id=\"母亲的哭泣\"><a href=\"#母亲的哭泣\" class=\"headerlink\" title=\"母亲的哭泣\"></a>母亲的哭泣</h2><p>写到这里，突然想起来了，我似乎见过我母亲哭泣的样子，如果我记忆没有错的话，应该还是我把我的母亲弄哭的。</p>\n<blockquote>\n<p>本来想写，我妈的，但是感觉太过口语化，于是改成了母亲</p>\n</blockquote>\n<p>在我记忆不太清晰的样子中，似乎是在我初中回家的一个下午，我当时饥肠辘辘的回到家中，急忙需要食物来填满我的肚子，但是我的母亲，不太记得是因为什么原因了，没有做我想吃的饭，又或者是根本没有做饭，在我请求了我的母亲很长的时间之后，她还是不去为我做饭。</p>\n<p>而我直到现在都还清晰的记得，那时的我，经历了饿的不同阶段，一开始是有点饿，慢慢越来越饿，直到这个饿的感觉达到一个顶峰，那个顶峰是真的难受，确实是有种饿到肚子疼的感觉，而那个时候，我的饭还迟迟没有着落，我也只能硬生生扛过那个时间，过了那个顶峰之后，慢慢的就越来越感觉到，似乎自己没有那么饿了。</p>\n<p>当我终于辛苦的扛过自己的最饿的时候，我的母亲又过了一会才做好饭，端上来给我，而那个时候的我傲娇的很，由于自己比较恨母亲没有早点做好饭，于是就一直在拒绝母亲的喂饭，我已经记不清楚母亲是喂了我自己饭，而当时的我却是一直在拒绝，可能是因为担心我没有吃饭饿着，又或者是因为其他，那是我人生中第一次看到我的母亲在我的面前流泪了，我突然就慌了，不知道该如何自处，只是记得我最后好像流着泪吃完了那个饭，记忆非常的深刻。</p>\n<blockquote>\n<p> 这段母亲的哭泣，是在写文章的时候，临时起意，希望大家不要介意。</p>\n</blockquote>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>情绪自由，我认为对于很多人还是有思考的意义的，比如说我自己吧，由于小的时候，不知道因为一次什么原因，就给自己定了一个小的目标，就是以后不再哭泣。当时可能是觉得哭没有用吧，所以就不想要自己遇到事情再哭了，那并不能解决问题啊。虽然是不知道什么时候制定的目标，但是我自己回想过去的几年中，似乎确实不太有哭泣，不知道是不会了，还是说已经习惯了这种没有哭泣的生活。说起来，还有点小悲伤，一个正常的人竟然不会哭泣了，哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈。我仔细的回想，发现我好像虽然不会因为生活中的事情而哭泣了，但是不知道是因为年龄大了(但是一想，我97年，今天2021年，算一下也就24岁)，变得更加感性了，还是说其他什么原因，我竟然有一次看的一个动作戏哭了，真是发现自己确实比以前感性了，看待事情也确实比以前更加柔和了，不知道这是好是坏。</p>\n<blockquote>\n<p>从那个时候，貌似我给自己的座右铭就定位了，用微笑面对生活</p>\n</blockquote>\n<p>我对于情绪自由的理解其实很简单，就是接纳我们自己，接纳自己的这些正常的情绪，如果你可以允许自己笑，当然也可以允许自己哭泣，这都是我们身为一个正常的人类所拥有的一个正常的反应。</p>\n<p>说起来很简单，接纳我们自己的情绪，但是我们常常因为社会的环境，或者我们的传统思想而不自觉地去限制自己的情绪，这是需要我们意识到的，慢慢的来学会接纳自己，学会释放自己的情绪，而不是过分的压抑。</p>\n<h3 id=\"朋友\"><a href=\"#朋友\" class=\"headerlink\" title=\"朋友\"></a>朋友</h3><p>有一个非常经典的俗语是“爱笑的女孩运气都不会太差”，这个我是听过非常多次了，本来以为就是觉得大家都喜欢爱笑的女孩，但是看了今天的视频才知道，原来这也有另外一层意思啊，就是说爱哭的女孩运气比较差喽，我也是醉了，在如今思想解放的今天，女性的思想也越来越开放，这本应该是一个好的事情，但是什么事情都有一个度，这个度没有把握好，就出现了所谓的女权了。来继续爱笑的女孩这个话题，在朋友的关系中，我们可以喜欢看到女孩的笑容，但是不应该去强迫女孩露出笑容，这其实干涉到了女孩的情绪自由，比较过分，而且当女孩意识过来的时候，可能已经没有做朋友了，因为她不想再压抑自己的情绪了。</p>\n<h3 id=\"父母\"><a href=\"#父母\" class=\"headerlink\" title=\"父母\"></a>父母</h3><p>按照我们中国传统思想来说，作为子女的我们，都是认为父母已经为我们操心的很多了，当我们长大的时候，遇到困难或者说是困难的时候，总是喜欢报喜不报忧。不想要将自己的压力转移到父母的身上，而且他们可能对于这个问题的解决也并不能提供什么帮助。这种情况怎么说那，比较复杂，请听我分析一下。</p>\n<p>这种情况对于我们子女自身而言，一方面不用给父母增加压力，报的都是开心的事儿，但是父母也不是傻子，不会那么容易就相信你生活中不会遇到什么困境，只是觉得你不给他们分享，另一方面，这种压力过大的时候，你自己可能控制不住，无意间泄漏或者父母从你的举止行为间看出来了，但是这种时候，父母通常都会问一下，你要真是不说，父母也没办法，其实我感觉遇到这种情况，讲一下，比较好，有句俗话话说的好，堵不如疏，将事情将讲清楚之后，父母才没有那么担心，虽然他们可能并不能提供一些具体的解决办法。</p>"},{"title":"我的人生目标","description":"","abbrlink":"5b9d67ab","date":"2024-03-05T16:00:00.000Z","_content":"\n\n昨天和一个创业公司的老板聊了聊，发现自己需要努力的地方还有很多，以下就是我认为自己需要改进的地方。\n\n\n\n1. 人生目标。这是一个非常宏大的话题，对于这个问题，我确实回答的不好，因为我自己确实没有想清楚自己到底要成为什么样子的人，这个问题说来话长了，如果要是在童年的时候问我，我那个时候想自己成为一个科学家，开发一些对人类有价值的东西，我相信在那个年代，大部分孩子也都是这样想的。然而随着慢慢长大，经历过社会的毒打之后，可能大部分都了解或者说对于自己能力的局限有了一些认知，于是慢慢的就是得过且过，没有自己的远大目标，因为可能只是面对生存，他们都已经耗尽全力了。当然如果你非要仔细扣，那肯定是因为他们没有去仔细思考自己的职业发展了。\n\n\n\n   在前两年，刚知道陈皓的时候，想的是成为他那样的人，做一个在技术领域有所贡献的人，但是不幸的是他突发噩耗，突然就离开了人世。我也突然意识到，我们的生命和健康本来就很脆弱，时间也很短，那我到底做些什么那？昨天我这个问题又再次在我的脑海中不停的浮现。不知道为啥，我喜欢帮助他人，喜欢帮助他人解决技术问题，帮助他人似乎让我更加有精神，更加有动力，也有可能是为了证明我自己有用吧，无论如何，还是喜欢帮助他人。所以还是想做一款自己的产品，能够帮助他人的产品。\n\n\n\n2. 职业发展。在第一个人生目标没有想清楚的时候，职业发展就更是模糊不清了。只是说单纯想要一直想要敲代码，但是人在国内，也知道这大概率不太可能。如果到了35岁，还没有升到管理岗位，那其实最后也只能被市场淘汰了。当然你技术特别牛皮的除外。\n\n\n\n3. 读书。在过去的几年中，我虽然也断断续续的看书，但是并没有将自己学到的知识总结下来，也没有坚持一年看十几本书之类的，还是忽略了自己的长期发展，对于个人来说，确实读书是一个比较好的方式来提高自己。同时也要慢慢的限制自己刷短视频的时间了，这种即使信息大部分都是看完就完了，是一种消磨时间的好方式。张一鸣知道延迟满足的重要性，知道延迟满足的困难，但是却做出来一款非常满足人类的即使满足的产品。从某个角度而言，他似乎在阻挡人们前进的脚步，但是从另外一个角度说，这些人不在玩抖音就在玩其他及时满足的产品，似乎也不太会有什么改变。\n\n\n\n4. 创业。在之前我从来都不敢有自己创业的想法，直到和他交流完毕之后，打破了自己的认知，其实每个人都可以创业。尤其是程序员。你只需要简单的一个小团队，在你摸清楚用户需求之后，就可以开始了。\n","source":"_posts/我的人生目标.md","raw":"---\ntitle: 我的人生目标\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 5b9d67ab\ndate: 2024-03-06 00:00:00\n---\n\n\n昨天和一个创业公司的老板聊了聊，发现自己需要努力的地方还有很多，以下就是我认为自己需要改进的地方。\n\n\n\n1. 人生目标。这是一个非常宏大的话题，对于这个问题，我确实回答的不好，因为我自己确实没有想清楚自己到底要成为什么样子的人，这个问题说来话长了，如果要是在童年的时候问我，我那个时候想自己成为一个科学家，开发一些对人类有价值的东西，我相信在那个年代，大部分孩子也都是这样想的。然而随着慢慢长大，经历过社会的毒打之后，可能大部分都了解或者说对于自己能力的局限有了一些认知，于是慢慢的就是得过且过，没有自己的远大目标，因为可能只是面对生存，他们都已经耗尽全力了。当然如果你非要仔细扣，那肯定是因为他们没有去仔细思考自己的职业发展了。\n\n\n\n   在前两年，刚知道陈皓的时候，想的是成为他那样的人，做一个在技术领域有所贡献的人，但是不幸的是他突发噩耗，突然就离开了人世。我也突然意识到，我们的生命和健康本来就很脆弱，时间也很短，那我到底做些什么那？昨天我这个问题又再次在我的脑海中不停的浮现。不知道为啥，我喜欢帮助他人，喜欢帮助他人解决技术问题，帮助他人似乎让我更加有精神，更加有动力，也有可能是为了证明我自己有用吧，无论如何，还是喜欢帮助他人。所以还是想做一款自己的产品，能够帮助他人的产品。\n\n\n\n2. 职业发展。在第一个人生目标没有想清楚的时候，职业发展就更是模糊不清了。只是说单纯想要一直想要敲代码，但是人在国内，也知道这大概率不太可能。如果到了35岁，还没有升到管理岗位，那其实最后也只能被市场淘汰了。当然你技术特别牛皮的除外。\n\n\n\n3. 读书。在过去的几年中，我虽然也断断续续的看书，但是并没有将自己学到的知识总结下来，也没有坚持一年看十几本书之类的，还是忽略了自己的长期发展，对于个人来说，确实读书是一个比较好的方式来提高自己。同时也要慢慢的限制自己刷短视频的时间了，这种即使信息大部分都是看完就完了，是一种消磨时间的好方式。张一鸣知道延迟满足的重要性，知道延迟满足的困难，但是却做出来一款非常满足人类的即使满足的产品。从某个角度而言，他似乎在阻挡人们前进的脚步，但是从另外一个角度说，这些人不在玩抖音就在玩其他及时满足的产品，似乎也不太会有什么改变。\n\n\n\n4. 创业。在之前我从来都不敢有自己创业的想法，直到和他交流完毕之后，打破了自己的认知，其实每个人都可以创业。尤其是程序员。你只需要简单的一个小团队，在你摸清楚用户需求之后，就可以开始了。\n","slug":"我的人生目标","published":1,"updated":"2025-03-02T03:37:34.426Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp590054n0ukbu3fbiry","content":"<p>昨天和一个创业公司的老板聊了聊，发现自己需要努力的地方还有很多，以下就是我认为自己需要改进的地方。</p>\n<ol>\n<li><p>人生目标。这是一个非常宏大的话题，对于这个问题，我确实回答的不好，因为我自己确实没有想清楚自己到底要成为什么样子的人，这个问题说来话长了，如果要是在童年的时候问我，我那个时候想自己成为一个科学家，开发一些对人类有价值的东西，我相信在那个年代，大部分孩子也都是这样想的。然而随着慢慢长大，经历过社会的毒打之后，可能大部分都了解或者说对于自己能力的局限有了一些认知，于是慢慢的就是得过且过，没有自己的远大目标，因为可能只是面对生存，他们都已经耗尽全力了。当然如果你非要仔细扣，那肯定是因为他们没有去仔细思考自己的职业发展了。</p>\n<p>在前两年，刚知道陈皓的时候，想的是成为他那样的人，做一个在技术领域有所贡献的人，但是不幸的是他突发噩耗，突然就离开了人世。我也突然意识到，我们的生命和健康本来就很脆弱，时间也很短，那我到底做些什么那？昨天我这个问题又再次在我的脑海中不停的浮现。不知道为啥，我喜欢帮助他人，喜欢帮助他人解决技术问题，帮助他人似乎让我更加有精神，更加有动力，也有可能是为了证明我自己有用吧，无论如何，还是喜欢帮助他人。所以还是想做一款自己的产品，能够帮助他人的产品。</p>\n</li>\n<li><p>职业发展。在第一个人生目标没有想清楚的时候，职业发展就更是模糊不清了。只是说单纯想要一直想要敲代码，但是人在国内，也知道这大概率不太可能。如果到了35岁，还没有升到管理岗位，那其实最后也只能被市场淘汰了。当然你技术特别牛皮的除外。</p>\n</li>\n<li><p>读书。在过去的几年中，我虽然也断断续续的看书，但是并没有将自己学到的知识总结下来，也没有坚持一年看十几本书之类的，还是忽略了自己的长期发展，对于个人来说，确实读书是一个比较好的方式来提高自己。同时也要慢慢的限制自己刷短视频的时间了，这种即使信息大部分都是看完就完了，是一种消磨时间的好方式。张一鸣知道延迟满足的重要性，知道延迟满足的困难，但是却做出来一款非常满足人类的即使满足的产品。从某个角度而言，他似乎在阻挡人们前进的脚步，但是从另外一个角度说，这些人不在玩抖音就在玩其他及时满足的产品，似乎也不太会有什么改变。</p>\n</li>\n<li><p>创业。在之前我从来都不敢有自己创业的想法，直到和他交流完毕之后，打破了自己的认知，其实每个人都可以创业。尤其是程序员。你只需要简单的一个小团队，在你摸清楚用户需求之后，就可以开始了。</p>\n</li>\n</ol>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"昨天和一个创业公司的老板聊了聊，发现自己需要努力的地方还有很多，以下就是我认为自己需要改进的地方。\n\n 1. 人生目标。这是一个非常宏大的话题，对于这个问题，我确实回答的不好，因为我自己确实没有想清楚自己到底要成为什么样子的人，这个问题说来话长了，如果要是在童年的时候问我，我那个时候想自己成为一个科学家，开发一些对人类有价值的东西，我相信在那个年代，大部分孩子也都是这样想的。然而随着慢慢长大，经历过社会的毒打之后，可能大部分都了解或者说对于自己能力的局限有了一些认知，于是慢慢的就是得过且过，没有自己的远大目标，因为可能只是面对生存，他们都已经耗尽全力了。当然如果你非要仔细扣，那肯定是因为他们没","more":"<p>昨天和一个创业公司的老板聊了聊，发现自己需要努力的地方还有很多，以下就是我认为自己需要改进的地方。</p>\n<ol>\n<li><p>人生目标。这是一个非常宏大的话题，对于这个问题，我确实回答的不好，因为我自己确实没有想清楚自己到底要成为什么样子的人，这个问题说来话长了，如果要是在童年的时候问我，我那个时候想自己成为一个科学家，开发一些对人类有价值的东西，我相信在那个年代，大部分孩子也都是这样想的。然而随着慢慢长大，经历过社会的毒打之后，可能大部分都了解或者说对于自己能力的局限有了一些认知，于是慢慢的就是得过且过，没有自己的远大目标，因为可能只是面对生存，他们都已经耗尽全力了。当然如果你非要仔细扣，那肯定是因为他们没有去仔细思考自己的职业发展了。</p>\n<p>在前两年，刚知道陈皓的时候，想的是成为他那样的人，做一个在技术领域有所贡献的人，但是不幸的是他突发噩耗，突然就离开了人世。我也突然意识到，我们的生命和健康本来就很脆弱，时间也很短，那我到底做些什么那？昨天我这个问题又再次在我的脑海中不停的浮现。不知道为啥，我喜欢帮助他人，喜欢帮助他人解决技术问题，帮助他人似乎让我更加有精神，更加有动力，也有可能是为了证明我自己有用吧，无论如何，还是喜欢帮助他人。所以还是想做一款自己的产品，能够帮助他人的产品。</p>\n</li>\n<li><p>职业发展。在第一个人生目标没有想清楚的时候，职业发展就更是模糊不清了。只是说单纯想要一直想要敲代码，但是人在国内，也知道这大概率不太可能。如果到了35岁，还没有升到管理岗位，那其实最后也只能被市场淘汰了。当然你技术特别牛皮的除外。</p>\n</li>\n<li><p>读书。在过去的几年中，我虽然也断断续续的看书，但是并没有将自己学到的知识总结下来，也没有坚持一年看十几本书之类的，还是忽略了自己的长期发展，对于个人来说，确实读书是一个比较好的方式来提高自己。同时也要慢慢的限制自己刷短视频的时间了，这种即使信息大部分都是看完就完了，是一种消磨时间的好方式。张一鸣知道延迟满足的重要性，知道延迟满足的困难，但是却做出来一款非常满足人类的即使满足的产品。从某个角度而言，他似乎在阻挡人们前进的脚步，但是从另外一个角度说，这些人不在玩抖音就在玩其他及时满足的产品，似乎也不太会有什么改变。</p>\n</li>\n<li><p>创业。在之前我从来都不敢有自己创业的想法，直到和他交流完毕之后，打破了自己的认知，其实每个人都可以创业。尤其是程序员。你只需要简单的一个小团队，在你摸清楚用户需求之后，就可以开始了。</p>\n</li>\n</ol>\n"},{"title":"我的初恋","description":"","abbrlink":"ded0ca3b","date":"2021-08-13T16:00:00.000Z","_content":"\n\n我的初恋\n\n\n\n<!-- more -->\n\n\n\n谈起初恋，大家可能有很多想法，有很多人说，初恋总是让他们念念不忘，有句俗语说的好“念念不忘，必有回响”，但是如果是放在初恋这件事儿上，就不是很适合。\n\n大家可能会疑惑，你初恋就初恋，为什么要在上面加个双引号那？哈哈哈哈哈哈哈哈哈哈哈，不要着急，请往下看，看完这篇文章，你也许就知道是什么原因了。\n\n下面请大家跟着我的思绪一起飞到我的高中时代。\n\n我的高中，是在我们市的排名第二个高中，虽然说是排名第二，但是它与第一的差距很大，排名第一的高中上个什么一本的人很多，甚至清华，北大都是有的，而我那个高中，可能只有排名非常靠前的人，可以考上所谓的一本。（当然你们这个时候，还分什么一本，二本，三本，我就不知道了）\n\n记得，我们俩的相遇是在我们的高一，我们俩去的是我们那个高中的所谓的实验班，实验班一共有两个班，我俩是在一个班，高中的我是一个胖胖的孩子，肥嘟嘟的脸可能比较招女孩喜欢吧 。我记得我们两个好像是因为排座位，坐到了一起，成为了同座，慢慢的，不知怎么的，她就开始摸我的脸了，一开始我还有些抵触，感觉有点像宠物，在被主人抚摸的感觉，后来慢慢的，就习惯了，而她也越来越喜欢摸我的脸，几乎每天都有吧。\n\n时间突然来到，大一的上学期的期末，那个时候由于马上要期末考试了，是要想要好好准备一下，我的成绩和她差不多，就一起约定比赛，看谁考的好。我是一个自我感觉良好的人，有时候感觉会了，但是并没有真正的搞懂，而她是一个认真且聪明的女孩，所以结局就是我没有他考的好，我俩也因为选择不同，去了不同的实验班，在我们那里一般都是男孩选择理科，女孩选择文科，我们两个也是这样的选择，我选择了理科，她选择了文科。\n\n高一的下学期，我们两个因为班级的不同，不是很经常接触，所以也不怎么联系，在我的记忆当中，是不知道为什么，她送了我一本高数的辅导书，我一开始以为就是一本普通的辅导书，没怎么在意，直到她找我要回那本辅导书的时候，我才发现，辅导书每页的下面都写着对我情话，但是我还是不明其意，直到有一天，她在qq上主动对我表白了，说她**喜欢我**，我当时惊呆了，非常心慌，不知道怎么办，那个时候木讷的我，虽然也知道谈恋爱的意思，但是自己没有体验过，所以不是很懂。记得当时自己可能不懂什么是喜欢，不知道怎么回应，当时的想法应该是，我不知道我喜不喜欢他，先试试，毕竟谁都会想要一份甜甜的恋爱那。\n\n从那之后，我就感觉自己变了，我开始每周用我为数不多的生活费来去我家小区对面的蛋糕店买蛋挞送给她，慢慢地觉得我们两个不在一个班级，没有机会见面聊天，于是就约定我们两个每天晚上下自习的时候一起回宿舍，我们的那个教学楼是一个U字型的，她就在我的对面，我在我这边的顶楼四楼，而她在对面一楼，我记得非常清楚的状态就是，有的时候非常想见到她，等不及晚自习下课，第一节晚仔细下课时候，我就会去外面围栏眺望对面，在漆黑的夜晚中，她仿佛就是我所能看见的光，期待着期待着她从班里出来，和我对视一下，那种想念我至今难忘，真的是思念到痛彻心扉，思念到肝肠寸断，也是那个时候，我才第一次明白，原来，思念也可以让人这么痛，即使距离非常近，我依旧是那么想她，想她出现在我的面前。也是那次痛彻心扉的痛，让我明白我也喜欢她，但却从未说出口。\n\n每天终于等到晚自习下课，急匆匆的跑下楼，去她班级外面的一个空旷地等她，等她的心情也是非常着急，总是希望自己下一个看到的就是她，尽管知道自己很快就可以见到她。见到她，一般都是用我的右手摸摸她的脸，然后一边聊着今天发生的日常，一边走着，一开始的时候，就还是沿着大多数学生固定走的道路会宿舍，后来感觉我们两个相处时间太短，就绕了一条比较远的路，希望我们独处的时间可以多一点。\n\n有时候晚自习我下来的比较晚，她也会等我，当她背对着我的时候，我也会冲上去抱着她给她一个惊喜，那个时候我与她最多的互动就是抱抱了，其实在两个人独处的时候，我也想要kiss，但是心里害怕，一直都没有鼓起勇气。\n\n我记忆尤深的还有高中的一个暑假，我一个当时那么木讷的人，不知道怎么和女孩聊天的人，居然那个暑假，每天晚上都要打两个小时的电话给她，每天美其名曰带着我弟去外面玩，其实就是找一个地方，让我弟自己玩，我在那边和她打电话，从一开始的不知道聊什么的，到后来的游刃有余，虽然两个小时不算短了，但是那个时候两个小时打完电话有时候都意犹未尽，现在回想起来都不知道聊的什么那么起劲。\n\n初恋之所以为初恋，就是因为它是我们人生中第一次感受恋爱，既然是恋爱，就必须要一个结局，我的这个“初恋”的结局是这样的。\n\n就和每一个寻常的夜晚一样，我下自习之后去找她，我不知道因为什么原因，下去的比较晚，我下去的时候，她在和一个男的纠缠在一起，说起来也有些可笑，我的好兄弟在社会上认识有人，说我们要不要打他，联系了之后，说那个男的也认识一些人，不好打， 可笑的是我那个时候不知道如何办，路上她也在和我解释，但是那个时候我却听不进去。后面不知道是因为这个事情还是什么，慢慢就关系淡了，慢慢就重新成为了陌路人。\n\n现在的我已经我高中毕业五年了，已经回忆不起具体的细节了，只是记得我似乎因为那个男的也认识一些人，不敢承担后果等等，最终不了了之，我以为我们还会回到从前那样，但是似乎是因为那个点，慢慢的就不在一起了。\n\n这段没有戳破却又悄然而逝的感情，曾经久久不能让我释怀，我可能在无数个深夜的时候回忆过那段美好的时光，我对它的遗憾，也不是因为我对于另一个男的时候的不作为，而是没有真正的对我的那个她说声，**我喜欢你**。\n\n这就是我的“初恋”。","source":"_posts/我的初恋.md","raw":"---\ntitle: 我的初恋\ndescription: ''\ntags:\n  - 无标签\nabbrlink: ded0ca3b\ndate: 2021-08-14 00:00:00\n---\n\n\n我的初恋\n\n\n\n<!-- more -->\n\n\n\n谈起初恋，大家可能有很多想法，有很多人说，初恋总是让他们念念不忘，有句俗语说的好“念念不忘，必有回响”，但是如果是放在初恋这件事儿上，就不是很适合。\n\n大家可能会疑惑，你初恋就初恋，为什么要在上面加个双引号那？哈哈哈哈哈哈哈哈哈哈哈，不要着急，请往下看，看完这篇文章，你也许就知道是什么原因了。\n\n下面请大家跟着我的思绪一起飞到我的高中时代。\n\n我的高中，是在我们市的排名第二个高中，虽然说是排名第二，但是它与第一的差距很大，排名第一的高中上个什么一本的人很多，甚至清华，北大都是有的，而我那个高中，可能只有排名非常靠前的人，可以考上所谓的一本。（当然你们这个时候，还分什么一本，二本，三本，我就不知道了）\n\n记得，我们俩的相遇是在我们的高一，我们俩去的是我们那个高中的所谓的实验班，实验班一共有两个班，我俩是在一个班，高中的我是一个胖胖的孩子，肥嘟嘟的脸可能比较招女孩喜欢吧 。我记得我们两个好像是因为排座位，坐到了一起，成为了同座，慢慢的，不知怎么的，她就开始摸我的脸了，一开始我还有些抵触，感觉有点像宠物，在被主人抚摸的感觉，后来慢慢的，就习惯了，而她也越来越喜欢摸我的脸，几乎每天都有吧。\n\n时间突然来到，大一的上学期的期末，那个时候由于马上要期末考试了，是要想要好好准备一下，我的成绩和她差不多，就一起约定比赛，看谁考的好。我是一个自我感觉良好的人，有时候感觉会了，但是并没有真正的搞懂，而她是一个认真且聪明的女孩，所以结局就是我没有他考的好，我俩也因为选择不同，去了不同的实验班，在我们那里一般都是男孩选择理科，女孩选择文科，我们两个也是这样的选择，我选择了理科，她选择了文科。\n\n高一的下学期，我们两个因为班级的不同，不是很经常接触，所以也不怎么联系，在我的记忆当中，是不知道为什么，她送了我一本高数的辅导书，我一开始以为就是一本普通的辅导书，没怎么在意，直到她找我要回那本辅导书的时候，我才发现，辅导书每页的下面都写着对我情话，但是我还是不明其意，直到有一天，她在qq上主动对我表白了，说她**喜欢我**，我当时惊呆了，非常心慌，不知道怎么办，那个时候木讷的我，虽然也知道谈恋爱的意思，但是自己没有体验过，所以不是很懂。记得当时自己可能不懂什么是喜欢，不知道怎么回应，当时的想法应该是，我不知道我喜不喜欢他，先试试，毕竟谁都会想要一份甜甜的恋爱那。\n\n从那之后，我就感觉自己变了，我开始每周用我为数不多的生活费来去我家小区对面的蛋糕店买蛋挞送给她，慢慢地觉得我们两个不在一个班级，没有机会见面聊天，于是就约定我们两个每天晚上下自习的时候一起回宿舍，我们的那个教学楼是一个U字型的，她就在我的对面，我在我这边的顶楼四楼，而她在对面一楼，我记得非常清楚的状态就是，有的时候非常想见到她，等不及晚自习下课，第一节晚仔细下课时候，我就会去外面围栏眺望对面，在漆黑的夜晚中，她仿佛就是我所能看见的光，期待着期待着她从班里出来，和我对视一下，那种想念我至今难忘，真的是思念到痛彻心扉，思念到肝肠寸断，也是那个时候，我才第一次明白，原来，思念也可以让人这么痛，即使距离非常近，我依旧是那么想她，想她出现在我的面前。也是那次痛彻心扉的痛，让我明白我也喜欢她，但却从未说出口。\n\n每天终于等到晚自习下课，急匆匆的跑下楼，去她班级外面的一个空旷地等她，等她的心情也是非常着急，总是希望自己下一个看到的就是她，尽管知道自己很快就可以见到她。见到她，一般都是用我的右手摸摸她的脸，然后一边聊着今天发生的日常，一边走着，一开始的时候，就还是沿着大多数学生固定走的道路会宿舍，后来感觉我们两个相处时间太短，就绕了一条比较远的路，希望我们独处的时间可以多一点。\n\n有时候晚自习我下来的比较晚，她也会等我，当她背对着我的时候，我也会冲上去抱着她给她一个惊喜，那个时候我与她最多的互动就是抱抱了，其实在两个人独处的时候，我也想要kiss，但是心里害怕，一直都没有鼓起勇气。\n\n我记忆尤深的还有高中的一个暑假，我一个当时那么木讷的人，不知道怎么和女孩聊天的人，居然那个暑假，每天晚上都要打两个小时的电话给她，每天美其名曰带着我弟去外面玩，其实就是找一个地方，让我弟自己玩，我在那边和她打电话，从一开始的不知道聊什么的，到后来的游刃有余，虽然两个小时不算短了，但是那个时候两个小时打完电话有时候都意犹未尽，现在回想起来都不知道聊的什么那么起劲。\n\n初恋之所以为初恋，就是因为它是我们人生中第一次感受恋爱，既然是恋爱，就必须要一个结局，我的这个“初恋”的结局是这样的。\n\n就和每一个寻常的夜晚一样，我下自习之后去找她，我不知道因为什么原因，下去的比较晚，我下去的时候，她在和一个男的纠缠在一起，说起来也有些可笑，我的好兄弟在社会上认识有人，说我们要不要打他，联系了之后，说那个男的也认识一些人，不好打， 可笑的是我那个时候不知道如何办，路上她也在和我解释，但是那个时候我却听不进去。后面不知道是因为这个事情还是什么，慢慢就关系淡了，慢慢就重新成为了陌路人。\n\n现在的我已经我高中毕业五年了，已经回忆不起具体的细节了，只是记得我似乎因为那个男的也认识一些人，不敢承担后果等等，最终不了了之，我以为我们还会回到从前那样，但是似乎是因为那个点，慢慢的就不在一起了。\n\n这段没有戳破却又悄然而逝的感情，曾经久久不能让我释怀，我可能在无数个深夜的时候回忆过那段美好的时光，我对它的遗憾，也不是因为我对于另一个男的时候的不作为，而是没有真正的对我的那个她说声，**我喜欢你**。\n\n这就是我的“初恋”。","slug":"我的初恋","published":1,"updated":"2025-03-02T03:37:34.427Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp5a0056n0ukbo588kc7","content":"<p>我的初恋</p>\n<span id=\"more\"></span>\n\n\n\n<p>谈起初恋，大家可能有很多想法，有很多人说，初恋总是让他们念念不忘，有句俗语说的好“念念不忘，必有回响”，但是如果是放在初恋这件事儿上，就不是很适合。</p>\n<p>大家可能会疑惑，你初恋就初恋，为什么要在上面加个双引号那？哈哈哈哈哈哈哈哈哈哈哈，不要着急，请往下看，看完这篇文章，你也许就知道是什么原因了。</p>\n<p>下面请大家跟着我的思绪一起飞到我的高中时代。</p>\n<p>我的高中，是在我们市的排名第二个高中，虽然说是排名第二，但是它与第一的差距很大，排名第一的高中上个什么一本的人很多，甚至清华，北大都是有的，而我那个高中，可能只有排名非常靠前的人，可以考上所谓的一本。（当然你们这个时候，还分什么一本，二本，三本，我就不知道了）</p>\n<p>记得，我们俩的相遇是在我们的高一，我们俩去的是我们那个高中的所谓的实验班，实验班一共有两个班，我俩是在一个班，高中的我是一个胖胖的孩子，肥嘟嘟的脸可能比较招女孩喜欢吧 。我记得我们两个好像是因为排座位，坐到了一起，成为了同座，慢慢的，不知怎么的，她就开始摸我的脸了，一开始我还有些抵触，感觉有点像宠物，在被主人抚摸的感觉，后来慢慢的，就习惯了，而她也越来越喜欢摸我的脸，几乎每天都有吧。</p>\n<p>时间突然来到，大一的上学期的期末，那个时候由于马上要期末考试了，是要想要好好准备一下，我的成绩和她差不多，就一起约定比赛，看谁考的好。我是一个自我感觉良好的人，有时候感觉会了，但是并没有真正的搞懂，而她是一个认真且聪明的女孩，所以结局就是我没有他考的好，我俩也因为选择不同，去了不同的实验班，在我们那里一般都是男孩选择理科，女孩选择文科，我们两个也是这样的选择，我选择了理科，她选择了文科。</p>\n<p>高一的下学期，我们两个因为班级的不同，不是很经常接触，所以也不怎么联系，在我的记忆当中，是不知道为什么，她送了我一本高数的辅导书，我一开始以为就是一本普通的辅导书，没怎么在意，直到她找我要回那本辅导书的时候，我才发现，辅导书每页的下面都写着对我情话，但是我还是不明其意，直到有一天，她在qq上主动对我表白了，说她<strong>喜欢我</strong>，我当时惊呆了，非常心慌，不知道怎么办，那个时候木讷的我，虽然也知道谈恋爱的意思，但是自己没有体验过，所以不是很懂。记得当时自己可能不懂什么是喜欢，不知道怎么回应，当时的想法应该是，我不知道我喜不喜欢他，先试试，毕竟谁都会想要一份甜甜的恋爱那。</p>\n<p>从那之后，我就感觉自己变了，我开始每周用我为数不多的生活费来去我家小区对面的蛋糕店买蛋挞送给她，慢慢地觉得我们两个不在一个班级，没有机会见面聊天，于是就约定我们两个每天晚上下自习的时候一起回宿舍，我们的那个教学楼是一个U字型的，她就在我的对面，我在我这边的顶楼四楼，而她在对面一楼，我记得非常清楚的状态就是，有的时候非常想见到她，等不及晚自习下课，第一节晚仔细下课时候，我就会去外面围栏眺望对面，在漆黑的夜晚中，她仿佛就是我所能看见的光，期待着期待着她从班里出来，和我对视一下，那种想念我至今难忘，真的是思念到痛彻心扉，思念到肝肠寸断，也是那个时候，我才第一次明白，原来，思念也可以让人这么痛，即使距离非常近，我依旧是那么想她，想她出现在我的面前。也是那次痛彻心扉的痛，让我明白我也喜欢她，但却从未说出口。</p>\n<p>每天终于等到晚自习下课，急匆匆的跑下楼，去她班级外面的一个空旷地等她，等她的心情也是非常着急，总是希望自己下一个看到的就是她，尽管知道自己很快就可以见到她。见到她，一般都是用我的右手摸摸她的脸，然后一边聊着今天发生的日常，一边走着，一开始的时候，就还是沿着大多数学生固定走的道路会宿舍，后来感觉我们两个相处时间太短，就绕了一条比较远的路，希望我们独处的时间可以多一点。</p>\n<p>有时候晚自习我下来的比较晚，她也会等我，当她背对着我的时候，我也会冲上去抱着她给她一个惊喜，那个时候我与她最多的互动就是抱抱了，其实在两个人独处的时候，我也想要kiss，但是心里害怕，一直都没有鼓起勇气。</p>\n<p>我记忆尤深的还有高中的一个暑假，我一个当时那么木讷的人，不知道怎么和女孩聊天的人，居然那个暑假，每天晚上都要打两个小时的电话给她，每天美其名曰带着我弟去外面玩，其实就是找一个地方，让我弟自己玩，我在那边和她打电话，从一开始的不知道聊什么的，到后来的游刃有余，虽然两个小时不算短了，但是那个时候两个小时打完电话有时候都意犹未尽，现在回想起来都不知道聊的什么那么起劲。</p>\n<p>初恋之所以为初恋，就是因为它是我们人生中第一次感受恋爱，既然是恋爱，就必须要一个结局，我的这个“初恋”的结局是这样的。</p>\n<p>就和每一个寻常的夜晚一样，我下自习之后去找她，我不知道因为什么原因，下去的比较晚，我下去的时候，她在和一个男的纠缠在一起，说起来也有些可笑，我的好兄弟在社会上认识有人，说我们要不要打他，联系了之后，说那个男的也认识一些人，不好打， 可笑的是我那个时候不知道如何办，路上她也在和我解释，但是那个时候我却听不进去。后面不知道是因为这个事情还是什么，慢慢就关系淡了，慢慢就重新成为了陌路人。</p>\n<p>现在的我已经我高中毕业五年了，已经回忆不起具体的细节了，只是记得我似乎因为那个男的也认识一些人，不敢承担后果等等，最终不了了之，我以为我们还会回到从前那样，但是似乎是因为那个点，慢慢的就不在一起了。</p>\n<p>这段没有戳破却又悄然而逝的感情，曾经久久不能让我释怀，我可能在无数个深夜的时候回忆过那段美好的时光，我对它的遗憾，也不是因为我对于另一个男的时候的不作为，而是没有真正的对我的那个她说声，<strong>我喜欢你</strong>。</p>\n<p>这就是我的“初恋”。</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"我的初恋\n\n谈起初恋，大家可能有很多想法，有很多人说，初恋总是让他们念念不忘，有句俗语说的好“念念不忘，必有回响”，但是如果是放在初恋这件事儿上，就不是很适合。\n\n大家可能会疑惑，你初恋就初恋，为什么要在上面加个双引号那？哈哈哈哈哈哈哈哈哈哈哈，不要着急，请往下看，看完这篇文章，你也许就知道是什么原因了。\n\n下面请大家跟着我的思绪一起飞到我的高中时代。\n\n我的高中，是在我们市的排名第二个高中，虽然说是排名第二，但是它与第一的差距很大，排名第一的高中上个什么一本的人很多，甚至清华，北大都是有的，而我那个高中，可能只有排名非常靠前的人，可以考上所谓的一本。（当然你们这个时候，还分什么一本，二本，三","more":"<p>谈起初恋，大家可能有很多想法，有很多人说，初恋总是让他们念念不忘，有句俗语说的好“念念不忘，必有回响”，但是如果是放在初恋这件事儿上，就不是很适合。</p>\n<p>大家可能会疑惑，你初恋就初恋，为什么要在上面加个双引号那？哈哈哈哈哈哈哈哈哈哈哈，不要着急，请往下看，看完这篇文章，你也许就知道是什么原因了。</p>\n<p>下面请大家跟着我的思绪一起飞到我的高中时代。</p>\n<p>我的高中，是在我们市的排名第二个高中，虽然说是排名第二，但是它与第一的差距很大，排名第一的高中上个什么一本的人很多，甚至清华，北大都是有的，而我那个高中，可能只有排名非常靠前的人，可以考上所谓的一本。（当然你们这个时候，还分什么一本，二本，三本，我就不知道了）</p>\n<p>记得，我们俩的相遇是在我们的高一，我们俩去的是我们那个高中的所谓的实验班，实验班一共有两个班，我俩是在一个班，高中的我是一个胖胖的孩子，肥嘟嘟的脸可能比较招女孩喜欢吧 。我记得我们两个好像是因为排座位，坐到了一起，成为了同座，慢慢的，不知怎么的，她就开始摸我的脸了，一开始我还有些抵触，感觉有点像宠物，在被主人抚摸的感觉，后来慢慢的，就习惯了，而她也越来越喜欢摸我的脸，几乎每天都有吧。</p>\n<p>时间突然来到，大一的上学期的期末，那个时候由于马上要期末考试了，是要想要好好准备一下，我的成绩和她差不多，就一起约定比赛，看谁考的好。我是一个自我感觉良好的人，有时候感觉会了，但是并没有真正的搞懂，而她是一个认真且聪明的女孩，所以结局就是我没有他考的好，我俩也因为选择不同，去了不同的实验班，在我们那里一般都是男孩选择理科，女孩选择文科，我们两个也是这样的选择，我选择了理科，她选择了文科。</p>\n<p>高一的下学期，我们两个因为班级的不同，不是很经常接触，所以也不怎么联系，在我的记忆当中，是不知道为什么，她送了我一本高数的辅导书，我一开始以为就是一本普通的辅导书，没怎么在意，直到她找我要回那本辅导书的时候，我才发现，辅导书每页的下面都写着对我情话，但是我还是不明其意，直到有一天，她在qq上主动对我表白了，说她<strong>喜欢我</strong>，我当时惊呆了，非常心慌，不知道怎么办，那个时候木讷的我，虽然也知道谈恋爱的意思，但是自己没有体验过，所以不是很懂。记得当时自己可能不懂什么是喜欢，不知道怎么回应，当时的想法应该是，我不知道我喜不喜欢他，先试试，毕竟谁都会想要一份甜甜的恋爱那。</p>\n<p>从那之后，我就感觉自己变了，我开始每周用我为数不多的生活费来去我家小区对面的蛋糕店买蛋挞送给她，慢慢地觉得我们两个不在一个班级，没有机会见面聊天，于是就约定我们两个每天晚上下自习的时候一起回宿舍，我们的那个教学楼是一个U字型的，她就在我的对面，我在我这边的顶楼四楼，而她在对面一楼，我记得非常清楚的状态就是，有的时候非常想见到她，等不及晚自习下课，第一节晚仔细下课时候，我就会去外面围栏眺望对面，在漆黑的夜晚中，她仿佛就是我所能看见的光，期待着期待着她从班里出来，和我对视一下，那种想念我至今难忘，真的是思念到痛彻心扉，思念到肝肠寸断，也是那个时候，我才第一次明白，原来，思念也可以让人这么痛，即使距离非常近，我依旧是那么想她，想她出现在我的面前。也是那次痛彻心扉的痛，让我明白我也喜欢她，但却从未说出口。</p>\n<p>每天终于等到晚自习下课，急匆匆的跑下楼，去她班级外面的一个空旷地等她，等她的心情也是非常着急，总是希望自己下一个看到的就是她，尽管知道自己很快就可以见到她。见到她，一般都是用我的右手摸摸她的脸，然后一边聊着今天发生的日常，一边走着，一开始的时候，就还是沿着大多数学生固定走的道路会宿舍，后来感觉我们两个相处时间太短，就绕了一条比较远的路，希望我们独处的时间可以多一点。</p>\n<p>有时候晚自习我下来的比较晚，她也会等我，当她背对着我的时候，我也会冲上去抱着她给她一个惊喜，那个时候我与她最多的互动就是抱抱了，其实在两个人独处的时候，我也想要kiss，但是心里害怕，一直都没有鼓起勇气。</p>\n<p>我记忆尤深的还有高中的一个暑假，我一个当时那么木讷的人，不知道怎么和女孩聊天的人，居然那个暑假，每天晚上都要打两个小时的电话给她，每天美其名曰带着我弟去外面玩，其实就是找一个地方，让我弟自己玩，我在那边和她打电话，从一开始的不知道聊什么的，到后来的游刃有余，虽然两个小时不算短了，但是那个时候两个小时打完电话有时候都意犹未尽，现在回想起来都不知道聊的什么那么起劲。</p>\n<p>初恋之所以为初恋，就是因为它是我们人生中第一次感受恋爱，既然是恋爱，就必须要一个结局，我的这个“初恋”的结局是这样的。</p>\n<p>就和每一个寻常的夜晚一样，我下自习之后去找她，我不知道因为什么原因，下去的比较晚，我下去的时候，她在和一个男的纠缠在一起，说起来也有些可笑，我的好兄弟在社会上认识有人，说我们要不要打他，联系了之后，说那个男的也认识一些人，不好打， 可笑的是我那个时候不知道如何办，路上她也在和我解释，但是那个时候我却听不进去。后面不知道是因为这个事情还是什么，慢慢就关系淡了，慢慢就重新成为了陌路人。</p>\n<p>现在的我已经我高中毕业五年了，已经回忆不起具体的细节了，只是记得我似乎因为那个男的也认识一些人，不敢承担后果等等，最终不了了之，我以为我们还会回到从前那样，但是似乎是因为那个点，慢慢的就不在一起了。</p>\n<p>这段没有戳破却又悄然而逝的感情，曾经久久不能让我释怀，我可能在无数个深夜的时候回忆过那段美好的时光，我对它的遗憾，也不是因为我对于另一个男的时候的不作为，而是没有真正的对我的那个她说声，<strong>我喜欢你</strong>。</p>\n<p>这就是我的“初恋”。</p>"},{"title":"我的生日","description":"","abbrlink":"5c4f6120","date":"2023-04-25T16:00:00.000Z","_content":"\n\n简单谈谈我以前是如何过生日的，以及我对于过生日的一些想法。\n\n\n\n<!-- more -->\n\n\n\n今天是2023年的4月26日，阳历是2023年的三月初七，而我的生日是2023年的三月初八，也就是说明天就是我的生日了，但是似乎自己也没有太大的感觉，甚至不知道如何去举办自己的生日会，也不知道是否要像其他人过生日一样去邀请很多人吃饭，一起吃蛋糕等等。\n\n\n\n每次这个时候，我总是会回想起我自己以往20多年的生日是怎么度过的，在我的记忆当中，似乎没有太印象深刻的生日，甚至在我生日的时候，都没有吃过几回蛋糕。这里的主要原因是因为父母似乎对于我的生日并没有一个计划或者说是安排，只觉得就当这一年中的其实日子一样的，后来我慢慢知道了这种其实叫做没有仪式感，而且也许是因为这个原因，所以生日甚至都没有吃过几次蛋糕，本来要是大家都这样，我估计也就没有什么想法了，也不会觉得过生日是应该的，但是周围有人每次过生日都请家人吃饭什么的，就有了对比，我不知道我是否记忆的深刻，我在看到别人过生日的时候，**我毫无疑问是羡慕的，羡慕有人可以记住他的生日，羡慕可以吃蛋糕，羡慕人家又是开心的长大了一岁**，而我又是一如往常地过了一天，涨了一岁。我不知道自己从什么时候开始，也许每次看到别人过生日都种下了一个颗种子，在过去的某一个时刻，我意识到了，这叫做仪式感，这个东西也不是人必须的，只是有人觉得重要，有人觉得不重要而已，刚好我的父母觉得不重要而已，而他们的孩子我刚好又觉得重要，仅此而已。\n\n\n\n其实，我去年似乎就过了一次生日，是我在北京的时候了，只有我弟和我一起，买了蛋糕也吃了饭，我不记得具体什么感受的，也许当时写下感受，现在才清楚一点。我只是隐约记得，我还是高兴和开心的，我内心是喜欢的，只是说没怎么过过生日的，当天还是比较扭捏的，有些不习惯，也有些高兴，又有些心酸，这么多年才过过生日。下面放几张照片吧。\n\n\n\n![e63983ea0c6b19ecae7bebfece3c6e0](https://shyblog.oss-cn-beijing.aliyuncs.com/img/e63983ea0c6b19ecae7bebfece3c6e0.jpg)\n\n\n\n![](https://shyblog.oss-cn-beijing.aliyuncs.com/img/e63983ea0c6b19ecae7bebfece3c6e0-1682493547803-2.jpg)\n\n\n\n我喜欢或者说觉得仪式感的原因是，一年当中365天，如果天天都是节日或者说是生日那天天过其实没啥意思，但是如果365天只有一天是生日的话，我觉得是有必要纪念一下的，毕竟人生短短几十年，又有多少个生日去过那，写着写着我内心的感觉，突然又觉得似乎有些矫情，不过生日似乎也没有什么，但是过了会更好一点，不是吗？那我们为啥不去好好地过生日那？\n\n\n\n如果有可能，有条件的话，我还是希望各位能有一些仪式感的，毕竟记录一些特殊的日子总还是有些意义的吧！\n","source":"_posts/我的生日.md","raw":"---\ntitle: 我的生日\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 5c4f6120\ndate: 2023-04-26 00:00:00\n---\n\n\n简单谈谈我以前是如何过生日的，以及我对于过生日的一些想法。\n\n\n\n<!-- more -->\n\n\n\n今天是2023年的4月26日，阳历是2023年的三月初七，而我的生日是2023年的三月初八，也就是说明天就是我的生日了，但是似乎自己也没有太大的感觉，甚至不知道如何去举办自己的生日会，也不知道是否要像其他人过生日一样去邀请很多人吃饭，一起吃蛋糕等等。\n\n\n\n每次这个时候，我总是会回想起我自己以往20多年的生日是怎么度过的，在我的记忆当中，似乎没有太印象深刻的生日，甚至在我生日的时候，都没有吃过几回蛋糕。这里的主要原因是因为父母似乎对于我的生日并没有一个计划或者说是安排，只觉得就当这一年中的其实日子一样的，后来我慢慢知道了这种其实叫做没有仪式感，而且也许是因为这个原因，所以生日甚至都没有吃过几次蛋糕，本来要是大家都这样，我估计也就没有什么想法了，也不会觉得过生日是应该的，但是周围有人每次过生日都请家人吃饭什么的，就有了对比，我不知道我是否记忆的深刻，我在看到别人过生日的时候，**我毫无疑问是羡慕的，羡慕有人可以记住他的生日，羡慕可以吃蛋糕，羡慕人家又是开心的长大了一岁**，而我又是一如往常地过了一天，涨了一岁。我不知道自己从什么时候开始，也许每次看到别人过生日都种下了一个颗种子，在过去的某一个时刻，我意识到了，这叫做仪式感，这个东西也不是人必须的，只是有人觉得重要，有人觉得不重要而已，刚好我的父母觉得不重要而已，而他们的孩子我刚好又觉得重要，仅此而已。\n\n\n\n其实，我去年似乎就过了一次生日，是我在北京的时候了，只有我弟和我一起，买了蛋糕也吃了饭，我不记得具体什么感受的，也许当时写下感受，现在才清楚一点。我只是隐约记得，我还是高兴和开心的，我内心是喜欢的，只是说没怎么过过生日的，当天还是比较扭捏的，有些不习惯，也有些高兴，又有些心酸，这么多年才过过生日。下面放几张照片吧。\n\n\n\n![e63983ea0c6b19ecae7bebfece3c6e0](https://shyblog.oss-cn-beijing.aliyuncs.com/img/e63983ea0c6b19ecae7bebfece3c6e0.jpg)\n\n\n\n![](https://shyblog.oss-cn-beijing.aliyuncs.com/img/e63983ea0c6b19ecae7bebfece3c6e0-1682493547803-2.jpg)\n\n\n\n我喜欢或者说觉得仪式感的原因是，一年当中365天，如果天天都是节日或者说是生日那天天过其实没啥意思，但是如果365天只有一天是生日的话，我觉得是有必要纪念一下的，毕竟人生短短几十年，又有多少个生日去过那，写着写着我内心的感觉，突然又觉得似乎有些矫情，不过生日似乎也没有什么，但是过了会更好一点，不是吗？那我们为啥不去好好地过生日那？\n\n\n\n如果有可能，有条件的话，我还是希望各位能有一些仪式感的，毕竟记录一些特殊的日子总还是有些意义的吧！\n","slug":"我的生日","published":1,"updated":"2025-03-02T03:37:34.437Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp5a0058n0uk88iggsuw","content":"<p>简单谈谈我以前是如何过生日的，以及我对于过生日的一些想法。</p>\n<span id=\"more\"></span>\n\n\n\n<p>今天是2023年的4月26日，阳历是2023年的三月初七，而我的生日是2023年的三月初八，也就是说明天就是我的生日了，但是似乎自己也没有太大的感觉，甚至不知道如何去举办自己的生日会，也不知道是否要像其他人过生日一样去邀请很多人吃饭，一起吃蛋糕等等。</p>\n<p>每次这个时候，我总是会回想起我自己以往20多年的生日是怎么度过的，在我的记忆当中，似乎没有太印象深刻的生日，甚至在我生日的时候，都没有吃过几回蛋糕。这里的主要原因是因为父母似乎对于我的生日并没有一个计划或者说是安排，只觉得就当这一年中的其实日子一样的，后来我慢慢知道了这种其实叫做没有仪式感，而且也许是因为这个原因，所以生日甚至都没有吃过几次蛋糕，本来要是大家都这样，我估计也就没有什么想法了，也不会觉得过生日是应该的，但是周围有人每次过生日都请家人吃饭什么的，就有了对比，我不知道我是否记忆的深刻，我在看到别人过生日的时候，<strong>我毫无疑问是羡慕的，羡慕有人可以记住他的生日，羡慕可以吃蛋糕，羡慕人家又是开心的长大了一岁</strong>，而我又是一如往常地过了一天，涨了一岁。我不知道自己从什么时候开始，也许每次看到别人过生日都种下了一个颗种子，在过去的某一个时刻，我意识到了，这叫做仪式感，这个东西也不是人必须的，只是有人觉得重要，有人觉得不重要而已，刚好我的父母觉得不重要而已，而他们的孩子我刚好又觉得重要，仅此而已。</p>\n<p>其实，我去年似乎就过了一次生日，是我在北京的时候了，只有我弟和我一起，买了蛋糕也吃了饭，我不记得具体什么感受的，也许当时写下感受，现在才清楚一点。我只是隐约记得，我还是高兴和开心的，我内心是喜欢的，只是说没怎么过过生日的，当天还是比较扭捏的，有些不习惯，也有些高兴，又有些心酸，这么多年才过过生日。下面放几张照片吧。</p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/e63983ea0c6b19ecae7bebfece3c6e0.jpg\" alt=\"e63983ea0c6b19ecae7bebfece3c6e0\" loading=\"lazy\"></p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/e63983ea0c6b19ecae7bebfece3c6e0-1682493547803-2.jpg\" loading=\"lazy\"></p>\n<p>我喜欢或者说觉得仪式感的原因是，一年当中365天，如果天天都是节日或者说是生日那天天过其实没啥意思，但是如果365天只有一天是生日的话，我觉得是有必要纪念一下的，毕竟人生短短几十年，又有多少个生日去过那，写着写着我内心的感觉，突然又觉得似乎有些矫情，不过生日似乎也没有什么，但是过了会更好一点，不是吗？那我们为啥不去好好地过生日那？</p>\n<p>如果有可能，有条件的话，我还是希望各位能有一些仪式感的，毕竟记录一些特殊的日子总还是有些意义的吧！</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"简单谈谈我以前是如何过生日的，以及我对于过生日的一些想法。\n\n今天是2023年的4月26日，阳历是2023年的三月初七，而我的生日是2023年的三月初八，也就是说明天就是我的生日了，但是似乎自己也没有太大的感觉，甚至不知道如何去举办自己的生日会，也不知道是否要像其他人过生日一样去邀请很多人吃饭，一起吃蛋糕等等。\n\n每次这个时候，我总是会回想起我自己以往20多年的生日是怎么度过的，在我的记忆当中，似乎没有太印象深刻的生日，甚至在我生日的时候，都没有吃过几回蛋糕。这里的主要原因是因为父母似乎对于我的生日并没有一个计划或者说是安排，只觉得就当这一年中的其实日子一样的，后来我慢慢知道了这种其实叫做没有","more":"<p>今天是2023年的4月26日，阳历是2023年的三月初七，而我的生日是2023年的三月初八，也就是说明天就是我的生日了，但是似乎自己也没有太大的感觉，甚至不知道如何去举办自己的生日会，也不知道是否要像其他人过生日一样去邀请很多人吃饭，一起吃蛋糕等等。</p>\n<p>每次这个时候，我总是会回想起我自己以往20多年的生日是怎么度过的，在我的记忆当中，似乎没有太印象深刻的生日，甚至在我生日的时候，都没有吃过几回蛋糕。这里的主要原因是因为父母似乎对于我的生日并没有一个计划或者说是安排，只觉得就当这一年中的其实日子一样的，后来我慢慢知道了这种其实叫做没有仪式感，而且也许是因为这个原因，所以生日甚至都没有吃过几次蛋糕，本来要是大家都这样，我估计也就没有什么想法了，也不会觉得过生日是应该的，但是周围有人每次过生日都请家人吃饭什么的，就有了对比，我不知道我是否记忆的深刻，我在看到别人过生日的时候，<strong>我毫无疑问是羡慕的，羡慕有人可以记住他的生日，羡慕可以吃蛋糕，羡慕人家又是开心的长大了一岁</strong>，而我又是一如往常地过了一天，涨了一岁。我不知道自己从什么时候开始，也许每次看到别人过生日都种下了一个颗种子，在过去的某一个时刻，我意识到了，这叫做仪式感，这个东西也不是人必须的，只是有人觉得重要，有人觉得不重要而已，刚好我的父母觉得不重要而已，而他们的孩子我刚好又觉得重要，仅此而已。</p>\n<p>其实，我去年似乎就过了一次生日，是我在北京的时候了，只有我弟和我一起，买了蛋糕也吃了饭，我不记得具体什么感受的，也许当时写下感受，现在才清楚一点。我只是隐约记得，我还是高兴和开心的，我内心是喜欢的，只是说没怎么过过生日的，当天还是比较扭捏的，有些不习惯，也有些高兴，又有些心酸，这么多年才过过生日。下面放几张照片吧。</p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/e63983ea0c6b19ecae7bebfece3c6e0.jpg\" alt=\"e63983ea0c6b19ecae7bebfece3c6e0\" loading=\"lazy\"></p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/e63983ea0c6b19ecae7bebfece3c6e0-1682493547803-2.jpg\" loading=\"lazy\"></p>\n<p>我喜欢或者说觉得仪式感的原因是，一年当中365天，如果天天都是节日或者说是生日那天天过其实没啥意思，但是如果365天只有一天是生日的话，我觉得是有必要纪念一下的，毕竟人生短短几十年，又有多少个生日去过那，写着写着我内心的感觉，突然又觉得似乎有些矫情，不过生日似乎也没有什么，但是过了会更好一点，不是吗？那我们为啥不去好好地过生日那？</p>\n<p>如果有可能，有条件的话，我还是希望各位能有一些仪式感的，毕竟记录一些特殊的日子总还是有些意义的吧！</p>"},{"title":"我认识的自动驾驶","description":"","abbrlink":"d49f3a84","date":"2023-05-21T16:00:00.000Z","_content":"\n\n# 我的车的自动驾驶\n\n  最近我回来老家了，一回来老家，就赶上了，我们这个城市有一个买车优惠的政策，于是急急忙忙的买了车，买的车是传祺的gs3，当时图的是价格比较便宜，然后有个三年八折换购的活动，于是就定下他了。\n\n  这个车有基本的辅助驾驶功能，定速巡航和车道保持，当然他写的是有很多了，但是我觉得相对驾驶体验改善比较好的就是这两个。\n\n  今天我来附近城市出差了，不到100km，高速用的都是定速巡航和车道保持，感受还行。就是这个车道保持有点小问题，有时候在超车道的时候，明明距离右边的大车距离还行，但是还是往右移动了下，导致有些过于靠近中间的花坛了。定速循环基本上没有啥问题的。\n\n  > 现在基本上可以相信定速巡航和车道保持了，但是自己也不能松懈，毕竟他还不能百分百信任。我的这个基本上就是非常基础的l2级别的自动驾驶了\n\n# 国际自动驾驶\n\n  最近在b站上了看了不少的自动驾驶测评视频，看下来排在前列的自动驾驶就是特斯拉、华为、小鹏的，但是那，特斯拉做的本地化并不好，实际体验国外才是完整版，国内都是阉割了很多，甚至连简单的中文识别都无法识别，比如 开启空调什么的，也是醉醉的。\n\n  这几个名列前茅的厂商基本上都是可以在低速上自动驾驶了，即使是复杂度比较高的场景也能够应对自如的，更不说高速的自动变道，自动进匝道等等，确实是非常牛皮呀！！！\n\n  自动驾驶真的是已经来到我们的身边了，非常开心，这就是非常典型的科技改变生活啊！！！\n\n# 未来设想\n\n  我认为自动驾驶肯定是在未来必然会实现的，也许到了那个时候，会开车人都很少了，毕竟大家都是直接坐的自动驾驶的车了，车就真的只是距离工具了，当然这也少了车的驾驶的乐趣了。\n\n  期待自动驾驶真正到来的时候，不知道我有生之年能否真的看到过，希望吧！！！加油，中国自动驾驶！！！\n","source":"_posts/我认识的自动驾驶.md","raw":"---\ntitle: 我认识的自动驾驶\ndescription: ''\ntags:\n  - 无标签\nabbrlink: d49f3a84\ndate: 2023-05-22 00:00:00\n---\n\n\n# 我的车的自动驾驶\n\n  最近我回来老家了，一回来老家，就赶上了，我们这个城市有一个买车优惠的政策，于是急急忙忙的买了车，买的车是传祺的gs3，当时图的是价格比较便宜，然后有个三年八折换购的活动，于是就定下他了。\n\n  这个车有基本的辅助驾驶功能，定速巡航和车道保持，当然他写的是有很多了，但是我觉得相对驾驶体验改善比较好的就是这两个。\n\n  今天我来附近城市出差了，不到100km，高速用的都是定速巡航和车道保持，感受还行。就是这个车道保持有点小问题，有时候在超车道的时候，明明距离右边的大车距离还行，但是还是往右移动了下，导致有些过于靠近中间的花坛了。定速循环基本上没有啥问题的。\n\n  > 现在基本上可以相信定速巡航和车道保持了，但是自己也不能松懈，毕竟他还不能百分百信任。我的这个基本上就是非常基础的l2级别的自动驾驶了\n\n# 国际自动驾驶\n\n  最近在b站上了看了不少的自动驾驶测评视频，看下来排在前列的自动驾驶就是特斯拉、华为、小鹏的，但是那，特斯拉做的本地化并不好，实际体验国外才是完整版，国内都是阉割了很多，甚至连简单的中文识别都无法识别，比如 开启空调什么的，也是醉醉的。\n\n  这几个名列前茅的厂商基本上都是可以在低速上自动驾驶了，即使是复杂度比较高的场景也能够应对自如的，更不说高速的自动变道，自动进匝道等等，确实是非常牛皮呀！！！\n\n  自动驾驶真的是已经来到我们的身边了，非常开心，这就是非常典型的科技改变生活啊！！！\n\n# 未来设想\n\n  我认为自动驾驶肯定是在未来必然会实现的，也许到了那个时候，会开车人都很少了，毕竟大家都是直接坐的自动驾驶的车了，车就真的只是距离工具了，当然这也少了车的驾驶的乐趣了。\n\n  期待自动驾驶真正到来的时候，不知道我有生之年能否真的看到过，希望吧！！！加油，中国自动驾驶！！！\n","slug":"我认识的自动驾驶","published":1,"updated":"2025-03-02T03:37:34.438Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp5a005an0uk9emvfqul","content":"<h1 id=\"我的车的自动驾驶\"><a href=\"#我的车的自动驾驶\" class=\"headerlink\" title=\"我的车的自动驾驶\"></a>我的车的自动驾驶</h1><p>  最近我回来老家了，一回来老家，就赶上了，我们这个城市有一个买车优惠的政策，于是急急忙忙的买了车，买的车是传祺的gs3，当时图的是价格比较便宜，然后有个三年八折换购的活动，于是就定下他了。</p>\n<p>  这个车有基本的辅助驾驶功能，定速巡航和车道保持，当然他写的是有很多了，但是我觉得相对驾驶体验改善比较好的就是这两个。</p>\n<p>  今天我来附近城市出差了，不到100km，高速用的都是定速巡航和车道保持，感受还行。就是这个车道保持有点小问题，有时候在超车道的时候，明明距离右边的大车距离还行，但是还是往右移动了下，导致有些过于靠近中间的花坛了。定速循环基本上没有啥问题的。</p>\n<blockquote>\n<p>现在基本上可以相信定速巡航和车道保持了，但是自己也不能松懈，毕竟他还不能百分百信任。我的这个基本上就是非常基础的l2级别的自动驾驶了</p>\n</blockquote>\n<h1 id=\"国际自动驾驶\"><a href=\"#国际自动驾驶\" class=\"headerlink\" title=\"国际自动驾驶\"></a>国际自动驾驶</h1><p>  最近在b站上了看了不少的自动驾驶测评视频，看下来排在前列的自动驾驶就是特斯拉、华为、小鹏的，但是那，特斯拉做的本地化并不好，实际体验国外才是完整版，国内都是阉割了很多，甚至连简单的中文识别都无法识别，比如 开启空调什么的，也是醉醉的。</p>\n<p>  这几个名列前茅的厂商基本上都是可以在低速上自动驾驶了，即使是复杂度比较高的场景也能够应对自如的，更不说高速的自动变道，自动进匝道等等，确实是非常牛皮呀！！！</p>\n<p>  自动驾驶真的是已经来到我们的身边了，非常开心，这就是非常典型的科技改变生活啊！！！</p>\n<h1 id=\"未来设想\"><a href=\"#未来设想\" class=\"headerlink\" title=\"未来设想\"></a>未来设想</h1><p>  我认为自动驾驶肯定是在未来必然会实现的，也许到了那个时候，会开车人都很少了，毕竟大家都是直接坐的自动驾驶的车了，车就真的只是距离工具了，当然这也少了车的驾驶的乐趣了。</p>\n<p>  期待自动驾驶真正到来的时候，不知道我有生之年能否真的看到过，希望吧！！！加油，中国自动驾驶！！！</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"我的车的自动驾驶\n 最近我回来老家了，一回来老家，就赶上了，我们这个城市有一个买车优惠的政策，于是急急忙忙的买了车，买的车是传祺的gs3，当时图的是价格比较便宜，然后有个三年八折换购的活动，于是就定下他了。\n\n 这个车有基本的辅助驾驶功能，定速巡航和车道保持，当然他写的是有很多了，但是我觉得相对驾驶体验改善比较好的就是这两个。\n\n 今天我来附近城市出差了，不到100km，高速用的都是定速巡航和车道保持，感受还行。就是这个车道保持有点小问题，有时候在超车道的时候，明明距离右边的大车距离还行，但是还是往右移动了下，导致有些过于靠近中间的花坛了。定速循环基本上没有啥问题的。\n\n现在基本上可以相信定速","more":"<h1 id=\"我的车的自动驾驶\"><a href=\"#我的车的自动驾驶\" class=\"headerlink\" title=\"我的车的自动驾驶\"></a>我的车的自动驾驶</h1><p>  最近我回来老家了，一回来老家，就赶上了，我们这个城市有一个买车优惠的政策，于是急急忙忙的买了车，买的车是传祺的gs3，当时图的是价格比较便宜，然后有个三年八折换购的活动，于是就定下他了。</p>\n<p>  这个车有基本的辅助驾驶功能，定速巡航和车道保持，当然他写的是有很多了，但是我觉得相对驾驶体验改善比较好的就是这两个。</p>\n<p>  今天我来附近城市出差了，不到100km，高速用的都是定速巡航和车道保持，感受还行。就是这个车道保持有点小问题，有时候在超车道的时候，明明距离右边的大车距离还行，但是还是往右移动了下，导致有些过于靠近中间的花坛了。定速循环基本上没有啥问题的。</p>\n<blockquote>\n<p>现在基本上可以相信定速巡航和车道保持了，但是自己也不能松懈，毕竟他还不能百分百信任。我的这个基本上就是非常基础的l2级别的自动驾驶了</p>\n</blockquote>\n<h1 id=\"国际自动驾驶\"><a href=\"#国际自动驾驶\" class=\"headerlink\" title=\"国际自动驾驶\"></a>国际自动驾驶</h1><p>  最近在b站上了看了不少的自动驾驶测评视频，看下来排在前列的自动驾驶就是特斯拉、华为、小鹏的，但是那，特斯拉做的本地化并不好，实际体验国外才是完整版，国内都是阉割了很多，甚至连简单的中文识别都无法识别，比如 开启空调什么的，也是醉醉的。</p>\n<p>  这几个名列前茅的厂商基本上都是可以在低速上自动驾驶了，即使是复杂度比较高的场景也能够应对自如的，更不说高速的自动变道，自动进匝道等等，确实是非常牛皮呀！！！</p>\n<p>  自动驾驶真的是已经来到我们的身边了，非常开心，这就是非常典型的科技改变生活啊！！！</p>\n<h1 id=\"未来设想\"><a href=\"#未来设想\" class=\"headerlink\" title=\"未来设想\"></a>未来设想</h1><p>  我认为自动驾驶肯定是在未来必然会实现的，也许到了那个时候，会开车人都很少了，毕竟大家都是直接坐的自动驾驶的车了，车就真的只是距离工具了，当然这也少了车的驾驶的乐趣了。</p>\n<p>  期待自动驾驶真正到来的时候，不知道我有生之年能否真的看到过，希望吧！！！加油，中国自动驾驶！！！</p>\n"},{"title":"排序算法","description":"","abbrlink":"735e5788","date":"2021-03-26T16:00:00.000Z","_content":"\n\n排序的基本操作：比较和移动\n\n\n\n<!-- more -->\n\n\n\n### 直接插入排序\n\n\n\n分为有序区和无序区，每一次从无序区里找一个最小的放在有序区\n\n\n\n### 希尔排序\n\n\n\n先分组，两个数一组，比较交换，小的放在前面，一直这样比较\n\n\n\n### 冒泡排序\n\n\n\n两个数比较最小的放在前面，第一轮排序结束，第一个数一定是最小的，每一次从无序区中选取一个最小的\n\n\n\n### 快速排序\n\n\n\n随机选择一个数进行比较，一般情况下选择第一数为关键字，经过第一轮排序后，关键字前面都是比他小的，关键字后面都是比他大的 先从最后面开始比较，如果比关键字小，关键字和他换位置，然后从最前面往后扫描，比关键字大的，和关键字换位置，然后再从最后面开始扫描\n\n\n\n### 简单选择排序\n\n\n\n每一次都从无序区中选取一个最小的放在最前面\n\n\n\n### 堆排序\n\n\n\n每一次都是全部比较，最大的放在前面即根节点，然后输出根节点\n\n\n\n堆排序的插入：插入一个数放在最后面，保证父节点的数比子节点的数大即可\n\n\n\n堆排序的删除：删除一个数后，保证父节点的数比子节点大即可\n\n\n\n### 归并排序\n\n\n\n先分组，组内排序 一开始是2个一组，四个一组，八个一组\n\n\n\n### 基数排序\n\n\n\n不用进行关键字的比较，第一次比较按照个位数排列，第二趟按照十位数排列，第三位按照百位排列\n\n\n\n基数排序的移动次数与关键字的排列次序无关\n\n\n\n排列趟数和序列的初始状态无关的排序方法是 直接插入排序、简单选择排序、基数排序\n\n\n\n每趟排列结束之后都至少能确定一个元素的最终位置的方法是 简单选择排序、快速排序、堆排序\n\n\n\n最后一趟结束前，所有元素不一定归位：直接插入排序、希尔排序、\n\n\n\n快速排序在原始序列无序的时候，速度最快","source":"_posts/排序算法.md","raw":"---\ntitle: 排序算法\ndescription: ''\ntags:\n  - 无标签\nabbrlink: '735e5788'\ndate: 2021-03-27 00:00:00\n---\n\n\n排序的基本操作：比较和移动\n\n\n\n<!-- more -->\n\n\n\n### 直接插入排序\n\n\n\n分为有序区和无序区，每一次从无序区里找一个最小的放在有序区\n\n\n\n### 希尔排序\n\n\n\n先分组，两个数一组，比较交换，小的放在前面，一直这样比较\n\n\n\n### 冒泡排序\n\n\n\n两个数比较最小的放在前面，第一轮排序结束，第一个数一定是最小的，每一次从无序区中选取一个最小的\n\n\n\n### 快速排序\n\n\n\n随机选择一个数进行比较，一般情况下选择第一数为关键字，经过第一轮排序后，关键字前面都是比他小的，关键字后面都是比他大的 先从最后面开始比较，如果比关键字小，关键字和他换位置，然后从最前面往后扫描，比关键字大的，和关键字换位置，然后再从最后面开始扫描\n\n\n\n### 简单选择排序\n\n\n\n每一次都从无序区中选取一个最小的放在最前面\n\n\n\n### 堆排序\n\n\n\n每一次都是全部比较，最大的放在前面即根节点，然后输出根节点\n\n\n\n堆排序的插入：插入一个数放在最后面，保证父节点的数比子节点的数大即可\n\n\n\n堆排序的删除：删除一个数后，保证父节点的数比子节点大即可\n\n\n\n### 归并排序\n\n\n\n先分组，组内排序 一开始是2个一组，四个一组，八个一组\n\n\n\n### 基数排序\n\n\n\n不用进行关键字的比较，第一次比较按照个位数排列，第二趟按照十位数排列，第三位按照百位排列\n\n\n\n基数排序的移动次数与关键字的排列次序无关\n\n\n\n排列趟数和序列的初始状态无关的排序方法是 直接插入排序、简单选择排序、基数排序\n\n\n\n每趟排列结束之后都至少能确定一个元素的最终位置的方法是 简单选择排序、快速排序、堆排序\n\n\n\n最后一趟结束前，所有元素不一定归位：直接插入排序、希尔排序、\n\n\n\n快速排序在原始序列无序的时候，速度最快","slug":"排序算法","published":1,"updated":"2025-03-02T03:37:34.438Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp5b005cn0uk4he47xyj","content":"<p>排序的基本操作：比较和移动</p>\n<span id=\"more\"></span>\n\n\n\n<h3 id=\"直接插入排序\"><a href=\"#直接插入排序\" class=\"headerlink\" title=\"直接插入排序\"></a>直接插入排序</h3><p>分为有序区和无序区，每一次从无序区里找一个最小的放在有序区</p>\n<h3 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h3><p>先分组，两个数一组，比较交换，小的放在前面，一直这样比较</p>\n<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><p>两个数比较最小的放在前面，第一轮排序结束，第一个数一定是最小的，每一次从无序区中选取一个最小的</p>\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><p>随机选择一个数进行比较，一般情况下选择第一数为关键字，经过第一轮排序后，关键字前面都是比他小的，关键字后面都是比他大的 先从最后面开始比较，如果比关键字小，关键字和他换位置，然后从最前面往后扫描，比关键字大的，和关键字换位置，然后再从最后面开始扫描</p>\n<h3 id=\"简单选择排序\"><a href=\"#简单选择排序\" class=\"headerlink\" title=\"简单选择排序\"></a>简单选择排序</h3><p>每一次都从无序区中选取一个最小的放在最前面</p>\n<h3 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h3><p>每一次都是全部比较，最大的放在前面即根节点，然后输出根节点</p>\n<p>堆排序的插入：插入一个数放在最后面，保证父节点的数比子节点的数大即可</p>\n<p>堆排序的删除：删除一个数后，保证父节点的数比子节点大即可</p>\n<h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><p>先分组，组内排序 一开始是2个一组，四个一组，八个一组</p>\n<h3 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h3><p>不用进行关键字的比较，第一次比较按照个位数排列，第二趟按照十位数排列，第三位按照百位排列</p>\n<p>基数排序的移动次数与关键字的排列次序无关</p>\n<p>排列趟数和序列的初始状态无关的排序方法是 直接插入排序、简单选择排序、基数排序</p>\n<p>每趟排列结束之后都至少能确定一个元素的最终位置的方法是 简单选择排序、快速排序、堆排序</p>\n<p>最后一趟结束前，所有元素不一定归位：直接插入排序、希尔排序、</p>\n<p>快速排序在原始序列无序的时候，速度最快</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"排序的基本操作：比较和移动\n\n直接插入排序\n分为有序区和无序区，每一次从无序区里找一个最小的放在有序区\n\n希尔排序\n先分组，两个数一组，比较交换，小的放在前面，一直这样比较\n\n冒泡排序\n两个数比较最小的放在前面，第一轮排序结束，第一个数一定是最小的，每一次从无序区中选取一个最小的\n\n快速排序\n随机选择一个数进行比较，一般情况下选择第一数为关键字，经过第一轮排序后，关键字前面都是比他小的，关键字后面都是比他大的 先从最后面开始比较，如果比关键字小，关键字和他换位置，然后从最前面往后扫描，比关键字大的，和关键字换位置，然后再从最后面开始扫描\n\n简单选择排序\n每一次都从无序区中选取一个最小的放在最前","more":"<h3 id=\"直接插入排序\"><a href=\"#直接插入排序\" class=\"headerlink\" title=\"直接插入排序\"></a>直接插入排序</h3><p>分为有序区和无序区，每一次从无序区里找一个最小的放在有序区</p>\n<h3 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h3><p>先分组，两个数一组，比较交换，小的放在前面，一直这样比较</p>\n<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><p>两个数比较最小的放在前面，第一轮排序结束，第一个数一定是最小的，每一次从无序区中选取一个最小的</p>\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><p>随机选择一个数进行比较，一般情况下选择第一数为关键字，经过第一轮排序后，关键字前面都是比他小的，关键字后面都是比他大的 先从最后面开始比较，如果比关键字小，关键字和他换位置，然后从最前面往后扫描，比关键字大的，和关键字换位置，然后再从最后面开始扫描</p>\n<h3 id=\"简单选择排序\"><a href=\"#简单选择排序\" class=\"headerlink\" title=\"简单选择排序\"></a>简单选择排序</h3><p>每一次都从无序区中选取一个最小的放在最前面</p>\n<h3 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h3><p>每一次都是全部比较，最大的放在前面即根节点，然后输出根节点</p>\n<p>堆排序的插入：插入一个数放在最后面，保证父节点的数比子节点的数大即可</p>\n<p>堆排序的删除：删除一个数后，保证父节点的数比子节点大即可</p>\n<h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><p>先分组，组内排序 一开始是2个一组，四个一组，八个一组</p>\n<h3 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h3><p>不用进行关键字的比较，第一次比较按照个位数排列，第二趟按照十位数排列，第三位按照百位排列</p>\n<p>基数排序的移动次数与关键字的排列次序无关</p>\n<p>排列趟数和序列的初始状态无关的排序方法是 直接插入排序、简单选择排序、基数排序</p>\n<p>每趟排列结束之后都至少能确定一个元素的最终位置的方法是 简单选择排序、快速排序、堆排序</p>\n<p>最后一趟结束前，所有元素不一定归位：直接插入排序、希尔排序、</p>\n<p>快速排序在原始序列无序的时候，速度最快</p>"},{"title":"接口隔离原则","description":"","abbrlink":"e0ec8882","date":"2021-06-13T16:00:00.000Z","_content":"\n\n接口隔离原则\n\n\n\n<!-- more -->\n\n\n\n## 接口分类\n\n\n\n1. java中普通的interface是接口的一种\n\n2. new 一个新类的时候，可以将其成为 实例化接口\n\n\n\n## 定义\n\n\n\n1. 客户端不应该依赖它不需要的接口\n\n2. 类间的依赖关系应该建立在最小的接口上\n\n\n\n我们可以把这两个定义概括为一句话：建立单一接口，不要建立臃肿庞大的接口。再通俗一点讲：接口尽量细化，同时接口中的方法尽量少\n\n\n\n## 规则\n\n\n\n### 接口尽量小\n\n\n\n首先不能违反单一职责原则\n\n\n\n### 接口要高内聚\n\n\n\n要求在接口中尽量少公布public方法，接口是对外的承诺，承诺越少对系统的开发越有利，变更的风险也就越少，同时也有利于降低成本\n\n\n\n### 定制服务\n\n\n\n在进行系统设计的时候，要不同的系统间或者系统内不同的模块一定会产生耦合的部分，在这样的情况下，需要为各个访问者提供专用的接口，以确保一个类或者一个接口中提供多个不同访问者的方法的时候，权限没有控制好，导致一个访问者可以查询本来不属于它的方法\n\n\n\n### 接口设计是有限度的\n\n\n\n接口的设计粒度越小，系统越灵活，这是不争的事实。但是，灵活的同时也带来了结构的复杂化，开发难度增加，可维护性降低，这不是一个项目或产品所期望看到的，所以接口设计一定要注意适度，这个“度”如何来判断呢？根据经验和常识判断，没有一个固化或可测量的标准。","source":"_posts/接口隔离原则.md","raw":"---\ntitle: 接口隔离原则\ndescription: ''\ntags:\n  - 无标签\nabbrlink: e0ec8882\ndate: 2021-06-14 00:00:00\n---\n\n\n接口隔离原则\n\n\n\n<!-- more -->\n\n\n\n## 接口分类\n\n\n\n1. java中普通的interface是接口的一种\n\n2. new 一个新类的时候，可以将其成为 实例化接口\n\n\n\n## 定义\n\n\n\n1. 客户端不应该依赖它不需要的接口\n\n2. 类间的依赖关系应该建立在最小的接口上\n\n\n\n我们可以把这两个定义概括为一句话：建立单一接口，不要建立臃肿庞大的接口。再通俗一点讲：接口尽量细化，同时接口中的方法尽量少\n\n\n\n## 规则\n\n\n\n### 接口尽量小\n\n\n\n首先不能违反单一职责原则\n\n\n\n### 接口要高内聚\n\n\n\n要求在接口中尽量少公布public方法，接口是对外的承诺，承诺越少对系统的开发越有利，变更的风险也就越少，同时也有利于降低成本\n\n\n\n### 定制服务\n\n\n\n在进行系统设计的时候，要不同的系统间或者系统内不同的模块一定会产生耦合的部分，在这样的情况下，需要为各个访问者提供专用的接口，以确保一个类或者一个接口中提供多个不同访问者的方法的时候，权限没有控制好，导致一个访问者可以查询本来不属于它的方法\n\n\n\n### 接口设计是有限度的\n\n\n\n接口的设计粒度越小，系统越灵活，这是不争的事实。但是，灵活的同时也带来了结构的复杂化，开发难度增加，可维护性降低，这不是一个项目或产品所期望看到的，所以接口设计一定要注意适度，这个“度”如何来判断呢？根据经验和常识判断，没有一个固化或可测量的标准。","slug":"接口隔离原则","published":1,"updated":"2025-03-02T03:37:34.439Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp5b005en0ukg7apdzua","content":"<p>接口隔离原则</p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"接口分类\"><a href=\"#接口分类\" class=\"headerlink\" title=\"接口分类\"></a>接口分类</h2><ol>\n<li><p>java中普通的interface是接口的一种</p>\n</li>\n<li><p>new 一个新类的时候，可以将其成为 实例化接口</p>\n</li>\n</ol>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><ol>\n<li><p>客户端不应该依赖它不需要的接口</p>\n</li>\n<li><p>类间的依赖关系应该建立在最小的接口上</p>\n</li>\n</ol>\n<p>我们可以把这两个定义概括为一句话：建立单一接口，不要建立臃肿庞大的接口。再通俗一点讲：接口尽量细化，同时接口中的方法尽量少</p>\n<h2 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h2><h3 id=\"接口尽量小\"><a href=\"#接口尽量小\" class=\"headerlink\" title=\"接口尽量小\"></a>接口尽量小</h3><p>首先不能违反单一职责原则</p>\n<h3 id=\"接口要高内聚\"><a href=\"#接口要高内聚\" class=\"headerlink\" title=\"接口要高内聚\"></a>接口要高内聚</h3><p>要求在接口中尽量少公布public方法，接口是对外的承诺，承诺越少对系统的开发越有利，变更的风险也就越少，同时也有利于降低成本</p>\n<h3 id=\"定制服务\"><a href=\"#定制服务\" class=\"headerlink\" title=\"定制服务\"></a>定制服务</h3><p>在进行系统设计的时候，要不同的系统间或者系统内不同的模块一定会产生耦合的部分，在这样的情况下，需要为各个访问者提供专用的接口，以确保一个类或者一个接口中提供多个不同访问者的方法的时候，权限没有控制好，导致一个访问者可以查询本来不属于它的方法</p>\n<h3 id=\"接口设计是有限度的\"><a href=\"#接口设计是有限度的\" class=\"headerlink\" title=\"接口设计是有限度的\"></a>接口设计是有限度的</h3><p>接口的设计粒度越小，系统越灵活，这是不争的事实。但是，灵活的同时也带来了结构的复杂化，开发难度增加，可维护性降低，这不是一个项目或产品所期望看到的，所以接口设计一定要注意适度，这个“度”如何来判断呢？根据经验和常识判断，没有一个固化或可测量的标准。</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"接口隔离原则\n\n接口分类\n 1. java中普通的interface是接口的一种\n    \n    \n 2. new 一个新类的时候，可以将其成为 实例化接口\n    \n    \n\n定义\n 1. 客户端不应该依赖它不需要的接口\n    \n    \n 2. 类间的依赖关系应该建立在最小的接口上\n    \n    \n\n我们可以把这两个定义概括为一句话：建立单一接口，不要建立臃肿庞大的接口。再通俗一点讲：接口尽量细化，同时接口中的方法尽量少\n\n规则\n接口尽量小\n首先不能违反单一职责原则\n\n接口要高内聚\n要求在接口中尽量少公布public方法，接口是对外的承诺，承诺越少对系统的开发越有利，变更的风险也","more":"<h2 id=\"接口分类\"><a href=\"#接口分类\" class=\"headerlink\" title=\"接口分类\"></a>接口分类</h2><ol>\n<li><p>java中普通的interface是接口的一种</p>\n</li>\n<li><p>new 一个新类的时候，可以将其成为 实例化接口</p>\n</li>\n</ol>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><ol>\n<li><p>客户端不应该依赖它不需要的接口</p>\n</li>\n<li><p>类间的依赖关系应该建立在最小的接口上</p>\n</li>\n</ol>\n<p>我们可以把这两个定义概括为一句话：建立单一接口，不要建立臃肿庞大的接口。再通俗一点讲：接口尽量细化，同时接口中的方法尽量少</p>\n<h2 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h2><h3 id=\"接口尽量小\"><a href=\"#接口尽量小\" class=\"headerlink\" title=\"接口尽量小\"></a>接口尽量小</h3><p>首先不能违反单一职责原则</p>\n<h3 id=\"接口要高内聚\"><a href=\"#接口要高内聚\" class=\"headerlink\" title=\"接口要高内聚\"></a>接口要高内聚</h3><p>要求在接口中尽量少公布public方法，接口是对外的承诺，承诺越少对系统的开发越有利，变更的风险也就越少，同时也有利于降低成本</p>\n<h3 id=\"定制服务\"><a href=\"#定制服务\" class=\"headerlink\" title=\"定制服务\"></a>定制服务</h3><p>在进行系统设计的时候，要不同的系统间或者系统内不同的模块一定会产生耦合的部分，在这样的情况下，需要为各个访问者提供专用的接口，以确保一个类或者一个接口中提供多个不同访问者的方法的时候，权限没有控制好，导致一个访问者可以查询本来不属于它的方法</p>\n<h3 id=\"接口设计是有限度的\"><a href=\"#接口设计是有限度的\" class=\"headerlink\" title=\"接口设计是有限度的\"></a>接口设计是有限度的</h3><p>接口的设计粒度越小，系统越灵活，这是不争的事实。但是，灵活的同时也带来了结构的复杂化，开发难度增加，可维护性降低，这不是一个项目或产品所期望看到的，所以接口设计一定要注意适度，这个“度”如何来判断呢？根据经验和常识判断，没有一个固化或可测量的标准。</p>"},{"title":"树","description":"","abbrlink":"7b216a3b","date":"2021-04-07T16:00:00.000Z","_content":"\n\n## 基础认识\n\n\n\n<!-- more -->\n\n\n\n#### 二叉树\n\n\n\n二叉树，顾名思义就是一个结点有两个分叉就是二叉树\n\n\n\n创建一个二叉树\n\n\n\n```java\n\n    public static class BinaryTreeNode {\n\n\n\n        private int data;  //节点的具体数据\n\n        private BinaryTreeNode leftChirld;  //左孩子\n\n        private BinaryTreeNode rightChirld; //右孩子\n\n        private BinaryTreeNode(int x)\n\n        {\n\n            data=x;\n\n        }\n\n    }\n\n```\n\n\n\n#### 满二叉树\n\n\n\n所有结点（除了叶子结点外）都有左节点和右节点\n\n\n\n#### 完全二叉树\n\n\n\n假设完全二叉树高度为k，则完全二叉树需要符合以下两点：\n\n 1）所有叶子节点都出现在k层或k-1层，并且从1~k-1层必须达到最大节点数。\n\n 2）第k层可以是不满的，但是第k层的所有节点必须集中在最左边。\n\n\n\n#### 平衡二叉树\n\n\n\n#### 二叉搜索树\n\n\n\n#### 红黑树\n\n\n\n1. 根节点是【黑色】\n\n2. 每个节点要么是【黑色】要么是【红色】\n\n3. 每个【红色】节点的两个子节点一定都是【黑色】\n\n4. 每个叶子节点（NIL）都是【黑色】\n\n5. 任意一个节点的路径到叶子节点所包含的【黑色】节点的数量是相同的---这个也称之为【黑色完美平衡】\n\n6. 新插入的节点必须是【红色】->为什么？如果新插入的节点是【黑色】，那不管是在插入到那里，一定会破坏黑色完美平衡的，因为任意一个节点的路径到叶子节点的黑色节点的数量肯定不一样了（第 6 点我自己加的，实际特性的定义是前 5 个\n\n\n\n左旋\n\n\n\n以某个节点作为固定支撑点（围绕该节点旋转）,其右子节点变为旋转节点的父节点，右子节点的左子节点变为旋转节点的右子节点，左子节点保持不变\n\n\n\n右旋\n\n\n\n以某个节点作为固定支撑点（围绕该节点旋转）,其左子节点变为旋转节点的父节点，左子节点的右子节点变为旋转节点的左子节点，右子节点保持不变\n\n\n\n#### 节点数\n\n\n\n```java\n\n// 定义：count(root) 返回以 root 为根的树有多少节点\n\nint count(TreeNode root) {\n\n    // base case\n\n    if (root == null) return 0;\n\n    // 自己加上子树的节点数就是整棵树的节点数\n\n    return 1 + count(root.left) + count(root.right);\n\n}\n\n```\n\n\n\n## 遍历\n\n\n\n### DFS\n\n\n\n深度优先遍历\n\n\n\n在我的理解中，其实深度优先遍历很简单，比如说是[1,2,3],就是随机选择一个点开始，比如说选择1，然后接着就是2和3随机选择一个，比如说选择2，最后就是3，路径就是[1,2,3]\n\n\n\n算法实现思路：\n\n\n\n首先所有数据的组合是一个数组，这个数组以树的方式类进行排列\n\n\n\n树的话遍历的画需要知道第几层，于是path这个栈来了\n\n\n\n```java\n\npackage algorithm;\n\n\n\nimport java.util.*;\n\n\n\npublic class demo {\n\n    public static List<List<Integer>> s(int[] nums)\n\n    {\n\n        int lens=nums.length;\n\n        List<List<Integer>> res = new ArrayList<>();\n\n        if(lens==0)\n\n        {\n\n            return res;\n\n        }\n\n        //path  递归到第一层\n\n        //path  已经选了哪些树\n\n        //used  表示哪个树已经被触碰过了\n\n        Deque<Integer> path = new ArrayDeque<Integer>();\n\n        boolean[] used = new boolean[lens];\n\n        dfs(nums,lens,0,path,used,res);\n\n        return res;\n\n    }\n\n\n\n    private static void dfs(int[] nums, int lens, int depth, Deque<Integer> path, boolean[] used, List<List<Integer>> res) {\n\n        if(depth==lens)\n\n        {\n\n            res.add(new ArrayList<>(path));\n\n            return;\n\n        }\n\n        for (int i = 0; i < lens; i++) {\n\n            if(used[i])\n\n            {\n\n               continue;\n\n            }\n\n            path.addLast(nums[i]);\n\n            used[i]=true;\n\n            dfs(nums,lens,depth+1,path,used,res);\n\n            path.removeLast();\n\n            used[i]=false;\n\n        }\n\n    }\n\n    }\n\n}\n\n```\n\n\n\n### 层次遍历\n\n\n\n```java\n\n        public static List<List<Integer>> levelOrder(TreeNode root) {\n\n        List<List<Integer>> result= new ArrayList<>();\n\n        if(root==null){\n\n            return result;\n\n        }\n\n        //创建队列，将root加入，建立第一层\n\n        Queue<TreeNode> queue = new LinkedList<>();\n\n        queue.offer(root);\n\n        //遍历每一层节点的同时将下一层节点放进队列\n\n        while(!queue.isEmpty()){\n\n            int size = queue.size();\n\n            List<Integer> level = new ArrayList<>();\n\n            //遍历上层节点，拓展队列，将下层节点加到队列\n\n            for(int i=0;i<size;i++){\n\n                TreeNode node = queue.poll();\n\n                level.add(node.val);\n\n                if(node.left!=null){\n\n                    queue.offer(node.left);\n\n                }\n\n                if(node.right!=null){\n\n                    queue.offer(node.right);\n\n                }\n\n            }\n\n            //将第x层遍历list放进最终大的list\n\n            result.add(level);    \n\n        }\n\n        return result;\n\n    }\n\n```\n\n\n\n### 前序遍历\n\n\n\n快速排序其实用的就是 二叉树的前序遍历\n\n\n\n归并排序用的是 分治思想\n\n\n\n```java\n\npublic void inorder(TreeNode root, List<Integer> res) {\n\n        if (root == null) {\n\n            return;\n\n        };\n\n        res.add(root.val);\n\n        inorder(root.left, res);\n\n        inorder(root.right, res);\n\n    }\n\n```\n\n\n\n\n\n\n\n> 前中后序遍历中的前中后，讲的是根节点的位置，比如\n\n>\n\n> 前序遍历：先是根节点，接着左节点，最后右节点\n\n>\n\n> 中序遍历：先是左节点，接着根节点，最后右节点\n\n>\n\n> 后序遍历：先是左节点，接着右节点，最后根节点\n\n\n\n### 中序遍历\n\n\n\n```java\n\npublic void inorder(TreeNode root, List<Integer> res) {\n\n        if (root == null) {\n\n            return;\n\n        };\n\n        inorder(root.left, res);\n\n        res.add(root.val);\n\n        inorder(root.right, res);\n\n    }\n\n```\n\n\n\n\n\n\n\n### 后序遍历\n\n\n\n```java\n\npublic void inorder(TreeNode root, List<Integer> res) {\n\n        if (root == null) {\n\n            return;\n\n        };\n\n        inorder(root.left, res);\n\n        inorder(root.right, res);\n\n    res.add(root.val);\n\n    }\n\n```\n\n\n","source":"_posts/树.md","raw":"---\ntitle: 树\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 7b216a3b\ndate: 2021-04-08 00:00:00\n---\n\n\n## 基础认识\n\n\n\n<!-- more -->\n\n\n\n#### 二叉树\n\n\n\n二叉树，顾名思义就是一个结点有两个分叉就是二叉树\n\n\n\n创建一个二叉树\n\n\n\n```java\n\n    public static class BinaryTreeNode {\n\n\n\n        private int data;  //节点的具体数据\n\n        private BinaryTreeNode leftChirld;  //左孩子\n\n        private BinaryTreeNode rightChirld; //右孩子\n\n        private BinaryTreeNode(int x)\n\n        {\n\n            data=x;\n\n        }\n\n    }\n\n```\n\n\n\n#### 满二叉树\n\n\n\n所有结点（除了叶子结点外）都有左节点和右节点\n\n\n\n#### 完全二叉树\n\n\n\n假设完全二叉树高度为k，则完全二叉树需要符合以下两点：\n\n 1）所有叶子节点都出现在k层或k-1层，并且从1~k-1层必须达到最大节点数。\n\n 2）第k层可以是不满的，但是第k层的所有节点必须集中在最左边。\n\n\n\n#### 平衡二叉树\n\n\n\n#### 二叉搜索树\n\n\n\n#### 红黑树\n\n\n\n1. 根节点是【黑色】\n\n2. 每个节点要么是【黑色】要么是【红色】\n\n3. 每个【红色】节点的两个子节点一定都是【黑色】\n\n4. 每个叶子节点（NIL）都是【黑色】\n\n5. 任意一个节点的路径到叶子节点所包含的【黑色】节点的数量是相同的---这个也称之为【黑色完美平衡】\n\n6. 新插入的节点必须是【红色】->为什么？如果新插入的节点是【黑色】，那不管是在插入到那里，一定会破坏黑色完美平衡的，因为任意一个节点的路径到叶子节点的黑色节点的数量肯定不一样了（第 6 点我自己加的，实际特性的定义是前 5 个\n\n\n\n左旋\n\n\n\n以某个节点作为固定支撑点（围绕该节点旋转）,其右子节点变为旋转节点的父节点，右子节点的左子节点变为旋转节点的右子节点，左子节点保持不变\n\n\n\n右旋\n\n\n\n以某个节点作为固定支撑点（围绕该节点旋转）,其左子节点变为旋转节点的父节点，左子节点的右子节点变为旋转节点的左子节点，右子节点保持不变\n\n\n\n#### 节点数\n\n\n\n```java\n\n// 定义：count(root) 返回以 root 为根的树有多少节点\n\nint count(TreeNode root) {\n\n    // base case\n\n    if (root == null) return 0;\n\n    // 自己加上子树的节点数就是整棵树的节点数\n\n    return 1 + count(root.left) + count(root.right);\n\n}\n\n```\n\n\n\n## 遍历\n\n\n\n### DFS\n\n\n\n深度优先遍历\n\n\n\n在我的理解中，其实深度优先遍历很简单，比如说是[1,2,3],就是随机选择一个点开始，比如说选择1，然后接着就是2和3随机选择一个，比如说选择2，最后就是3，路径就是[1,2,3]\n\n\n\n算法实现思路：\n\n\n\n首先所有数据的组合是一个数组，这个数组以树的方式类进行排列\n\n\n\n树的话遍历的画需要知道第几层，于是path这个栈来了\n\n\n\n```java\n\npackage algorithm;\n\n\n\nimport java.util.*;\n\n\n\npublic class demo {\n\n    public static List<List<Integer>> s(int[] nums)\n\n    {\n\n        int lens=nums.length;\n\n        List<List<Integer>> res = new ArrayList<>();\n\n        if(lens==0)\n\n        {\n\n            return res;\n\n        }\n\n        //path  递归到第一层\n\n        //path  已经选了哪些树\n\n        //used  表示哪个树已经被触碰过了\n\n        Deque<Integer> path = new ArrayDeque<Integer>();\n\n        boolean[] used = new boolean[lens];\n\n        dfs(nums,lens,0,path,used,res);\n\n        return res;\n\n    }\n\n\n\n    private static void dfs(int[] nums, int lens, int depth, Deque<Integer> path, boolean[] used, List<List<Integer>> res) {\n\n        if(depth==lens)\n\n        {\n\n            res.add(new ArrayList<>(path));\n\n            return;\n\n        }\n\n        for (int i = 0; i < lens; i++) {\n\n            if(used[i])\n\n            {\n\n               continue;\n\n            }\n\n            path.addLast(nums[i]);\n\n            used[i]=true;\n\n            dfs(nums,lens,depth+1,path,used,res);\n\n            path.removeLast();\n\n            used[i]=false;\n\n        }\n\n    }\n\n    }\n\n}\n\n```\n\n\n\n### 层次遍历\n\n\n\n```java\n\n        public static List<List<Integer>> levelOrder(TreeNode root) {\n\n        List<List<Integer>> result= new ArrayList<>();\n\n        if(root==null){\n\n            return result;\n\n        }\n\n        //创建队列，将root加入，建立第一层\n\n        Queue<TreeNode> queue = new LinkedList<>();\n\n        queue.offer(root);\n\n        //遍历每一层节点的同时将下一层节点放进队列\n\n        while(!queue.isEmpty()){\n\n            int size = queue.size();\n\n            List<Integer> level = new ArrayList<>();\n\n            //遍历上层节点，拓展队列，将下层节点加到队列\n\n            for(int i=0;i<size;i++){\n\n                TreeNode node = queue.poll();\n\n                level.add(node.val);\n\n                if(node.left!=null){\n\n                    queue.offer(node.left);\n\n                }\n\n                if(node.right!=null){\n\n                    queue.offer(node.right);\n\n                }\n\n            }\n\n            //将第x层遍历list放进最终大的list\n\n            result.add(level);    \n\n        }\n\n        return result;\n\n    }\n\n```\n\n\n\n### 前序遍历\n\n\n\n快速排序其实用的就是 二叉树的前序遍历\n\n\n\n归并排序用的是 分治思想\n\n\n\n```java\n\npublic void inorder(TreeNode root, List<Integer> res) {\n\n        if (root == null) {\n\n            return;\n\n        };\n\n        res.add(root.val);\n\n        inorder(root.left, res);\n\n        inorder(root.right, res);\n\n    }\n\n```\n\n\n\n\n\n\n\n> 前中后序遍历中的前中后，讲的是根节点的位置，比如\n\n>\n\n> 前序遍历：先是根节点，接着左节点，最后右节点\n\n>\n\n> 中序遍历：先是左节点，接着根节点，最后右节点\n\n>\n\n> 后序遍历：先是左节点，接着右节点，最后根节点\n\n\n\n### 中序遍历\n\n\n\n```java\n\npublic void inorder(TreeNode root, List<Integer> res) {\n\n        if (root == null) {\n\n            return;\n\n        };\n\n        inorder(root.left, res);\n\n        res.add(root.val);\n\n        inorder(root.right, res);\n\n    }\n\n```\n\n\n\n\n\n\n\n### 后序遍历\n\n\n\n```java\n\npublic void inorder(TreeNode root, List<Integer> res) {\n\n        if (root == null) {\n\n            return;\n\n        };\n\n        inorder(root.left, res);\n\n        inorder(root.right, res);\n\n    res.add(root.val);\n\n    }\n\n```\n\n\n","slug":"树","published":1,"updated":"2025-03-02T03:37:34.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp5b005gn0ukeaui46jn","content":"<h2 id=\"基础认识\"><a href=\"#基础认识\" class=\"headerlink\" title=\"基础认识\"></a>基础认识</h2><span id=\"more\"></span>\n\n\n\n<h4 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h4><p>二叉树，顾名思义就是一个结点有两个分叉就是二叉树</p>\n<p>创建一个二叉树</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BinaryTreeNode</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> data;  <span class=\"comment\">//节点的具体数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BinaryTreeNode leftChirld;  <span class=\"comment\">//左孩子</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BinaryTreeNode rightChirld; <span class=\"comment\">//右孩子</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">BinaryTreeNode</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        data=x;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"满二叉树\"><a href=\"#满二叉树\" class=\"headerlink\" title=\"满二叉树\"></a>满二叉树</h4><p>所有结点（除了叶子结点外）都有左节点和右节点</p>\n<h4 id=\"完全二叉树\"><a href=\"#完全二叉树\" class=\"headerlink\" title=\"完全二叉树\"></a>完全二叉树</h4><p>假设完全二叉树高度为k，则完全二叉树需要符合以下两点：</p>\n<p> 1）所有叶子节点都出现在k层或k-1层，并且从1~k-1层必须达到最大节点数。</p>\n<p> 2）第k层可以是不满的，但是第k层的所有节点必须集中在最左边。</p>\n<h4 id=\"平衡二叉树\"><a href=\"#平衡二叉树\" class=\"headerlink\" title=\"平衡二叉树\"></a>平衡二叉树</h4><h4 id=\"二叉搜索树\"><a href=\"#二叉搜索树\" class=\"headerlink\" title=\"二叉搜索树\"></a>二叉搜索树</h4><h4 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a>红黑树</h4><ol>\n<li><p>根节点是【黑色】</p>\n</li>\n<li><p>每个节点要么是【黑色】要么是【红色】</p>\n</li>\n<li><p>每个【红色】节点的两个子节点一定都是【黑色】</p>\n</li>\n<li><p>每个叶子节点（NIL）都是【黑色】</p>\n</li>\n<li><p>任意一个节点的路径到叶子节点所包含的【黑色】节点的数量是相同的---这个也称之为【黑色完美平衡】</p>\n</li>\n<li><p>新插入的节点必须是【红色】-&gt;为什么？如果新插入的节点是【黑色】，那不管是在插入到那里，一定会破坏黑色完美平衡的，因为任意一个节点的路径到叶子节点的黑色节点的数量肯定不一样了（第 6 点我自己加的，实际特性的定义是前 5 个</p>\n</li>\n</ol>\n<p>左旋</p>\n<p>以某个节点作为固定支撑点（围绕该节点旋转）,其右子节点变为旋转节点的父节点，右子节点的左子节点变为旋转节点的右子节点，左子节点保持不变</p>\n<p>右旋</p>\n<p>以某个节点作为固定支撑点（围绕该节点旋转）,其左子节点变为旋转节点的父节点，左子节点的右子节点变为旋转节点的左子节点，右子节点保持不变</p>\n<h4 id=\"节点数\"><a href=\"#节点数\" class=\"headerlink\" title=\"节点数\"></a>节点数</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义：count(root) 返回以 root 为根的树有多少节点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">count</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// base case</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 自己加上子树的节点数就是整棵树的节点数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> + count(root.left) + count(root.right);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h2><h3 id=\"DFS\"><a href=\"#DFS\" class=\"headerlink\" title=\"DFS\"></a>DFS</h3><p>深度优先遍历</p>\n<p>在我的理解中，其实深度优先遍历很简单，比如说是[1,2,3],就是随机选择一个点开始，比如说选择1，然后接着就是2和3随机选择一个，比如说选择2，最后就是3，路径就是[1,2,3]</p>\n<p>算法实现思路：</p>\n<p>首先所有数据的组合是一个数组，这个数组以树的方式类进行排列</p>\n<p>树的话遍历的画需要知道第几层，于是path这个栈来了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> algorithm;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">s</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> lens=nums.length;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(lens==<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//path  递归到第一层</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//path  已经选了哪些树</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//used  表示哪个树已经被触碰过了</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Deque&lt;Integer&gt; path = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayDeque</span>&lt;Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">boolean</span>[] used = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[lens];</span><br><span class=\"line\"></span><br><span class=\"line\">        dfs(nums,lens,<span class=\"number\">0</span>,path,used,res);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> lens, <span class=\"type\">int</span> depth, Deque&lt;Integer&gt; path, <span class=\"type\">boolean</span>[] used, List&lt;List&lt;Integer&gt;&gt; res)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(depth==lens)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            res.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(path));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; lens; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(used[i])</span><br><span class=\"line\"></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            path.addLast(nums[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">            used[i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            dfs(nums,lens,depth+<span class=\"number\">1</span>,path,used,res);</span><br><span class=\"line\"></span><br><span class=\"line\">            path.removeLast();</span><br><span class=\"line\"></span><br><span class=\"line\">            used[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"层次遍历\"><a href=\"#层次遍历\" class=\"headerlink\" title=\"层次遍历\"></a>层次遍历</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">levelOrder</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result= <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建队列，将root加入，建立第一层</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Queue&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    queue.offer(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//遍历每一层节点的同时将下一层节点放进队列</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!queue.isEmpty())&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> queue.size();</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Integer&gt; level = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//遍历上层节点，拓展队列，将下层节点加到队列</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;size;i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">TreeNode</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> queue.poll();</span><br><span class=\"line\"></span><br><span class=\"line\">            level.add(node.val);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.left!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                queue.offer(node.left);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.right!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                queue.offer(node.right);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将第x层遍历list放进最终大的list</span></span><br><span class=\"line\"></span><br><span class=\"line\">        result.add(level);    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h3><p>快速排序其实用的就是 二叉树的前序遍历</p>\n<p>归并排序用的是 分治思想</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">inorder</span><span class=\"params\">(TreeNode root, List&lt;Integer&gt; res)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        res.add(root.val);</span><br><span class=\"line\"></span><br><span class=\"line\">        inorder(root.left, res);</span><br><span class=\"line\"></span><br><span class=\"line\">        inorder(root.right, res);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<blockquote>\n<p>前中后序遍历中的前中后，讲的是根节点的位置，比如</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>前序遍历：先是根节点，接着左节点，最后右节点</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>中序遍历：先是左节点，接着根节点，最后右节点</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>后序遍历：先是左节点，接着右节点，最后根节点</p>\n</blockquote>\n<h3 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">inorder</span><span class=\"params\">(TreeNode root, List&lt;Integer&gt; res)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        inorder(root.left, res);</span><br><span class=\"line\"></span><br><span class=\"line\">        res.add(root.val);</span><br><span class=\"line\"></span><br><span class=\"line\">        inorder(root.right, res);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h3 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">inorder</span><span class=\"params\">(TreeNode root, List&lt;Integer&gt; res)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        inorder(root.left, res);</span><br><span class=\"line\"></span><br><span class=\"line\">        inorder(root.right, res);</span><br><span class=\"line\"></span><br><span class=\"line\">    res.add(root.val);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"基础认识\n二叉树\n二叉树，顾名思义就是一个结点有两个分叉就是二叉树\n\n创建一个二叉树\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\npublic static class BinaryTreeNode {\n\n\n\n    private int data;  //节点的具体数据\n\n    private BinaryTreeNode leftChirld;  //左孩子\n\n    private BinaryTreeNode rightChirld; //右孩子\n\n    private BinaryTreeNode(int ","more":"<h4 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h4><p>二叉树，顾名思义就是一个结点有两个分叉就是二叉树</p>\n<p>创建一个二叉树</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BinaryTreeNode</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> data;  <span class=\"comment\">//节点的具体数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BinaryTreeNode leftChirld;  <span class=\"comment\">//左孩子</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BinaryTreeNode rightChirld; <span class=\"comment\">//右孩子</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">BinaryTreeNode</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        data=x;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"满二叉树\"><a href=\"#满二叉树\" class=\"headerlink\" title=\"满二叉树\"></a>满二叉树</h4><p>所有结点（除了叶子结点外）都有左节点和右节点</p>\n<h4 id=\"完全二叉树\"><a href=\"#完全二叉树\" class=\"headerlink\" title=\"完全二叉树\"></a>完全二叉树</h4><p>假设完全二叉树高度为k，则完全二叉树需要符合以下两点：</p>\n<p> 1）所有叶子节点都出现在k层或k-1层，并且从1~k-1层必须达到最大节点数。</p>\n<p> 2）第k层可以是不满的，但是第k层的所有节点必须集中在最左边。</p>\n<h4 id=\"平衡二叉树\"><a href=\"#平衡二叉树\" class=\"headerlink\" title=\"平衡二叉树\"></a>平衡二叉树</h4><h4 id=\"二叉搜索树\"><a href=\"#二叉搜索树\" class=\"headerlink\" title=\"二叉搜索树\"></a>二叉搜索树</h4><h4 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a>红黑树</h4><ol>\n<li><p>根节点是【黑色】</p>\n</li>\n<li><p>每个节点要么是【黑色】要么是【红色】</p>\n</li>\n<li><p>每个【红色】节点的两个子节点一定都是【黑色】</p>\n</li>\n<li><p>每个叶子节点（NIL）都是【黑色】</p>\n</li>\n<li><p>任意一个节点的路径到叶子节点所包含的【黑色】节点的数量是相同的---这个也称之为【黑色完美平衡】</p>\n</li>\n<li><p>新插入的节点必须是【红色】-&gt;为什么？如果新插入的节点是【黑色】，那不管是在插入到那里，一定会破坏黑色完美平衡的，因为任意一个节点的路径到叶子节点的黑色节点的数量肯定不一样了（第 6 点我自己加的，实际特性的定义是前 5 个</p>\n</li>\n</ol>\n<p>左旋</p>\n<p>以某个节点作为固定支撑点（围绕该节点旋转）,其右子节点变为旋转节点的父节点，右子节点的左子节点变为旋转节点的右子节点，左子节点保持不变</p>\n<p>右旋</p>\n<p>以某个节点作为固定支撑点（围绕该节点旋转）,其左子节点变为旋转节点的父节点，左子节点的右子节点变为旋转节点的左子节点，右子节点保持不变</p>\n<h4 id=\"节点数\"><a href=\"#节点数\" class=\"headerlink\" title=\"节点数\"></a>节点数</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义：count(root) 返回以 root 为根的树有多少节点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">count</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// base case</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 自己加上子树的节点数就是整棵树的节点数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> + count(root.left) + count(root.right);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h2><h3 id=\"DFS\"><a href=\"#DFS\" class=\"headerlink\" title=\"DFS\"></a>DFS</h3><p>深度优先遍历</p>\n<p>在我的理解中，其实深度优先遍历很简单，比如说是[1,2,3],就是随机选择一个点开始，比如说选择1，然后接着就是2和3随机选择一个，比如说选择2，最后就是3，路径就是[1,2,3]</p>\n<p>算法实现思路：</p>\n<p>首先所有数据的组合是一个数组，这个数组以树的方式类进行排列</p>\n<p>树的话遍历的画需要知道第几层，于是path这个栈来了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> algorithm;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">s</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> lens=nums.length;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(lens==<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//path  递归到第一层</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//path  已经选了哪些树</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//used  表示哪个树已经被触碰过了</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Deque&lt;Integer&gt; path = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayDeque</span>&lt;Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">boolean</span>[] used = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[lens];</span><br><span class=\"line\"></span><br><span class=\"line\">        dfs(nums,lens,<span class=\"number\">0</span>,path,used,res);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> lens, <span class=\"type\">int</span> depth, Deque&lt;Integer&gt; path, <span class=\"type\">boolean</span>[] used, List&lt;List&lt;Integer&gt;&gt; res)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(depth==lens)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            res.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(path));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; lens; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(used[i])</span><br><span class=\"line\"></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            path.addLast(nums[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">            used[i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            dfs(nums,lens,depth+<span class=\"number\">1</span>,path,used,res);</span><br><span class=\"line\"></span><br><span class=\"line\">            path.removeLast();</span><br><span class=\"line\"></span><br><span class=\"line\">            used[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"层次遍历\"><a href=\"#层次遍历\" class=\"headerlink\" title=\"层次遍历\"></a>层次遍历</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">levelOrder</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result= <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建队列，将root加入，建立第一层</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Queue&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    queue.offer(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//遍历每一层节点的同时将下一层节点放进队列</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!queue.isEmpty())&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> queue.size();</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Integer&gt; level = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//遍历上层节点，拓展队列，将下层节点加到队列</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;size;i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">TreeNode</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> queue.poll();</span><br><span class=\"line\"></span><br><span class=\"line\">            level.add(node.val);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.left!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                queue.offer(node.left);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.right!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                queue.offer(node.right);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将第x层遍历list放进最终大的list</span></span><br><span class=\"line\"></span><br><span class=\"line\">        result.add(level);    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h3><p>快速排序其实用的就是 二叉树的前序遍历</p>\n<p>归并排序用的是 分治思想</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">inorder</span><span class=\"params\">(TreeNode root, List&lt;Integer&gt; res)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        res.add(root.val);</span><br><span class=\"line\"></span><br><span class=\"line\">        inorder(root.left, res);</span><br><span class=\"line\"></span><br><span class=\"line\">        inorder(root.right, res);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<blockquote>\n<p>前中后序遍历中的前中后，讲的是根节点的位置，比如</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>前序遍历：先是根节点，接着左节点，最后右节点</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>中序遍历：先是左节点，接着根节点，最后右节点</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>后序遍历：先是左节点，接着右节点，最后根节点</p>\n</blockquote>\n<h3 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">inorder</span><span class=\"params\">(TreeNode root, List&lt;Integer&gt; res)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        inorder(root.left, res);</span><br><span class=\"line\"></span><br><span class=\"line\">        res.add(root.val);</span><br><span class=\"line\"></span><br><span class=\"line\">        inorder(root.right, res);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h3 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">inorder</span><span class=\"params\">(TreeNode root, List&lt;Integer&gt; res)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        inorder(root.left, res);</span><br><span class=\"line\"></span><br><span class=\"line\">        inorder(root.right, res);</span><br><span class=\"line\"></span><br><span class=\"line\">    res.add(root.val);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"添加waline评论系统","description":"","abbrlink":"4c9421db","date":"2023-05-15T16:00:00.000Z","_content":"\n\n记录下我添加这个评论系统的一些问题\n\n\n\n<!-- more -->\n\n\n\n# 参考链接\n\n\n\n- [Hexo: Next 主题使用 Waline 评论系统](https://www.zuicy.party/2022/05/03/Hexo_Next_%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8_Waline%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/#%E6%9B%B4%E6%96%B0NexT%E5%88%B0v8-5-0)\n\n\n\n# 问题\n\n\n\n- 我一开始是使用的LeanCloud的华北的，但是有点问题，没有独立的域名，所以我又在国际版注册一下就好了。\n\n- vercl的环境变量配置正确，基本就没啥问题了\n","source":"_posts/添加waline评论系统.md","raw":"---\ntitle: 添加waline评论系统\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 4c9421db\ndate: 2023-05-16 00:00:00\n---\n\n\n记录下我添加这个评论系统的一些问题\n\n\n\n<!-- more -->\n\n\n\n# 参考链接\n\n\n\n- [Hexo: Next 主题使用 Waline 评论系统](https://www.zuicy.party/2022/05/03/Hexo_Next_%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8_Waline%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/#%E6%9B%B4%E6%96%B0NexT%E5%88%B0v8-5-0)\n\n\n\n# 问题\n\n\n\n- 我一开始是使用的LeanCloud的华北的，但是有点问题，没有独立的域名，所以我又在国际版注册一下就好了。\n\n- vercl的环境变量配置正确，基本就没啥问题了\n","slug":"添加waline评论系统","published":1,"updated":"2025-03-02T03:37:34.440Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp5c005in0uk3d3b20tj","content":"<p>记录下我添加这个评论系统的一些问题</p>\n<span id=\"more\"></span>\n\n\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuenVpY3kucGFydHkvMjAyMi8wNS8wMy9IZXhvX05leHRfJUU0JUI4JUJCJUU5JUEyJTk4JUU0JUJEJUJGJUU3JTk0JUE4X1dhbGluZSVFOCVBRiU4NCVFOCVBRSVCQSVFNyVCMyVCQiVFNyVCQiU5Ri8jJUU2JTlCJUI0JUU2JTk2JUIwTmV4VCVFNSU4OCVCMHY4LTUtMA==\">Hexo: Next 主题使用 Waline 评论系统<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><ul>\n<li><p>我一开始是使用的LeanCloud的华北的，但是有点问题，没有独立的域名，所以我又在国际版注册一下就好了。</p>\n</li>\n<li><p>vercl的环境变量配置正确，基本就没啥问题了</p>\n</li>\n</ul>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"记录下我添加这个评论系统的一些问题\n\n参考链接\n * Hexo: Next 主题使用 Waline 评论系统\n\n问题\n * 我一开始是使用的LeanCloud的华北的，但是有点问题，没有独立的域名，所以我又在国际版注册一下就好了。\n   \n   \n * vercl的环境变量配置正确，基本就没啥问题了","more":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuenVpY3kucGFydHkvMjAyMi8wNS8wMy9IZXhvX05leHRfJUU0JUI4JUJCJUU5JUEyJTk4JUU0JUJEJUJGJUU3JTk0JUE4X1dhbGluZSVFOCVBRiU4NCVFOCVBRSVCQSVFNyVCMyVCQiVFNyVCQiU5Ri8jJUU2JTlCJUI0JUU2JTk2JUIwTmV4VCVFNSU4OCVCMHY4LTUtMA==\">Hexo: Next 主题使用 Waline 评论系统<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><ul>\n<li><p>我一开始是使用的LeanCloud的华北的，但是有点问题，没有独立的域名，所以我又在国际版注册一下就好了。</p>\n</li>\n<li><p>vercl的环境变量配置正确，基本就没啥问题了</p>\n</li>\n</ul>"},{"title":"相亲回忆录","description":"","abbrlink":"b4813703","date":"2023-08-16T16:00:00.000Z","_content":"\n\n# 前情提要\n\n\n\n简单介绍下我的感情经历，除了高中有一个女孩给我主动表白之后，就没有再谈过恋爱了，大学没有谈过，一直到现在了，如果高中不算的话，其实就是母胎solo 26年，高中那段还结束的很戏剧，哎！\n\n\n\n目前是三月份回到河南省一个小县城工作了，至今已经工作了五个月了，相亲了六七个吧，现在突然闲来无事，不如写个文章纪念一下。\n\n\n\n> 中间差不多没有什么值得纪念的事情的话，就直接略过了\n\n\n\n# 女嘉宾\n\n\n\n## 第一位\n\n\n\n公务员，网上聊了几个月，感觉还行，回来老家，看了个电影，然后回来之后微信就说不合适了，我调侃了下，说我觉得挺合适的呀，她说你别开玩笑，就这样不了了之了，到现在为止 中间似乎突然找她聊天过，她已经谈恋爱了，是从一个桌游上认识的，她觉得目前的变化就是从一个人的无聊变成了两个人的无聊，我听到后 不知道作何回复了，以为刚开始都是甜甜的恋爱那\n\n\n\n她是目前为止就是拒绝之后还继续微信回我消息的人了，我相亲了六七个吧，大部分都是见一面回去微信就不回话了，我也懂得，不回话就是一种拒绝了，不会去自讨没趣，下一个。\n\n\n\n中间她还说了拒绝我的一个理由是，不喜欢相亲这种形式，感觉目的性太强了，不舒服。\n\n\n\n### 经验教训\n\n\n\n- 都已经相亲了，不要在网上聊太长时间，大概认识之后，就直接线下见面，可能见一面人家看不上你就直接不用聊天了，浪费时间\n\n- 你发消息 几天不回复 基本上就是不感兴趣，建议下一个，不要当舔狗，舔狗没有未来\n\n\n\n## 第二位\n\n\n\n初中教师，吸取之前经验教训，微信加上之后，大概聊天之后，就约了第一次见面，我开车去她学校门口接她，去吃的县城里唯一一家的海底捞，饭桌上，她有些奇怪，她吃火锅不吃酱料，各种都是直接吃的，吃的很少，说是胃里不太舒服，那我也没有强迫她，就自己吃的多了一点，中间吃饭聊天感觉还行，结账两百多，她问我要不要人均，我想着，我第一次请客吃饭，就没有必要aa了吧，于是大气一挥，不用，于是就送她回学校让她骑自己电动车回家了。微信上之后回复也是不合适，本以为这件事就这么结合了，没有想到这件事情还有后续。\n\n\n\n家里人有一天突然给我说，这个女的回去和自己的家人说，我第一次请她吃海底捞，就花了两百多，这消费太高了，她感觉消费观不太一样，我大为震惊，第一次听说请客吃饭太贵了，然后觉得不合适的，直接刷新了我的三观。老家这边其实平均工资也就是3k左右，尤其她是教师，说是教师的圈子，大家可能都比较节俭，这我可以理解，但是她是因为这说不合适，也是震惊到我了，当然也可能这只是觉得不合适然后随便给的一个理由而已。\n\n\n\n### 经验教训\n\n\n\n我只管做好自己的，至于对面怎么说，不去管他，毕竟啥人都有，各种奇葩理由也是丰富多样。\n\n\n\n其实中间还和一些认识的人，说是按照家里这月薪3k的水平，每次去见一个相亲对象的时候，都不要花费一两百这样，直接去买杯奶茶，随便去路边或者一个地方坐坐就行了，要不一个月多见几个相亲对象，一个月工资都没有了。我后来想想也确实，但是一直没有付诸于实践过，有点不好意思。\n\n\n\n## 第三位\n\n\n\n幼师，临时工，不是在编的幼师，她是我大靖介绍的,她问我的大靖叫做老姨的，关系很近，聊了几次，感觉也还行，就是感觉没有什么共同的兴趣爱好，家里人让继续聊，我也就继续了，昨天晚上一起吃饭，突然说到 我们这关系太近了，当朋友可以，如果谈恋爱的感觉有些奇怪，其实我也这样觉得，如果分手或者闹矛盾什么的，家里人都来说，就比较尴尬了，看到说的已经这么明确，我已经知道她这就是明确的拒绝了，那挺好，就下一个吧。\n\n\n\n### 经验教训\n\n\n\n- 不要去找关系太近的亲戚谈恋爱，如果有啥矛盾都会搞的人尽皆知，很麻烦\n\n\n\n## 第四位\n\n\n\n我姑姑和我表弟在逛街的时候一个卖鞋的老板娘的女儿，要了电话，加了微信，就开始聊天了，她的工作和我的工作有一些相同的地方，因此还算是有些共同话题，约了几次吃饭，崩盘的时刻，在于第三次见面的时候，先去吃了烧烤，然后去一个那种小的放映室一起看 巨齿鲨2，看了一会，由于之前听说什么约了一个月就可以 牵手试试之类的，于是我那个时候有些上头，心里总在想这个事情，那颤动的手，看看她的手距离好远，心想，这氛围不对，强行牵扯好尴尬的，踌躇犹豫了好久，突然就猛的一下决心，手就准备去牵她的手，果不其然，我被拒绝了，她还问我，你干啥，我就趁机说了几句，你觉得我怎么样之类的话，她说还行，真诚，老实，我说那要不我们谈谈试试，她犹豫了一会，说让她想想再说好突然，我那，当时，上头，又强行牵了一次，结果把人家女孩吓到了估计，借口上厕所就走了。之后回去微信就不怎么搭理我了，过了一周之后，就突然怎么都不搭理我了，我也就不想搭理她了，不想当一个舔狗，如果人家真的没有一丁点想法，我又何必庸人自扰那\n\n\n\n### 经验教训\n\n\n\n- 我发现自己可能没有了喜欢的能力，不知道喜欢一个什么样子的女孩，感觉自己是很被动的，然后自己也没有什么特别的才华，或者相貌，家室或者什么，等待女孩来示好也明显不太可能，尬住\n\n- 这次上头的原因很简单，其实就是最近开始对女性有了这个所谓的性冲动，在之前的二十几年当中，似乎是没有的，或者说是被压抑的，没有自己鲁管过，好像大部分都是一梦无痕吧，精满自溢 吧。\n\n- 男人还是要把控住自己不要被下半身支配才行，要理智，在合适的氛围做合适的事情才行，要不就会成我这样，被对方当成禽兽，然后从此失去机会\n\n- 还是要找自己喜欢的才行，至少要有所谓的crush才行，不能强来，即使是性冲动的crush\n","source":"_posts/相亲回忆录.md","raw":"---\ntitle: 相亲回忆录\ndescription: ''\ntags:\n  - 无标签\nabbrlink: b4813703\ndate: 2023-08-17 00:00:00\n---\n\n\n# 前情提要\n\n\n\n简单介绍下我的感情经历，除了高中有一个女孩给我主动表白之后，就没有再谈过恋爱了，大学没有谈过，一直到现在了，如果高中不算的话，其实就是母胎solo 26年，高中那段还结束的很戏剧，哎！\n\n\n\n目前是三月份回到河南省一个小县城工作了，至今已经工作了五个月了，相亲了六七个吧，现在突然闲来无事，不如写个文章纪念一下。\n\n\n\n> 中间差不多没有什么值得纪念的事情的话，就直接略过了\n\n\n\n# 女嘉宾\n\n\n\n## 第一位\n\n\n\n公务员，网上聊了几个月，感觉还行，回来老家，看了个电影，然后回来之后微信就说不合适了，我调侃了下，说我觉得挺合适的呀，她说你别开玩笑，就这样不了了之了，到现在为止 中间似乎突然找她聊天过，她已经谈恋爱了，是从一个桌游上认识的，她觉得目前的变化就是从一个人的无聊变成了两个人的无聊，我听到后 不知道作何回复了，以为刚开始都是甜甜的恋爱那\n\n\n\n她是目前为止就是拒绝之后还继续微信回我消息的人了，我相亲了六七个吧，大部分都是见一面回去微信就不回话了，我也懂得，不回话就是一种拒绝了，不会去自讨没趣，下一个。\n\n\n\n中间她还说了拒绝我的一个理由是，不喜欢相亲这种形式，感觉目的性太强了，不舒服。\n\n\n\n### 经验教训\n\n\n\n- 都已经相亲了，不要在网上聊太长时间，大概认识之后，就直接线下见面，可能见一面人家看不上你就直接不用聊天了，浪费时间\n\n- 你发消息 几天不回复 基本上就是不感兴趣，建议下一个，不要当舔狗，舔狗没有未来\n\n\n\n## 第二位\n\n\n\n初中教师，吸取之前经验教训，微信加上之后，大概聊天之后，就约了第一次见面，我开车去她学校门口接她，去吃的县城里唯一一家的海底捞，饭桌上，她有些奇怪，她吃火锅不吃酱料，各种都是直接吃的，吃的很少，说是胃里不太舒服，那我也没有强迫她，就自己吃的多了一点，中间吃饭聊天感觉还行，结账两百多，她问我要不要人均，我想着，我第一次请客吃饭，就没有必要aa了吧，于是大气一挥，不用，于是就送她回学校让她骑自己电动车回家了。微信上之后回复也是不合适，本以为这件事就这么结合了，没有想到这件事情还有后续。\n\n\n\n家里人有一天突然给我说，这个女的回去和自己的家人说，我第一次请她吃海底捞，就花了两百多，这消费太高了，她感觉消费观不太一样，我大为震惊，第一次听说请客吃饭太贵了，然后觉得不合适的，直接刷新了我的三观。老家这边其实平均工资也就是3k左右，尤其她是教师，说是教师的圈子，大家可能都比较节俭，这我可以理解，但是她是因为这说不合适，也是震惊到我了，当然也可能这只是觉得不合适然后随便给的一个理由而已。\n\n\n\n### 经验教训\n\n\n\n我只管做好自己的，至于对面怎么说，不去管他，毕竟啥人都有，各种奇葩理由也是丰富多样。\n\n\n\n其实中间还和一些认识的人，说是按照家里这月薪3k的水平，每次去见一个相亲对象的时候，都不要花费一两百这样，直接去买杯奶茶，随便去路边或者一个地方坐坐就行了，要不一个月多见几个相亲对象，一个月工资都没有了。我后来想想也确实，但是一直没有付诸于实践过，有点不好意思。\n\n\n\n## 第三位\n\n\n\n幼师，临时工，不是在编的幼师，她是我大靖介绍的,她问我的大靖叫做老姨的，关系很近，聊了几次，感觉也还行，就是感觉没有什么共同的兴趣爱好，家里人让继续聊，我也就继续了，昨天晚上一起吃饭，突然说到 我们这关系太近了，当朋友可以，如果谈恋爱的感觉有些奇怪，其实我也这样觉得，如果分手或者闹矛盾什么的，家里人都来说，就比较尴尬了，看到说的已经这么明确，我已经知道她这就是明确的拒绝了，那挺好，就下一个吧。\n\n\n\n### 经验教训\n\n\n\n- 不要去找关系太近的亲戚谈恋爱，如果有啥矛盾都会搞的人尽皆知，很麻烦\n\n\n\n## 第四位\n\n\n\n我姑姑和我表弟在逛街的时候一个卖鞋的老板娘的女儿，要了电话，加了微信，就开始聊天了，她的工作和我的工作有一些相同的地方，因此还算是有些共同话题，约了几次吃饭，崩盘的时刻，在于第三次见面的时候，先去吃了烧烤，然后去一个那种小的放映室一起看 巨齿鲨2，看了一会，由于之前听说什么约了一个月就可以 牵手试试之类的，于是我那个时候有些上头，心里总在想这个事情，那颤动的手，看看她的手距离好远，心想，这氛围不对，强行牵扯好尴尬的，踌躇犹豫了好久，突然就猛的一下决心，手就准备去牵她的手，果不其然，我被拒绝了，她还问我，你干啥，我就趁机说了几句，你觉得我怎么样之类的话，她说还行，真诚，老实，我说那要不我们谈谈试试，她犹豫了一会，说让她想想再说好突然，我那，当时，上头，又强行牵了一次，结果把人家女孩吓到了估计，借口上厕所就走了。之后回去微信就不怎么搭理我了，过了一周之后，就突然怎么都不搭理我了，我也就不想搭理她了，不想当一个舔狗，如果人家真的没有一丁点想法，我又何必庸人自扰那\n\n\n\n### 经验教训\n\n\n\n- 我发现自己可能没有了喜欢的能力，不知道喜欢一个什么样子的女孩，感觉自己是很被动的，然后自己也没有什么特别的才华，或者相貌，家室或者什么，等待女孩来示好也明显不太可能，尬住\n\n- 这次上头的原因很简单，其实就是最近开始对女性有了这个所谓的性冲动，在之前的二十几年当中，似乎是没有的，或者说是被压抑的，没有自己鲁管过，好像大部分都是一梦无痕吧，精满自溢 吧。\n\n- 男人还是要把控住自己不要被下半身支配才行，要理智，在合适的氛围做合适的事情才行，要不就会成我这样，被对方当成禽兽，然后从此失去机会\n\n- 还是要找自己喜欢的才行，至少要有所谓的crush才行，不能强来，即使是性冲动的crush\n","slug":"相亲回忆录","published":1,"updated":"2025-03-02T03:37:34.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp5c005kn0ukgb7m643t","content":"<h1 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h1><p>简单介绍下我的感情经历，除了高中有一个女孩给我主动表白之后，就没有再谈过恋爱了，大学没有谈过，一直到现在了，如果高中不算的话，其实就是母胎solo 26年，高中那段还结束的很戏剧，哎！</p>\n<p>目前是三月份回到河南省一个小县城工作了，至今已经工作了五个月了，相亲了六七个吧，现在突然闲来无事，不如写个文章纪念一下。</p>\n<blockquote>\n<p>中间差不多没有什么值得纪念的事情的话，就直接略过了</p>\n</blockquote>\n<h1 id=\"女嘉宾\"><a href=\"#女嘉宾\" class=\"headerlink\" title=\"女嘉宾\"></a>女嘉宾</h1><h2 id=\"第一位\"><a href=\"#第一位\" class=\"headerlink\" title=\"第一位\"></a>第一位</h2><p>公务员，网上聊了几个月，感觉还行，回来老家，看了个电影，然后回来之后微信就说不合适了，我调侃了下，说我觉得挺合适的呀，她说你别开玩笑，就这样不了了之了，到现在为止 中间似乎突然找她聊天过，她已经谈恋爱了，是从一个桌游上认识的，她觉得目前的变化就是从一个人的无聊变成了两个人的无聊，我听到后 不知道作何回复了，以为刚开始都是甜甜的恋爱那</p>\n<p>她是目前为止就是拒绝之后还继续微信回我消息的人了，我相亲了六七个吧，大部分都是见一面回去微信就不回话了，我也懂得，不回话就是一种拒绝了，不会去自讨没趣，下一个。</p>\n<p>中间她还说了拒绝我的一个理由是，不喜欢相亲这种形式，感觉目的性太强了，不舒服。</p>\n<h3 id=\"经验教训\"><a href=\"#经验教训\" class=\"headerlink\" title=\"经验教训\"></a>经验教训</h3><ul>\n<li><p>都已经相亲了，不要在网上聊太长时间，大概认识之后，就直接线下见面，可能见一面人家看不上你就直接不用聊天了，浪费时间</p>\n</li>\n<li><p>你发消息 几天不回复 基本上就是不感兴趣，建议下一个，不要当舔狗，舔狗没有未来</p>\n</li>\n</ul>\n<h2 id=\"第二位\"><a href=\"#第二位\" class=\"headerlink\" title=\"第二位\"></a>第二位</h2><p>初中教师，吸取之前经验教训，微信加上之后，大概聊天之后，就约了第一次见面，我开车去她学校门口接她，去吃的县城里唯一一家的海底捞，饭桌上，她有些奇怪，她吃火锅不吃酱料，各种都是直接吃的，吃的很少，说是胃里不太舒服，那我也没有强迫她，就自己吃的多了一点，中间吃饭聊天感觉还行，结账两百多，她问我要不要人均，我想着，我第一次请客吃饭，就没有必要aa了吧，于是大气一挥，不用，于是就送她回学校让她骑自己电动车回家了。微信上之后回复也是不合适，本以为这件事就这么结合了，没有想到这件事情还有后续。</p>\n<p>家里人有一天突然给我说，这个女的回去和自己的家人说，我第一次请她吃海底捞，就花了两百多，这消费太高了，她感觉消费观不太一样，我大为震惊，第一次听说请客吃饭太贵了，然后觉得不合适的，直接刷新了我的三观。老家这边其实平均工资也就是3k左右，尤其她是教师，说是教师的圈子，大家可能都比较节俭，这我可以理解，但是她是因为这说不合适，也是震惊到我了，当然也可能这只是觉得不合适然后随便给的一个理由而已。</p>\n<h3 id=\"经验教训-1\"><a href=\"#经验教训-1\" class=\"headerlink\" title=\"经验教训\"></a>经验教训</h3><p>我只管做好自己的，至于对面怎么说，不去管他，毕竟啥人都有，各种奇葩理由也是丰富多样。</p>\n<p>其实中间还和一些认识的人，说是按照家里这月薪3k的水平，每次去见一个相亲对象的时候，都不要花费一两百这样，直接去买杯奶茶，随便去路边或者一个地方坐坐就行了，要不一个月多见几个相亲对象，一个月工资都没有了。我后来想想也确实，但是一直没有付诸于实践过，有点不好意思。</p>\n<h2 id=\"第三位\"><a href=\"#第三位\" class=\"headerlink\" title=\"第三位\"></a>第三位</h2><p>幼师，临时工，不是在编的幼师，她是我大靖介绍的,她问我的大靖叫做老姨的，关系很近，聊了几次，感觉也还行，就是感觉没有什么共同的兴趣爱好，家里人让继续聊，我也就继续了，昨天晚上一起吃饭，突然说到 我们这关系太近了，当朋友可以，如果谈恋爱的感觉有些奇怪，其实我也这样觉得，如果分手或者闹矛盾什么的，家里人都来说，就比较尴尬了，看到说的已经这么明确，我已经知道她这就是明确的拒绝了，那挺好，就下一个吧。</p>\n<h3 id=\"经验教训-2\"><a href=\"#经验教训-2\" class=\"headerlink\" title=\"经验教训\"></a>经验教训</h3><ul>\n<li>不要去找关系太近的亲戚谈恋爱，如果有啥矛盾都会搞的人尽皆知，很麻烦</li>\n</ul>\n<h2 id=\"第四位\"><a href=\"#第四位\" class=\"headerlink\" title=\"第四位\"></a>第四位</h2><p>我姑姑和我表弟在逛街的时候一个卖鞋的老板娘的女儿，要了电话，加了微信，就开始聊天了，她的工作和我的工作有一些相同的地方，因此还算是有些共同话题，约了几次吃饭，崩盘的时刻，在于第三次见面的时候，先去吃了烧烤，然后去一个那种小的放映室一起看 巨齿鲨2，看了一会，由于之前听说什么约了一个月就可以 牵手试试之类的，于是我那个时候有些上头，心里总在想这个事情，那颤动的手，看看她的手距离好远，心想，这氛围不对，强行牵扯好尴尬的，踌躇犹豫了好久，突然就猛的一下决心，手就准备去牵她的手，果不其然，我被拒绝了，她还问我，你干啥，我就趁机说了几句，你觉得我怎么样之类的话，她说还行，真诚，老实，我说那要不我们谈谈试试，她犹豫了一会，说让她想想再说好突然，我那，当时，上头，又强行牵了一次，结果把人家女孩吓到了估计，借口上厕所就走了。之后回去微信就不怎么搭理我了，过了一周之后，就突然怎么都不搭理我了，我也就不想搭理她了，不想当一个舔狗，如果人家真的没有一丁点想法，我又何必庸人自扰那</p>\n<h3 id=\"经验教训-3\"><a href=\"#经验教训-3\" class=\"headerlink\" title=\"经验教训\"></a>经验教训</h3><ul>\n<li><p>我发现自己可能没有了喜欢的能力，不知道喜欢一个什么样子的女孩，感觉自己是很被动的，然后自己也没有什么特别的才华，或者相貌，家室或者什么，等待女孩来示好也明显不太可能，尬住</p>\n</li>\n<li><p>这次上头的原因很简单，其实就是最近开始对女性有了这个所谓的性冲动，在之前的二十几年当中，似乎是没有的，或者说是被压抑的，没有自己鲁管过，好像大部分都是一梦无痕吧，精满自溢 吧。</p>\n</li>\n<li><p>男人还是要把控住自己不要被下半身支配才行，要理智，在合适的氛围做合适的事情才行，要不就会成我这样，被对方当成禽兽，然后从此失去机会</p>\n</li>\n<li><p>还是要找自己喜欢的才行，至少要有所谓的crush才行，不能强来，即使是性冲动的crush</p>\n</li>\n</ul>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"前情提要\n简单介绍下我的感情经历，除了高中有一个女孩给我主动表白之后，就没有再谈过恋爱了，大学没有谈过，一直到现在了，如果高中不算的话，其实就是母胎solo 26年，高中那段还结束的很戏剧，哎！\n\n目前是三月份回到河南省一个小县城工作了，至今已经工作了五个月了，相亲了六七个吧，现在突然闲来无事，不如写个文章纪念一下。\n\n中间差不多没有什么值得纪念的事情的话，就直接略过了\n\n女嘉宾\n第一位\n公务员，网上聊了几个月，感觉还行，回来老家，看了个电影，然后回来之后微信就说不合适了，我调侃了下，说我觉得挺合适的呀，她说你别开玩笑，就这样不了了之了，到现在为止 中间似乎突然找她聊天过，她已经谈恋爱了，是从","more":"<h1 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h1><p>简单介绍下我的感情经历，除了高中有一个女孩给我主动表白之后，就没有再谈过恋爱了，大学没有谈过，一直到现在了，如果高中不算的话，其实就是母胎solo 26年，高中那段还结束的很戏剧，哎！</p>\n<p>目前是三月份回到河南省一个小县城工作了，至今已经工作了五个月了，相亲了六七个吧，现在突然闲来无事，不如写个文章纪念一下。</p>\n<blockquote>\n<p>中间差不多没有什么值得纪念的事情的话，就直接略过了</p>\n</blockquote>\n<h1 id=\"女嘉宾\"><a href=\"#女嘉宾\" class=\"headerlink\" title=\"女嘉宾\"></a>女嘉宾</h1><h2 id=\"第一位\"><a href=\"#第一位\" class=\"headerlink\" title=\"第一位\"></a>第一位</h2><p>公务员，网上聊了几个月，感觉还行，回来老家，看了个电影，然后回来之后微信就说不合适了，我调侃了下，说我觉得挺合适的呀，她说你别开玩笑，就这样不了了之了，到现在为止 中间似乎突然找她聊天过，她已经谈恋爱了，是从一个桌游上认识的，她觉得目前的变化就是从一个人的无聊变成了两个人的无聊，我听到后 不知道作何回复了，以为刚开始都是甜甜的恋爱那</p>\n<p>她是目前为止就是拒绝之后还继续微信回我消息的人了，我相亲了六七个吧，大部分都是见一面回去微信就不回话了，我也懂得，不回话就是一种拒绝了，不会去自讨没趣，下一个。</p>\n<p>中间她还说了拒绝我的一个理由是，不喜欢相亲这种形式，感觉目的性太强了，不舒服。</p>\n<h3 id=\"经验教训\"><a href=\"#经验教训\" class=\"headerlink\" title=\"经验教训\"></a>经验教训</h3><ul>\n<li><p>都已经相亲了，不要在网上聊太长时间，大概认识之后，就直接线下见面，可能见一面人家看不上你就直接不用聊天了，浪费时间</p>\n</li>\n<li><p>你发消息 几天不回复 基本上就是不感兴趣，建议下一个，不要当舔狗，舔狗没有未来</p>\n</li>\n</ul>\n<h2 id=\"第二位\"><a href=\"#第二位\" class=\"headerlink\" title=\"第二位\"></a>第二位</h2><p>初中教师，吸取之前经验教训，微信加上之后，大概聊天之后，就约了第一次见面，我开车去她学校门口接她，去吃的县城里唯一一家的海底捞，饭桌上，她有些奇怪，她吃火锅不吃酱料，各种都是直接吃的，吃的很少，说是胃里不太舒服，那我也没有强迫她，就自己吃的多了一点，中间吃饭聊天感觉还行，结账两百多，她问我要不要人均，我想着，我第一次请客吃饭，就没有必要aa了吧，于是大气一挥，不用，于是就送她回学校让她骑自己电动车回家了。微信上之后回复也是不合适，本以为这件事就这么结合了，没有想到这件事情还有后续。</p>\n<p>家里人有一天突然给我说，这个女的回去和自己的家人说，我第一次请她吃海底捞，就花了两百多，这消费太高了，她感觉消费观不太一样，我大为震惊，第一次听说请客吃饭太贵了，然后觉得不合适的，直接刷新了我的三观。老家这边其实平均工资也就是3k左右，尤其她是教师，说是教师的圈子，大家可能都比较节俭，这我可以理解，但是她是因为这说不合适，也是震惊到我了，当然也可能这只是觉得不合适然后随便给的一个理由而已。</p>\n<h3 id=\"经验教训-1\"><a href=\"#经验教训-1\" class=\"headerlink\" title=\"经验教训\"></a>经验教训</h3><p>我只管做好自己的，至于对面怎么说，不去管他，毕竟啥人都有，各种奇葩理由也是丰富多样。</p>\n<p>其实中间还和一些认识的人，说是按照家里这月薪3k的水平，每次去见一个相亲对象的时候，都不要花费一两百这样，直接去买杯奶茶，随便去路边或者一个地方坐坐就行了，要不一个月多见几个相亲对象，一个月工资都没有了。我后来想想也确实，但是一直没有付诸于实践过，有点不好意思。</p>\n<h2 id=\"第三位\"><a href=\"#第三位\" class=\"headerlink\" title=\"第三位\"></a>第三位</h2><p>幼师，临时工，不是在编的幼师，她是我大靖介绍的,她问我的大靖叫做老姨的，关系很近，聊了几次，感觉也还行，就是感觉没有什么共同的兴趣爱好，家里人让继续聊，我也就继续了，昨天晚上一起吃饭，突然说到 我们这关系太近了，当朋友可以，如果谈恋爱的感觉有些奇怪，其实我也这样觉得，如果分手或者闹矛盾什么的，家里人都来说，就比较尴尬了，看到说的已经这么明确，我已经知道她这就是明确的拒绝了，那挺好，就下一个吧。</p>\n<h3 id=\"经验教训-2\"><a href=\"#经验教训-2\" class=\"headerlink\" title=\"经验教训\"></a>经验教训</h3><ul>\n<li>不要去找关系太近的亲戚谈恋爱，如果有啥矛盾都会搞的人尽皆知，很麻烦</li>\n</ul>\n<h2 id=\"第四位\"><a href=\"#第四位\" class=\"headerlink\" title=\"第四位\"></a>第四位</h2><p>我姑姑和我表弟在逛街的时候一个卖鞋的老板娘的女儿，要了电话，加了微信，就开始聊天了，她的工作和我的工作有一些相同的地方，因此还算是有些共同话题，约了几次吃饭，崩盘的时刻，在于第三次见面的时候，先去吃了烧烤，然后去一个那种小的放映室一起看 巨齿鲨2，看了一会，由于之前听说什么约了一个月就可以 牵手试试之类的，于是我那个时候有些上头，心里总在想这个事情，那颤动的手，看看她的手距离好远，心想，这氛围不对，强行牵扯好尴尬的，踌躇犹豫了好久，突然就猛的一下决心，手就准备去牵她的手，果不其然，我被拒绝了，她还问我，你干啥，我就趁机说了几句，你觉得我怎么样之类的话，她说还行，真诚，老实，我说那要不我们谈谈试试，她犹豫了一会，说让她想想再说好突然，我那，当时，上头，又强行牵了一次，结果把人家女孩吓到了估计，借口上厕所就走了。之后回去微信就不怎么搭理我了，过了一周之后，就突然怎么都不搭理我了，我也就不想搭理她了，不想当一个舔狗，如果人家真的没有一丁点想法，我又何必庸人自扰那</p>\n<h3 id=\"经验教训-3\"><a href=\"#经验教训-3\" class=\"headerlink\" title=\"经验教训\"></a>经验教训</h3><ul>\n<li><p>我发现自己可能没有了喜欢的能力，不知道喜欢一个什么样子的女孩，感觉自己是很被动的，然后自己也没有什么特别的才华，或者相貌，家室或者什么，等待女孩来示好也明显不太可能，尬住</p>\n</li>\n<li><p>这次上头的原因很简单，其实就是最近开始对女性有了这个所谓的性冲动，在之前的二十几年当中，似乎是没有的，或者说是被压抑的，没有自己鲁管过，好像大部分都是一梦无痕吧，精满自溢 吧。</p>\n</li>\n<li><p>男人还是要把控住自己不要被下半身支配才行，要理智，在合适的氛围做合适的事情才行，要不就会成我这样，被对方当成禽兽，然后从此失去机会</p>\n</li>\n<li><p>还是要找自己喜欢的才行，至少要有所谓的crush才行，不能强来，即使是性冲动的crush</p>\n</li>\n</ul>\n"},{"title":"相亲忠告","description":"","abbrlink":"e4a21a0b","date":"2024-06-26T16:00:00.000Z","_content":"\n\n1. 不要在线上聊天太久，最好直接见面，或者简单聊个几天就直接见面聊，最好不要超过一周，否则就会出现聊了好长时间，一见面直接见光死的情况\n\n2. 见了第一次面，你对对方是否感觉还行，你心里应该有了答案，想要再接触看看就回去约下一次见面，如果回去之后聊天，人家直接不回复你了，或者很明确拒绝了，那就下一个吧\n\n3. 不要当做只是增加一个认识新朋友的途径，要知道来到相亲大家都是有明确目的的，双方都知道，所以牢记自己的目的\n\n4. 异地恋，狗都不见，如果是异地的直接不要接触了\n\n5. 确认关系，最好是在一个月内，或者见面个四五次就差不多了，之后时间再长就会没有新鲜感了\n\n6. 人都是视觉动物，所有人都不例外，只是外貌占比高低而已，所以见面还是要好好收拾一下的，如果你觉得自己已经好好收拾了，对方还是看不上，那没办法 下一个\n\n7. 相亲其实在从大量样本中去筛选，所以要多见一些，才能知道自己到底想要什么，不要想着去培养对方什么，太难了\n\n8. 男的基本上向下兼容，女的都是向上兼容，这个你要明白，男的要找个和自己情况差不多的，比较难，因为这部分女生会由比你厉害的男生来追求的\n\n9. 不要被网上的很多美女提高眼界了，现实中没有那么多的，更何况是来相亲的，基本上你只要看的顺眼的，6分以上的女生，化妆一下 都可以的\n\n\n\n\n\n\n\n>有需要补充，麻烦各位评论区补充一下\n","source":"_posts/相亲忠告.md","raw":"---\ntitle: 相亲忠告\ndescription: ''\ntags:\n  - 无标签\nabbrlink: e4a21a0b\ndate: 2024-06-27 00:00:00\n---\n\n\n1. 不要在线上聊天太久，最好直接见面，或者简单聊个几天就直接见面聊，最好不要超过一周，否则就会出现聊了好长时间，一见面直接见光死的情况\n\n2. 见了第一次面，你对对方是否感觉还行，你心里应该有了答案，想要再接触看看就回去约下一次见面，如果回去之后聊天，人家直接不回复你了，或者很明确拒绝了，那就下一个吧\n\n3. 不要当做只是增加一个认识新朋友的途径，要知道来到相亲大家都是有明确目的的，双方都知道，所以牢记自己的目的\n\n4. 异地恋，狗都不见，如果是异地的直接不要接触了\n\n5. 确认关系，最好是在一个月内，或者见面个四五次就差不多了，之后时间再长就会没有新鲜感了\n\n6. 人都是视觉动物，所有人都不例外，只是外貌占比高低而已，所以见面还是要好好收拾一下的，如果你觉得自己已经好好收拾了，对方还是看不上，那没办法 下一个\n\n7. 相亲其实在从大量样本中去筛选，所以要多见一些，才能知道自己到底想要什么，不要想着去培养对方什么，太难了\n\n8. 男的基本上向下兼容，女的都是向上兼容，这个你要明白，男的要找个和自己情况差不多的，比较难，因为这部分女生会由比你厉害的男生来追求的\n\n9. 不要被网上的很多美女提高眼界了，现实中没有那么多的，更何况是来相亲的，基本上你只要看的顺眼的，6分以上的女生，化妆一下 都可以的\n\n\n\n\n\n\n\n>有需要补充，麻烦各位评论区补充一下\n","slug":"相亲忠告","published":1,"updated":"2025-03-02T03:37:34.442Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp5c005mn0ukbhj8cmjr","content":"<ol>\n<li><p>不要在线上聊天太久，最好直接见面，或者简单聊个几天就直接见面聊，最好不要超过一周，否则就会出现聊了好长时间，一见面直接见光死的情况</p>\n</li>\n<li><p>见了第一次面，你对对方是否感觉还行，你心里应该有了答案，想要再接触看看就回去约下一次见面，如果回去之后聊天，人家直接不回复你了，或者很明确拒绝了，那就下一个吧</p>\n</li>\n<li><p>不要当做只是增加一个认识新朋友的途径，要知道来到相亲大家都是有明确目的的，双方都知道，所以牢记自己的目的</p>\n</li>\n<li><p>异地恋，狗都不见，如果是异地的直接不要接触了</p>\n</li>\n<li><p>确认关系，最好是在一个月内，或者见面个四五次就差不多了，之后时间再长就会没有新鲜感了</p>\n</li>\n<li><p>人都是视觉动物，所有人都不例外，只是外貌占比高低而已，所以见面还是要好好收拾一下的，如果你觉得自己已经好好收拾了，对方还是看不上，那没办法 下一个</p>\n</li>\n<li><p>相亲其实在从大量样本中去筛选，所以要多见一些，才能知道自己到底想要什么，不要想着去培养对方什么，太难了</p>\n</li>\n<li><p>男的基本上向下兼容，女的都是向上兼容，这个你要明白，男的要找个和自己情况差不多的，比较难，因为这部分女生会由比你厉害的男生来追求的</p>\n</li>\n<li><p>不要被网上的很多美女提高眼界了，现实中没有那么多的，更何况是来相亲的，基本上你只要看的顺眼的，6分以上的女生，化妆一下 都可以的</p>\n</li>\n</ol>\n<blockquote>\n<p>有需要补充，麻烦各位评论区补充一下</p>\n</blockquote>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"1. 不要在线上聊天太久，最好直接见面，或者简单聊个几天就直接见面聊，最好不要超过一周，否则就会出现聊了好长时间，一见面直接见光死的情况\n    \n    \n 2. 见了第一次面，你对对方是否感觉还行，你心里应该有了答案，想要再接触看看就回去约下一次见面，如果回去之后聊天，人家直接不回复你了，或者很明确拒绝了，那就下一个吧\n    \n    \n 3. 不要当做只是增加一个认识新朋友的途径，要知道来到相亲大家都是有明确目的的，双方都知道，所以牢记自己的目的\n    \n    \n 4. 异地恋，狗都不见，如果是异地的直接不要接触了\n    \n    \n 5. 确认关系，最好是在一个月内，或者见面个","more":"<ol>\n<li><p>不要在线上聊天太久，最好直接见面，或者简单聊个几天就直接见面聊，最好不要超过一周，否则就会出现聊了好长时间，一见面直接见光死的情况</p>\n</li>\n<li><p>见了第一次面，你对对方是否感觉还行，你心里应该有了答案，想要再接触看看就回去约下一次见面，如果回去之后聊天，人家直接不回复你了，或者很明确拒绝了，那就下一个吧</p>\n</li>\n<li><p>不要当做只是增加一个认识新朋友的途径，要知道来到相亲大家都是有明确目的的，双方都知道，所以牢记自己的目的</p>\n</li>\n<li><p>异地恋，狗都不见，如果是异地的直接不要接触了</p>\n</li>\n<li><p>确认关系，最好是在一个月内，或者见面个四五次就差不多了，之后时间再长就会没有新鲜感了</p>\n</li>\n<li><p>人都是视觉动物，所有人都不例外，只是外貌占比高低而已，所以见面还是要好好收拾一下的，如果你觉得自己已经好好收拾了，对方还是看不上，那没办法 下一个</p>\n</li>\n<li><p>相亲其实在从大量样本中去筛选，所以要多见一些，才能知道自己到底想要什么，不要想着去培养对方什么，太难了</p>\n</li>\n<li><p>男的基本上向下兼容，女的都是向上兼容，这个你要明白，男的要找个和自己情况差不多的，比较难，因为这部分女生会由比你厉害的男生来追求的</p>\n</li>\n<li><p>不要被网上的很多美女提高眼界了，现实中没有那么多的，更何况是来相亲的，基本上你只要看的顺眼的，6分以上的女生，化妆一下 都可以的</p>\n</li>\n</ol>\n<blockquote>\n<p>有需要补充，麻烦各位评论区补充一下</p>\n</blockquote>\n"},{"title":"红包算法","description":"","abbrlink":"ff69a4f5","date":"2021-04-20T16:00:00.000Z","_content":"\n\n## 题目\n\n\n\n给定一个红包总金额和分红包的人数，输出每个人随机抢到的红包数量。\n\n\n\n要求:\n\n\n\n- 每个人都要抢到红包，并且金额随机。\n\n\n\n- 每个人抢到的金额数不小于1\n\n\n\n- 每个人抢到的金额数不超过总金额的30%\n\n\n\n  例如总金额100，人数10，输出【19 20 15 1 25 14 2 2 1 1】\n\n  \n\n  <!-- more -->\n\n\n\n## 思路\n\n\n\n1. 首先是这个人数必须要大于等于4，否则直接都不满足第三个条件\n\n2. new 一个数组，让这个数据的每个数据都等于1\n\n3. new一个随机数在1到30之间\n\n\n\n## 代码\n\n\n\n```java\n\n    public static void main(String[] args) {\n\n        int total=0;\n\n        int count=50000;\n\n        for (int i = 0; i < count; i++) {\n\n            int packet = getPacket(100, 10);\n\n            total=total+packet;\n\n        }\n\n        //这个是来测试这段代码的性能，基本上在count=50的时候，已经稳定在了15了，时间复杂度基本上可以说是1.5N，N就是人员的数量\n\n        System.out.println(total/count);\n\n\n\n//        for (int i : packet) {\n\n//            System.out.print(i+\",\");\n\n//        }\n\n    }\n\n    public static int getPacket(int money,int number){\n\n        if(number < 4 || money < number){\n\n            throw new IllegalArgumentException(\"illegal argument\");\n\n        }\n\n        int[] result = new int[number];\n\n        for (int i = 0; i < number; i++) {\n\n            result[i] = 1;\n\n        }\n\n        double threshold = money * 0.3;\n\n        int remain = money - number;\n\n        int index = 0;\n\n        Random random = new Random();\n\n        int count=0;\n\n        while (remain > 0){\n\n            int i = random.nextInt(remain);\n\n            if(i == 0){\n\n                i = 1;\n\n            }\n\n            double now = result[index] + i;\n\n            if(now <= threshold){\n\n                result[index] = (int)now;\n\n                remain -= i;\n\n            }\n\n            index ++;\n\n            count++;\n\n            if(index == number){\n\n                index = 0;\n\n            }\n\n        }\n\n        //System.out.println(count);\n\n        return count;\n\n    }\n\n```\n\n\n\n## 收获\n\n\n\n1. 在所有数据都有一个最小值的数据的情况下，可以假设所有的值都是最小值，在此基础至上，来进行数据处理\n\n2. random.nextInt（x）的方法，返回(0,x],即大于0小于等于x","source":"_posts/红包算法.md","raw":"---\ntitle: 红包算法\ndescription: ''\ntags:\n  - 无标签\nabbrlink: ff69a4f5\ndate: 2021-04-21 00:00:00\n---\n\n\n## 题目\n\n\n\n给定一个红包总金额和分红包的人数，输出每个人随机抢到的红包数量。\n\n\n\n要求:\n\n\n\n- 每个人都要抢到红包，并且金额随机。\n\n\n\n- 每个人抢到的金额数不小于1\n\n\n\n- 每个人抢到的金额数不超过总金额的30%\n\n\n\n  例如总金额100，人数10，输出【19 20 15 1 25 14 2 2 1 1】\n\n  \n\n  <!-- more -->\n\n\n\n## 思路\n\n\n\n1. 首先是这个人数必须要大于等于4，否则直接都不满足第三个条件\n\n2. new 一个数组，让这个数据的每个数据都等于1\n\n3. new一个随机数在1到30之间\n\n\n\n## 代码\n\n\n\n```java\n\n    public static void main(String[] args) {\n\n        int total=0;\n\n        int count=50000;\n\n        for (int i = 0; i < count; i++) {\n\n            int packet = getPacket(100, 10);\n\n            total=total+packet;\n\n        }\n\n        //这个是来测试这段代码的性能，基本上在count=50的时候，已经稳定在了15了，时间复杂度基本上可以说是1.5N，N就是人员的数量\n\n        System.out.println(total/count);\n\n\n\n//        for (int i : packet) {\n\n//            System.out.print(i+\",\");\n\n//        }\n\n    }\n\n    public static int getPacket(int money,int number){\n\n        if(number < 4 || money < number){\n\n            throw new IllegalArgumentException(\"illegal argument\");\n\n        }\n\n        int[] result = new int[number];\n\n        for (int i = 0; i < number; i++) {\n\n            result[i] = 1;\n\n        }\n\n        double threshold = money * 0.3;\n\n        int remain = money - number;\n\n        int index = 0;\n\n        Random random = new Random();\n\n        int count=0;\n\n        while (remain > 0){\n\n            int i = random.nextInt(remain);\n\n            if(i == 0){\n\n                i = 1;\n\n            }\n\n            double now = result[index] + i;\n\n            if(now <= threshold){\n\n                result[index] = (int)now;\n\n                remain -= i;\n\n            }\n\n            index ++;\n\n            count++;\n\n            if(index == number){\n\n                index = 0;\n\n            }\n\n        }\n\n        //System.out.println(count);\n\n        return count;\n\n    }\n\n```\n\n\n\n## 收获\n\n\n\n1. 在所有数据都有一个最小值的数据的情况下，可以假设所有的值都是最小值，在此基础至上，来进行数据处理\n\n2. random.nextInt（x）的方法，返回(0,x],即大于0小于等于x","slug":"红包算法","published":1,"updated":"2025-03-02T03:37:34.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp5d005on0uk85u9gvel","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个红包总金额和分红包的人数，输出每个人随机抢到的红包数量。</p>\n<p>要求:</p>\n<ul>\n<li><p>每个人都要抢到红包，并且金额随机。</p>\n</li>\n<li><p>每个人抢到的金额数不小于1</p>\n</li>\n<li><p>每个人抢到的金额数不超过总金额的30%</p>\n<p>例如总金额100，人数10，输出【19 20 15 1 25 14 2 2 1 1】</p>\n<span id=\"more\"></span></li>\n</ul>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ol>\n<li><p>首先是这个人数必须要大于等于4，否则直接都不满足第三个条件</p>\n</li>\n<li><p>new 一个数组，让这个数据的每个数据都等于1</p>\n</li>\n<li><p>new一个随机数在1到30之间</p>\n</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> total=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> count=<span class=\"number\">50000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">packet</span> <span class=\"operator\">=</span> getPacket(<span class=\"number\">100</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            total=total+packet;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//这个是来测试这段代码的性能，基本上在count=50的时候，已经稳定在了15了，时间复杂度基本上可以说是1.5N，N就是人员的数量</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(total/count);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        for (int i : packet) &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//            System.out.print(i+&quot;,&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">getPacket</span><span class=\"params\">(<span class=\"type\">int</span> money,<span class=\"type\">int</span> number)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(number &lt; <span class=\"number\">4</span> || money &lt; number)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;illegal argument&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[number];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; number; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            result[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">threshold</span> <span class=\"operator\">=</span> money * <span class=\"number\">0.3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">remain</span> <span class=\"operator\">=</span> money - number;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Random</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (remain &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> random.nextInt(remain);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                i = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> result[index] + i;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(now &lt;= threshold)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                result[index] = (<span class=\"type\">int</span>)now;</span><br><span class=\"line\"></span><br><span class=\"line\">                remain -= i;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            index ++;</span><br><span class=\"line\"></span><br><span class=\"line\">            count++;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index == number)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                index = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(count);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"收获\"><a href=\"#收获\" class=\"headerlink\" title=\"收获\"></a>收获</h2><ol>\n<li><p>在所有数据都有一个最小值的数据的情况下，可以假设所有的值都是最小值，在此基础至上，来进行数据处理</p>\n</li>\n<li><p>random.nextInt（x）的方法，返回(0,x],即大于0小于等于x</p>\n</li>\n</ol>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"题目\n给定一个红包总金额和分红包的人数，输出每个人随机抢到的红包数量。\n\n要求:\n\n * 每个人都要抢到红包，并且金额随机。\n   \n   \n * 每个人抢到的金额数不小于1\n   \n   \n * 每个人抢到的金额数不超过总金额的30%\n   \n   例如总金额100，人数10，输出【19 20 15 1 25 14 2 2 1 1】\n   \n   \n\n思路\n 1. 首先是这个人数必须要大于等于4，否则直接都不满足第三个条件\n    \n    \n 2. new 一个数组，让这个数据的每个数据都等于1\n    \n    \n 3. new一个随机数在1到30之间\n    \n    \n\n代码\n1\n2","more":"</li>\n</ul>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ol>\n<li><p>首先是这个人数必须要大于等于4，否则直接都不满足第三个条件</p>\n</li>\n<li><p>new 一个数组，让这个数据的每个数据都等于1</p>\n</li>\n<li><p>new一个随机数在1到30之间</p>\n</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> total=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> count=<span class=\"number\">50000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">packet</span> <span class=\"operator\">=</span> getPacket(<span class=\"number\">100</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            total=total+packet;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//这个是来测试这段代码的性能，基本上在count=50的时候，已经稳定在了15了，时间复杂度基本上可以说是1.5N，N就是人员的数量</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(total/count);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        for (int i : packet) &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//            System.out.print(i+&quot;,&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">getPacket</span><span class=\"params\">(<span class=\"type\">int</span> money,<span class=\"type\">int</span> number)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(number &lt; <span class=\"number\">4</span> || money &lt; number)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;illegal argument&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[number];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; number; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            result[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">threshold</span> <span class=\"operator\">=</span> money * <span class=\"number\">0.3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">remain</span> <span class=\"operator\">=</span> money - number;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Random</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (remain &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> random.nextInt(remain);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                i = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> result[index] + i;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(now &lt;= threshold)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                result[index] = (<span class=\"type\">int</span>)now;</span><br><span class=\"line\"></span><br><span class=\"line\">                remain -= i;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            index ++;</span><br><span class=\"line\"></span><br><span class=\"line\">            count++;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index == number)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                index = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(count);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"收获\"><a href=\"#收获\" class=\"headerlink\" title=\"收获\"></a>收获</h2><ol>\n<li><p>在所有数据都有一个最小值的数据的情况下，可以假设所有的值都是最小值，在此基础至上，来进行数据处理</p>\n</li>\n<li><p>random.nextInt（x）的方法，返回(0,x],即大于0小于等于x</p>\n</li>\n</ol>"},{"title":"红黑树","description":"","abbrlink":"f89cb603","date":"2021-04-30T16:00:00.000Z","_content":"简单介绍\n\n\n\n<!-- more -->\n\n\n\n### 定义\n\n\n\n红黑树是一种含有红黑结点并能自平衡的二叉查找树。它必须满足下面性质：\n\n\n\n- 性质1：每个节点要么是黑色，要么是红色。\n\n- 性质2：根节点是黑色。\n\n- 性质3：每个叶子节点是黑色。\n\n- 性质4：每个红色结点的两个子结点一定都是黑色。\n\n- **性质5：任意一结点到每个叶子结点的路径都包含数量相同的黑结点。**\n\n\n\n### 自平衡\n\n\n\n#### 左旋\n\n\n\n以某个结点作为支点(旋转结点)，其右子结点变为旋转结点的父结点，右子结点的左子结点变为旋转结点的右子结点，左子结点保持不变\n\n\n\n![image-20210501135230229](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210501135230229.png)\n\n\n\n这个图 就非常的形象的表示了左旋的结果，其实我们理解左旋可以分为以下两点\n\n\n\n1. 旋转节点的右子节点变为它的父节点，左子节点不变，新的右子节点是原来右子节点的左子节点\n\n2. 旋转节点的右子节点  左子节点为 旋转节点；右子节点不变\n\n\n\n套用到上图就是\n\n\n\n1. pivot是旋转节点，y变为pivot的父节点，左节点还是a，右节点变为b\n\n2. y的左节点是pivot，右节点不变，还是c\n\n\n\n#### 右旋\n\n\n\n以某个结点作为支点(旋转结点)，其左子结点变为旋转结点的父结点，左子结点的右子结点变为旋转结点的左子结点，右子结点保持不变\n\n\n\n![image-20210501135810812](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210501135810812.png)\n\n\n\n同左旋刚好相反，左和右的互换，两个点\n\n\n\n1. 旋转节点的左子节点变为它的父节点，右子节点不变，新的左子节点是原来左子节点的右子节点\n\n2. 旋转节点的左子节点  左子节点不变；右子节点为旋转节点\n\n\n\n#### 变色\n\n\n\n结点的颜色由红变黑或由黑变红\n\n\n\n### 插入\n\n\n\n#### 空树\n\n\n\n当树是空的时候，插入的时候，直接将其作为根节点，并且是黑色的\n\n\n\n#### 插入的key已经存在了\n\n\n\n1. 当前节点的颜色不变\n\n2. 更改当前节点的值\n\n\n\n#### 插入节点的父节点为黑色节点\n\n\n\n**由于插入的节点颜色是红色的**，所以直接插入即可，无需自平衡\n\n\n\n#### 插入节点的父节点为红色节点\n\n\n\n1. 叔叔节点存在并且为红色节点\n\n2. 叔叔节点为空，且祖父节点、父节点和新节点处于一条斜线上。\n\n3. 叔叔节点为空，且祖父节点、父节点和新节点不处于一条斜线上。\n\n\n\n##### 第一种情况\n\n\n\n将父节点和叔叔节点与祖父节点的颜色互换\n\n\n\n![image-20210502073524655](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210502073524655.png)\n\n\n\n##### 第二种情况\n\n\n\n将B节点进行右旋操作，并且和父节点A互换颜色\n\n\n\n![image-20210502073447008](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210502073447008.png)\n\n\n\n##### 第三种情况\n\n\n\n将C节点进行左旋，这样就从第三种情况转换成第二种情况了，然后针对case 2进行操作处理就行\n\n\n\n![image-20210502073514982](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210502073514982.png)\n\n\n\n\n\n\n\n## 删除\n\n\n\n\n\n\n\n> 参考文章：\n\n>\n\n> - [美团红黑树深入剖析及Java实现](https://tech.meituan.com/2016/12/02/redblack-tree.html)\n\n> - https://blog.csdn.net/v_july_v/article/details/6105630","source":"_posts/红黑树.md","raw":"---\ntitle: 红黑树\ndescription: ''\ntags:\n  - 无标签\nabbrlink: f89cb603\ndate: 2021-05-01 00:00:00\n---\n简单介绍\n\n\n\n<!-- more -->\n\n\n\n### 定义\n\n\n\n红黑树是一种含有红黑结点并能自平衡的二叉查找树。它必须满足下面性质：\n\n\n\n- 性质1：每个节点要么是黑色，要么是红色。\n\n- 性质2：根节点是黑色。\n\n- 性质3：每个叶子节点是黑色。\n\n- 性质4：每个红色结点的两个子结点一定都是黑色。\n\n- **性质5：任意一结点到每个叶子结点的路径都包含数量相同的黑结点。**\n\n\n\n### 自平衡\n\n\n\n#### 左旋\n\n\n\n以某个结点作为支点(旋转结点)，其右子结点变为旋转结点的父结点，右子结点的左子结点变为旋转结点的右子结点，左子结点保持不变\n\n\n\n![image-20210501135230229](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210501135230229.png)\n\n\n\n这个图 就非常的形象的表示了左旋的结果，其实我们理解左旋可以分为以下两点\n\n\n\n1. 旋转节点的右子节点变为它的父节点，左子节点不变，新的右子节点是原来右子节点的左子节点\n\n2. 旋转节点的右子节点  左子节点为 旋转节点；右子节点不变\n\n\n\n套用到上图就是\n\n\n\n1. pivot是旋转节点，y变为pivot的父节点，左节点还是a，右节点变为b\n\n2. y的左节点是pivot，右节点不变，还是c\n\n\n\n#### 右旋\n\n\n\n以某个结点作为支点(旋转结点)，其左子结点变为旋转结点的父结点，左子结点的右子结点变为旋转结点的左子结点，右子结点保持不变\n\n\n\n![image-20210501135810812](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210501135810812.png)\n\n\n\n同左旋刚好相反，左和右的互换，两个点\n\n\n\n1. 旋转节点的左子节点变为它的父节点，右子节点不变，新的左子节点是原来左子节点的右子节点\n\n2. 旋转节点的左子节点  左子节点不变；右子节点为旋转节点\n\n\n\n#### 变色\n\n\n\n结点的颜色由红变黑或由黑变红\n\n\n\n### 插入\n\n\n\n#### 空树\n\n\n\n当树是空的时候，插入的时候，直接将其作为根节点，并且是黑色的\n\n\n\n#### 插入的key已经存在了\n\n\n\n1. 当前节点的颜色不变\n\n2. 更改当前节点的值\n\n\n\n#### 插入节点的父节点为黑色节点\n\n\n\n**由于插入的节点颜色是红色的**，所以直接插入即可，无需自平衡\n\n\n\n#### 插入节点的父节点为红色节点\n\n\n\n1. 叔叔节点存在并且为红色节点\n\n2. 叔叔节点为空，且祖父节点、父节点和新节点处于一条斜线上。\n\n3. 叔叔节点为空，且祖父节点、父节点和新节点不处于一条斜线上。\n\n\n\n##### 第一种情况\n\n\n\n将父节点和叔叔节点与祖父节点的颜色互换\n\n\n\n![image-20210502073524655](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210502073524655.png)\n\n\n\n##### 第二种情况\n\n\n\n将B节点进行右旋操作，并且和父节点A互换颜色\n\n\n\n![image-20210502073447008](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210502073447008.png)\n\n\n\n##### 第三种情况\n\n\n\n将C节点进行左旋，这样就从第三种情况转换成第二种情况了，然后针对case 2进行操作处理就行\n\n\n\n![image-20210502073514982](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210502073514982.png)\n\n\n\n\n\n\n\n## 删除\n\n\n\n\n\n\n\n> 参考文章：\n\n>\n\n> - [美团红黑树深入剖析及Java实现](https://tech.meituan.com/2016/12/02/redblack-tree.html)\n\n> - https://blog.csdn.net/v_july_v/article/details/6105630","slug":"红黑树","published":1,"updated":"2025-03-02T03:37:34.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp5d005qn0ukfxf386lu","content":"<p>简单介绍</p>\n<span id=\"more\"></span>\n\n\n\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>红黑树是一种含有红黑结点并能自平衡的二叉查找树。它必须满足下面性质：</p>\n<ul>\n<li><p>性质1：每个节点要么是黑色，要么是红色。</p>\n</li>\n<li><p>性质2：根节点是黑色。</p>\n</li>\n<li><p>性质3：每个叶子节点是黑色。</p>\n</li>\n<li><p>性质4：每个红色结点的两个子结点一定都是黑色。</p>\n</li>\n<li><p><strong>性质5：任意一结点到每个叶子结点的路径都包含数量相同的黑结点。</strong></p>\n</li>\n</ul>\n<h3 id=\"自平衡\"><a href=\"#自平衡\" class=\"headerlink\" title=\"自平衡\"></a>自平衡</h3><h4 id=\"左旋\"><a href=\"#左旋\" class=\"headerlink\" title=\"左旋\"></a>左旋</h4><p>以某个结点作为支点(旋转结点)，其右子结点变为旋转结点的父结点，右子结点的左子结点变为旋转结点的右子结点，左子结点保持不变</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210501135230229.png\" alt=\"image-20210501135230229\" loading=\"lazy\"></p>\n<p>这个图 就非常的形象的表示了左旋的结果，其实我们理解左旋可以分为以下两点</p>\n<ol>\n<li><p>旋转节点的右子节点变为它的父节点，左子节点不变，新的右子节点是原来右子节点的左子节点</p>\n</li>\n<li><p>旋转节点的右子节点  左子节点为 旋转节点；右子节点不变</p>\n</li>\n</ol>\n<p>套用到上图就是</p>\n<ol>\n<li><p>pivot是旋转节点，y变为pivot的父节点，左节点还是a，右节点变为b</p>\n</li>\n<li><p>y的左节点是pivot，右节点不变，还是c</p>\n</li>\n</ol>\n<h4 id=\"右旋\"><a href=\"#右旋\" class=\"headerlink\" title=\"右旋\"></a>右旋</h4><p>以某个结点作为支点(旋转结点)，其左子结点变为旋转结点的父结点，左子结点的右子结点变为旋转结点的左子结点，右子结点保持不变</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210501135810812.png\" alt=\"image-20210501135810812\" loading=\"lazy\"></p>\n<p>同左旋刚好相反，左和右的互换，两个点</p>\n<ol>\n<li><p>旋转节点的左子节点变为它的父节点，右子节点不变，新的左子节点是原来左子节点的右子节点</p>\n</li>\n<li><p>旋转节点的左子节点  左子节点不变；右子节点为旋转节点</p>\n</li>\n</ol>\n<h4 id=\"变色\"><a href=\"#变色\" class=\"headerlink\" title=\"变色\"></a>变色</h4><p>结点的颜色由红变黑或由黑变红</p>\n<h3 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h3><h4 id=\"空树\"><a href=\"#空树\" class=\"headerlink\" title=\"空树\"></a>空树</h4><p>当树是空的时候，插入的时候，直接将其作为根节点，并且是黑色的</p>\n<h4 id=\"插入的key已经存在了\"><a href=\"#插入的key已经存在了\" class=\"headerlink\" title=\"插入的key已经存在了\"></a>插入的key已经存在了</h4><ol>\n<li><p>当前节点的颜色不变</p>\n</li>\n<li><p>更改当前节点的值</p>\n</li>\n</ol>\n<h4 id=\"插入节点的父节点为黑色节点\"><a href=\"#插入节点的父节点为黑色节点\" class=\"headerlink\" title=\"插入节点的父节点为黑色节点\"></a>插入节点的父节点为黑色节点</h4><p><strong>由于插入的节点颜色是红色的</strong>，所以直接插入即可，无需自平衡</p>\n<h4 id=\"插入节点的父节点为红色节点\"><a href=\"#插入节点的父节点为红色节点\" class=\"headerlink\" title=\"插入节点的父节点为红色节点\"></a>插入节点的父节点为红色节点</h4><ol>\n<li><p>叔叔节点存在并且为红色节点</p>\n</li>\n<li><p>叔叔节点为空，且祖父节点、父节点和新节点处于一条斜线上。</p>\n</li>\n<li><p>叔叔节点为空，且祖父节点、父节点和新节点不处于一条斜线上。</p>\n</li>\n</ol>\n<h5 id=\"第一种情况\"><a href=\"#第一种情况\" class=\"headerlink\" title=\"第一种情况\"></a>第一种情况</h5><p>将父节点和叔叔节点与祖父节点的颜色互换</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210502073524655.png\" alt=\"image-20210502073524655\" loading=\"lazy\"></p>\n<h5 id=\"第二种情况\"><a href=\"#第二种情况\" class=\"headerlink\" title=\"第二种情况\"></a>第二种情况</h5><p>将B节点进行右旋操作，并且和父节点A互换颜色</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210502073447008.png\" alt=\"image-20210502073447008\" loading=\"lazy\"></p>\n<h5 id=\"第三种情况\"><a href=\"#第三种情况\" class=\"headerlink\" title=\"第三种情况\"></a>第三种情况</h5><p>将C节点进行左旋，这样就从第三种情况转换成第二种情况了，然后针对case 2进行操作处理就行</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210502073514982.png\" alt=\"image-20210502073514982\" loading=\"lazy\"></p>\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><blockquote>\n<p>参考文章：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMTYvMTIvMDIvcmVkYmxhY2stdHJlZS5odG1s\">美团红黑树深入剖析及Java实现<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ZfanVseV92L2FydGljbGUvZGV0YWlscy82MTA1NjMw\">https://blog.csdn.net/v_july_v/article/details/6105630<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</blockquote>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"简单介绍\n\n定义\n红黑树是一种含有红黑结点并能自平衡的二叉查找树。它必须满足下面性质：\n\n * 性质1：每个节点要么是黑色，要么是红色。\n   \n   \n * 性质2：根节点是黑色。\n   \n   \n * 性质3：每个叶子节点是黑色。\n   \n   \n * 性质4：每个红色结点的两个子结点一定都是黑色。\n   \n   \n * 性质5：任意一结点到每个叶子结点的路径都包含数量相同的黑结点。\n   \n   \n\n自平衡\n左旋\n以某个结点作为支点(旋转结点)，其右子结点变为旋转结点的父结点，右子结点的左子结点变为旋转结点的右子结点，左子结点保持不变\n\n\n\n这个图 就非常的形象的表示了左旋的结果，其实我","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>红黑树是一种含有红黑结点并能自平衡的二叉查找树。它必须满足下面性质：</p>\n<ul>\n<li><p>性质1：每个节点要么是黑色，要么是红色。</p>\n</li>\n<li><p>性质2：根节点是黑色。</p>\n</li>\n<li><p>性质3：每个叶子节点是黑色。</p>\n</li>\n<li><p>性质4：每个红色结点的两个子结点一定都是黑色。</p>\n</li>\n<li><p><strong>性质5：任意一结点到每个叶子结点的路径都包含数量相同的黑结点。</strong></p>\n</li>\n</ul>\n<h3 id=\"自平衡\"><a href=\"#自平衡\" class=\"headerlink\" title=\"自平衡\"></a>自平衡</h3><h4 id=\"左旋\"><a href=\"#左旋\" class=\"headerlink\" title=\"左旋\"></a>左旋</h4><p>以某个结点作为支点(旋转结点)，其右子结点变为旋转结点的父结点，右子结点的左子结点变为旋转结点的右子结点，左子结点保持不变</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210501135230229.png\" alt=\"image-20210501135230229\" loading=\"lazy\"></p>\n<p>这个图 就非常的形象的表示了左旋的结果，其实我们理解左旋可以分为以下两点</p>\n<ol>\n<li><p>旋转节点的右子节点变为它的父节点，左子节点不变，新的右子节点是原来右子节点的左子节点</p>\n</li>\n<li><p>旋转节点的右子节点  左子节点为 旋转节点；右子节点不变</p>\n</li>\n</ol>\n<p>套用到上图就是</p>\n<ol>\n<li><p>pivot是旋转节点，y变为pivot的父节点，左节点还是a，右节点变为b</p>\n</li>\n<li><p>y的左节点是pivot，右节点不变，还是c</p>\n</li>\n</ol>\n<h4 id=\"右旋\"><a href=\"#右旋\" class=\"headerlink\" title=\"右旋\"></a>右旋</h4><p>以某个结点作为支点(旋转结点)，其左子结点变为旋转结点的父结点，左子结点的右子结点变为旋转结点的左子结点，右子结点保持不变</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210501135810812.png\" alt=\"image-20210501135810812\" loading=\"lazy\"></p>\n<p>同左旋刚好相反，左和右的互换，两个点</p>\n<ol>\n<li><p>旋转节点的左子节点变为它的父节点，右子节点不变，新的左子节点是原来左子节点的右子节点</p>\n</li>\n<li><p>旋转节点的左子节点  左子节点不变；右子节点为旋转节点</p>\n</li>\n</ol>\n<h4 id=\"变色\"><a href=\"#变色\" class=\"headerlink\" title=\"变色\"></a>变色</h4><p>结点的颜色由红变黑或由黑变红</p>\n<h3 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h3><h4 id=\"空树\"><a href=\"#空树\" class=\"headerlink\" title=\"空树\"></a>空树</h4><p>当树是空的时候，插入的时候，直接将其作为根节点，并且是黑色的</p>\n<h4 id=\"插入的key已经存在了\"><a href=\"#插入的key已经存在了\" class=\"headerlink\" title=\"插入的key已经存在了\"></a>插入的key已经存在了</h4><ol>\n<li><p>当前节点的颜色不变</p>\n</li>\n<li><p>更改当前节点的值</p>\n</li>\n</ol>\n<h4 id=\"插入节点的父节点为黑色节点\"><a href=\"#插入节点的父节点为黑色节点\" class=\"headerlink\" title=\"插入节点的父节点为黑色节点\"></a>插入节点的父节点为黑色节点</h4><p><strong>由于插入的节点颜色是红色的</strong>，所以直接插入即可，无需自平衡</p>\n<h4 id=\"插入节点的父节点为红色节点\"><a href=\"#插入节点的父节点为红色节点\" class=\"headerlink\" title=\"插入节点的父节点为红色节点\"></a>插入节点的父节点为红色节点</h4><ol>\n<li><p>叔叔节点存在并且为红色节点</p>\n</li>\n<li><p>叔叔节点为空，且祖父节点、父节点和新节点处于一条斜线上。</p>\n</li>\n<li><p>叔叔节点为空，且祖父节点、父节点和新节点不处于一条斜线上。</p>\n</li>\n</ol>\n<h5 id=\"第一种情况\"><a href=\"#第一种情况\" class=\"headerlink\" title=\"第一种情况\"></a>第一种情况</h5><p>将父节点和叔叔节点与祖父节点的颜色互换</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210502073524655.png\" alt=\"image-20210502073524655\" loading=\"lazy\"></p>\n<h5 id=\"第二种情况\"><a href=\"#第二种情况\" class=\"headerlink\" title=\"第二种情况\"></a>第二种情况</h5><p>将B节点进行右旋操作，并且和父节点A互换颜色</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210502073447008.png\" alt=\"image-20210502073447008\" loading=\"lazy\"></p>\n<h5 id=\"第三种情况\"><a href=\"#第三种情况\" class=\"headerlink\" title=\"第三种情况\"></a>第三种情况</h5><p>将C节点进行左旋，这样就从第三种情况转换成第二种情况了，然后针对case 2进行操作处理就行</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210502073514982.png\" alt=\"image-20210502073514982\" loading=\"lazy\"></p>\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><blockquote>\n<p>参考文章：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMTYvMTIvMDIvcmVkYmxhY2stdHJlZS5odG1s\">美团红黑树深入剖析及Java实现<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ZfanVseV92L2FydGljbGUvZGV0YWlscy82MTA1NjMw\">https://blog.csdn.net/v_july_v/article/details/6105630<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</blockquote>"},{"title":"自动添加更新时间","description":"","abbrlink":"67128ec5","date":"2024-03-28T16:00:00.000Z","_content":"\n\n修改pre-commit文件\n\n\n\n> 这个是支持Linux系统的 哭了\n\n\n\n```bash\n\n#!/usr/bin/env sh\n\n. \"$(dirname -- \"$0\")/_/husky.sh\"\n\n# Modified files, update the modDatetime\n\ngit diff --cached --name-status |\n\ngrep -i '^M.*\\.md$' |\n\nwhile read _ file; do\n\n  filecontent=$(cat \"$file\")\n\n  frontmatter=$(echo \"$filecontent\" | awk -v RS='---' 'NR==2{print}')\n\n  draft=$(echo \"$frontmatter\" | awk '/^draft: /{print $2}')\n\n  if [ \"$draft\" = \"false\" ]; then\n\n    echo \"$file modDateTime updated\"\n\n    cat $file | sed \"/---.*/,/---.*/s/^modDatetime:.*$/modDatetime: $(date -u \"+%Y-%m-%dT%H:%M:%SZ\")/\" > tmp\n\n    mv tmp $file\n\n    git add $file\n\n  fi\n\n  if [ \"$draft\" = \"first\" ]; then\n\n    echo \"First release of $file, draft set to false and modDateTime removed\"\n\n    cat $file | sed \"/---.*/,/---.*/s/^modDatetime:.*$/modDatetime:/\" | sed \"/---.*/,/---.*/s/^draft:.*$/draft: false/\" > tmp\n\n    mv tmp $file\n\n    git add $file\n\n  fi\n\ndone\n\n# New files, add/update the pubDate\n\ngit diff --cached --name-status | egrep -i \"^(A).*\\.(md)$\" | while read a b; do\n\n  cat $b | sed \"/---.*/,/---.*/s/^pubDate:.*$/pubDate: $(date -u \"+%Y-%m-%dT%H:%M:%SZ\")/\" > tmp\n\n  mv tmp $b\n\n  git add $b\n\ndone\n\nnpx lint-staged\n\n```\n","source":"_posts/自动添加更新时间.md","raw":"---\ntitle: 自动添加更新时间\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 67128ec5\ndate: 2024-03-29 00:00:00\n---\n\n\n修改pre-commit文件\n\n\n\n> 这个是支持Linux系统的 哭了\n\n\n\n```bash\n\n#!/usr/bin/env sh\n\n. \"$(dirname -- \"$0\")/_/husky.sh\"\n\n# Modified files, update the modDatetime\n\ngit diff --cached --name-status |\n\ngrep -i '^M.*\\.md$' |\n\nwhile read _ file; do\n\n  filecontent=$(cat \"$file\")\n\n  frontmatter=$(echo \"$filecontent\" | awk -v RS='---' 'NR==2{print}')\n\n  draft=$(echo \"$frontmatter\" | awk '/^draft: /{print $2}')\n\n  if [ \"$draft\" = \"false\" ]; then\n\n    echo \"$file modDateTime updated\"\n\n    cat $file | sed \"/---.*/,/---.*/s/^modDatetime:.*$/modDatetime: $(date -u \"+%Y-%m-%dT%H:%M:%SZ\")/\" > tmp\n\n    mv tmp $file\n\n    git add $file\n\n  fi\n\n  if [ \"$draft\" = \"first\" ]; then\n\n    echo \"First release of $file, draft set to false and modDateTime removed\"\n\n    cat $file | sed \"/---.*/,/---.*/s/^modDatetime:.*$/modDatetime:/\" | sed \"/---.*/,/---.*/s/^draft:.*$/draft: false/\" > tmp\n\n    mv tmp $file\n\n    git add $file\n\n  fi\n\ndone\n\n# New files, add/update the pubDate\n\ngit diff --cached --name-status | egrep -i \"^(A).*\\.(md)$\" | while read a b; do\n\n  cat $b | sed \"/---.*/,/---.*/s/^pubDate:.*$/pubDate: $(date -u \"+%Y-%m-%dT%H:%M:%SZ\")/\" > tmp\n\n  mv tmp $b\n\n  git add $b\n\ndone\n\nnpx lint-staged\n\n```\n","slug":"自动添加更新时间","published":1,"updated":"2025-03-02T03:37:34.446Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp5d005sn0uk4bdl7y6n","content":"<p>修改pre-commit文件</p>\n<blockquote>\n<p>这个是支持Linux系统的 哭了</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#!/usr/bin/env sh</span></span><br><span class=\"line\"></span><br><span class=\"line\">. <span class=\"string\">&quot;<span class=\"subst\">$(dirname -- <span class=\"string\">&quot;<span class=\"variable\">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Modified files, update the modDatetime</span></span><br><span class=\"line\"></span><br><span class=\"line\">git diff --cached --name-status |</span><br><span class=\"line\"></span><br><span class=\"line\">grep -i <span class=\"string\">&#x27;^M.*\\.md$&#x27;</span> |</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">read</span> _ file; <span class=\"keyword\">do</span></span><br><span class=\"line\"></span><br><span class=\"line\">  filecontent=$(<span class=\"built_in\">cat</span> <span class=\"string\">&quot;<span class=\"variable\">$file</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  frontmatter=$(<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$filecontent</span>&quot;</span> | awk -v RS=<span class=\"string\">&#x27;---&#x27;</span> <span class=\"string\">&#x27;NR==2&#123;print&#125;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  draft=$(<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$frontmatter</span>&quot;</span> | awk <span class=\"string\">&#x27;/^draft: /&#123;print $2&#125;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$draft</span>&quot;</span> = <span class=\"string\">&quot;false&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$file</span> modDateTime updated&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cat</span> <span class=\"variable\">$file</span> | sed <span class=\"string\">&quot;/---.*/,/---.*/s/^modDatetime:.*$/modDatetime: <span class=\"subst\">$(date -u <span class=\"string\">&quot;+%Y-%m-%dT%H:%M:%SZ&quot;</span>)</span>/&quot;</span> &gt; tmp</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">mv</span> tmp <span class=\"variable\">$file</span></span><br><span class=\"line\"></span><br><span class=\"line\">    git add <span class=\"variable\">$file</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$draft</span>&quot;</span> = <span class=\"string\">&quot;first&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;First release of <span class=\"variable\">$file</span>, draft set to false and modDateTime removed&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cat</span> <span class=\"variable\">$file</span> | sed <span class=\"string\">&quot;/---.*/,/---.*/s/^modDatetime:.*$/modDatetime:/&quot;</span> | sed <span class=\"string\">&quot;/---.*/,/---.*/s/^draft:.*$/draft: false/&quot;</span> &gt; tmp</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">mv</span> tmp <span class=\"variable\">$file</span></span><br><span class=\"line\"></span><br><span class=\"line\">    git add <span class=\"variable\">$file</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># New files, add/update the pubDate</span></span><br><span class=\"line\"></span><br><span class=\"line\">git diff --cached --name-status | egrep -i <span class=\"string\">&quot;^(A).*\\.(md)$&quot;</span> | <span class=\"keyword\">while</span> <span class=\"built_in\">read</span> a b; <span class=\"keyword\">do</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">cat</span> <span class=\"variable\">$b</span> | sed <span class=\"string\">&quot;/---.*/,/---.*/s/^pubDate:.*$/pubDate: <span class=\"subst\">$(date -u <span class=\"string\">&quot;+%Y-%m-%dT%H:%M:%SZ&quot;</span>)</span>/&quot;</span> &gt; tmp</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">mv</span> tmp <span class=\"variable\">$b</span></span><br><span class=\"line\"></span><br><span class=\"line\">  git add <span class=\"variable\">$b</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">npx lint-staged</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"修改pre-commit文件\n\n这个是支持Linux系统的 哭了\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n\n\n\n#!/usr/bin/env sh\n\n. \"$(dirname -- \"$0\")/_/husky.sh\"\n\n# Modified files, update the modDatetime\n","more":"<p>修改pre-commit文件</p>\n<blockquote>\n<p>这个是支持Linux系统的 哭了</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#!/usr/bin/env sh</span></span><br><span class=\"line\"></span><br><span class=\"line\">. <span class=\"string\">&quot;<span class=\"subst\">$(dirname -- <span class=\"string\">&quot;<span class=\"variable\">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Modified files, update the modDatetime</span></span><br><span class=\"line\"></span><br><span class=\"line\">git diff --cached --name-status |</span><br><span class=\"line\"></span><br><span class=\"line\">grep -i <span class=\"string\">&#x27;^M.*\\.md$&#x27;</span> |</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">read</span> _ file; <span class=\"keyword\">do</span></span><br><span class=\"line\"></span><br><span class=\"line\">  filecontent=$(<span class=\"built_in\">cat</span> <span class=\"string\">&quot;<span class=\"variable\">$file</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  frontmatter=$(<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$filecontent</span>&quot;</span> | awk -v RS=<span class=\"string\">&#x27;---&#x27;</span> <span class=\"string\">&#x27;NR==2&#123;print&#125;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  draft=$(<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$frontmatter</span>&quot;</span> | awk <span class=\"string\">&#x27;/^draft: /&#123;print $2&#125;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$draft</span>&quot;</span> = <span class=\"string\">&quot;false&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$file</span> modDateTime updated&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cat</span> <span class=\"variable\">$file</span> | sed <span class=\"string\">&quot;/---.*/,/---.*/s/^modDatetime:.*$/modDatetime: <span class=\"subst\">$(date -u <span class=\"string\">&quot;+%Y-%m-%dT%H:%M:%SZ&quot;</span>)</span>/&quot;</span> &gt; tmp</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">mv</span> tmp <span class=\"variable\">$file</span></span><br><span class=\"line\"></span><br><span class=\"line\">    git add <span class=\"variable\">$file</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$draft</span>&quot;</span> = <span class=\"string\">&quot;first&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;First release of <span class=\"variable\">$file</span>, draft set to false and modDateTime removed&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cat</span> <span class=\"variable\">$file</span> | sed <span class=\"string\">&quot;/---.*/,/---.*/s/^modDatetime:.*$/modDatetime:/&quot;</span> | sed <span class=\"string\">&quot;/---.*/,/---.*/s/^draft:.*$/draft: false/&quot;</span> &gt; tmp</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">mv</span> tmp <span class=\"variable\">$file</span></span><br><span class=\"line\"></span><br><span class=\"line\">    git add <span class=\"variable\">$file</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># New files, add/update the pubDate</span></span><br><span class=\"line\"></span><br><span class=\"line\">git diff --cached --name-status | egrep -i <span class=\"string\">&quot;^(A).*\\.(md)$&quot;</span> | <span class=\"keyword\">while</span> <span class=\"built_in\">read</span> a b; <span class=\"keyword\">do</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">cat</span> <span class=\"variable\">$b</span> | sed <span class=\"string\">&quot;/---.*/,/---.*/s/^pubDate:.*$/pubDate: <span class=\"subst\">$(date -u <span class=\"string\">&quot;+%Y-%m-%dT%H:%M:%SZ&quot;</span>)</span>/&quot;</span> &gt; tmp</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">mv</span> tmp <span class=\"variable\">$b</span></span><br><span class=\"line\"></span><br><span class=\"line\">  git add <span class=\"variable\">$b</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">npx lint-staged</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"缓存","description":"","abbrlink":"8a15ea5f","date":"2021-03-21T16:00:00.000Z","_content":"\n\n###  经典的缓存架构\n\n\n\n<!-- more -->\n\n\n\n可以支持百万流量的三级缓存\n\n\n\n![image-20210323211727262](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210323211727262.png)\n\n\n\n### cache aside pattern\n\n\n\n1. 读数据的时候，先读缓存，缓存没有的话，就读数据库，放入缓存，返回响应\n\n2. 写数据的时候，先删除缓存，再更新数据库\n\n\n\n>为什么是删除缓存，而不是更新缓存那？\n\n>\n\n>原因很简单，试想这么场景，数据频繁的被修改，那么缓存就也要不断的重新计算，这个计算是非常消耗资源的，而且你更新了这么多次缓存还不一定能用到，就有点得不偿失了，所以就有了先删除缓存，再更新数据的做法，这样就是减少了非常多次的缓存重新计算的工作量，而是用到了数据的时候，再从数据库中加载到缓存中\n\n\n\n### 数据库和缓存双写问题\n\n\n\n#### 初级\n\n\n\n先写数据库，后写缓存，如果写缓存失败，就会出现数据库和缓存不一致的情况\n\n\n\n>解决方案：很简单，写数据的时候，先删除缓存，再更新数据库就可以了\n\n>\n\n>其实就是从两个操作失败的场景来分析就会明白了\n\n>\n\n>1. 删除缓存失败，那么就会再次执行删除缓存的操作，可以自定义重试几次，删除换缓存失败的情况，缓存和数据库数据一直，删除缓存成功，会以数据库数据为主，将相应数据写入数据库，等到再次请求缓存，用到这个数据的时候，再将数据放入到缓存中\n\n>2. 更新数据库失败，更新数据库失败就会回滚，此时缓存中没有数据，以数据库的数据为主，无非就是多次重试执行sql，直到成功或者说规定重试几次，返回更新数据失败的提示\n\n\n\n#### 进阶\n\n\n\n看完上面的解释，你是不是以为使用了先删除缓存，再写数据库的方式就可以避免数据库和缓存数据不一致的情况，我在这里告诉你，不是的！\n\n\n\n有一种场景，在一个线程删除缓存成功，准备将数据写数据库的时候，此时另外一个线程来请求这个数据，发现缓存中没有，直接去请求数据库，将数据库的数据读入到了缓存中，然后第一个线程才将数据写入数据库，此时缓存和数据库的数据出现了不一致的情况，数据库中是最新的数据，而缓存中是原来的数据。你以为已经给它删除了，但是如果一个线程出现上述这场景，就和没有删除的情况一样，仍然出现了缓存和数据库数据不一致的问题\n\n\n\n>解决方案：\n\n>\n\n>数据库与缓存更新与读取操作进行异步串行化\n\n>\n\n>更新数据的时候，根据数据的唯一标识，将操作路由之后，发送一个jvm内部的队列中\n\n>\n\n>读取数据的时候，如果发现数据不在缓存中，那么将重新拉取数据+更新缓存的造作，根据唯一标识路由之后，也发送同一个jvm内部的队列中\n\n>\n\n>一个队列对应一个工作线程\n\n>\n\n>每个工作线程串行拿到对应的操作，然后一条一条的执行选择的话，一个数据变更的操作，先执行，删除缓存，然后再去更新数据库，但是还米有完成更新\n\n>\n\n>此时如果一个读请求过来，读到了空的缓存，那么可以优先将缓存更新的请求发送到队列中，此时会在队列中积压，然后同步等待缓存更新完成\n\n>\n\n>这有有一个优化的点，一个队列中，其实多个更新缓存请求串在一个是没有意义的，因此可以做过滤，如果发现队列中已经有一个更新缓存的队列了，那么就不用再放一个更新的操作了，直接等待前面的更新操作完成\n\n>\n\n>待那个队列对应的工作线程完成了上一个操作的数据的数据库的修改之后，才会去执行下一个操作，此时会从数据库获取最新的值，然后写入缓存，如果请求还在等待时间范围，不断轮询可以发现可以直接取到值了，那么直接返回；如果请求等待的时间超过一定时长，那么这一次直接从数据库中读取当前的值\n\n\n\n​\t\n\n\n\n#### 注意\n\n\n\n在进阶中的方案仍然有有一些问题需要实际考虑\n\n\n\n由于读请求进行了非常轻度的异步化，所以一定要注意超时时间的问题，每个读请求必须在超时时间内返回\n\n\n\n该解决方案最大的风险点在于，可能数据更新很频繁，导致队列中积压了大量更新操作在里面，然后读请求会发生大量的超时，最后导致大量的请求直接走数据库\n\n\n\n务必通过一些模拟真实的测试，看看更新数据的频繁是怎样的\n\n\n\n另外一点，因为在 一个队列中，可能会积压针对多个数据项的更新操作，因此要根据自己的业务情况进行测试，可能需要部署多个服务，每个服务分摊一些数据更新的操作，如果一个内存队列里居然会积压100个商品的库存修改操作，每个库存修改都要豪飞10ms完成，那么最后一个商品的去请求，可能要等待1s，这个时候就导致读请求长时间的阻塞\n\n\n\n一定要根据实际业务系统的运行情况，去做一些压力测试，和模拟线上环境，去看看罪犯满给的时候，内存队列可能会挤压多少更新操作，如果读请求在200ms内返回，那还是可以接受的\n\n\n\n如果一个内存队列中可挤压的更新操作特别多，那么你就要加机器，让每个机器上部署的服务实例处理更少的机器，那么就会提高读请求的响应时间\n\n\n\n其实根据之前的项目经验，一般数据的写频率都是很低的，因此实际上正常来说，在队列中积压的更新操作应该是很少的\n\n\n\n#### 多实例部署的请求路由\n\n\n\n可能这个服务部署了多个实例，那么必须保证说，执行数据更新操作，以及执行缓存更新操作的请求，都通过nginx服务器路由到相同的服务实例上\n\n\n\n#### 热点商品问题，导致请求的倾斜\n\n\n\n对某一个商品的请求特别高，全部请求到相同机器的相同的队列去了，可能会造成某台机器压力过大\n\n\n\n### 缓存雪崩\n\n\n\n缓存雪崩这种场景，在缓存架构中是非常重要的一个环节，应对缓存雪崩的解决方案，避免缓存雪崩的时候，造成整个系统崩溃，带来巨大的经济损失\n\n\n\n1. redis集群彻底崩溃\n\n2. 缓存服务大龄对redis的请求hang主，占用资源\n\n3. 缓存服务大量的骑牛打到源头服务去查mysql，直接打死mysql\n\n4. 源头服务因为mysql被打死也崩溃，对原服务的请求也hang主，占用资源\n\n5. 缓存服务大量的资源全部耗费访问redis和源服务无果，最后自己被拖死，无法提供服务\n\n6. ng无法访问缓存服务，redis和源服务，只能基于本地缓存提供服务，但是缓存过期后，没有数据提供\n\n7. 网站崩溃\n\n\n\n#### 事前\n\n\n\nredis本身的高可用性，主从架构\n\n\n\n建议双机房部署，可以是一套redis cluster，不同机器的，也可以是不同的redis cluster，两套redis cluster之间做一个数据同步，redis集群是可以搭建成树状结构的\n\n\n\n#### 事中\n\n\n\n##### ehcache本地缓存\n\n\n\n主要是为了应对redis中的数据被清除的现象和预防redis彻底崩溃\n\n\n\n多台机器上部署的缓存服务实例的内存中，还有要ehcache的缓存\n\n\n\nehcache还能支撑一阵子\n\n\n\n##### 对redis访问的资源隔离\n\n\n\n目的：为了避免所有资源hang在redis上\n\n\n\n对redis cluster访问失败的情况，做下熔断策略\n\n\n\n什么时候判断redis死了，就自动给他熔断，部署redis cluster的降级策略\n\n\n\n> 降级机制: fallback\n\n>\n\n> fail silent模式，failback里面直接返回一个空值，比如一个null，最简单了\n\n\n\n##### 对源服务访问的限流以及资源隔离\n\n\n\n资源隔离：限制访问商品服务的资源，避免商品故障的时候，所有资源都在访问该商品\n\n\n\n目的：为了源头服务在mysql死掉的情况下，可以存活一阵\n\n\n\n#### 事后\n\n\n\n##### redis做了备份\n\n\n\nredis数据做了备份，直接根据redis的持久化策略来恢复数据\n\n\n\n##### 快速缓存预约\n\n\n\n### 缓存穿透\n\n\n\n其实很简单，就是你查询的数据，多级缓存中都没有，大量的数据都直接走到了数据库，容易导致数据库崩溃\n\n\n\n### 缓存一致性\n\n\n\n\n\n\n","source":"_posts/缓存.md","raw":"---\ntitle: 缓存\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 8a15ea5f\ndate: 2021-03-22 00:00:00\n---\n\n\n###  经典的缓存架构\n\n\n\n<!-- more -->\n\n\n\n可以支持百万流量的三级缓存\n\n\n\n![image-20210323211727262](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210323211727262.png)\n\n\n\n### cache aside pattern\n\n\n\n1. 读数据的时候，先读缓存，缓存没有的话，就读数据库，放入缓存，返回响应\n\n2. 写数据的时候，先删除缓存，再更新数据库\n\n\n\n>为什么是删除缓存，而不是更新缓存那？\n\n>\n\n>原因很简单，试想这么场景，数据频繁的被修改，那么缓存就也要不断的重新计算，这个计算是非常消耗资源的，而且你更新了这么多次缓存还不一定能用到，就有点得不偿失了，所以就有了先删除缓存，再更新数据的做法，这样就是减少了非常多次的缓存重新计算的工作量，而是用到了数据的时候，再从数据库中加载到缓存中\n\n\n\n### 数据库和缓存双写问题\n\n\n\n#### 初级\n\n\n\n先写数据库，后写缓存，如果写缓存失败，就会出现数据库和缓存不一致的情况\n\n\n\n>解决方案：很简单，写数据的时候，先删除缓存，再更新数据库就可以了\n\n>\n\n>其实就是从两个操作失败的场景来分析就会明白了\n\n>\n\n>1. 删除缓存失败，那么就会再次执行删除缓存的操作，可以自定义重试几次，删除换缓存失败的情况，缓存和数据库数据一直，删除缓存成功，会以数据库数据为主，将相应数据写入数据库，等到再次请求缓存，用到这个数据的时候，再将数据放入到缓存中\n\n>2. 更新数据库失败，更新数据库失败就会回滚，此时缓存中没有数据，以数据库的数据为主，无非就是多次重试执行sql，直到成功或者说规定重试几次，返回更新数据失败的提示\n\n\n\n#### 进阶\n\n\n\n看完上面的解释，你是不是以为使用了先删除缓存，再写数据库的方式就可以避免数据库和缓存数据不一致的情况，我在这里告诉你，不是的！\n\n\n\n有一种场景，在一个线程删除缓存成功，准备将数据写数据库的时候，此时另外一个线程来请求这个数据，发现缓存中没有，直接去请求数据库，将数据库的数据读入到了缓存中，然后第一个线程才将数据写入数据库，此时缓存和数据库的数据出现了不一致的情况，数据库中是最新的数据，而缓存中是原来的数据。你以为已经给它删除了，但是如果一个线程出现上述这场景，就和没有删除的情况一样，仍然出现了缓存和数据库数据不一致的问题\n\n\n\n>解决方案：\n\n>\n\n>数据库与缓存更新与读取操作进行异步串行化\n\n>\n\n>更新数据的时候，根据数据的唯一标识，将操作路由之后，发送一个jvm内部的队列中\n\n>\n\n>读取数据的时候，如果发现数据不在缓存中，那么将重新拉取数据+更新缓存的造作，根据唯一标识路由之后，也发送同一个jvm内部的队列中\n\n>\n\n>一个队列对应一个工作线程\n\n>\n\n>每个工作线程串行拿到对应的操作，然后一条一条的执行选择的话，一个数据变更的操作，先执行，删除缓存，然后再去更新数据库，但是还米有完成更新\n\n>\n\n>此时如果一个读请求过来，读到了空的缓存，那么可以优先将缓存更新的请求发送到队列中，此时会在队列中积压，然后同步等待缓存更新完成\n\n>\n\n>这有有一个优化的点，一个队列中，其实多个更新缓存请求串在一个是没有意义的，因此可以做过滤，如果发现队列中已经有一个更新缓存的队列了，那么就不用再放一个更新的操作了，直接等待前面的更新操作完成\n\n>\n\n>待那个队列对应的工作线程完成了上一个操作的数据的数据库的修改之后，才会去执行下一个操作，此时会从数据库获取最新的值，然后写入缓存，如果请求还在等待时间范围，不断轮询可以发现可以直接取到值了，那么直接返回；如果请求等待的时间超过一定时长，那么这一次直接从数据库中读取当前的值\n\n\n\n​\t\n\n\n\n#### 注意\n\n\n\n在进阶中的方案仍然有有一些问题需要实际考虑\n\n\n\n由于读请求进行了非常轻度的异步化，所以一定要注意超时时间的问题，每个读请求必须在超时时间内返回\n\n\n\n该解决方案最大的风险点在于，可能数据更新很频繁，导致队列中积压了大量更新操作在里面，然后读请求会发生大量的超时，最后导致大量的请求直接走数据库\n\n\n\n务必通过一些模拟真实的测试，看看更新数据的频繁是怎样的\n\n\n\n另外一点，因为在 一个队列中，可能会积压针对多个数据项的更新操作，因此要根据自己的业务情况进行测试，可能需要部署多个服务，每个服务分摊一些数据更新的操作，如果一个内存队列里居然会积压100个商品的库存修改操作，每个库存修改都要豪飞10ms完成，那么最后一个商品的去请求，可能要等待1s，这个时候就导致读请求长时间的阻塞\n\n\n\n一定要根据实际业务系统的运行情况，去做一些压力测试，和模拟线上环境，去看看罪犯满给的时候，内存队列可能会挤压多少更新操作，如果读请求在200ms内返回，那还是可以接受的\n\n\n\n如果一个内存队列中可挤压的更新操作特别多，那么你就要加机器，让每个机器上部署的服务实例处理更少的机器，那么就会提高读请求的响应时间\n\n\n\n其实根据之前的项目经验，一般数据的写频率都是很低的，因此实际上正常来说，在队列中积压的更新操作应该是很少的\n\n\n\n#### 多实例部署的请求路由\n\n\n\n可能这个服务部署了多个实例，那么必须保证说，执行数据更新操作，以及执行缓存更新操作的请求，都通过nginx服务器路由到相同的服务实例上\n\n\n\n#### 热点商品问题，导致请求的倾斜\n\n\n\n对某一个商品的请求特别高，全部请求到相同机器的相同的队列去了，可能会造成某台机器压力过大\n\n\n\n### 缓存雪崩\n\n\n\n缓存雪崩这种场景，在缓存架构中是非常重要的一个环节，应对缓存雪崩的解决方案，避免缓存雪崩的时候，造成整个系统崩溃，带来巨大的经济损失\n\n\n\n1. redis集群彻底崩溃\n\n2. 缓存服务大龄对redis的请求hang主，占用资源\n\n3. 缓存服务大量的骑牛打到源头服务去查mysql，直接打死mysql\n\n4. 源头服务因为mysql被打死也崩溃，对原服务的请求也hang主，占用资源\n\n5. 缓存服务大量的资源全部耗费访问redis和源服务无果，最后自己被拖死，无法提供服务\n\n6. ng无法访问缓存服务，redis和源服务，只能基于本地缓存提供服务，但是缓存过期后，没有数据提供\n\n7. 网站崩溃\n\n\n\n#### 事前\n\n\n\nredis本身的高可用性，主从架构\n\n\n\n建议双机房部署，可以是一套redis cluster，不同机器的，也可以是不同的redis cluster，两套redis cluster之间做一个数据同步，redis集群是可以搭建成树状结构的\n\n\n\n#### 事中\n\n\n\n##### ehcache本地缓存\n\n\n\n主要是为了应对redis中的数据被清除的现象和预防redis彻底崩溃\n\n\n\n多台机器上部署的缓存服务实例的内存中，还有要ehcache的缓存\n\n\n\nehcache还能支撑一阵子\n\n\n\n##### 对redis访问的资源隔离\n\n\n\n目的：为了避免所有资源hang在redis上\n\n\n\n对redis cluster访问失败的情况，做下熔断策略\n\n\n\n什么时候判断redis死了，就自动给他熔断，部署redis cluster的降级策略\n\n\n\n> 降级机制: fallback\n\n>\n\n> fail silent模式，failback里面直接返回一个空值，比如一个null，最简单了\n\n\n\n##### 对源服务访问的限流以及资源隔离\n\n\n\n资源隔离：限制访问商品服务的资源，避免商品故障的时候，所有资源都在访问该商品\n\n\n\n目的：为了源头服务在mysql死掉的情况下，可以存活一阵\n\n\n\n#### 事后\n\n\n\n##### redis做了备份\n\n\n\nredis数据做了备份，直接根据redis的持久化策略来恢复数据\n\n\n\n##### 快速缓存预约\n\n\n\n### 缓存穿透\n\n\n\n其实很简单，就是你查询的数据，多级缓存中都没有，大量的数据都直接走到了数据库，容易导致数据库崩溃\n\n\n\n### 缓存一致性\n\n\n\n\n\n\n","slug":"缓存","published":1,"updated":"2025-03-02T03:37:34.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp5e005un0uk8jou08ax","content":"<h3 id=\"经典的缓存架构\"><a href=\"#经典的缓存架构\" class=\"headerlink\" title=\"经典的缓存架构\"></a>经典的缓存架构</h3><span id=\"more\"></span>\n\n\n\n<p>可以支持百万流量的三级缓存</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210323211727262.png\" alt=\"image-20210323211727262\" loading=\"lazy\"></p>\n<h3 id=\"cache-aside-pattern\"><a href=\"#cache-aside-pattern\" class=\"headerlink\" title=\"cache aside pattern\"></a>cache aside pattern</h3><ol>\n<li><p>读数据的时候，先读缓存，缓存没有的话，就读数据库，放入缓存，返回响应</p>\n</li>\n<li><p>写数据的时候，先删除缓存，再更新数据库</p>\n</li>\n</ol>\n<blockquote>\n<p>为什么是删除缓存，而不是更新缓存那？</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>原因很简单，试想这么场景，数据频繁的被修改，那么缓存就也要不断的重新计算，这个计算是非常消耗资源的，而且你更新了这么多次缓存还不一定能用到，就有点得不偿失了，所以就有了先删除缓存，再更新数据的做法，这样就是减少了非常多次的缓存重新计算的工作量，而是用到了数据的时候，再从数据库中加载到缓存中</p>\n</blockquote>\n<h3 id=\"数据库和缓存双写问题\"><a href=\"#数据库和缓存双写问题\" class=\"headerlink\" title=\"数据库和缓存双写问题\"></a>数据库和缓存双写问题</h3><h4 id=\"初级\"><a href=\"#初级\" class=\"headerlink\" title=\"初级\"></a>初级</h4><p>先写数据库，后写缓存，如果写缓存失败，就会出现数据库和缓存不一致的情况</p>\n<blockquote>\n<p>解决方案：很简单，写数据的时候，先删除缓存，再更新数据库就可以了</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>其实就是从两个操作失败的场景来分析就会明白了</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ol>\n<li>删除缓存失败，那么就会再次执行删除缓存的操作，可以自定义重试几次，删除换缓存失败的情况，缓存和数据库数据一直，删除缓存成功，会以数据库数据为主，将相应数据写入数据库，等到再次请求缓存，用到这个数据的时候，再将数据放入到缓存中</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>更新数据库失败，更新数据库失败就会回滚，此时缓存中没有数据，以数据库的数据为主，无非就是多次重试执行sql，直到成功或者说规定重试几次，返回更新数据失败的提示</li>\n</ol>\n</blockquote>\n<h4 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h4><p>看完上面的解释，你是不是以为使用了先删除缓存，再写数据库的方式就可以避免数据库和缓存数据不一致的情况，我在这里告诉你，不是的！</p>\n<p>有一种场景，在一个线程删除缓存成功，准备将数据写数据库的时候，此时另外一个线程来请求这个数据，发现缓存中没有，直接去请求数据库，将数据库的数据读入到了缓存中，然后第一个线程才将数据写入数据库，此时缓存和数据库的数据出现了不一致的情况，数据库中是最新的数据，而缓存中是原来的数据。你以为已经给它删除了，但是如果一个线程出现上述这场景，就和没有删除的情况一样，仍然出现了缓存和数据库数据不一致的问题</p>\n<blockquote>\n<p>解决方案：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>数据库与缓存更新与读取操作进行异步串行化</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>更新数据的时候，根据数据的唯一标识，将操作路由之后，发送一个jvm内部的队列中</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>读取数据的时候，如果发现数据不在缓存中，那么将重新拉取数据+更新缓存的造作，根据唯一标识路由之后，也发送同一个jvm内部的队列中</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>一个队列对应一个工作线程</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>每个工作线程串行拿到对应的操作，然后一条一条的执行选择的话，一个数据变更的操作，先执行，删除缓存，然后再去更新数据库，但是还米有完成更新</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>此时如果一个读请求过来，读到了空的缓存，那么可以优先将缓存更新的请求发送到队列中，此时会在队列中积压，然后同步等待缓存更新完成</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>这有有一个优化的点，一个队列中，其实多个更新缓存请求串在一个是没有意义的，因此可以做过滤，如果发现队列中已经有一个更新缓存的队列了，那么就不用再放一个更新的操作了，直接等待前面的更新操作完成</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>待那个队列对应的工作线程完成了上一个操作的数据的数据库的修改之后，才会去执行下一个操作，此时会从数据库获取最新的值，然后写入缓存，如果请求还在等待时间范围，不断轮询可以发现可以直接取到值了，那么直接返回；如果请求等待的时间超过一定时长，那么这一次直接从数据库中读取当前的值</p>\n</blockquote>\n<p>​\t</p>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><p>在进阶中的方案仍然有有一些问题需要实际考虑</p>\n<p>由于读请求进行了非常轻度的异步化，所以一定要注意超时时间的问题，每个读请求必须在超时时间内返回</p>\n<p>该解决方案最大的风险点在于，可能数据更新很频繁，导致队列中积压了大量更新操作在里面，然后读请求会发生大量的超时，最后导致大量的请求直接走数据库</p>\n<p>务必通过一些模拟真实的测试，看看更新数据的频繁是怎样的</p>\n<p>另外一点，因为在 一个队列中，可能会积压针对多个数据项的更新操作，因此要根据自己的业务情况进行测试，可能需要部署多个服务，每个服务分摊一些数据更新的操作，如果一个内存队列里居然会积压100个商品的库存修改操作，每个库存修改都要豪飞10ms完成，那么最后一个商品的去请求，可能要等待1s，这个时候就导致读请求长时间的阻塞</p>\n<p>一定要根据实际业务系统的运行情况，去做一些压力测试，和模拟线上环境，去看看罪犯满给的时候，内存队列可能会挤压多少更新操作，如果读请求在200ms内返回，那还是可以接受的</p>\n<p>如果一个内存队列中可挤压的更新操作特别多，那么你就要加机器，让每个机器上部署的服务实例处理更少的机器，那么就会提高读请求的响应时间</p>\n<p>其实根据之前的项目经验，一般数据的写频率都是很低的，因此实际上正常来说，在队列中积压的更新操作应该是很少的</p>\n<h4 id=\"多实例部署的请求路由\"><a href=\"#多实例部署的请求路由\" class=\"headerlink\" title=\"多实例部署的请求路由\"></a>多实例部署的请求路由</h4><p>可能这个服务部署了多个实例，那么必须保证说，执行数据更新操作，以及执行缓存更新操作的请求，都通过nginx服务器路由到相同的服务实例上</p>\n<h4 id=\"热点商品问题，导致请求的倾斜\"><a href=\"#热点商品问题，导致请求的倾斜\" class=\"headerlink\" title=\"热点商品问题，导致请求的倾斜\"></a>热点商品问题，导致请求的倾斜</h4><p>对某一个商品的请求特别高，全部请求到相同机器的相同的队列去了，可能会造成某台机器压力过大</p>\n<h3 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h3><p>缓存雪崩这种场景，在缓存架构中是非常重要的一个环节，应对缓存雪崩的解决方案，避免缓存雪崩的时候，造成整个系统崩溃，带来巨大的经济损失</p>\n<ol>\n<li><p>redis集群彻底崩溃</p>\n</li>\n<li><p>缓存服务大龄对redis的请求hang主，占用资源</p>\n</li>\n<li><p>缓存服务大量的骑牛打到源头服务去查mysql，直接打死mysql</p>\n</li>\n<li><p>源头服务因为mysql被打死也崩溃，对原服务的请求也hang主，占用资源</p>\n</li>\n<li><p>缓存服务大量的资源全部耗费访问redis和源服务无果，最后自己被拖死，无法提供服务</p>\n</li>\n<li><p>ng无法访问缓存服务，redis和源服务，只能基于本地缓存提供服务，但是缓存过期后，没有数据提供</p>\n</li>\n<li><p>网站崩溃</p>\n</li>\n</ol>\n<h4 id=\"事前\"><a href=\"#事前\" class=\"headerlink\" title=\"事前\"></a>事前</h4><p>redis本身的高可用性，主从架构</p>\n<p>建议双机房部署，可以是一套redis cluster，不同机器的，也可以是不同的redis cluster，两套redis cluster之间做一个数据同步，redis集群是可以搭建成树状结构的</p>\n<h4 id=\"事中\"><a href=\"#事中\" class=\"headerlink\" title=\"事中\"></a>事中</h4><h5 id=\"ehcache本地缓存\"><a href=\"#ehcache本地缓存\" class=\"headerlink\" title=\"ehcache本地缓存\"></a>ehcache本地缓存</h5><p>主要是为了应对redis中的数据被清除的现象和预防redis彻底崩溃</p>\n<p>多台机器上部署的缓存服务实例的内存中，还有要ehcache的缓存</p>\n<p>ehcache还能支撑一阵子</p>\n<h5 id=\"对redis访问的资源隔离\"><a href=\"#对redis访问的资源隔离\" class=\"headerlink\" title=\"对redis访问的资源隔离\"></a>对redis访问的资源隔离</h5><p>目的：为了避免所有资源hang在redis上</p>\n<p>对redis cluster访问失败的情况，做下熔断策略</p>\n<p>什么时候判断redis死了，就自动给他熔断，部署redis cluster的降级策略</p>\n<blockquote>\n<p>降级机制: fallback</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>fail silent模式，failback里面直接返回一个空值，比如一个null，最简单了</p>\n</blockquote>\n<h5 id=\"对源服务访问的限流以及资源隔离\"><a href=\"#对源服务访问的限流以及资源隔离\" class=\"headerlink\" title=\"对源服务访问的限流以及资源隔离\"></a>对源服务访问的限流以及资源隔离</h5><p>资源隔离：限制访问商品服务的资源，避免商品故障的时候，所有资源都在访问该商品</p>\n<p>目的：为了源头服务在mysql死掉的情况下，可以存活一阵</p>\n<h4 id=\"事后\"><a href=\"#事后\" class=\"headerlink\" title=\"事后\"></a>事后</h4><h5 id=\"redis做了备份\"><a href=\"#redis做了备份\" class=\"headerlink\" title=\"redis做了备份\"></a>redis做了备份</h5><p>redis数据做了备份，直接根据redis的持久化策略来恢复数据</p>\n<h5 id=\"快速缓存预约\"><a href=\"#快速缓存预约\" class=\"headerlink\" title=\"快速缓存预约\"></a>快速缓存预约</h5><h3 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h3><p>其实很简单，就是你查询的数据，多级缓存中都没有，大量的数据都直接走到了数据库，容易导致数据库崩溃</p>\n<h3 id=\"缓存一致性\"><a href=\"#缓存一致性\" class=\"headerlink\" title=\"缓存一致性\"></a>缓存一致性</h3>","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"经典的缓存架构\n可以支持百万流量的三级缓存\n\n\n\ncache aside pattern\n 1. 读数据的时候，先读缓存，缓存没有的话，就读数据库，放入缓存，返回响应\n    \n    \n 2. 写数据的时候，先删除缓存，再更新数据库\n    \n    \n\n为什么是删除缓存，而不是更新缓存那？\n\n原因很简单，试想这么场景，数据频繁的被修改，那么缓存就也要不断的重新计算，这个计算是非常消耗资源的，而且你更新了这么多次缓存还不一定能用到，就有点得不偿失了，所以就有了先删除缓存，再更新数据的做法，这样就是减少了非常多次的缓存重新计算的工作量，而是用到了数据的时候，再从数据库中加载到缓存中\n\n数据库和","more":"<p>可以支持百万流量的三级缓存</p>\n<p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210323211727262.png\" alt=\"image-20210323211727262\" loading=\"lazy\"></p>\n<h3 id=\"cache-aside-pattern\"><a href=\"#cache-aside-pattern\" class=\"headerlink\" title=\"cache aside pattern\"></a>cache aside pattern</h3><ol>\n<li><p>读数据的时候，先读缓存，缓存没有的话，就读数据库，放入缓存，返回响应</p>\n</li>\n<li><p>写数据的时候，先删除缓存，再更新数据库</p>\n</li>\n</ol>\n<blockquote>\n<p>为什么是删除缓存，而不是更新缓存那？</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>原因很简单，试想这么场景，数据频繁的被修改，那么缓存就也要不断的重新计算，这个计算是非常消耗资源的，而且你更新了这么多次缓存还不一定能用到，就有点得不偿失了，所以就有了先删除缓存，再更新数据的做法，这样就是减少了非常多次的缓存重新计算的工作量，而是用到了数据的时候，再从数据库中加载到缓存中</p>\n</blockquote>\n<h3 id=\"数据库和缓存双写问题\"><a href=\"#数据库和缓存双写问题\" class=\"headerlink\" title=\"数据库和缓存双写问题\"></a>数据库和缓存双写问题</h3><h4 id=\"初级\"><a href=\"#初级\" class=\"headerlink\" title=\"初级\"></a>初级</h4><p>先写数据库，后写缓存，如果写缓存失败，就会出现数据库和缓存不一致的情况</p>\n<blockquote>\n<p>解决方案：很简单，写数据的时候，先删除缓存，再更新数据库就可以了</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>其实就是从两个操作失败的场景来分析就会明白了</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<ol>\n<li>删除缓存失败，那么就会再次执行删除缓存的操作，可以自定义重试几次，删除换缓存失败的情况，缓存和数据库数据一直，删除缓存成功，会以数据库数据为主，将相应数据写入数据库，等到再次请求缓存，用到这个数据的时候，再将数据放入到缓存中</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>更新数据库失败，更新数据库失败就会回滚，此时缓存中没有数据，以数据库的数据为主，无非就是多次重试执行sql，直到成功或者说规定重试几次，返回更新数据失败的提示</li>\n</ol>\n</blockquote>\n<h4 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h4><p>看完上面的解释，你是不是以为使用了先删除缓存，再写数据库的方式就可以避免数据库和缓存数据不一致的情况，我在这里告诉你，不是的！</p>\n<p>有一种场景，在一个线程删除缓存成功，准备将数据写数据库的时候，此时另外一个线程来请求这个数据，发现缓存中没有，直接去请求数据库，将数据库的数据读入到了缓存中，然后第一个线程才将数据写入数据库，此时缓存和数据库的数据出现了不一致的情况，数据库中是最新的数据，而缓存中是原来的数据。你以为已经给它删除了，但是如果一个线程出现上述这场景，就和没有删除的情况一样，仍然出现了缓存和数据库数据不一致的问题</p>\n<blockquote>\n<p>解决方案：</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>数据库与缓存更新与读取操作进行异步串行化</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>更新数据的时候，根据数据的唯一标识，将操作路由之后，发送一个jvm内部的队列中</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>读取数据的时候，如果发现数据不在缓存中，那么将重新拉取数据+更新缓存的造作，根据唯一标识路由之后，也发送同一个jvm内部的队列中</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>一个队列对应一个工作线程</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>每个工作线程串行拿到对应的操作，然后一条一条的执行选择的话，一个数据变更的操作，先执行，删除缓存，然后再去更新数据库，但是还米有完成更新</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>此时如果一个读请求过来，读到了空的缓存，那么可以优先将缓存更新的请求发送到队列中，此时会在队列中积压，然后同步等待缓存更新完成</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>这有有一个优化的点，一个队列中，其实多个更新缓存请求串在一个是没有意义的，因此可以做过滤，如果发现队列中已经有一个更新缓存的队列了，那么就不用再放一个更新的操作了，直接等待前面的更新操作完成</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>待那个队列对应的工作线程完成了上一个操作的数据的数据库的修改之后，才会去执行下一个操作，此时会从数据库获取最新的值，然后写入缓存，如果请求还在等待时间范围，不断轮询可以发现可以直接取到值了，那么直接返回；如果请求等待的时间超过一定时长，那么这一次直接从数据库中读取当前的值</p>\n</blockquote>\n<p>​\t</p>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><p>在进阶中的方案仍然有有一些问题需要实际考虑</p>\n<p>由于读请求进行了非常轻度的异步化，所以一定要注意超时时间的问题，每个读请求必须在超时时间内返回</p>\n<p>该解决方案最大的风险点在于，可能数据更新很频繁，导致队列中积压了大量更新操作在里面，然后读请求会发生大量的超时，最后导致大量的请求直接走数据库</p>\n<p>务必通过一些模拟真实的测试，看看更新数据的频繁是怎样的</p>\n<p>另外一点，因为在 一个队列中，可能会积压针对多个数据项的更新操作，因此要根据自己的业务情况进行测试，可能需要部署多个服务，每个服务分摊一些数据更新的操作，如果一个内存队列里居然会积压100个商品的库存修改操作，每个库存修改都要豪飞10ms完成，那么最后一个商品的去请求，可能要等待1s，这个时候就导致读请求长时间的阻塞</p>\n<p>一定要根据实际业务系统的运行情况，去做一些压力测试，和模拟线上环境，去看看罪犯满给的时候，内存队列可能会挤压多少更新操作，如果读请求在200ms内返回，那还是可以接受的</p>\n<p>如果一个内存队列中可挤压的更新操作特别多，那么你就要加机器，让每个机器上部署的服务实例处理更少的机器，那么就会提高读请求的响应时间</p>\n<p>其实根据之前的项目经验，一般数据的写频率都是很低的，因此实际上正常来说，在队列中积压的更新操作应该是很少的</p>\n<h4 id=\"多实例部署的请求路由\"><a href=\"#多实例部署的请求路由\" class=\"headerlink\" title=\"多实例部署的请求路由\"></a>多实例部署的请求路由</h4><p>可能这个服务部署了多个实例，那么必须保证说，执行数据更新操作，以及执行缓存更新操作的请求，都通过nginx服务器路由到相同的服务实例上</p>\n<h4 id=\"热点商品问题，导致请求的倾斜\"><a href=\"#热点商品问题，导致请求的倾斜\" class=\"headerlink\" title=\"热点商品问题，导致请求的倾斜\"></a>热点商品问题，导致请求的倾斜</h4><p>对某一个商品的请求特别高，全部请求到相同机器的相同的队列去了，可能会造成某台机器压力过大</p>\n<h3 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h3><p>缓存雪崩这种场景，在缓存架构中是非常重要的一个环节，应对缓存雪崩的解决方案，避免缓存雪崩的时候，造成整个系统崩溃，带来巨大的经济损失</p>\n<ol>\n<li><p>redis集群彻底崩溃</p>\n</li>\n<li><p>缓存服务大龄对redis的请求hang主，占用资源</p>\n</li>\n<li><p>缓存服务大量的骑牛打到源头服务去查mysql，直接打死mysql</p>\n</li>\n<li><p>源头服务因为mysql被打死也崩溃，对原服务的请求也hang主，占用资源</p>\n</li>\n<li><p>缓存服务大量的资源全部耗费访问redis和源服务无果，最后自己被拖死，无法提供服务</p>\n</li>\n<li><p>ng无法访问缓存服务，redis和源服务，只能基于本地缓存提供服务，但是缓存过期后，没有数据提供</p>\n</li>\n<li><p>网站崩溃</p>\n</li>\n</ol>\n<h4 id=\"事前\"><a href=\"#事前\" class=\"headerlink\" title=\"事前\"></a>事前</h4><p>redis本身的高可用性，主从架构</p>\n<p>建议双机房部署，可以是一套redis cluster，不同机器的，也可以是不同的redis cluster，两套redis cluster之间做一个数据同步，redis集群是可以搭建成树状结构的</p>\n<h4 id=\"事中\"><a href=\"#事中\" class=\"headerlink\" title=\"事中\"></a>事中</h4><h5 id=\"ehcache本地缓存\"><a href=\"#ehcache本地缓存\" class=\"headerlink\" title=\"ehcache本地缓存\"></a>ehcache本地缓存</h5><p>主要是为了应对redis中的数据被清除的现象和预防redis彻底崩溃</p>\n<p>多台机器上部署的缓存服务实例的内存中，还有要ehcache的缓存</p>\n<p>ehcache还能支撑一阵子</p>\n<h5 id=\"对redis访问的资源隔离\"><a href=\"#对redis访问的资源隔离\" class=\"headerlink\" title=\"对redis访问的资源隔离\"></a>对redis访问的资源隔离</h5><p>目的：为了避免所有资源hang在redis上</p>\n<p>对redis cluster访问失败的情况，做下熔断策略</p>\n<p>什么时候判断redis死了，就自动给他熔断，部署redis cluster的降级策略</p>\n<blockquote>\n<p>降级机制: fallback</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>fail silent模式，failback里面直接返回一个空值，比如一个null，最简单了</p>\n</blockquote>\n<h5 id=\"对源服务访问的限流以及资源隔离\"><a href=\"#对源服务访问的限流以及资源隔离\" class=\"headerlink\" title=\"对源服务访问的限流以及资源隔离\"></a>对源服务访问的限流以及资源隔离</h5><p>资源隔离：限制访问商品服务的资源，避免商品故障的时候，所有资源都在访问该商品</p>\n<p>目的：为了源头服务在mysql死掉的情况下，可以存活一阵</p>\n<h4 id=\"事后\"><a href=\"#事后\" class=\"headerlink\" title=\"事后\"></a>事后</h4><h5 id=\"redis做了备份\"><a href=\"#redis做了备份\" class=\"headerlink\" title=\"redis做了备份\"></a>redis做了备份</h5><p>redis数据做了备份，直接根据redis的持久化策略来恢复数据</p>\n<h5 id=\"快速缓存预约\"><a href=\"#快速缓存预约\" class=\"headerlink\" title=\"快速缓存预约\"></a>快速缓存预约</h5><h3 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h3><p>其实很简单，就是你查询的数据，多级缓存中都没有，大量的数据都直接走到了数据库，容易导致数据库崩溃</p>\n<h3 id=\"缓存一致性\"><a href=\"#缓存一致性\" class=\"headerlink\" title=\"缓存一致性\"></a>缓存一致性</h3>"},{"title":"解决hexo更新时间问题","description":"","abbrlink":"fdc6692d","date":"2023-05-28T16:00:00.000Z","_content":"\n\n## 修改post文件\n\n\n\n```shell\n\n---title: {{ title }}\n\npubDateTime: {{ pubDateTime }}\n\nupdated: {{ pubDateTime }}\n\ntags:\n\n```\n\n\n\n这样每次新建文章后，会自动添加 `updated` 标签，并且与 `pubDateTime` 的创建时间一致。\n\n\n\n如果是历史文章，则需要**手动给每篇文章增加这个更新时间**，或者自己写个脚本批量处理下。\n\n\n\n## 主题相关配置\n\n\n\n![image-20230529105049252](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20230529105049252.png)\n\n\n\n## 参考\n\n\n\n- [网址](https://sqiang.net/post/2792803495.html)\n","source":"_posts/解决hexo更新时间问题.md","raw":"---\ntitle: 解决hexo更新时间问题\ndescription: ''\ntags:\n  - 无标签\nabbrlink: fdc6692d\ndate: 2023-05-29 00:00:00\n---\n\n\n## 修改post文件\n\n\n\n```shell\n\n---title: {{ title }}\n\npubDateTime: {{ pubDateTime }}\n\nupdated: {{ pubDateTime }}\n\ntags:\n\n```\n\n\n\n这样每次新建文章后，会自动添加 `updated` 标签，并且与 `pubDateTime` 的创建时间一致。\n\n\n\n如果是历史文章，则需要**手动给每篇文章增加这个更新时间**，或者自己写个脚本批量处理下。\n\n\n\n## 主题相关配置\n\n\n\n![image-20230529105049252](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20230529105049252.png)\n\n\n\n## 参考\n\n\n\n- [网址](https://sqiang.net/post/2792803495.html)\n","slug":"解决hexo更新时间问题","published":1,"updated":"2025-03-02T03:37:34.446Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp5e005wn0uk3z386c16","content":"<h2 id=\"修改post文件\"><a href=\"#修改post文件\" class=\"headerlink\" title=\"修改post文件\"></a>修改post文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">---title: &#123;&#123; title &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">pubDateTime: &#123;&#123; pubDateTime &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">updated: &#123;&#123; pubDateTime &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">tags:</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这样每次新建文章后，会自动添加 <code>updated</code> 标签，并且与 <code>pubDateTime</code> 的创建时间一致。</p>\n<p>如果是历史文章，则需要<strong>手动给每篇文章增加这个更新时间</strong>，或者自己写个脚本批量处理下。</p>\n<h2 id=\"主题相关配置\"><a href=\"#主题相关配置\" class=\"headerlink\" title=\"主题相关配置\"></a>主题相关配置</h2><p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20230529105049252.png\" alt=\"image-20230529105049252\" loading=\"lazy\"></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcWlhbmcubmV0L3Bvc3QvMjc5MjgwMzQ5NS5odG1s\">网址<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"修改post文件\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n---title: {{ title }}\n\npubDateTime: {{ pubDateTime }}\n\nupdated: {{ pubDateTime }}\n\ntags:\n\n\n\n这样每次新建文章后，会自动添加 updated 标签，并且与 pubDateTime 的创建时间一致。\n\n如果是历史文章，则需要手动给每篇文章增加这个更新时间，或者自己写个脚本批量处理下。\n\n主题相关配置\n\n\n参考\n * 网址","more":"<h2 id=\"修改post文件\"><a href=\"#修改post文件\" class=\"headerlink\" title=\"修改post文件\"></a>修改post文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">---title: &#123;&#123; title &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">pubDateTime: &#123;&#123; pubDateTime &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">updated: &#123;&#123; pubDateTime &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">tags:</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这样每次新建文章后，会自动添加 <code>updated</code> 标签，并且与 <code>pubDateTime</code> 的创建时间一致。</p>\n<p>如果是历史文章，则需要<strong>手动给每篇文章增加这个更新时间</strong>，或者自己写个脚本批量处理下。</p>\n<h2 id=\"主题相关配置\"><a href=\"#主题相关配置\" class=\"headerlink\" title=\"主题相关配置\"></a>主题相关配置</h2><p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20230529105049252.png\" alt=\"image-20230529105049252\" loading=\"lazy\"></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcWlhbmcubmV0L3Bvc3QvMjc5MjgwMzQ5NS5odG1s\">网址<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n"},{"title":"迪米特法则","description":"","abbrlink":"ebdadec7","date":"2021-06-14T16:00:00.000Z","_content":"\n\n迪米特法则\n\n\n\n<!-- more -->\n\n\n\n## 定义\n\n\n\n迪米特法则（Law of Demeter，LoD）也称为最少知识原则（Least KnowledgePrinciple，LKP），虽然名字不同，但描述的是同一个规则：一个对象应该对其他对象有最少的了解。通俗地讲，一个类应该对自己需要耦合或调用的类知道得最少，你（被耦合或调用的类）的内部是如何复杂都和我没关系，那是你的事情，我就知道你提供的这么多public方法，我就调用这么多，其他的我一概不关心。\n\n\n\n## 要求\n\n\n\n### 只和朋友类交流\n\n\n\n出现在成员变量、方法的输入输出参数中的类称为成员朋友类\n\n\n\n### 要和朋友保持距离\n\n\n\n一个类公开的public属性或方法越多，修改时涉及的面也就越大，变更引起的风险扩散也就越大。因此，为了保持朋友类间的距离，在设计时需要反复衡量：是否还可以再减少public方法和属性，是否可以修改为private、package-private（包类型，在类、方法、变量前不加访问权限，则默认为包类型）、protected等访问权限，是否可以加上final关键字等。\n\n\n\n> 注意 迪米特法则要求类“羞涩”一点，尽量不要对外公布太多的public方法和非静态的public变量，尽量内敛，多使用private、package-private、protected等访问权限\n\n\n\n### 是自己的就是自己的\n\n\n\n在实际应用中经常会出现这样一个方法：放在本类中也可以，放在其他类中也没有错，那怎么去衡量呢？你可以坚持这样一个原则：如果一个方法放在本类中，既不增加类间关系，也对本类不产生负面影响，那就放置在本类中。\n\n\n\n### 谨慎使用Serializable\n\n\n\n因为在使用vo类也就是实体类的时候，经常要序列化才行，如果类中的方法从原来的私有属性，改为了public，就可能会导致接口出现问题，但是这个问题应该是项目管理的问题，不可能服务端修改接口的相应代码，客户端没有接受到通知吧\n\n\n\n## 总结\n\n\n\n迪米特法则的核心观念就是类间解耦，弱耦合，只有弱耦合了以后，类的复用率才可以提高。其要求的结果就是产生了大量的中转或跳转类，导致系统的复杂性提高，同时也为维护带来了难度。读者在采用迪米特法则时需要反复权衡，既做到让结构清晰，又做到高内聚低耦合。\n\n\n\n一般来说，在实际应用中，如果一个类跳转两次以上才能访问到另一个类，就需要想办法进行重构了，为什么是两次以上呢？因为一个系统的成功不仅仅是一个标准或是原则就能够决定的，有非常多的外在因素决定，跳转次数越多，系统越复杂，维护就越困难，所以只要跳转不超过两次都是可以忍受的，这需要具体问题具体分析。","source":"_posts/迪米特法则.md","raw":"---\ntitle: 迪米特法则\ndescription: ''\ntags:\n  - 无标签\nabbrlink: ebdadec7\ndate: 2021-06-15 00:00:00\n---\n\n\n迪米特法则\n\n\n\n<!-- more -->\n\n\n\n## 定义\n\n\n\n迪米特法则（Law of Demeter，LoD）也称为最少知识原则（Least KnowledgePrinciple，LKP），虽然名字不同，但描述的是同一个规则：一个对象应该对其他对象有最少的了解。通俗地讲，一个类应该对自己需要耦合或调用的类知道得最少，你（被耦合或调用的类）的内部是如何复杂都和我没关系，那是你的事情，我就知道你提供的这么多public方法，我就调用这么多，其他的我一概不关心。\n\n\n\n## 要求\n\n\n\n### 只和朋友类交流\n\n\n\n出现在成员变量、方法的输入输出参数中的类称为成员朋友类\n\n\n\n### 要和朋友保持距离\n\n\n\n一个类公开的public属性或方法越多，修改时涉及的面也就越大，变更引起的风险扩散也就越大。因此，为了保持朋友类间的距离，在设计时需要反复衡量：是否还可以再减少public方法和属性，是否可以修改为private、package-private（包类型，在类、方法、变量前不加访问权限，则默认为包类型）、protected等访问权限，是否可以加上final关键字等。\n\n\n\n> 注意 迪米特法则要求类“羞涩”一点，尽量不要对外公布太多的public方法和非静态的public变量，尽量内敛，多使用private、package-private、protected等访问权限\n\n\n\n### 是自己的就是自己的\n\n\n\n在实际应用中经常会出现这样一个方法：放在本类中也可以，放在其他类中也没有错，那怎么去衡量呢？你可以坚持这样一个原则：如果一个方法放在本类中，既不增加类间关系，也对本类不产生负面影响，那就放置在本类中。\n\n\n\n### 谨慎使用Serializable\n\n\n\n因为在使用vo类也就是实体类的时候，经常要序列化才行，如果类中的方法从原来的私有属性，改为了public，就可能会导致接口出现问题，但是这个问题应该是项目管理的问题，不可能服务端修改接口的相应代码，客户端没有接受到通知吧\n\n\n\n## 总结\n\n\n\n迪米特法则的核心观念就是类间解耦，弱耦合，只有弱耦合了以后，类的复用率才可以提高。其要求的结果就是产生了大量的中转或跳转类，导致系统的复杂性提高，同时也为维护带来了难度。读者在采用迪米特法则时需要反复权衡，既做到让结构清晰，又做到高内聚低耦合。\n\n\n\n一般来说，在实际应用中，如果一个类跳转两次以上才能访问到另一个类，就需要想办法进行重构了，为什么是两次以上呢？因为一个系统的成功不仅仅是一个标准或是原则就能够决定的，有非常多的外在因素决定，跳转次数越多，系统越复杂，维护就越困难，所以只要跳转不超过两次都是可以忍受的，这需要具体问题具体分析。","slug":"迪米特法则","published":1,"updated":"2025-03-02T03:37:34.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp5e005yn0ukc7917sr2","content":"<p>迪米特法则</p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>迪米特法则（Law of Demeter，LoD）也称为最少知识原则（Least KnowledgePrinciple，LKP），虽然名字不同，但描述的是同一个规则：一个对象应该对其他对象有最少的了解。通俗地讲，一个类应该对自己需要耦合或调用的类知道得最少，你（被耦合或调用的类）的内部是如何复杂都和我没关系，那是你的事情，我就知道你提供的这么多public方法，我就调用这么多，其他的我一概不关心。</p>\n<h2 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h2><h3 id=\"只和朋友类交流\"><a href=\"#只和朋友类交流\" class=\"headerlink\" title=\"只和朋友类交流\"></a>只和朋友类交流</h3><p>出现在成员变量、方法的输入输出参数中的类称为成员朋友类</p>\n<h3 id=\"要和朋友保持距离\"><a href=\"#要和朋友保持距离\" class=\"headerlink\" title=\"要和朋友保持距离\"></a>要和朋友保持距离</h3><p>一个类公开的public属性或方法越多，修改时涉及的面也就越大，变更引起的风险扩散也就越大。因此，为了保持朋友类间的距离，在设计时需要反复衡量：是否还可以再减少public方法和属性，是否可以修改为private、package-private（包类型，在类、方法、变量前不加访问权限，则默认为包类型）、protected等访问权限，是否可以加上final关键字等。</p>\n<blockquote>\n<p>注意 迪米特法则要求类“羞涩”一点，尽量不要对外公布太多的public方法和非静态的public变量，尽量内敛，多使用private、package-private、protected等访问权限</p>\n</blockquote>\n<h3 id=\"是自己的就是自己的\"><a href=\"#是自己的就是自己的\" class=\"headerlink\" title=\"是自己的就是自己的\"></a>是自己的就是自己的</h3><p>在实际应用中经常会出现这样一个方法：放在本类中也可以，放在其他类中也没有错，那怎么去衡量呢？你可以坚持这样一个原则：如果一个方法放在本类中，既不增加类间关系，也对本类不产生负面影响，那就放置在本类中。</p>\n<h3 id=\"谨慎使用Serializable\"><a href=\"#谨慎使用Serializable\" class=\"headerlink\" title=\"谨慎使用Serializable\"></a>谨慎使用Serializable</h3><p>因为在使用vo类也就是实体类的时候，经常要序列化才行，如果类中的方法从原来的私有属性，改为了public，就可能会导致接口出现问题，但是这个问题应该是项目管理的问题，不可能服务端修改接口的相应代码，客户端没有接受到通知吧</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>迪米特法则的核心观念就是类间解耦，弱耦合，只有弱耦合了以后，类的复用率才可以提高。其要求的结果就是产生了大量的中转或跳转类，导致系统的复杂性提高，同时也为维护带来了难度。读者在采用迪米特法则时需要反复权衡，既做到让结构清晰，又做到高内聚低耦合。</p>\n<p>一般来说，在实际应用中，如果一个类跳转两次以上才能访问到另一个类，就需要想办法进行重构了，为什么是两次以上呢？因为一个系统的成功不仅仅是一个标准或是原则就能够决定的，有非常多的外在因素决定，跳转次数越多，系统越复杂，维护就越困难，所以只要跳转不超过两次都是可以忍受的，这需要具体问题具体分析。</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"迪米特法则\n\n定义\n迪米特法则（Law of Demeter，LoD）也称为最少知识原则（Least KnowledgePrinciple，LKP），虽然名字不同，但描述的是同一个规则：一个对象应该对其他对象有最少的了解。通俗地讲，一个类应该对自己需要耦合或调用的类知道得最少，你（被耦合或调用的类）的内部是如何复杂都和我没关系，那是你的事情，我就知道你提供的这么多public方法，我就调用这么多，其他的我一概不关心。\n\n要求\n只和朋友类交流\n出现在成员变量、方法的输入输出参数中的类称为成员朋友类\n\n要和朋友保持距离\n一个类公开的public属性或方法越多，修改时涉及的面也就越大，变更引起的风险","more":"<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>迪米特法则（Law of Demeter，LoD）也称为最少知识原则（Least KnowledgePrinciple，LKP），虽然名字不同，但描述的是同一个规则：一个对象应该对其他对象有最少的了解。通俗地讲，一个类应该对自己需要耦合或调用的类知道得最少，你（被耦合或调用的类）的内部是如何复杂都和我没关系，那是你的事情，我就知道你提供的这么多public方法，我就调用这么多，其他的我一概不关心。</p>\n<h2 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h2><h3 id=\"只和朋友类交流\"><a href=\"#只和朋友类交流\" class=\"headerlink\" title=\"只和朋友类交流\"></a>只和朋友类交流</h3><p>出现在成员变量、方法的输入输出参数中的类称为成员朋友类</p>\n<h3 id=\"要和朋友保持距离\"><a href=\"#要和朋友保持距离\" class=\"headerlink\" title=\"要和朋友保持距离\"></a>要和朋友保持距离</h3><p>一个类公开的public属性或方法越多，修改时涉及的面也就越大，变更引起的风险扩散也就越大。因此，为了保持朋友类间的距离，在设计时需要反复衡量：是否还可以再减少public方法和属性，是否可以修改为private、package-private（包类型，在类、方法、变量前不加访问权限，则默认为包类型）、protected等访问权限，是否可以加上final关键字等。</p>\n<blockquote>\n<p>注意 迪米特法则要求类“羞涩”一点，尽量不要对外公布太多的public方法和非静态的public变量，尽量内敛，多使用private、package-private、protected等访问权限</p>\n</blockquote>\n<h3 id=\"是自己的就是自己的\"><a href=\"#是自己的就是自己的\" class=\"headerlink\" title=\"是自己的就是自己的\"></a>是自己的就是自己的</h3><p>在实际应用中经常会出现这样一个方法：放在本类中也可以，放在其他类中也没有错，那怎么去衡量呢？你可以坚持这样一个原则：如果一个方法放在本类中，既不增加类间关系，也对本类不产生负面影响，那就放置在本类中。</p>\n<h3 id=\"谨慎使用Serializable\"><a href=\"#谨慎使用Serializable\" class=\"headerlink\" title=\"谨慎使用Serializable\"></a>谨慎使用Serializable</h3><p>因为在使用vo类也就是实体类的时候，经常要序列化才行，如果类中的方法从原来的私有属性，改为了public，就可能会导致接口出现问题，但是这个问题应该是项目管理的问题，不可能服务端修改接口的相应代码，客户端没有接受到通知吧</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>迪米特法则的核心观念就是类间解耦，弱耦合，只有弱耦合了以后，类的复用率才可以提高。其要求的结果就是产生了大量的中转或跳转类，导致系统的复杂性提高，同时也为维护带来了难度。读者在采用迪米特法则时需要反复权衡，既做到让结构清晰，又做到高内聚低耦合。</p>\n<p>一般来说，在实际应用中，如果一个类跳转两次以上才能访问到另一个类，就需要想办法进行重构了，为什么是两次以上呢？因为一个系统的成功不仅仅是一个标准或是原则就能够决定的，有非常多的外在因素决定，跳转次数越多，系统越复杂，维护就越困难，所以只要跳转不超过两次都是可以忍受的，这需要具体问题具体分析。</p>"},{"title":"重新回到hexo","description":"","abbrlink":"fdbece1f","date":"2023-04-22T16:00:00.000Z","updated":"2025-03-02T04:44:00.000Z","_content":"> 尬住，还是最终决定回到hexo了，不太像折腾了，意识到了其实记录下来才是最重要的，而不是主题啊 各种乱七八糟的东西\n\n# 原因\n\n\n\n如今的我坐在老家已经上班一个月了，我也折腾了我halo的博客，发现打开速度很慢，而且服务器是个大问题，我又不是那么愿意为了博客付费太多，毕竟其实没有多少人看的，所以我才又换回来了。\n\n\n\n# 庆祝\n\n\n\n庆祝我又回到hexo，又开始了使用typora来进行写文章了，希望我也可以找回我曾经对于技术的热情，虽然也不知道这条敲代码的路可以走到多远，希望可以做一辈子吧，感觉敲代码挺好的，我喜欢，但是国内大环境都说什么35岁年龄危机了，很烦人，whatever，希望可以敲一辈子代码吧！！！\n\n\n\n![1646105628208572](https://shyblog.oss-cn-beijing.aliyuncs.com/img/1646105628208572.jpg)\n","source":"_posts/重新回到hexo.md","raw":"---\ntitle: 重新回到hexo\ndescription: ''\ntags:\n  - 无标签\nabbrlink: fdbece1f\ndate: 2023-04-23 00:00:00\nupdated: 2025-03-02 12:44:00\n---\n> 尬住，还是最终决定回到hexo了，不太像折腾了，意识到了其实记录下来才是最重要的，而不是主题啊 各种乱七八糟的东西\n\n# 原因\n\n\n\n如今的我坐在老家已经上班一个月了，我也折腾了我halo的博客，发现打开速度很慢，而且服务器是个大问题，我又不是那么愿意为了博客付费太多，毕竟其实没有多少人看的，所以我才又换回来了。\n\n\n\n# 庆祝\n\n\n\n庆祝我又回到hexo，又开始了使用typora来进行写文章了，希望我也可以找回我曾经对于技术的热情，虽然也不知道这条敲代码的路可以走到多远，希望可以做一辈子吧，感觉敲代码挺好的，我喜欢，但是国内大环境都说什么35岁年龄危机了，很烦人，whatever，希望可以敲一辈子代码吧！！！\n\n\n\n![1646105628208572](https://shyblog.oss-cn-beijing.aliyuncs.com/img/1646105628208572.jpg)\n","slug":"重新回到hexo","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp5f0060n0uk1z6s7p4s","content":"<blockquote>\n<p>尬住，还是最终决定回到hexo了，不太像折腾了，意识到了其实记录下来才是最重要的，而不是主题啊 各种乱七八糟的东西</p>\n</blockquote>\n<h1 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h1><p>如今的我坐在老家已经上班一个月了，我也折腾了我halo的博客，发现打开速度很慢，而且服务器是个大问题，我又不是那么愿意为了博客付费太多，毕竟其实没有多少人看的，所以我才又换回来了。</p>\n<h1 id=\"庆祝\"><a href=\"#庆祝\" class=\"headerlink\" title=\"庆祝\"></a>庆祝</h1><p>庆祝我又回到hexo，又开始了使用typora来进行写文章了，希望我也可以找回我曾经对于技术的热情，虽然也不知道这条敲代码的路可以走到多远，希望可以做一辈子吧，感觉敲代码挺好的，我喜欢，但是国内大环境都说什么35岁年龄危机了，很烦人，whatever，希望可以敲一辈子代码吧！！！</p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/1646105628208572.jpg\" alt=\"1646105628208572\" loading=\"lazy\"></p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"尬住，还是最终决定回到hexo了，不太像折腾了，意识到了其实记录下来才是最重要的，而不是主题啊 各种乱七八糟的东西\n\n原因\n如今的我坐在老家已经上班一个月了，我也折腾了我halo的博客，发现打开速度很慢，而且服务器是个大问题，我又不是那么愿意为了博客付费太多，毕竟其实没有多少人看的，所以我才又换回来了。\n\n庆祝\n庆祝我又回到hexo，又开始了使用typora来进行写文章了，希望我也可以找回我曾经对于技术的热情，虽然也不知道这条敲代码的路可以走到多远，希望可以做一辈子吧，感觉敲代码挺好的，我喜欢，但是国内大环境都说什么35岁年龄危机了，很烦人，whatever，希望可以敲一辈子代码吧！！！","more":"<blockquote>\n<p>尬住，还是最终决定回到hexo了，不太像折腾了，意识到了其实记录下来才是最重要的，而不是主题啊 各种乱七八糟的东西</p>\n</blockquote>\n<h1 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h1><p>如今的我坐在老家已经上班一个月了，我也折腾了我halo的博客，发现打开速度很慢，而且服务器是个大问题，我又不是那么愿意为了博客付费太多，毕竟其实没有多少人看的，所以我才又换回来了。</p>\n<h1 id=\"庆祝\"><a href=\"#庆祝\" class=\"headerlink\" title=\"庆祝\"></a>庆祝</h1><p>庆祝我又回到hexo，又开始了使用typora来进行写文章了，希望我也可以找回我曾经对于技术的热情，虽然也不知道这条敲代码的路可以走到多远，希望可以做一辈子吧，感觉敲代码挺好的，我喜欢，但是国内大环境都说什么35岁年龄危机了，很烦人，whatever，希望可以敲一辈子代码吧！！！</p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/1646105628208572.jpg\" alt=\"1646105628208572\" loading=\"lazy\"></p>\n"},{"title":"陈皓，一路走好！！！","description":"","abbrlink":"100acadf","date":"2023-05-14T16:00:00.000Z","_content":"\n\n## 他的数字家园\n\n\n\n- [微信采访](https://mp.weixin.qq.com/s/wVz6HkNH_1sljr_tKxH9eg)\n\n- [酷壳-他的个人博客](https://coolshell.cn/)\n\n\n\n## 噩耗\n\n\n\n今天早上的时候，我在日常的刷推特，突然刷到了这么一条推特\n\n\n\n![image-20230515192952419](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20230515192952419.png)\n\n\n\n我猛的一看，以为是在开玩笑，但是仔细一看，感觉不对劲，好朋友是不会拿这个开玩笑的，于是发到各种微信群中进行询问，最终在我加入的云原生交流群中得到了他公司员工的回复，这才确定这是真的！！！\n\n\n\n![image-20230515193927697](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20230515193927697.png)\n\n\n\n## 我与他的认识\n\n\n\n其实我已经记不起我是怎么认识他的，好像是从什么地方看的，是翻墙吗？不记得了，一开始是刚学会翻墙吧，就加了他的tg群，然后就开始刷推特了，经常看他发的推特，有的说的还是挺有意思的，或者是发人深思的，也看过他的博客，博客写的都是满满的干货，那个时候大概就知道了他是一个真大佬了，中间我买过他在极客时间的课，三百好像吧，当时真是下定决心看的，但是看完之后，自己并没有按照那个来，还是自己瞎来的，也许自己没有发展好跟这个有点关系吧。\n\n\n\n慢慢的，随着关注他的时间越长，大概就知道了他创建了megaease这个公司，以及他对于技术的热情，我之前一直以为到了四五十岁国内都是做了管理层了，基本都不写代码了，但是他竟然还写代码，而且还一点一点的去扣技术细节，很难得啊。\n\n\n\n本来好好地一个人，13号还在发推特，突然就没了，看到病因说是心梗，就是急性心脏病，之前没有了解过，后来查了一下才知道，这种如果突然爆发，几分钟就没了，哎，真是没有想到啊，我所加的各种技术群和推特，都是在为国内失去了一个技术大佬而叹息，哎。\n\n\n\n有些人活着，他已经死了，但是有些走了，但是他还活着，我认为陈皓就是这样的人，他对于很多人都有了影响，会永远活在我们的心中，希望他一路走好！！！\n\n\n\n## 感受\n\n\n\n突然的噩耗，然后再次认识到了身体健康的重要性，我这偏胖的身材，也是时候下定决心减肥了！！！也希望所有人都能够认识到身体的重要性，健康的身体才是我们的革命的本钱呀！！！\n\n\n\n \n","source":"_posts/陈皓，一路走好！！！.md","raw":"---\ntitle: 陈皓，一路走好！！！\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 100acadf\ndate: 2023-05-15 00:00:00\n---\n\n\n## 他的数字家园\n\n\n\n- [微信采访](https://mp.weixin.qq.com/s/wVz6HkNH_1sljr_tKxH9eg)\n\n- [酷壳-他的个人博客](https://coolshell.cn/)\n\n\n\n## 噩耗\n\n\n\n今天早上的时候，我在日常的刷推特，突然刷到了这么一条推特\n\n\n\n![image-20230515192952419](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20230515192952419.png)\n\n\n\n我猛的一看，以为是在开玩笑，但是仔细一看，感觉不对劲，好朋友是不会拿这个开玩笑的，于是发到各种微信群中进行询问，最终在我加入的云原生交流群中得到了他公司员工的回复，这才确定这是真的！！！\n\n\n\n![image-20230515193927697](https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20230515193927697.png)\n\n\n\n## 我与他的认识\n\n\n\n其实我已经记不起我是怎么认识他的，好像是从什么地方看的，是翻墙吗？不记得了，一开始是刚学会翻墙吧，就加了他的tg群，然后就开始刷推特了，经常看他发的推特，有的说的还是挺有意思的，或者是发人深思的，也看过他的博客，博客写的都是满满的干货，那个时候大概就知道了他是一个真大佬了，中间我买过他在极客时间的课，三百好像吧，当时真是下定决心看的，但是看完之后，自己并没有按照那个来，还是自己瞎来的，也许自己没有发展好跟这个有点关系吧。\n\n\n\n慢慢的，随着关注他的时间越长，大概就知道了他创建了megaease这个公司，以及他对于技术的热情，我之前一直以为到了四五十岁国内都是做了管理层了，基本都不写代码了，但是他竟然还写代码，而且还一点一点的去扣技术细节，很难得啊。\n\n\n\n本来好好地一个人，13号还在发推特，突然就没了，看到病因说是心梗，就是急性心脏病，之前没有了解过，后来查了一下才知道，这种如果突然爆发，几分钟就没了，哎，真是没有想到啊，我所加的各种技术群和推特，都是在为国内失去了一个技术大佬而叹息，哎。\n\n\n\n有些人活着，他已经死了，但是有些走了，但是他还活着，我认为陈皓就是这样的人，他对于很多人都有了影响，会永远活在我们的心中，希望他一路走好！！！\n\n\n\n## 感受\n\n\n\n突然的噩耗，然后再次认识到了身体健康的重要性，我这偏胖的身材，也是时候下定决心减肥了！！！也希望所有人都能够认识到身体的重要性，健康的身体才是我们的革命的本钱呀！！！\n\n\n\n \n","slug":"陈皓，一路走好！！！","published":1,"updated":"2025-03-02T03:37:34.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp5f0062n0uk3zgp1kpq","content":"<h2 id=\"他的数字家园\"><a href=\"#他的数字家园\" class=\"headerlink\" title=\"他的数字家园\"></a>他的数字家园</h2><ul>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3Mvd1Z6NkhrTkhfMXNsanJfdEt4SDllZw==\">微信采访<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb29sc2hlbGwuY24v\">酷壳-他的个人博客<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n</ul>\n<h2 id=\"噩耗\"><a href=\"#噩耗\" class=\"headerlink\" title=\"噩耗\"></a>噩耗</h2><p>今天早上的时候，我在日常的刷推特，突然刷到了这么一条推特</p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20230515192952419.png\" alt=\"image-20230515192952419\" loading=\"lazy\"></p>\n<p>我猛的一看，以为是在开玩笑，但是仔细一看，感觉不对劲，好朋友是不会拿这个开玩笑的，于是发到各种微信群中进行询问，最终在我加入的云原生交流群中得到了他公司员工的回复，这才确定这是真的！！！</p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20230515193927697.png\" alt=\"image-20230515193927697\" loading=\"lazy\"></p>\n<h2 id=\"我与他的认识\"><a href=\"#我与他的认识\" class=\"headerlink\" title=\"我与他的认识\"></a>我与他的认识</h2><p>其实我已经记不起我是怎么认识他的，好像是从什么地方看的，是翻墙吗？不记得了，一开始是刚学会翻墙吧，就加了他的tg群，然后就开始刷推特了，经常看他发的推特，有的说的还是挺有意思的，或者是发人深思的，也看过他的博客，博客写的都是满满的干货，那个时候大概就知道了他是一个真大佬了，中间我买过他在极客时间的课，三百好像吧，当时真是下定决心看的，但是看完之后，自己并没有按照那个来，还是自己瞎来的，也许自己没有发展好跟这个有点关系吧。</p>\n<p>慢慢的，随着关注他的时间越长，大概就知道了他创建了megaease这个公司，以及他对于技术的热情，我之前一直以为到了四五十岁国内都是做了管理层了，基本都不写代码了，但是他竟然还写代码，而且还一点一点的去扣技术细节，很难得啊。</p>\n<p>本来好好地一个人，13号还在发推特，突然就没了，看到病因说是心梗，就是急性心脏病，之前没有了解过，后来查了一下才知道，这种如果突然爆发，几分钟就没了，哎，真是没有想到啊，我所加的各种技术群和推特，都是在为国内失去了一个技术大佬而叹息，哎。</p>\n<p>有些人活着，他已经死了，但是有些走了，但是他还活着，我认为陈皓就是这样的人，他对于很多人都有了影响，会永远活在我们的心中，希望他一路走好！！！</p>\n<h2 id=\"感受\"><a href=\"#感受\" class=\"headerlink\" title=\"感受\"></a>感受</h2><p>突然的噩耗，然后再次认识到了身体健康的重要性，我这偏胖的身材，也是时候下定决心减肥了！！！也希望所有人都能够认识到身体的重要性，健康的身体才是我们的革命的本钱呀！！！</p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"他的数字家园\n * 微信采访\n   \n   \n * 酷壳-他的个人博客\n   \n   \n\n噩耗\n今天早上的时候，我在日常的刷推特，突然刷到了这么一条推特\n\n\n\n我猛的一看，以为是在开玩笑，但是仔细一看，感觉不对劲，好朋友是不会拿这个开玩笑的，于是发到各种微信群中进行询问，最终在我加入的云原生交流群中得到了他公司员工的回复，这才确定这是真的！！！\n\n\n\n我与他的认识\n其实我已经记不起我是怎么认识他的，好像是从什么地方看的，是翻墙吗？不记得了，一开始是刚学会翻墙吧，就加了他的tg群，然后就开始刷推特了，经常看他发的推特，有的说的还是挺有意思的，或者是发人深思的，也看过他的博客，博客写的都是满满的干","more":"<h2 id=\"他的数字家园\"><a href=\"#他的数字家园\" class=\"headerlink\" title=\"他的数字家园\"></a>他的数字家园</h2><ul>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3Mvd1Z6NkhrTkhfMXNsanJfdEt4SDllZw==\">微信采访<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb29sc2hlbGwuY24v\">酷壳-他的个人博客<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n</ul>\n<h2 id=\"噩耗\"><a href=\"#噩耗\" class=\"headerlink\" title=\"噩耗\"></a>噩耗</h2><p>今天早上的时候，我在日常的刷推特，突然刷到了这么一条推特</p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20230515192952419.png\" alt=\"image-20230515192952419\" loading=\"lazy\"></p>\n<p>我猛的一看，以为是在开玩笑，但是仔细一看，感觉不对劲，好朋友是不会拿这个开玩笑的，于是发到各种微信群中进行询问，最终在我加入的云原生交流群中得到了他公司员工的回复，这才确定这是真的！！！</p>\n<p><img src=\"https://shyblog.oss-cn-beijing.aliyuncs.com/img/image-20230515193927697.png\" alt=\"image-20230515193927697\" loading=\"lazy\"></p>\n<h2 id=\"我与他的认识\"><a href=\"#我与他的认识\" class=\"headerlink\" title=\"我与他的认识\"></a>我与他的认识</h2><p>其实我已经记不起我是怎么认识他的，好像是从什么地方看的，是翻墙吗？不记得了，一开始是刚学会翻墙吧，就加了他的tg群，然后就开始刷推特了，经常看他发的推特，有的说的还是挺有意思的，或者是发人深思的，也看过他的博客，博客写的都是满满的干货，那个时候大概就知道了他是一个真大佬了，中间我买过他在极客时间的课，三百好像吧，当时真是下定决心看的，但是看完之后，自己并没有按照那个来，还是自己瞎来的，也许自己没有发展好跟这个有点关系吧。</p>\n<p>慢慢的，随着关注他的时间越长，大概就知道了他创建了megaease这个公司，以及他对于技术的热情，我之前一直以为到了四五十岁国内都是做了管理层了，基本都不写代码了，但是他竟然还写代码，而且还一点一点的去扣技术细节，很难得啊。</p>\n<p>本来好好地一个人，13号还在发推特，突然就没了，看到病因说是心梗，就是急性心脏病，之前没有了解过，后来查了一下才知道，这种如果突然爆发，几分钟就没了，哎，真是没有想到啊，我所加的各种技术群和推特，都是在为国内失去了一个技术大佬而叹息，哎。</p>\n<p>有些人活着，他已经死了，但是有些走了，但是他还活着，我认为陈皓就是这样的人，他对于很多人都有了影响，会永远活在我们的心中，希望他一路走好！！！</p>\n<h2 id=\"感受\"><a href=\"#感受\" class=\"headerlink\" title=\"感受\"></a>感受</h2><p>突然的噩耗，然后再次认识到了身体健康的重要性，我这偏胖的身材，也是时候下定决心减肥了！！！也希望所有人都能够认识到身体的重要性，健康的身体才是我们的革命的本钱呀！！！</p>\n"},{"title":"零拷贝","description":"","abbrlink":"6ebbfb41","date":"2021-05-25T16:00:00.000Z","_content":"\n\n主要是介绍零拷贝的两种技术原理\n\n\n\n<!-- more -->\n\n\n\n## what\n\n\n\n零拷贝并不是不需要拷贝，而是减少不必要的拷贝次数。通常是说在IO读写过程中。\n\n\n\n实际上，零拷贝是有广义和狭义之分，目前我们通常听到的零拷贝，包括上面这个定义`减少不必要的拷贝次数`都是广义上的零拷贝。其实了解到这点就足够了。\n\n\n\n我们知道，减少不必要的拷贝次数，就是为了提高效率。那零拷贝之前，是怎样的呢？\n\n\n\n## 传统IO\n\n\n\n![image-20210526193401096](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210526193401096.png)\n\n\n\n传统IO\n\n\n\n1. 将磁盘文件，拷贝到操作系统内核缓冲区\n\n2. 将内核缓冲区的数据，拷贝到应用程序的buffer\n\n3. 将应用程序buffer中的数据，再拷贝到socket网络发送缓冲区（属于内核缓冲区）\n\n4. 将socket buffer数据，拷贝到网卡，由网卡进行网络传输\n\n\n\n传统IO方式，读取磁盘文件进行网络发送，经过4次数据拷贝。但是第2、3次的拷贝明显没有什么帮助。\n\n\n\n传统IO存在多次无效拷贝，还伴随着大量的上下文切换。\n\n\n\n## MMAP\n\n\n\n![image-20210526193525042](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210526193525042.png)\n\n\n\n**这种方式使用mmap()代替了read()**\n\n\n\n1. 磁盘的数据通过DMA拷贝到内核缓冲区\n\n2. 操作系统把这块内核缓冲区与应用程序共享，避免了用户缓冲区和内核缓冲区的跨界复制\n\n3. 应用程序调用write()直接从内核缓冲区的内容拷贝到socket缓冲区\n\n4. 最后系统将socket的数据传输到网卡，由网卡进行传输\n\n\n\n**MMAP减少了一次拷贝，提升了效率，但是并不减少上下文切换的次数。**\n\n\n\n## SendFile\n\n\n\n![image-20210526194611101](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210526194611101.png)\n\n\n\n**这种方式是使用sendfile代替了read+write操作**\n\n\n\n1. 首先sendfile系统调用，通过DMA引擎将磁盘文件拷贝到内存缓冲区\n\n2. 在内核缓冲区，内核将数据拷贝到socket缓冲区\n\n3. 最后，DMA将数据从内核拷贝到网卡，由网卡传输\n\n\n\n数据总共发生3次拷贝\n\n\n\n## 对比\n\n\n\n1. 都是Linux内核提供，实现[零拷贝](https://www.20zyn.cn/tag/零拷贝/)的API\n\n2. sendfile是将读到内核缓冲区的数据，直接转到socket buffer，进行网络发送\n\n3. mmap是将磁盘文件读取到内核缓冲区后进行映射，和用户缓冲区共享数据，然后CPU在拷贝数据到socket buffer，进行网络发送\n\n\n\n## 参考链接\n\n\n\n- [kafka的零拷贝技术](https://www.20zyn.cn/kafka%E7%9A%84%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%8A%80%E6%9C%AF/)","source":"_posts/零拷贝.md","raw":"---\ntitle: 零拷贝\ndescription: ''\ntags:\n  - 无标签\nabbrlink: 6ebbfb41\ndate: 2021-05-26 00:00:00\n---\n\n\n主要是介绍零拷贝的两种技术原理\n\n\n\n<!-- more -->\n\n\n\n## what\n\n\n\n零拷贝并不是不需要拷贝，而是减少不必要的拷贝次数。通常是说在IO读写过程中。\n\n\n\n实际上，零拷贝是有广义和狭义之分，目前我们通常听到的零拷贝，包括上面这个定义`减少不必要的拷贝次数`都是广义上的零拷贝。其实了解到这点就足够了。\n\n\n\n我们知道，减少不必要的拷贝次数，就是为了提高效率。那零拷贝之前，是怎样的呢？\n\n\n\n## 传统IO\n\n\n\n![image-20210526193401096](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210526193401096.png)\n\n\n\n传统IO\n\n\n\n1. 将磁盘文件，拷贝到操作系统内核缓冲区\n\n2. 将内核缓冲区的数据，拷贝到应用程序的buffer\n\n3. 将应用程序buffer中的数据，再拷贝到socket网络发送缓冲区（属于内核缓冲区）\n\n4. 将socket buffer数据，拷贝到网卡，由网卡进行网络传输\n\n\n\n传统IO方式，读取磁盘文件进行网络发送，经过4次数据拷贝。但是第2、3次的拷贝明显没有什么帮助。\n\n\n\n传统IO存在多次无效拷贝，还伴随着大量的上下文切换。\n\n\n\n## MMAP\n\n\n\n![image-20210526193525042](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210526193525042.png)\n\n\n\n**这种方式使用mmap()代替了read()**\n\n\n\n1. 磁盘的数据通过DMA拷贝到内核缓冲区\n\n2. 操作系统把这块内核缓冲区与应用程序共享，避免了用户缓冲区和内核缓冲区的跨界复制\n\n3. 应用程序调用write()直接从内核缓冲区的内容拷贝到socket缓冲区\n\n4. 最后系统将socket的数据传输到网卡，由网卡进行传输\n\n\n\n**MMAP减少了一次拷贝，提升了效率，但是并不减少上下文切换的次数。**\n\n\n\n## SendFile\n\n\n\n![image-20210526194611101](https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210526194611101.png)\n\n\n\n**这种方式是使用sendfile代替了read+write操作**\n\n\n\n1. 首先sendfile系统调用，通过DMA引擎将磁盘文件拷贝到内存缓冲区\n\n2. 在内核缓冲区，内核将数据拷贝到socket缓冲区\n\n3. 最后，DMA将数据从内核拷贝到网卡，由网卡传输\n\n\n\n数据总共发生3次拷贝\n\n\n\n## 对比\n\n\n\n1. 都是Linux内核提供，实现[零拷贝](https://www.20zyn.cn/tag/零拷贝/)的API\n\n2. sendfile是将读到内核缓冲区的数据，直接转到socket buffer，进行网络发送\n\n3. mmap是将磁盘文件读取到内核缓冲区后进行映射，和用户缓冲区共享数据，然后CPU在拷贝数据到socket buffer，进行网络发送\n\n\n\n## 参考链接\n\n\n\n- [kafka的零拷贝技术](https://www.20zyn.cn/kafka%E7%9A%84%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%8A%80%E6%9C%AF/)","slug":"零拷贝","published":1,"updated":"2025-03-02T03:37:34.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm7rmvp5s0069n0uk955u232l","content":"<p>主要是介绍零拷贝的两种技术原理</p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h2><p>零拷贝并不是不需要拷贝，而是减少不必要的拷贝次数。通常是说在IO读写过程中。</p>\n<p>实际上，零拷贝是有广义和狭义之分，目前我们通常听到的零拷贝，包括上面这个定义<code>减少不必要的拷贝次数</code>都是广义上的零拷贝。其实了解到这点就足够了。</p>\n<p>我们知道，减少不必要的拷贝次数，就是为了提高效率。那零拷贝之前，是怎样的呢？</p>\n<h2 id=\"传统IO\"><a href=\"#传统IO\" class=\"headerlink\" title=\"传统IO\"></a>传统IO</h2><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210526193401096.png\" alt=\"image-20210526193401096\" loading=\"lazy\"></p>\n<p>传统IO</p>\n<ol>\n<li><p>将磁盘文件，拷贝到操作系统内核缓冲区</p>\n</li>\n<li><p>将内核缓冲区的数据，拷贝到应用程序的buffer</p>\n</li>\n<li><p>将应用程序buffer中的数据，再拷贝到socket网络发送缓冲区（属于内核缓冲区）</p>\n</li>\n<li><p>将socket buffer数据，拷贝到网卡，由网卡进行网络传输</p>\n</li>\n</ol>\n<p>传统IO方式，读取磁盘文件进行网络发送，经过4次数据拷贝。但是第2、3次的拷贝明显没有什么帮助。</p>\n<p>传统IO存在多次无效拷贝，还伴随着大量的上下文切换。</p>\n<h2 id=\"MMAP\"><a href=\"#MMAP\" class=\"headerlink\" title=\"MMAP\"></a>MMAP</h2><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210526193525042.png\" alt=\"image-20210526193525042\" loading=\"lazy\"></p>\n<p><strong>这种方式使用mmap()代替了read()</strong></p>\n<ol>\n<li><p>磁盘的数据通过DMA拷贝到内核缓冲区</p>\n</li>\n<li><p>操作系统把这块内核缓冲区与应用程序共享，避免了用户缓冲区和内核缓冲区的跨界复制</p>\n</li>\n<li><p>应用程序调用write()直接从内核缓冲区的内容拷贝到socket缓冲区</p>\n</li>\n<li><p>最后系统将socket的数据传输到网卡，由网卡进行传输</p>\n</li>\n</ol>\n<p><strong>MMAP减少了一次拷贝，提升了效率，但是并不减少上下文切换的次数。</strong></p>\n<h2 id=\"SendFile\"><a href=\"#SendFile\" class=\"headerlink\" title=\"SendFile\"></a>SendFile</h2><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210526194611101.png\" alt=\"image-20210526194611101\" loading=\"lazy\"></p>\n<p><strong>这种方式是使用sendfile代替了read+write操作</strong></p>\n<ol>\n<li><p>首先sendfile系统调用，通过DMA引擎将磁盘文件拷贝到内存缓冲区</p>\n</li>\n<li><p>在内核缓冲区，内核将数据拷贝到socket缓冲区</p>\n</li>\n<li><p>最后，DMA将数据从内核拷贝到网卡，由网卡传输</p>\n</li>\n</ol>\n<p>数据总共发生3次拷贝</p>\n<h2 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h2><ol>\n<li><p>都是Linux内核提供，实现<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuMjB6eW4uY24vdGFnLyVFOSU5QiVCNiVFNiU4QiVCNyVFOCVCNCU5RC8=\">零拷贝<i class=\"fa fa-external-link-alt\"></i></span>的API</p>\n</li>\n<li><p>sendfile是将读到内核缓冲区的数据，直接转到socket buffer，进行网络发送</p>\n</li>\n<li><p>mmap是将磁盘文件读取到内核缓冲区后进行映射，和用户缓冲区共享数据，然后CPU在拷贝数据到socket buffer，进行网络发送</p>\n</li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuMjB6eW4uY24va2Fma2ElRTclOUElODQlRTklOUIlQjYlRTYlOEIlQjclRTglQjQlOUQlRTYlOEElODAlRTYlOUMlQUYv\">kafka的零拷贝技术<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","sidebar":"<div class=\"sidebar-button animated\">\n\n</div>\n<div class=\"cc-license animated\" itemprop=\"sponsor\">\n</div>\n","languages":{"en":{"name":"English"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Plugins":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n.sidebar .sidebar-button:not(:last-child) {\n  margin-bottom: 15px;\n}\n.sidebar .sidebar-button a {\n  border: 1px solid $orange;\n  border-radius: 4px;\n  display: inline-block;\n}\n.sidebar .sidebar-button a .fa,\n.sidebar .sidebar-button a .fab,\n.sidebar .sidebar-button a .far,\n.sidebar .sidebar-button a .fas {\n  margin-right: 5px;\n}\nbody {\n  background: url(\"/images/background.jpg\") !important;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n  background-size: cover !important;\n  background-position: 50% 50% !important;\n  font-size: 18px;\n}\n.content-wrap {\n  opacity: 0.8;\n}\n.sidebar {\n  opacity: 0.8;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.8;\n}\n","variables":""}},"excerpt":"主要是介绍零拷贝的两种技术原理\n\nwhat\n零拷贝并不是不需要拷贝，而是减少不必要的拷贝次数。通常是说在IO读写过程中。\n\n实际上，零拷贝是有广义和狭义之分，目前我们通常听到的零拷贝，包括上面这个定义减少不必要的拷贝次数都是广义上的零拷贝。其实了解到这点就足够了。\n\n我们知道，减少不必要的拷贝次数，就是为了提高效率。那零拷贝之前，是怎样的呢？\n\n传统IO\n\n\n传统IO\n\n 1. 将磁盘文件，拷贝到操作系统内核缓冲区\n    \n    \n 2. 将内核缓冲区的数据，拷贝到应用程序的buffer\n    \n    \n 3. 将应用程序buffer中的数据，再拷贝到socket网络发送缓冲区（属于内","more":"<h2 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h2><p>零拷贝并不是不需要拷贝，而是减少不必要的拷贝次数。通常是说在IO读写过程中。</p>\n<p>实际上，零拷贝是有广义和狭义之分，目前我们通常听到的零拷贝，包括上面这个定义<code>减少不必要的拷贝次数</code>都是广义上的零拷贝。其实了解到这点就足够了。</p>\n<p>我们知道，减少不必要的拷贝次数，就是为了提高效率。那零拷贝之前，是怎样的呢？</p>\n<h2 id=\"传统IO\"><a href=\"#传统IO\" class=\"headerlink\" title=\"传统IO\"></a>传统IO</h2><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210526193401096.png\" alt=\"image-20210526193401096\" loading=\"lazy\"></p>\n<p>传统IO</p>\n<ol>\n<li><p>将磁盘文件，拷贝到操作系统内核缓冲区</p>\n</li>\n<li><p>将内核缓冲区的数据，拷贝到应用程序的buffer</p>\n</li>\n<li><p>将应用程序buffer中的数据，再拷贝到socket网络发送缓冲区（属于内核缓冲区）</p>\n</li>\n<li><p>将socket buffer数据，拷贝到网卡，由网卡进行网络传输</p>\n</li>\n</ol>\n<p>传统IO方式，读取磁盘文件进行网络发送，经过4次数据拷贝。但是第2、3次的拷贝明显没有什么帮助。</p>\n<p>传统IO存在多次无效拷贝，还伴随着大量的上下文切换。</p>\n<h2 id=\"MMAP\"><a href=\"#MMAP\" class=\"headerlink\" title=\"MMAP\"></a>MMAP</h2><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210526193525042.png\" alt=\"image-20210526193525042\" loading=\"lazy\"></p>\n<p><strong>这种方式使用mmap()代替了read()</strong></p>\n<ol>\n<li><p>磁盘的数据通过DMA拷贝到内核缓冲区</p>\n</li>\n<li><p>操作系统把这块内核缓冲区与应用程序共享，避免了用户缓冲区和内核缓冲区的跨界复制</p>\n</li>\n<li><p>应用程序调用write()直接从内核缓冲区的内容拷贝到socket缓冲区</p>\n</li>\n<li><p>最后系统将socket的数据传输到网卡，由网卡进行传输</p>\n</li>\n</ol>\n<p><strong>MMAP减少了一次拷贝，提升了效率，但是并不减少上下文切换的次数。</strong></p>\n<h2 id=\"SendFile\"><a href=\"#SendFile\" class=\"headerlink\" title=\"SendFile\"></a>SendFile</h2><p><img src=\"https://gitee.com/flow_disaster/blog-map-bed/raw/master/img/image-20210526194611101.png\" alt=\"image-20210526194611101\" loading=\"lazy\"></p>\n<p><strong>这种方式是使用sendfile代替了read+write操作</strong></p>\n<ol>\n<li><p>首先sendfile系统调用，通过DMA引擎将磁盘文件拷贝到内存缓冲区</p>\n</li>\n<li><p>在内核缓冲区，内核将数据拷贝到socket缓冲区</p>\n</li>\n<li><p>最后，DMA将数据从内核拷贝到网卡，由网卡传输</p>\n</li>\n</ol>\n<p>数据总共发生3次拷贝</p>\n<h2 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h2><ol>\n<li><p>都是Linux内核提供，实现<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuMjB6eW4uY24vdGFnLyVFOSU5QiVCNiVFNiU4QiVCNyVFOCVCNCU5RC8=\">零拷贝<i class=\"fa fa-external-link-alt\"></i></span>的API</p>\n</li>\n<li><p>sendfile是将读到内核缓冲区的数据，直接转到socket buffer，进行网络发送</p>\n</li>\n<li><p>mmap是将磁盘文件读取到内核缓冲区后进行映射，和用户缓冲区共享数据，然后CPU在拷贝数据到socket buffer，进行网络发送</p>\n</li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuMjB6eW4uY24va2Fma2ElRTclOUElODQlRTklOUIlQjYlRTYlOEIlQjclRTglQjQlOUQlRTYlOEElODAlRTYlOUMlQUYv\">kafka的零拷贝技术<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cm7rmvp410001n0uk0eke12x6","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp48000an0ukaxivay1d"},{"post_id":"cm7rmvp48000bn0uk5f6r03ak","tag_id":"cm7rmvp470009n0uk5j06c9r4","_id":"cm7rmvp4a000en0uka67t4xgn"},{"post_id":"cm7rmvp440003n0ukbplkc0h9","tag_id":"cm7rmvp470009n0uk5j06c9r4","_id":"cm7rmvp4a000gn0uke07w2b5j"},{"post_id":"cm7rmvp48000cn0ukfjf1030b","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4b000jn0ukb0h372ok"},{"post_id":"cm7rmvp4a000fn0ukcrrp9q4h","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4c000ln0uk8osic07v"},{"post_id":"cm7rmvp460006n0uk8r1thynd","tag_id":"cm7rmvp470009n0uk5j06c9r4","_id":"cm7rmvp4d000on0uk36c5hlyq"},{"post_id":"cm7rmvp4a000hn0ukcjpx2o5q","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4d000qn0uk05thgxvk"},{"post_id":"cm7rmvp4b000kn0uk6n7f4lck","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4d000sn0uk8tz4hvbt"},{"post_id":"cm7rmvp470007n0uk2lbc1qoe","tag_id":"cm7rmvp470009n0uk5j06c9r4","_id":"cm7rmvp4e000un0uk3db03530"},{"post_id":"cm7rmvp4c000mn0uka867bnzw","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4e000wn0ukhnmqd1fz"},{"post_id":"cm7rmvp4d000pn0uka9fo6jyk","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4f000yn0uk8ri81k0v"},{"post_id":"cm7rmvp470008n0uk207xf1t4","tag_id":"cm7rmvp470009n0uk5j06c9r4","_id":"cm7rmvp4f0010n0ukbz299rrp"},{"post_id":"cm7rmvp4d000rn0ukgnvv0h4z","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4f0012n0ukgyzl4h2h"},{"post_id":"cm7rmvp4e000tn0uk5a2y648o","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4g0014n0uk3lja6e7b"},{"post_id":"cm7rmvp4e000vn0ukhpmo0mh7","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4g0016n0ukhiv5bgwq"},{"post_id":"cm7rmvp4e000xn0uketl61p5n","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4g0018n0uk4xwsebng"},{"post_id":"cm7rmvp4f000zn0ukd8ac4i26","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4h001an0ukd7fob1rv"},{"post_id":"cm7rmvp4f0011n0uk10se84ia","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4h001cn0uka4mf5fh7"},{"post_id":"cm7rmvp4f0013n0ukgoqy3ck3","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4i001en0uk46ejc1r1"},{"post_id":"cm7rmvp4g0015n0uk5b7lb1ye","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4i001gn0uk7pvcegpn"},{"post_id":"cm7rmvp4g0017n0ukeabldjrl","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4i001in0uk0uqjd5sj"},{"post_id":"cm7rmvp4g0019n0uk84ti6pte","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4j001kn0uk7gpw0ltm"},{"post_id":"cm7rmvp4h001bn0ukemux34ry","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4j001mn0uk39fz3acx"},{"post_id":"cm7rmvp4h001dn0uk8zggcmao","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4k001on0uk94gua6vr"},{"post_id":"cm7rmvp4i001fn0ukbjzv17el","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4k001qn0uk0cicc09r"},{"post_id":"cm7rmvp4i001hn0uk5e3abds0","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4k001sn0uk6nsr1dzo"},{"post_id":"cm7rmvp4i001jn0uk3bzj5pfb","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4l001un0ukgcxt2w64"},{"post_id":"cm7rmvp4j001ln0uk7vu12lyh","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4l001wn0uka12rbi00"},{"post_id":"cm7rmvp4j001nn0ukchi76qwe","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4m001yn0uk8wl43gkc"},{"post_id":"cm7rmvp4k001pn0ukd7uqgmt8","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4m0020n0ukhz0z7o01"},{"post_id":"cm7rmvp4k001rn0ukan1g2ra0","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4m0022n0ukbaoy1m3r"},{"post_id":"cm7rmvp4k001tn0ukglak8an9","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4n0024n0uk61rtgm3l"},{"post_id":"cm7rmvp4l001vn0uk9jwx3bnw","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4n0026n0uk0x6tb2r2"},{"post_id":"cm7rmvp4l001xn0uk1xkxc0jx","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4o0028n0uk1wj7fdg9"},{"post_id":"cm7rmvp4m001zn0uk8f0t8ko6","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4o002an0ukbvut3wk2"},{"post_id":"cm7rmvp4m0021n0ukdtxh2xbu","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4o002cn0uk6yde0k6o"},{"post_id":"cm7rmvp4n0023n0uk5nab8217","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4p002en0uk9wz6c908"},{"post_id":"cm7rmvp4n0025n0uk0pfm8w8e","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4p002gn0uk1wrf5tx4"},{"post_id":"cm7rmvp4n0027n0ukgak3di0f","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4q002in0uk6aygca4a"},{"post_id":"cm7rmvp4o0029n0uk4uagekkb","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4q002kn0uk9uvg9ntw"},{"post_id":"cm7rmvp4o002bn0ukdmaohc4q","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4q002mn0ukeatbdrru"},{"post_id":"cm7rmvp4o002dn0ukcmcyg3x5","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4r002on0ukfllv20lp"},{"post_id":"cm7rmvp4p002fn0uk7nms6c8x","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4r002qn0uk0w8wcbig"},{"post_id":"cm7rmvp4p002hn0uke69td921","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4r002sn0ukf2wh9soj"},{"post_id":"cm7rmvp4q002jn0ukfmvm5i6x","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4s002un0uk2yc7ean9"},{"post_id":"cm7rmvp4q002ln0ukeu320zt4","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4s002wn0uk7soweemo"},{"post_id":"cm7rmvp4q002nn0ukc50s9cl3","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4s002yn0uk5pvzcf0t"},{"post_id":"cm7rmvp4r002pn0uk7q7u1z13","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4t0030n0ukemw8h28f"},{"post_id":"cm7rmvp4r002rn0uk4ulx91qn","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4t0032n0uk9lt9f9qs"},{"post_id":"cm7rmvp4r002tn0ukaf7pfq3q","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4x0034n0uke0nx2lph"},{"post_id":"cm7rmvp4s002vn0uk1be2e042","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4x0036n0uk9ytsh8ad"},{"post_id":"cm7rmvp4s002xn0ukhjs6450l","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4x0038n0uk2jkhbasg"},{"post_id":"cm7rmvp4s002zn0uk86by50io","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4y003an0ukdwbz2y3c"},{"post_id":"cm7rmvp4t0031n0ukdtnoefhh","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4y003cn0ukei22dkog"},{"post_id":"cm7rmvp4t0033n0uk17zycd22","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4z003en0uk9z055c4y"},{"post_id":"cm7rmvp4x0035n0uk2jns6qns","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4z003gn0ukglcr6bc2"},{"post_id":"cm7rmvp4x0037n0ukdyi61zzu","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp4z003in0uk31i6611d"},{"post_id":"cm7rmvp4y0039n0ukcfjb98mr","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp50003kn0uk89k947yb"},{"post_id":"cm7rmvp4y003bn0ukgmi0fzi2","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp50003mn0uk16n3fz7v"},{"post_id":"cm7rmvp4y003dn0uk0qa25wia","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp50003on0ukg2zc973g"},{"post_id":"cm7rmvp4z003fn0uk140b3dgf","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp51003qn0uk1pj9hsrg"},{"post_id":"cm7rmvp4z003hn0ukdimp2sbb","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp51003sn0uke8m46ttg"},{"post_id":"cm7rmvp4z003jn0ukegj3g6z4","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp51003un0ukhj2ehwu5"},{"post_id":"cm7rmvp50003ln0uk6hpne5yr","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp52003wn0uk3mspeqk3"},{"post_id":"cm7rmvp50003nn0ukhf7m7dvi","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp52003yn0ukd6bx1q8w"},{"post_id":"cm7rmvp50003pn0ukd7yba2lg","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp520040n0ukdsksa3oa"},{"post_id":"cm7rmvp51003rn0uk0hsa5fgl","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp530042n0ukft1k3dyo"},{"post_id":"cm7rmvp51003tn0uk8v560sp2","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp530044n0ukgwy9dlku"},{"post_id":"cm7rmvp51003vn0ukc6bkh8ji","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp530046n0uk6cxp9x2q"},{"post_id":"cm7rmvp52003xn0ukb4x09ejk","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp530048n0ukhbqnfbkg"},{"post_id":"cm7rmvp52003zn0ukd2x416mj","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp54004an0uk32493zeh"},{"post_id":"cm7rmvp520041n0uk4wrz4yvn","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp54004cn0ukaskcgsak"},{"post_id":"cm7rmvp530043n0uk6lenhuie","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp54004en0ukga9r28fs"},{"post_id":"cm7rmvp530045n0uk5np37a7o","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp55004gn0uk41yd6nnh"},{"post_id":"cm7rmvp530047n0ukgzsi9e53","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp55004in0uk8dxi2ftd"},{"post_id":"cm7rmvp540049n0ukcgxifbjf","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp56004kn0uk7vzd1xtm"},{"post_id":"cm7rmvp54004bn0uk8bzrb79o","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp56004mn0uk2kk5cwgg"},{"post_id":"cm7rmvp54004dn0ukggrqdchq","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp56004on0uk4ixe383p"},{"post_id":"cm7rmvp55004fn0uk0cgl2zlw","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp57004qn0uk2yuvcfve"},{"post_id":"cm7rmvp55004hn0uk1yrcc23b","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp57004sn0uk3tps10y4"},{"post_id":"cm7rmvp55004jn0uk4m8521sc","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp57004vn0ukhe62a6v6"},{"post_id":"cm7rmvp56004ln0uk663a6xh4","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp58004xn0ukgmokbxg8"},{"post_id":"cm7rmvp56004nn0ukb94rch6d","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp58004zn0ukcrbe6lfx"},{"post_id":"cm7rmvp56004pn0ukhpz3hwti","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp590051n0uk3kxn3gnm"},{"post_id":"cm7rmvp57004tn0uke68n5dmv","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp590053n0uk6fo471g4"},{"post_id":"cm7rmvp57004wn0uk95ahbozl","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp5a0055n0ukhzn9ekwl"},{"post_id":"cm7rmvp58004yn0uk93cne8ca","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp5a0057n0uk8loe0oei"},{"post_id":"cm7rmvp57004rn0uk34z919k5","tag_id":"cm7rmvp57004un0uk5hec3515","_id":"cm7rmvp5a0059n0uke0dy6glf"},{"post_id":"cm7rmvp580050n0uk9fn9bqs4","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp5b005bn0ukbh5j78eg"},{"post_id":"cm7rmvp590052n0uk5yy7d5if","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp5b005dn0uk2vvcdynp"},{"post_id":"cm7rmvp590054n0ukbu3fbiry","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp5b005fn0uk39d214kq"},{"post_id":"cm7rmvp5a0056n0ukbo588kc7","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp5b005hn0ukfsbw3vv2"},{"post_id":"cm7rmvp5a0058n0uk88iggsuw","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp5c005jn0uk5ebv7irn"},{"post_id":"cm7rmvp5a005an0uk9emvfqul","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp5c005ln0uk80swetrd"},{"post_id":"cm7rmvp5b005cn0uk4he47xyj","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp5c005nn0ukbbi3c0f1"},{"post_id":"cm7rmvp5b005en0ukg7apdzua","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp5d005pn0uk3opt6y8a"},{"post_id":"cm7rmvp5b005gn0ukeaui46jn","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp5d005rn0ukfpbv2jco"},{"post_id":"cm7rmvp5c005in0uk3d3b20tj","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp5e005tn0uk3x3f20o4"},{"post_id":"cm7rmvp5c005kn0ukgb7m643t","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp5e005vn0ukbeoiarz0"},{"post_id":"cm7rmvp5c005mn0ukbhj8cmjr","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp5e005xn0uk174c0n88"},{"post_id":"cm7rmvp5d005on0uk85u9gvel","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp5f005zn0uk4qsreky9"},{"post_id":"cm7rmvp5d005qn0ukfxf386lu","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp5f0061n0uk8ilm05hr"},{"post_id":"cm7rmvp5d005sn0uk4bdl7y6n","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp5f0063n0uk6s9zbb9p"},{"post_id":"cm7rmvp5e005un0uk8jou08ax","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp5f0064n0ukczap30g2"},{"post_id":"cm7rmvp5e005wn0uk3z386c16","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp5f0065n0ukd8d03q1w"},{"post_id":"cm7rmvp5e005yn0ukc7917sr2","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp5f0066n0uk5alcager"},{"post_id":"cm7rmvp5f0060n0uk1z6s7p4s","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp5f0067n0uk42g7dj9m"},{"post_id":"cm7rmvp5f0062n0uk3zgp1kpq","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp5f0068n0uk89bw8j4v"},{"post_id":"cm7rmvp5s0069n0uk955u232l","tag_id":"cm7rmvp450004n0uk5pelg8ro","_id":"cm7rmvp5s006an0ukbugug438"}],"Tag":[{"name":"无标签","_id":"cm7rmvp450004n0uk5pelg8ro"},{"name":"年度总结","_id":"cm7rmvp470009n0uk5j06c9r4"},{"name":"投资","_id":"cm7rmvp57004un0uk5hec3515"}]}}